
06_PWM_GTM.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bmhd_0       00000020  80000000  80000000  00000274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .bmhd_1       00000020  80020000  80020000  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .startup      00000010  80000020  80000020  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .interface_const 00000000  80000040  80000040  00005b1c  2**0
                  CONTENTS
  4 .traptab_tc0  00000100  80000100  80000100  000002c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .rodata       000003b8  80000200  80000200  000003c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .CPU2.zbss    00000000  50000000  50000000  00005b1c  2**0
                  CONTENTS
  7 .CPU2.bss     00000000  50000000  50000000  00005b1c  2**0
                  CONTENTS
  8 .CPU1.zbss    00000000  60000000  60000000  00005b1c  2**0
                  CONTENTS
  9 .CPU1.bss     00000000  6000119c  6000119c  00005b1c  2**0
                  CONTENTS
 10 .CPU0.zbss    00000000  70000000  70000000  00005b1c  2**0
                  CONTENTS
 11 .CPU0.bss     00000000  70000000  70000000  00005b1c  2**0
                  CONTENTS
 12 .zbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC
 13 .sbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC, SMALL_DATA
 14 .bss          0000017c  60000020  801f631c  00005b20  2**3
                  ALLOC
 15 .CPU2.zdata   00000000  50000000  50000000  00005b1c  2**0
                  CONTENTS
 16 .CPU2.data    00000000  50000000  50000000  00005b1c  2**0
                  CONTENTS
 17 .CPU1.zdata   00000000  60000000  60000000  00005b1c  2**0
                  CONTENTS
 18 .CPU1.data    00000000  6000119c  6000119c  00005b1c  2**0
                  CONTENTS
 19 .CPU0.zdata   00000000  70000000  70000000  00005b1c  2**0
                  CONTENTS
 20 .CPU0.data    00000000  70000000  70000000  00005b1c  2**0
                  CONTENTS
 21 .zdata        00000000  60000000  801f631c  00005b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .sdata        00000000  60000000  801f631c  00005b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
 23 .data         0000001c  60000000  801f6300  00005b00  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .lmu_zdata    00000000  90000000  90000000  00005b1c  2**0
                  CONTENTS
 25 .lmu_sdata    00000000  90000000  90000000  00005b1c  2**0
                  CONTENTS
 26 .lmu_data     00000000  90000000  90000000  00005b1c  2**0
                  CONTENTS
 27 .CPU0.psram_text 00000000  70100000  70100000  00005b1c  2**0
                  CONTENTS
 28 .CPU1.psram_text 00000000  60100000  60100000  00005b1c  2**0
                  CONTENTS
 29 .CPU2.psram_text 00000000  50100000  50100000  00005b1c  2**0
                  CONTENTS
 30 .text         000050fc  800005b8  800005b8  00000778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .init         0000000c  800056b4  800056b4  00005874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .fini         00000008  800056c0  800056c0  00005880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .eh_frame     00000000  800056c8  800056c8  00005b1c  2**0
                  CONTENTS
 34 .gcc_except_table 00000000  800056c8  800056c8  00005b1c  2**0
                  CONTENTS
 35 .ctors        00000010  800056c8  800056c8  00005888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 36 .dtors        00000010  800056d8  800056d8  00005898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 37 .traptab_tc2  00000100  801f6100  801f6100  00005900  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 38 .traptab_tc1  00000100  801f6200  801f6200  00005a00  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 39 .heap         00001000  6000019c  801f631c  00005b1c  2**0
                  ALLOC
 40 .CPU2.ustack  00000800  5001ae00  5001ae00  00000274  2**0
                  ALLOC
 41 .CPU2.istack  00000400  5001b700  5001b700  00000274  2**0
                  ALLOC
 42 .CPU2.csa     00002000  5001bc00  5001bc00  00000274  2**0
                  ALLOC
 43 .CPU1.ustack  00000800  6001ae00  6001ae00  00000274  2**0
                  ALLOC
 44 .CPU1.istack  00000400  6001b700  6001b700  00000274  2**0
                  ALLOC
 45 .CPU1.csa     00002000  6001bc00  6001bc00  00000274  2**0
                  ALLOC
 46 .CPU0.ustack  00000800  70018e00  70018e00  00000274  2**0
                  ALLOC
 47 .CPU0.istack  00000400  70019700  70019700  00000274  2**0
                  ALLOC
 48 .CPU0.csa     00002000  70019c00  70019c00  00000274  2**0
                  ALLOC
 49 .inttab_tc0_000 00000000  801f4000  801f4000  00005b1c  2**0
                  CONTENTS
 50 .inttab_tc0_001 00000000  801f4020  801f4020  00005b1c  2**0
                  CONTENTS
 51 .inttab_tc0_002 00000000  801f4040  801f4040  00005b1c  2**0
                  CONTENTS
 52 .inttab_tc0_003 00000000  801f4060  801f4060  00005b1c  2**0
                  CONTENTS
 53 .inttab_tc0_004 00000000  801f4080  801f4080  00005b1c  2**0
                  CONTENTS
 54 .inttab_tc0_005 00000000  801f40a0  801f40a0  00005b1c  2**0
                  CONTENTS
 55 .inttab_tc0_006 00000000  801f40c0  801f40c0  00005b1c  2**0
                  CONTENTS
 56 .inttab_tc0_007 00000000  801f40e0  801f40e0  00005b1c  2**0
                  CONTENTS
 57 .inttab_tc0_008 00000000  801f4100  801f4100  00005b1c  2**0
                  CONTENTS
 58 .inttab_tc0_009 00000000  801f4120  801f4120  00005b1c  2**0
                  CONTENTS
 59 .inttab_tc0_00A 00000000  801f4140  801f4140  00005b1c  2**0
                  CONTENTS
 60 .inttab_tc0_00B 00000000  801f4160  801f4160  00005b1c  2**0
                  CONTENTS
 61 .inttab_tc0_00C 00000000  801f4180  801f4180  00005b1c  2**0
                  CONTENTS
 62 .inttab_tc0_00D 00000000  801f41a0  801f41a0  00005b1c  2**0
                  CONTENTS
 63 .inttab_tc0_00E 00000000  801f41c0  801f41c0  00005b1c  2**0
                  CONTENTS
 64 .inttab_tc0_00F 00000000  801f41e0  801f41e0  00005b1c  2**0
                  CONTENTS
 65 .inttab_tc0_010 00000000  801f4200  801f4200  00005b1c  2**0
                  CONTENTS
 66 .inttab_tc0_011 00000000  801f4220  801f4220  00005b1c  2**0
                  CONTENTS
 67 .inttab_tc0_012 00000000  801f4240  801f4240  00005b1c  2**0
                  CONTENTS
 68 .inttab_tc0_013 00000000  801f4260  801f4260  00005b1c  2**0
                  CONTENTS
 69 .inttab_tc0_014 00000000  801f4280  801f4280  00005b1c  2**0
                  CONTENTS
 70 .inttab_tc0_015 00000000  801f42a0  801f42a0  00005b1c  2**0
                  CONTENTS
 71 .inttab_tc0_016 00000000  801f42c0  801f42c0  00005b1c  2**0
                  CONTENTS
 72 .inttab_tc0_017 00000000  801f42e0  801f42e0  00005b1c  2**0
                  CONTENTS
 73 .inttab_tc0_018 00000000  801f4300  801f4300  00005b1c  2**0
                  CONTENTS
 74 .inttab_tc0_019 00000000  801f4320  801f4320  00005b1c  2**0
                  CONTENTS
 75 .inttab_tc0_01A 00000000  801f4340  801f4340  00005b1c  2**0
                  CONTENTS
 76 .inttab_tc0_01B 00000000  801f4360  801f4360  00005b1c  2**0
                  CONTENTS
 77 .inttab_tc0_01C 00000000  801f4380  801f4380  00005b1c  2**0
                  CONTENTS
 78 .inttab_tc0_01D 00000000  801f43a0  801f43a0  00005b1c  2**0
                  CONTENTS
 79 .inttab_tc0_01E 00000000  801f43c0  801f43c0  00005b1c  2**0
                  CONTENTS
 80 .inttab_tc0_01F 00000000  801f43e0  801f43e0  00005b1c  2**0
                  CONTENTS
 81 .inttab_tc0_020 00000000  801f4400  801f4400  00005b1c  2**0
                  CONTENTS
 82 .inttab_tc0_021 00000000  801f4420  801f4420  00005b1c  2**0
                  CONTENTS
 83 .inttab_tc0_022 00000000  801f4440  801f4440  00005b1c  2**0
                  CONTENTS
 84 .inttab_tc0_023 00000000  801f4460  801f4460  00005b1c  2**0
                  CONTENTS
 85 .inttab_tc0_024 00000000  801f4480  801f4480  00005b1c  2**0
                  CONTENTS
 86 .inttab_tc0_025 00000000  801f44a0  801f44a0  00005b1c  2**0
                  CONTENTS
 87 .inttab_tc0_026 00000000  801f44c0  801f44c0  00005b1c  2**0
                  CONTENTS
 88 .inttab_tc0_027 00000000  801f44e0  801f44e0  00005b1c  2**0
                  CONTENTS
 89 .inttab_tc0_028 00000000  801f4500  801f4500  00005b1c  2**0
                  CONTENTS
 90 .inttab_tc0_029 00000000  801f4520  801f4520  00005b1c  2**0
                  CONTENTS
 91 .inttab_tc0_02A 00000000  801f4540  801f4540  00005b1c  2**0
                  CONTENTS
 92 .inttab_tc0_02B 00000000  801f4560  801f4560  00005b1c  2**0
                  CONTENTS
 93 .inttab_tc0_02C 00000000  801f4580  801f4580  00005b1c  2**0
                  CONTENTS
 94 .inttab_tc0_02D 00000000  801f45a0  801f45a0  00005b1c  2**0
                  CONTENTS
 95 .inttab_tc0_02E 00000000  801f45c0  801f45c0  00005b1c  2**0
                  CONTENTS
 96 .inttab_tc0_02F 00000000  801f45e0  801f45e0  00005b1c  2**0
                  CONTENTS
 97 .inttab_tc0_030 00000000  801f4600  801f4600  00005b1c  2**0
                  CONTENTS
 98 .inttab_tc0_031 00000000  801f4620  801f4620  00005b1c  2**0
                  CONTENTS
 99 .inttab_tc0_032 00000000  801f4640  801f4640  00005b1c  2**0
                  CONTENTS
100 .inttab_tc0_033 00000000  801f4660  801f4660  00005b1c  2**0
                  CONTENTS
101 .inttab_tc0_034 00000000  801f4680  801f4680  00005b1c  2**0
                  CONTENTS
102 .inttab_tc0_035 00000000  801f46a0  801f46a0  00005b1c  2**0
                  CONTENTS
103 .inttab_tc0_036 00000000  801f46c0  801f46c0  00005b1c  2**0
                  CONTENTS
104 .inttab_tc0_037 00000000  801f46e0  801f46e0  00005b1c  2**0
                  CONTENTS
105 .inttab_tc0_038 00000000  801f4700  801f4700  00005b1c  2**0
                  CONTENTS
106 .inttab_tc0_039 00000000  801f4720  801f4720  00005b1c  2**0
                  CONTENTS
107 .inttab_tc0_03A 00000000  801f4740  801f4740  00005b1c  2**0
                  CONTENTS
108 .inttab_tc0_03B 00000000  801f4760  801f4760  00005b1c  2**0
                  CONTENTS
109 .inttab_tc0_03C 00000000  801f4780  801f4780  00005b1c  2**0
                  CONTENTS
110 .inttab_tc0_03D 00000000  801f47a0  801f47a0  00005b1c  2**0
                  CONTENTS
111 .inttab_tc0_03E 00000000  801f47c0  801f47c0  00005b1c  2**0
                  CONTENTS
112 .inttab_tc0_03F 00000000  801f47e0  801f47e0  00005b1c  2**0
                  CONTENTS
113 .inttab_tc0_040 00000000  801f4800  801f4800  00005b1c  2**0
                  CONTENTS
114 .inttab_tc0_041 00000000  801f4820  801f4820  00005b1c  2**0
                  CONTENTS
115 .inttab_tc0_042 00000000  801f4840  801f4840  00005b1c  2**0
                  CONTENTS
116 .inttab_tc0_043 00000000  801f4860  801f4860  00005b1c  2**0
                  CONTENTS
117 .inttab_tc0_044 00000000  801f4880  801f4880  00005b1c  2**0
                  CONTENTS
118 .inttab_tc0_045 00000000  801f48a0  801f48a0  00005b1c  2**0
                  CONTENTS
119 .inttab_tc0_046 00000000  801f48c0  801f48c0  00005b1c  2**0
                  CONTENTS
120 .inttab_tc0_047 00000000  801f48e0  801f48e0  00005b1c  2**0
                  CONTENTS
121 .inttab_tc0_048 00000000  801f4900  801f4900  00005b1c  2**0
                  CONTENTS
122 .inttab_tc0_049 00000000  801f4920  801f4920  00005b1c  2**0
                  CONTENTS
123 .inttab_tc0_04A 00000000  801f4940  801f4940  00005b1c  2**0
                  CONTENTS
124 .inttab_tc0_04B 00000000  801f4960  801f4960  00005b1c  2**0
                  CONTENTS
125 .inttab_tc0_04C 00000000  801f4980  801f4980  00005b1c  2**0
                  CONTENTS
126 .inttab_tc0_04D 00000000  801f49a0  801f49a0  00005b1c  2**0
                  CONTENTS
127 .inttab_tc0_04E 00000000  801f49c0  801f49c0  00005b1c  2**0
                  CONTENTS
128 .inttab_tc0_04F 00000000  801f49e0  801f49e0  00005b1c  2**0
                  CONTENTS
129 .inttab_tc0_050 00000000  801f4a00  801f4a00  00005b1c  2**0
                  CONTENTS
130 .inttab_tc0_051 00000000  801f4a20  801f4a20  00005b1c  2**0
                  CONTENTS
131 .inttab_tc0_052 00000000  801f4a40  801f4a40  00005b1c  2**0
                  CONTENTS
132 .inttab_tc0_053 00000000  801f4a60  801f4a60  00005b1c  2**0
                  CONTENTS
133 .inttab_tc0_054 00000000  801f4a80  801f4a80  00005b1c  2**0
                  CONTENTS
134 .inttab_tc0_055 00000000  801f4aa0  801f4aa0  00005b1c  2**0
                  CONTENTS
135 .inttab_tc0_056 00000000  801f4ac0  801f4ac0  00005b1c  2**0
                  CONTENTS
136 .inttab_tc0_057 00000000  801f4ae0  801f4ae0  00005b1c  2**0
                  CONTENTS
137 .inttab_tc0_058 00000000  801f4b00  801f4b00  00005b1c  2**0
                  CONTENTS
138 .inttab_tc0_059 00000000  801f4b20  801f4b20  00005b1c  2**0
                  CONTENTS
139 .inttab_tc0_05A 00000000  801f4b40  801f4b40  00005b1c  2**0
                  CONTENTS
140 .inttab_tc0_05B 00000000  801f4b60  801f4b60  00005b1c  2**0
                  CONTENTS
141 .inttab_tc0_05C 00000000  801f4b80  801f4b80  00005b1c  2**0
                  CONTENTS
142 .inttab_tc0_05D 00000000  801f4ba0  801f4ba0  00005b1c  2**0
                  CONTENTS
143 .inttab_tc0_05E 00000000  801f4bc0  801f4bc0  00005b1c  2**0
                  CONTENTS
144 .inttab_tc0_05F 00000000  801f4be0  801f4be0  00005b1c  2**0
                  CONTENTS
145 .inttab_tc0_060 00000000  801f4c00  801f4c00  00005b1c  2**0
                  CONTENTS
146 .inttab_tc0_061 00000000  801f4c20  801f4c20  00005b1c  2**0
                  CONTENTS
147 .inttab_tc0_062 00000000  801f4c40  801f4c40  00005b1c  2**0
                  CONTENTS
148 .inttab_tc0_063 00000000  801f4c60  801f4c60  00005b1c  2**0
                  CONTENTS
149 .inttab_tc0_064 0000000e  801f4c80  801f4c80  000058c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .inttab_tc0_065 00000000  801f4ca0  801f4ca0  00005b1c  2**0
                  CONTENTS
151 .inttab_tc0_066 00000000  801f4cc0  801f4cc0  00005b1c  2**0
                  CONTENTS
152 .inttab_tc0_067 00000000  801f4ce0  801f4ce0  00005b1c  2**0
                  CONTENTS
153 .inttab_tc0_068 00000000  801f4d00  801f4d00  00005b1c  2**0
                  CONTENTS
154 .inttab_tc0_069 00000000  801f4d20  801f4d20  00005b1c  2**0
                  CONTENTS
155 .inttab_tc0_06A 00000000  801f4d40  801f4d40  00005b1c  2**0
                  CONTENTS
156 .inttab_tc0_06B 00000000  801f4d60  801f4d60  00005b1c  2**0
                  CONTENTS
157 .inttab_tc0_06C 00000000  801f4d80  801f4d80  00005b1c  2**0
                  CONTENTS
158 .inttab_tc0_06D 00000000  801f4da0  801f4da0  00005b1c  2**0
                  CONTENTS
159 .inttab_tc0_06E 00000000  801f4dc0  801f4dc0  00005b1c  2**0
                  CONTENTS
160 .inttab_tc0_06F 00000000  801f4de0  801f4de0  00005b1c  2**0
                  CONTENTS
161 .inttab_tc0_070 00000000  801f4e00  801f4e00  00005b1c  2**0
                  CONTENTS
162 .inttab_tc0_071 00000000  801f4e20  801f4e20  00005b1c  2**0
                  CONTENTS
163 .inttab_tc0_072 00000000  801f4e40  801f4e40  00005b1c  2**0
                  CONTENTS
164 .inttab_tc0_073 00000000  801f4e60  801f4e60  00005b1c  2**0
                  CONTENTS
165 .inttab_tc0_074 00000000  801f4e80  801f4e80  00005b1c  2**0
                  CONTENTS
166 .inttab_tc0_075 00000000  801f4ea0  801f4ea0  00005b1c  2**0
                  CONTENTS
167 .inttab_tc0_076 00000000  801f4ec0  801f4ec0  00005b1c  2**0
                  CONTENTS
168 .inttab_tc0_077 00000000  801f4ee0  801f4ee0  00005b1c  2**0
                  CONTENTS
169 .inttab_tc0_078 00000000  801f4f00  801f4f00  00005b1c  2**0
                  CONTENTS
170 .inttab_tc0_079 00000000  801f4f20  801f4f20  00005b1c  2**0
                  CONTENTS
171 .inttab_tc0_07A 00000000  801f4f40  801f4f40  00005b1c  2**0
                  CONTENTS
172 .inttab_tc0_07B 00000000  801f4f60  801f4f60  00005b1c  2**0
                  CONTENTS
173 .inttab_tc0_07C 00000000  801f4f80  801f4f80  00005b1c  2**0
                  CONTENTS
174 .inttab_tc0_07D 00000000  801f4fa0  801f4fa0  00005b1c  2**0
                  CONTENTS
175 .inttab_tc0_07E 00000000  801f4fc0  801f4fc0  00005b1c  2**0
                  CONTENTS
176 .inttab_tc0_07F 00000000  801f4fe0  801f4fe0  00005b1c  2**0
                  CONTENTS
177 .inttab_tc0_080 00000000  801f5000  801f5000  00005b1c  2**0
                  CONTENTS
178 .inttab_tc0_081 00000000  801f5020  801f5020  00005b1c  2**0
                  CONTENTS
179 .inttab_tc0_082 00000000  801f5040  801f5040  00005b1c  2**0
                  CONTENTS
180 .inttab_tc0_083 00000000  801f5060  801f5060  00005b1c  2**0
                  CONTENTS
181 .inttab_tc0_084 00000000  801f5080  801f5080  00005b1c  2**0
                  CONTENTS
182 .inttab_tc0_085 00000000  801f50a0  801f50a0  00005b1c  2**0
                  CONTENTS
183 .inttab_tc0_086 00000000  801f50c0  801f50c0  00005b1c  2**0
                  CONTENTS
184 .inttab_tc0_087 00000000  801f50e0  801f50e0  00005b1c  2**0
                  CONTENTS
185 .inttab_tc0_088 00000000  801f5100  801f5100  00005b1c  2**0
                  CONTENTS
186 .inttab_tc0_089 00000000  801f5120  801f5120  00005b1c  2**0
                  CONTENTS
187 .inttab_tc0_08A 00000000  801f5140  801f5140  00005b1c  2**0
                  CONTENTS
188 .inttab_tc0_08B 00000000  801f5160  801f5160  00005b1c  2**0
                  CONTENTS
189 .inttab_tc0_08C 00000000  801f5180  801f5180  00005b1c  2**0
                  CONTENTS
190 .inttab_tc0_08D 00000000  801f51a0  801f51a0  00005b1c  2**0
                  CONTENTS
191 .inttab_tc0_08E 00000000  801f51c0  801f51c0  00005b1c  2**0
                  CONTENTS
192 .inttab_tc0_08F 00000000  801f51e0  801f51e0  00005b1c  2**0
                  CONTENTS
193 .inttab_tc0_090 00000000  801f5200  801f5200  00005b1c  2**0
                  CONTENTS
194 .inttab_tc0_091 00000000  801f5220  801f5220  00005b1c  2**0
                  CONTENTS
195 .inttab_tc0_092 00000000  801f5240  801f5240  00005b1c  2**0
                  CONTENTS
196 .inttab_tc0_093 00000000  801f5260  801f5260  00005b1c  2**0
                  CONTENTS
197 .inttab_tc0_094 00000000  801f5280  801f5280  00005b1c  2**0
                  CONTENTS
198 .inttab_tc0_095 00000000  801f52a0  801f52a0  00005b1c  2**0
                  CONTENTS
199 .inttab_tc0_096 00000000  801f52c0  801f52c0  00005b1c  2**0
                  CONTENTS
200 .inttab_tc0_097 00000000  801f52e0  801f52e0  00005b1c  2**0
                  CONTENTS
201 .inttab_tc0_098 00000000  801f5300  801f5300  00005b1c  2**0
                  CONTENTS
202 .inttab_tc0_099 00000000  801f5320  801f5320  00005b1c  2**0
                  CONTENTS
203 .inttab_tc0_09A 00000000  801f5340  801f5340  00005b1c  2**0
                  CONTENTS
204 .inttab_tc0_09B 00000000  801f5360  801f5360  00005b1c  2**0
                  CONTENTS
205 .inttab_tc0_09C 00000000  801f5380  801f5380  00005b1c  2**0
                  CONTENTS
206 .inttab_tc0_09D 00000000  801f53a0  801f53a0  00005b1c  2**0
                  CONTENTS
207 .inttab_tc0_09E 00000000  801f53c0  801f53c0  00005b1c  2**0
                  CONTENTS
208 .inttab_tc0_09F 00000000  801f53e0  801f53e0  00005b1c  2**0
                  CONTENTS
209 .inttab_tc0_0A0 00000000  801f5400  801f5400  00005b1c  2**0
                  CONTENTS
210 .inttab_tc0_0A1 00000000  801f5420  801f5420  00005b1c  2**0
                  CONTENTS
211 .inttab_tc0_0A2 00000000  801f5440  801f5440  00005b1c  2**0
                  CONTENTS
212 .inttab_tc0_0A3 00000000  801f5460  801f5460  00005b1c  2**0
                  CONTENTS
213 .inttab_tc0_0A4 00000000  801f5480  801f5480  00005b1c  2**0
                  CONTENTS
214 .inttab_tc0_0A5 00000000  801f54a0  801f54a0  00005b1c  2**0
                  CONTENTS
215 .inttab_tc0_0A6 00000000  801f54c0  801f54c0  00005b1c  2**0
                  CONTENTS
216 .inttab_tc0_0A7 00000000  801f54e0  801f54e0  00005b1c  2**0
                  CONTENTS
217 .inttab_tc0_0A8 00000000  801f5500  801f5500  00005b1c  2**0
                  CONTENTS
218 .inttab_tc0_0A9 00000000  801f5520  801f5520  00005b1c  2**0
                  CONTENTS
219 .inttab_tc0_0AA 00000000  801f5540  801f5540  00005b1c  2**0
                  CONTENTS
220 .inttab_tc0_0AB 00000000  801f5560  801f5560  00005b1c  2**0
                  CONTENTS
221 .inttab_tc0_0AC 00000000  801f5580  801f5580  00005b1c  2**0
                  CONTENTS
222 .inttab_tc0_0AD 00000000  801f55a0  801f55a0  00005b1c  2**0
                  CONTENTS
223 .inttab_tc0_0AE 00000000  801f55c0  801f55c0  00005b1c  2**0
                  CONTENTS
224 .inttab_tc0_0AF 00000000  801f55e0  801f55e0  00005b1c  2**0
                  CONTENTS
225 .inttab_tc0_0B0 00000000  801f5600  801f5600  00005b1c  2**0
                  CONTENTS
226 .inttab_tc0_0B1 00000000  801f5620  801f5620  00005b1c  2**0
                  CONTENTS
227 .inttab_tc0_0B2 00000000  801f5640  801f5640  00005b1c  2**0
                  CONTENTS
228 .inttab_tc0_0B3 00000000  801f5660  801f5660  00005b1c  2**0
                  CONTENTS
229 .inttab_tc0_0B4 00000000  801f5680  801f5680  00005b1c  2**0
                  CONTENTS
230 .inttab_tc0_0B5 00000000  801f56a0  801f56a0  00005b1c  2**0
                  CONTENTS
231 .inttab_tc0_0B6 00000000  801f56c0  801f56c0  00005b1c  2**0
                  CONTENTS
232 .inttab_tc0_0B7 00000000  801f56e0  801f56e0  00005b1c  2**0
                  CONTENTS
233 .inttab_tc0_0B8 00000000  801f5700  801f5700  00005b1c  2**0
                  CONTENTS
234 .inttab_tc0_0B9 00000000  801f5720  801f5720  00005b1c  2**0
                  CONTENTS
235 .inttab_tc0_0BA 00000000  801f5740  801f5740  00005b1c  2**0
                  CONTENTS
236 .inttab_tc0_0BB 00000000  801f5760  801f5760  00005b1c  2**0
                  CONTENTS
237 .inttab_tc0_0BC 00000000  801f5780  801f5780  00005b1c  2**0
                  CONTENTS
238 .inttab_tc0_0BD 00000000  801f57a0  801f57a0  00005b1c  2**0
                  CONTENTS
239 .inttab_tc0_0BE 00000000  801f57c0  801f57c0  00005b1c  2**0
                  CONTENTS
240 .inttab_tc0_0BF 00000000  801f57e0  801f57e0  00005b1c  2**0
                  CONTENTS
241 .inttab_tc0_0C0 00000000  801f5800  801f5800  00005b1c  2**0
                  CONTENTS
242 .inttab_tc0_0C1 00000000  801f5820  801f5820  00005b1c  2**0
                  CONTENTS
243 .inttab_tc0_0C2 00000000  801f5840  801f5840  00005b1c  2**0
                  CONTENTS
244 .inttab_tc0_0C3 00000000  801f5860  801f5860  00005b1c  2**0
                  CONTENTS
245 .inttab_tc0_0C4 00000000  801f5880  801f5880  00005b1c  2**0
                  CONTENTS
246 .inttab_tc0_0C5 00000000  801f58a0  801f58a0  00005b1c  2**0
                  CONTENTS
247 .inttab_tc0_0C6 00000000  801f58c0  801f58c0  00005b1c  2**0
                  CONTENTS
248 .inttab_tc0_0C7 00000000  801f58e0  801f58e0  00005b1c  2**0
                  CONTENTS
249 .inttab_tc0_0C8 0000000e  801f5900  801f5900  000058d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .inttab_tc0_0C9 00000000  801f5920  801f5920  00005b1c  2**0
                  CONTENTS
251 .inttab_tc0_0CA 00000000  801f5940  801f5940  00005b1c  2**0
                  CONTENTS
252 .inttab_tc0_0CB 00000000  801f5960  801f5960  00005b1c  2**0
                  CONTENTS
253 .inttab_tc0_0CC 00000000  801f5980  801f5980  00005b1c  2**0
                  CONTENTS
254 .inttab_tc0_0CD 00000000  801f59a0  801f59a0  00005b1c  2**0
                  CONTENTS
255 .inttab_tc0_0CE 00000000  801f59c0  801f59c0  00005b1c  2**0
                  CONTENTS
256 .inttab_tc0_0CF 00000000  801f59e0  801f59e0  00005b1c  2**0
                  CONTENTS
257 .inttab_tc0_0D0 00000000  801f5a00  801f5a00  00005b1c  2**0
                  CONTENTS
258 .inttab_tc0_0D1 00000000  801f5a20  801f5a20  00005b1c  2**0
                  CONTENTS
259 .inttab_tc0_0D2 00000000  801f5a40  801f5a40  00005b1c  2**0
                  CONTENTS
260 .inttab_tc0_0D3 00000000  801f5a60  801f5a60  00005b1c  2**0
                  CONTENTS
261 .inttab_tc0_0D4 00000000  801f5a80  801f5a80  00005b1c  2**0
                  CONTENTS
262 .inttab_tc0_0D5 00000000  801f5aa0  801f5aa0  00005b1c  2**0
                  CONTENTS
263 .inttab_tc0_0D6 00000000  801f5ac0  801f5ac0  00005b1c  2**0
                  CONTENTS
264 .inttab_tc0_0D7 00000000  801f5ae0  801f5ae0  00005b1c  2**0
                  CONTENTS
265 .inttab_tc0_0D8 00000000  801f5b00  801f5b00  00005b1c  2**0
                  CONTENTS
266 .inttab_tc0_0D9 00000000  801f5b20  801f5b20  00005b1c  2**0
                  CONTENTS
267 .inttab_tc0_0DA 00000000  801f5b40  801f5b40  00005b1c  2**0
                  CONTENTS
268 .inttab_tc0_0DB 00000000  801f5b60  801f5b60  00005b1c  2**0
                  CONTENTS
269 .inttab_tc0_0DC 00000000  801f5b80  801f5b80  00005b1c  2**0
                  CONTENTS
270 .inttab_tc0_0DD 00000000  801f5ba0  801f5ba0  00005b1c  2**0
                  CONTENTS
271 .inttab_tc0_0DE 00000000  801f5bc0  801f5bc0  00005b1c  2**0
                  CONTENTS
272 .inttab_tc0_0DF 00000000  801f5be0  801f5be0  00005b1c  2**0
                  CONTENTS
273 .inttab_tc0_0E0 00000000  801f5c00  801f5c00  00005b1c  2**0
                  CONTENTS
274 .inttab_tc0_0E1 00000000  801f5c20  801f5c20  00005b1c  2**0
                  CONTENTS
275 .inttab_tc0_0E2 00000000  801f5c40  801f5c40  00005b1c  2**0
                  CONTENTS
276 .inttab_tc0_0E3 00000000  801f5c60  801f5c60  00005b1c  2**0
                  CONTENTS
277 .inttab_tc0_0E4 00000000  801f5c80  801f5c80  00005b1c  2**0
                  CONTENTS
278 .inttab_tc0_0E5 00000000  801f5ca0  801f5ca0  00005b1c  2**0
                  CONTENTS
279 .inttab_tc0_0E6 00000000  801f5cc0  801f5cc0  00005b1c  2**0
                  CONTENTS
280 .inttab_tc0_0E7 00000000  801f5ce0  801f5ce0  00005b1c  2**0
                  CONTENTS
281 .inttab_tc0_0E8 00000000  801f5d00  801f5d00  00005b1c  2**0
                  CONTENTS
282 .inttab_tc0_0E9 00000000  801f5d20  801f5d20  00005b1c  2**0
                  CONTENTS
283 .inttab_tc0_0EA 00000000  801f5d40  801f5d40  00005b1c  2**0
                  CONTENTS
284 .inttab_tc0_0EB 00000000  801f5d60  801f5d60  00005b1c  2**0
                  CONTENTS
285 .inttab_tc0_0EC 00000000  801f5d80  801f5d80  00005b1c  2**0
                  CONTENTS
286 .inttab_tc0_0ED 00000000  801f5da0  801f5da0  00005b1c  2**0
                  CONTENTS
287 .inttab_tc0_0EE 00000000  801f5dc0  801f5dc0  00005b1c  2**0
                  CONTENTS
288 .inttab_tc0_0EF 00000000  801f5de0  801f5de0  00005b1c  2**0
                  CONTENTS
289 .inttab_tc0_0F0 00000000  801f5e00  801f5e00  00005b1c  2**0
                  CONTENTS
290 .inttab_tc0_0F1 00000000  801f5e20  801f5e20  00005b1c  2**0
                  CONTENTS
291 .inttab_tc0_0F2 00000000  801f5e40  801f5e40  00005b1c  2**0
                  CONTENTS
292 .inttab_tc0_0F3 00000000  801f5e60  801f5e60  00005b1c  2**0
                  CONTENTS
293 .inttab_tc0_0F4 00000000  801f5e80  801f5e80  00005b1c  2**0
                  CONTENTS
294 .inttab_tc0_0F5 00000000  801f5ea0  801f5ea0  00005b1c  2**0
                  CONTENTS
295 .inttab_tc0_0F6 00000000  801f5ec0  801f5ec0  00005b1c  2**0
                  CONTENTS
296 .inttab_tc0_0F7 00000000  801f5ee0  801f5ee0  00005b1c  2**0
                  CONTENTS
297 .inttab_tc0_0F8 00000000  801f5f00  801f5f00  00005b1c  2**0
                  CONTENTS
298 .inttab_tc0_0F9 00000000  801f5f20  801f5f20  00005b1c  2**0
                  CONTENTS
299 .inttab_tc0_0FA 00000000  801f5f40  801f5f40  00005b1c  2**0
                  CONTENTS
300 .inttab_tc0_0FB 00000000  801f5f60  801f5f60  00005b1c  2**0
                  CONTENTS
301 .inttab_tc0_0FC 00000000  801f5f80  801f5f80  00005b1c  2**0
                  CONTENTS
302 .inttab_tc0_0FD 00000000  801f5fa0  801f5fa0  00005b1c  2**0
                  CONTENTS
303 .inttab_tc0_0FE 00000000  801f5fc0  801f5fc0  00005b1c  2**0
                  CONTENTS
304 .inttab_tc0_0FF 00000000  801f5fe0  801f5fe0  00005b1c  2**0
                  CONTENTS
305 .comment      0000001b  00000000  00000000  00005b1c  2**0
                  CONTENTS, READONLY
306 .debug_aranges 00000d08  00000000  00000000  00005b38  2**3
                  CONTENTS, READONLY, DEBUGGING
307 .debug_info   00180d4f  00000000  00000000  00006840  2**0
                  CONTENTS, READONLY, DEBUGGING
308 .debug_abbrev 000073ab  00000000  00000000  0018758f  2**0
                  CONTENTS, READONLY, DEBUGGING
309 .debug_line   0001b6b6  00000000  00000000  0018e93a  2**0
                  CONTENTS, READONLY, DEBUGGING
310 .debug_frame  00001b88  00000000  00000000  001a9ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
311 .debug_str    00005bc5  00000000  00000000  001abb78  2**0
                  CONTENTS, READONLY, DEBUGGING
312 .debug_loc    0000bd27  00000000  00000000  001b173d  2**0
                  CONTENTS, READONLY, DEBUGGING
313 .debug_ranges 00001280  00000000  00000000  001bd468  2**3
                  CONTENTS, READONLY, DEBUGGING
314 .debug_macro  000ed554  00000000  00000000  001be6e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startup:

80000020 <_START>:
#elif defined(__DCC__)
#pragma section CODE ".start" X
#endif

void _START(void)
{
80000020:	40 ae       	mov.aa %a14,%sp
    __non_return_call(_Core0_start);
80000022:	91 00 00 28 	movh.a %a2,32768
80000026:	d9 22 ca 93 	lea %a2,[%a2]15946 <80003e4a <_Core0_start>>
8000002a:	dc 02       	ji %a2
}
8000002c:	00 90       	ret 

8000002e <_START_end>:
8000002e:	08 00       	ld.bu %d0,[%a15]0

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 8c 83 	lea %a2,[%a2]14860 <80003a0c <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 ba 83 	lea %a2,[%a2]14906 <80003a3a <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 a8 93 	lea %a2,[%a2]14952 <80003a68 <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 96 a3 	lea %a2,[%a2]14998 <80003a96 <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 84 b3 	lea %a2,[%a2]15044 <80003ac4 <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 b2 b3 	lea %a2,[%a2]15090 <80003af2 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 a6 c3 	lea %a2,[%a2]15142 <80003b26 <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 aa e3 	lea %a2,[%a2]15274 <80003baa <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .text:

800005b8 <deregister_tm_clones>:
800005b8:	7b 00 00 26 	movh %d2,24576
800005bc:	1b c2 01 20 	addi %d2,%d2,28
800005c0:	91 00 00 46 	movh.a %a4,24576
800005c4:	60 22       	mov.a %a2,%d2
800005c6:	d9 44 1c 00 	lea %a4,[%a4]28 <6000001c <__TMC_END__>>
800005ca:	7d 42 0a 00 	jeq.a %a2,%a4,800005de <deregister_tm_clones+0x26>
800005ce:	91 00 00 20 	movh.a %a2,0
800005d2:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
800005d6:	bd 02 04 00 	jz.a %a2,800005de <deregister_tm_clones+0x26>
800005da:	2d 02 00 00 	calli %a2
800005de:	00 90       	ret 

800005e0 <register_tm_clones>:
800005e0:	7b 00 00 26 	movh %d2,24576
800005e4:	1b c2 01 20 	addi %d2,%d2,28
800005e8:	91 00 00 46 	movh.a %a4,24576
800005ec:	60 22       	mov.a %a2,%d2
800005ee:	d9 44 1c 00 	lea %a4,[%a4]28 <6000001c <__TMC_END__>>
800005f2:	01 42 20 20 	sub.a %a2,%a2,%a4
800005f6:	80 22       	mov.d %d2,%a2
800005f8:	8f e2 3f 30 	sha %d3,%d2,-2
800005fc:	8f 12 1e 20 	sh %d2,%d2,-31
80000600:	42 32       	add %d2,%d3
80000602:	8f f2 3f 40 	sha %d4,%d2,-1
80000606:	df 04 0a 00 	jeq %d4,0,8000061a <register_tm_clones+0x3a>
8000060a:	91 00 00 20 	movh.a %a2,0
8000060e:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
80000612:	bd 02 04 00 	jz.a %a2,8000061a <register_tm_clones+0x3a>
80000616:	2d 02 00 00 	calli %a2
8000061a:	00 90       	ret 

8000061c <__do_global_dtors_aux>:
8000061c:	91 00 00 e6 	movh.a %a14,24576
80000620:	39 e2 20 00 	ld.bu %d2,[%a14]32 <60000020 <completed.1>>
80000624:	df 02 2d 80 	jne %d2,0,8000067e <__do_global_dtors_aux+0x62>
80000628:	91 00 00 38 	movh.a %a3,32768
8000062c:	91 00 00 28 	movh.a %a2,32768
80000630:	d9 33 68 b5 	lea %a3,[%a3]22248 <800056e8 <__DTOR_END__>>
80000634:	d9 22 5c b5 	lea %a2,[%a2]22236 <800056dc <__DTOR_LIST__>>
80000638:	01 23 20 20 	sub.a %a2,%a3,%a2
8000063c:	80 22       	mov.d %d2,%a2
8000063e:	86 e2       	sha %d2,-2
80000640:	1b f2 ff 8f 	addi %d8,%d2,-1
80000644:	91 00 00 c6 	movh.a %a12,24576
80000648:	7b 00 00 28 	movh %d2,32768
8000064c:	1b c2 6d 25 	addi %d2,%d2,22236
80000650:	60 2d       	mov.a %a13,%d2
80000652:	19 c2 24 00 	ld.w %d2,[%a12]36 <60000024 <dtor_idx.0>>
80000656:	7f 82 0f 80 	jge.u %d2,%d8,80000674 <__do_global_dtors_aux+0x58>
8000065a:	d9 cc 24 00 	lea %a12,[%a12]36 <60000024 <dtor_idx.0>>
8000065e:	c2 12       	add %d2,1
80000660:	74 c2       	st.w [%a12],%d2
80000662:	06 22       	sh %d2,2
80000664:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000668:	d4 22       	ld.a %a2,[%a2]
8000066a:	2d 02 00 00 	calli %a2
8000066e:	54 c2       	ld.w %d2,[%a12]
80000670:	3f 82 f7 ff 	jlt.u %d2,%d8,8000065e <__do_global_dtors_aux+0x42>
80000674:	6d ff a2 ff 	call 800005b8 <deregister_tm_clones>
80000678:	82 12       	mov %d2,1
8000067a:	e9 e2 20 00 	st.b [%a14]32 <60000020 <completed.1>>,%d2
8000067e:	00 90       	ret 

80000680 <frame_dummy>:
80000680:	6d ff b0 ff 	call 800005e0 <register_tm_clones>
80000684:	00 90       	ret 

80000686 <Task1ms>:
    }
}


void Task1ms(void)
{
80000686:	40 ae       	mov.aa %a14,%sp
    cnt1ms++;
80000688:	91 00 00 26 	movh.a %a2,24576
8000068c:	d9 23 3c 50 	lea %a3,[%a2]380 <6000017c <cnt1ms>>
80000690:	54 32       	ld.w %d2,[%a3]
80000692:	c2 12       	add %d2,1
80000694:	59 22 3c 50 	st.w [%a2]380 <6000017c <cnt1ms>>,%d2
}
80000698:	00 90       	ret 

8000069a <Task10ms>:
void Task10ms(void)
{
8000069a:	40 ae       	mov.aa %a14,%sp
    cnt10ms++;
8000069c:	91 00 00 26 	movh.a %a2,24576
800006a0:	d9 23 38 50 	lea %a3,[%a2]376 <60000178 <cnt10ms>>
800006a4:	54 32       	ld.w %d2,[%a3]
800006a6:	c2 12       	add %d2,1
800006a8:	59 22 38 50 	st.w [%a2]376 <60000178 <cnt10ms>>,%d2
}
800006ac:	00 90       	ret 

800006ae <Task100ms>:
void Task100ms(void)
{
800006ae:	40 ae       	mov.aa %a14,%sp
    cnt100ms++;
800006b0:	91 00 00 26 	movh.a %a2,24576
800006b4:	d9 23 34 50 	lea %a3,[%a2]372 <60000174 <cnt100ms>>
800006b8:	54 32       	ld.w %d2,[%a3]
800006ba:	c2 12       	add %d2,1
800006bc:	59 22 34 50 	st.w [%a2]372 <60000174 <cnt100ms>>,%d2

    ADC_G3_GetData();
800006c0:	6d 00 c4 21 	call 80004a48 <ADC_G3_GetData>
    PWM_dutyUpdate();
800006c4:	6d 00 ac 00 	call 8000081c <PWM_dutyUpdate>
}
800006c8:	00 90       	ret 

800006ca <AppScheduling>:
{
800006ca:	40 ae       	mov.aa %a14,%sp
    if (Scheduler1msFlag == 1)
800006cc:	91 00 00 26 	movh.a %a2,24576
800006d0:	19 22 30 00 	ld.w %d2,[%a2]48 <60000030 <Scheduler1msFlag>>
800006d4:	df 12 03 00 	jeq %d2,1,800006da <AppScheduling+0x10>
}
800006d8:	00 90       	ret 
        Scheduler1msFlag = 0;
800006da:	82 02       	mov %d2,0
800006dc:	59 22 30 00 	st.w [%a2]48,%d2
        Task1ms();
800006e0:	6d ff d3 ff 	call 80000686 <Task1ms>
        if (Scheduler10msFlag == 1)
800006e4:	91 00 00 26 	movh.a %a2,24576
800006e8:	19 22 2c 00 	ld.w %d2,[%a2]44 <6000002c <Scheduler10msFlag>>
800006ec:	df 12 0f 00 	jeq %d2,1,8000070a <AppScheduling+0x40>
        if (Scheduler100msFlag == 1)
800006f0:	91 00 00 26 	movh.a %a2,24576
800006f4:	19 22 28 00 	ld.w %d2,[%a2]40 <60000028 <Scheduler100msFlag>>
800006f8:	df 12 f0 ff 	jne %d2,1,800006d8 <AppScheduling+0xe>
            Scheduler100msFlag = 0;
800006fc:	82 02       	mov %d2,0
800006fe:	59 22 28 00 	st.w [%a2]40 <60000028 <Scheduler100msFlag>>,%d2
            Task100ms();
80000702:	6d ff d6 ff 	call 800006ae <Task100ms>
}
80000706:	1d ff e9 ff 	j 800006d8 <AppScheduling+0xe>
            Scheduler10msFlag = 0;
8000070a:	82 02       	mov %d2,0
8000070c:	59 22 2c 00 	st.w [%a2]44,%d2
            Task10ms();
80000710:	6d ff c5 ff 	call 8000069a <Task10ms>
80000714:	1d ff ee ff 	j 800006f0 <AppScheduling+0x26>

80000718 <init_STM>:
uint32 Scheduler1msFlag = 0;
uint32 Scheduler10msFlag = 0;
uint32 Scheduler100msFlag = 0;

void init_STM(void)
{
80000718:	40 ae       	mov.aa %a14,%sp
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000071a:	4d c0 e2 8f 	mfcr %d8,$icr
    return reg.B.IE != 0;
8000071e:	37 08 e1 87 	extr.u %d8,%d8,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80000722:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80000726:	00 00       	nop 
    boolean ISR_State = IfxCpu_disableInterrupts();     // 진행 중인 인터럽트를 반환 및 인터럽트 중지

    IfxStm_enableOcdsSuspend(STM0);                     //OCDS: on chip debugging system [디버깅 시,cpu 중단하면 타이머도 같이 중단되도록 설정(시스템 상태분석 용이)]
80000728:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000072c:	6d 00 db 07 	call 800016e2 <IfxStm_enableOcdsSuspend>
    IfxStm_initCompareConfig(&stmConfig);                // 비교기능 구조체 초기화 (초기값 정의)
80000730:	91 00 00 c6 	movh.a %a12,24576
80000734:	d9 cc 00 60 	lea %a12,[%a12]384 <60000180 <stmConfig>>
80000738:	40 c4       	mov.aa %a4,%a12
8000073a:	6d 00 b1 08 	call 8000189c <IfxStm_initCompareConfig>

    stmConfig.ticks           = 100000u;             // 주기 (비교 값) 설정 1밀리초 뒤 시작
8000073e:	7b 20 00 20 	movh %d2,2
80000742:	1b 02 6a 28 	addi %d2,%d2,-31072
80000746:	59 c2 10 00 	st.w [%a12]16 <60000010 <LCF_DSPR1_START+0x10>>,%d2
    stmConfig.triggerPriority = 100u;                   // STM 모듈에서 발생한 인터럽트 우선순위 설정 100번째 함수
8000074a:	3b 40 06 20 	mov %d2,100
8000074e:	f9 c2 14 00 	st.h [%a12]20 <60000014 <LCF_DSPR1_START+0x14>>,%d2
    stmConfig.typeOfService   = IfxSrc_Tos_cpu0;        // STM에서 발생한 인터럽트를 cpu0에서 처리하도록 설정
80000752:	82 02       	mov %d2,0
80000754:	59 c2 18 00 	st.w [%a12]24 <60000018 <IfxScuCcu_xtalFrequency>>,%d2

    IfxStm_initCompare(STM0, &stmConfig);               // STM0의 비교기 초기화 및 설정 값 적용 (stmConfig로 바꿈)
80000758:	40 c5       	mov.aa %a5,%a12
8000075a:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000075e:	6d 00 f6 07 	call 8000174a <IfxStm_initCompare>
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80000762:	df 08 04 00 	jeq %d8,0,8000076a <init_STM+0x52>
    {
        __enable();
80000766:	0d 00 00 03 	enable 

    IfxCpu_restoreInterrupts(ISR_State);                // 진행 중이던 인터럽트 상태 복원
}
8000076a:	00 90       	ret 

8000076c <ISR_STM>:


IFX_INTERRUPT(ISR_STM,0,100);                           // 인터럽트 등록 명령어 (실행할 함수, 벡터 테이블 번호, 우선순위)

void ISR_STM(void)
{
8000076c:	40 ae       	mov.aa %a14,%sp
    __enable();
8000076e:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxStm_clearCompareFlag(STM0, stmConfig.comparator);                // 비교 flag 초기화 (완료 표시 초기화)
80000772:	91 00 00 c6 	movh.a %a12,24576
80000776:	19 c4 00 60 	ld.w %d4,[%a12]384 <60000180 <stmConfig>>
8000077a:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000077e:	6d 00 84 07 	call 80001686 <IfxStm_clearCompareFlag>
    IfxStm_increaseCompare(STM0, stmConfig.comparator, 500000u);     // 비교 값 업데이트 (100000u >> 100000/100M = 0.001 = 1ms)
80000782:	19 c2 00 60 	ld.w %d2,[%a12]384 <60000180 <stmConfig>>
}


IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
{
    stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
80000786:	1b c2 00 20 	addi %d2,%d2,12
8000078a:	06 22       	sh %d2,2
8000078c:	60 22       	mov.a %a2,%d2
8000078e:	11 02 00 2f 	addih.a %a2,%a2,61440
80000792:	54 22       	ld.w %d2,[%a2]
80000794:	7b 80 00 30 	movh %d3,8
80000798:	1b 03 12 3a 	addi %d3,%d3,-24288
8000079c:	42 32       	add %d2,%d3
8000079e:	74 22       	st.w [%a2],%d2

    counter1ms++;
800007a0:	91 00 00 26 	movh.a %a2,24576
800007a4:	d9 23 34 00 	lea %a3,[%a2]52 <60000034 <counter1ms>>
800007a8:	54 32       	ld.w %d2,[%a3]
800007aa:	c2 12       	add %d2,1
800007ac:	59 22 34 00 	st.w [%a2]52 <60000034 <counter1ms>>,%d2

    if ((counter1ms % 1) == 0){Scheduler1msFlag = 1;}           //1밀리초에 한번 flag가 1로 올라감 1초에 실행되는 scheduler 실행
800007b0:	91 00 00 26 	movh.a %a2,24576
800007b4:	82 13       	mov %d3,1
800007b6:	59 23 30 00 	st.w [%a2]48 <60000030 <Scheduler1msFlag>>,%d3
    if ((counter1ms % 10) == 0){Scheduler10msFlag = 1;}         //
800007ba:	7b d0 cc 4c 	movh %d4,52429
800007be:	1b d4 cc 4c 	addi %d4,%d4,-13107
800007c2:	73 42 68 40 	mul.u %e4,%d2,%d4
800007c6:	8f d5 1f 30 	sh %d3,%d5,-3
800007ca:	53 a3 20 30 	mul %d3,%d3,10
800007ce:	5f 32 07 80 	jne %d2,%d3,800007dc <ISR_STM+0x70>
800007d2:	91 00 00 26 	movh.a %a2,24576
800007d6:	82 13       	mov %d3,1
800007d8:	59 23 2c 00 	st.w [%a2]44 <6000002c <Scheduler10msFlag>>,%d3
    if ((counter1ms % 100) == 0){Scheduler100msFlag = 1;}       //1000000u >> 10ms, 10ms&100 = 1s
800007dc:	7b c0 1e 45 	movh %d4,20972
800007e0:	1b f4 51 48 	addi %d4,%d4,-31457
800007e4:	73 42 68 40 	mul.u %e4,%d2,%d4
800007e8:	8f b5 1f 30 	sh %d3,%d5,-5
800007ec:	53 43 26 30 	mul %d3,%d3,100
800007f0:	5f 32 07 80 	jne %d2,%d3,800007fe <ISR_STM+0x92>
800007f4:	91 00 00 26 	movh.a %a2,24576
800007f8:	82 12       	mov %d2,1
800007fa:	59 22 28 00 	st.w [%a2]40 <60000028 <Scheduler100msFlag>>,%d2

}
800007fe:	0d 00 40 02 	rslcx 
80000802:	00 80       	rfe 

80000804 <ISR_PWM_GTM>:
   init_PWM(&timerConfig);       /* PWM 초기 설정 */
}

IFX_INTERRUPT(ISR_PWM_GTM, 0, PRIORITY_GTM);
void ISR_PWM_GTM(void)
{
80000804:	40 ae       	mov.aa %a14,%sp
80000806:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxGtm_Tom_Timer_acknowledgeTimerIrq(&GtmPwmHl.timer);
8000080a:	91 00 00 46 	movh.a %a4,24576
8000080e:	d9 44 00 10 	lea %a4,[%a4]64 <60000040 <GtmPwmHl>>
80000812:	6d 00 65 0d 	call 800022dc <IfxGtm_Tom_Timer_acknowledgeTimerIrq>
}
80000816:	0d 00 40 02 	rslcx 
8000081a:	00 80       	rfe 

8000081c <PWM_dutyUpdate>:

    IfxGtm_Tom_Timer_run(&GtmPwmHl.timer);  /* 타이머 및 PWM 시작 */
}

void PWM_dutyUpdate()
{
8000081c:	40 ae       	mov.aa %a14,%sp
8000081e:	20 08       	sub.a %sp,8
    GtmPwmHl.duty[0] += 0.1 * direction;
80000820:	91 00 00 26 	movh.a %a2,24576
80000824:	19 24 3c 00 	ld.w %d4,[%a2]60 <6000003c <direction>>
80000828:	6d 00 c3 24 	call 800051ae <__floatsidf>
8000082c:	7b a0 99 69 	movh %d6,39322
80000830:	1b a6 99 69 	addi %d6,%d6,-26214
80000834:	7b a0 fb 73 	movh %d7,16314
80000838:	1b 97 99 79 	addi %d7,%d7,-26215
8000083c:	0b 23 10 48 	mov %e4,%d3,%d2
80000840:	6d 00 fd 22 	call 80004e3a <__muldf3>
80000844:	02 29       	mov %d9,%d2
80000846:	02 38       	mov %d8,%d3
80000848:	91 00 00 c6 	movh.a %a12,24576
8000084c:	d9 cc 00 10 	lea %a12,[%a12]64 <60000040 <GtmPwmHl>>
80000850:	19 c4 1c 20 	ld.w %d4,[%a12]156 <6000009c <GtmPwmHl+0x5c>>
80000854:	6d 00 91 21 	call 80004b76 <__extendsfdf2>
80000858:	0b 23 10 48 	mov %e4,%d3,%d2
8000085c:	02 96       	mov %d6,%d9
8000085e:	02 87       	mov %d7,%d8
80000860:	6d 00 d0 22 	call 80004e00 <__adddf3>
80000864:	0b 23 10 48 	mov %e4,%d3,%d2
80000868:	6d 00 ee 24 	call 80005244 <__truncdfsf2>
8000086c:	59 c2 1c 20 	st.w [%a12]156 <6000009c <GtmPwmHl+0x5c>>,%d2
    if (GtmPwmHl.duty[0] >= 1.0) {
80000870:	7b 00 f8 33 	movh %d3,16256
80000874:	4b 32 01 30 	cmp.f %d3,%d2,%d3
80000878:	87 33 a2 30 	or.t %d3,%d3,2,%d3,1
8000087c:	df 03 2b 00 	jeq %d3,0,800008d2 <PWM_dutyUpdate+0xb6>
        GtmPwmHl.duty[0] = 1.0;
80000880:	7b 00 f8 23 	movh %d2,16256
80000884:	59 c2 1c 20 	st.w [%a12]156 <6000009c <GtmPwmHl+0x5c>>,%d2
        direction = -1;
80000888:	91 00 00 26 	movh.a %a2,24576
8000088c:	82 f2       	mov %d2,-1
8000088e:	59 22 3c 00 	st.w [%a2]60 <6000003c <direction>>,%d2
            }

    IfxGtm_Tom_PwmHl *pwmHl = &GtmPwmHl.pwm;
    IfxGtm_Tom_Timer *timer = &GtmPwmHl.timer;

    Ifx_TimerValue timerPeriod = IfxGtm_Tom_Timer_getPeriod(timer); /* = 타이머 한 주기 Tic 수 */
80000892:	91 00 00 c6 	movh.a %a12,24576
80000896:	d9 cc 00 10 	lea %a12,[%a12]64 <60000040 <GtmPwmHl>>
8000089a:	40 c4       	mov.aa %a4,%a12
8000089c:	6d 00 53 0d 	call 80002342 <IfxGtm_Tom_Timer_getPeriod>
    Ifx_TimerValue Duty2Tic[2];

    Duty2Tic[0] = (uint32)(GtmPwmHl.duty[0]*timerPeriod);           /* 듀티 값을 Tic 수로 한산 */
800008a0:	19 c3 1c 20 	ld.w %d3,[%a12]156 <6000009c <GtmPwmHl+0x5c>>
800008a4:	4b 02 61 21 	utof %d2,%d2
800008a8:	4b 32 41 20 	mul.f %d2,%d2,%d3
800008ac:	4b 02 71 21 	ftouz %d2,%d2
800008b0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    Duty2Tic[1] = (uint32)(GtmPwmHl.duty[0]*timerPeriod);;          /* 듀티 값을 Tic 수로 한산 */
800008b4:	59 e2 fc ff 	st.w [%a14]-4,%d2

    IfxGtm_Tom_Timer_disableUpdate(timer);                          /* 업데이트 비활성화 */
800008b8:	40 c4       	mov.aa %a4,%a12
800008ba:	6d 00 36 0d 	call 80002326 <IfxGtm_Tom_Timer_disableUpdate>
    IfxGtm_Tom_PwmHl_setOnTime(pwmHl, Duty2Tic);                    /* 듀티 값 변경 */
800008be:	d9 e5 f8 ff 	lea %a5,[%a14]-8
800008c2:	d9 c4 04 10 	lea %a4,[%a12]68 <60000044 <GtmPwmHl+0x4>>
800008c6:	6d 00 54 11 	call 80002b6e <IfxGtm_Tom_PwmHl_setOnTime>
    IfxGtm_Tom_Timer_applyUpdate(timer);                            /* 듀티 변경 값 적용 */
800008ca:	40 c4       	mov.aa %a4,%a12
800008cc:	6d 00 1f 0d 	call 8000230a <IfxGtm_Tom_Timer_applyUpdate>
}
800008d0:	00 90       	ret 
    else if (GtmPwmHl.duty[0] <= 0.0) {
800008d2:	82 03       	mov %d3,0
800008d4:	4b 32 01 20 	cmp.f %d2,%d2,%d3
800008d8:	87 22 a0 20 	or.t %d2,%d2,0,%d2,1
800008dc:	df 02 db 7f 	jeq %d2,0,80000892 <PWM_dutyUpdate+0x76>
        GtmPwmHl.duty[0] = 0.0;
800008e0:	91 00 00 26 	movh.a %a2,24576
800008e4:	d9 22 00 10 	lea %a2,[%a2]64 <60000040 <GtmPwmHl>>
800008e8:	59 23 1c 20 	st.w [%a2]156 <6000009c <GtmPwmHl+0x5c>>,%d3
        direction = 1;
800008ec:	91 00 00 26 	movh.a %a2,24576
800008f0:	82 12       	mov %d2,1
800008f2:	59 22 3c 00 	st.w [%a2]60 <6000003c <direction>>,%d2
800008f6:	1d ff ce ff 	j 80000892 <PWM_dutyUpdate+0x76>

800008fa <init_PWM>:
{
800008fa:	40 ae       	mov.aa %a14,%sp
800008fc:	20 48       	sub.a %sp,72
800008fe:	40 4d       	mov.aa %a13,%a4
    IfxGtm_Tom_PwmHl_initConfig(&pwmHlConfig);   /* 구조체 디폴트 값으로 초기화 */
80000900:	d9 e4 c8 ff 	lea %a4,[%a14]-56
80000904:	6d 00 a2 16 	call 80003648 <IfxGtm_Tom_PwmHl_initConfig>
    ccx[0]   = &IfxGtm_TOM0_4_TOUT22_P33_0_OUT; /* PWM 출력 핀 설정 Ch.1 ccx */
80000908:	91 00 00 28 	movh.a %a2,32768
8000090c:	d9 22 30 80 	lea %a2,[%a2]560 <80000230 <IfxGtm_TOM0_4_TOUT22_P33_0_OUT>>
80000910:	b5 e2 c0 ff 	st.a [%a14]-64 <80000230 <IfxGtm_TOM0_4_TOUT22_P33_0_OUT>>,%a2
    coutx[0] = &IfxGtm_TOM0_3_TOUT105_P10_3_OUT;/* PWM 출력 핀 설정 Ch.1 coutx */ /*모터 드라이버 채널B PWM*/
80000914:	91 00 00 28 	movh.a %a2,32768
80000918:	d9 22 0c 90 	lea %a2,[%a2]588 <8000024c <IfxGtm_TOM0_3_TOUT105_P10_3_OUT>>
8000091c:	b5 e2 f8 ef 	st.a [%a14]-72 <8000024c <IfxGtm_TOM0_3_TOUT105_P10_3_OUT>>,%a2
    ccx[1]   = &IfxGtm_TOM0_5_TOUT23_P33_1_OUT; /* PWM 출력 핀 설정 Ch.2 ccx */
80000920:	91 00 00 28 	movh.a %a2,32768
80000924:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxGtm_TOM0_5_TOUT23_P33_1_OUT>>
80000928:	b5 e2 c4 ff 	st.a [%a14]-60 <80000214 <IfxGtm_TOM0_5_TOUT23_P33_1_OUT>>,%a2
    coutx[1] = &IfxGtm_TOM0_2_TOUT107_P10_5_OUT;/* PWM 출력 핀 설정 Ch.2 coutx */
8000092c:	91 00 00 28 	movh.a %a2,32768
80000930:	d9 22 28 90 	lea %a2,[%a2]616 <80000268 <IfxGtm_TOM0_2_TOUT107_P10_5_OUT>>
80000934:	b5 e2 fc ef 	st.a [%a14]-68 <80000268 <IfxGtm_TOM0_2_TOUT107_P10_5_OUT>>,%a2
    pwmHlConfig.timer                   = &GtmPwmHl.timer;                          /* 타이머 객체 설정 */
80000938:	91 00 00 c6 	movh.a %a12,24576
8000093c:	d9 cc 00 10 	lea %a12,[%a12]64 <60000040 <GtmPwmHl>>
80000940:	b5 ec ec ff 	st.a [%a14]-20 <60000040 <GtmPwmHl>>,%a12
    pwmHlConfig.tom                     = timerConfig ->tom;                        /* TOM 설정 */
80000944:	19 d2 38 00 	ld.w %d2,[%a13]56 <60000040 <GtmPwmHl>>
80000948:	59 e2 f0 ff 	st.w [%a14]-16 <60000040 <GtmPwmHl>>,%d2
    pwmHlConfig.base.deadtime           = 2e-6;                                     /* 데드 타임 설정 */
8000094c:	7b 60 60 23 	movh %d2,13830
80000950:	1b d2 7b 23 	addi %d2,%d2,14269
80000954:	59 e2 c8 ff 	st.w [%a14]-56,%d2
    pwmHlConfig.base.minPulse           = 1e-6;                                     /* 최소 펄스 시간 설정 */
80000958:	7b 60 58 23 	movh %d2,13702
8000095c:	1b d2 7b 23 	addi %d2,%d2,14269
80000960:	59 e2 cc ff 	st.w [%a14]-52,%d2
    pwmHlConfig.base.channelCount       = 2;                                        /* PWM 채널 수 설정 */
80000964:	82 22       	mov %d2,2
80000966:	e9 e2 d0 ff 	st.b [%a14]-48,%d2
    pwmHlConfig.base.emergencyEnabled   = FALSE;                                    /* 비상 기능 설정 */
8000096a:	82 02       	mov %d2,0
8000096c:	e9 e2 d1 ff 	st.b [%a14]-47,%d2
    pwmHlConfig.base.outputMode         = IfxPort_OutputMode_none;                  /* 출력 모드 설정 */
80000970:	82 02       	mov %d2,0
80000972:	59 e2 d4 ff 	st.w [%a14]-44,%d2
    pwmHlConfig.base.outputDriver       = IfxPort_PadDriver_cmosAutomotiveSpeed1;   /* PWM 드라이버 타입 설정) */
80000976:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    pwmHlConfig.base.ccxActiveState     = Ifx_ActiveState_high;                     /* 핀 활성 상태 설정 (Low or High일 때 활성 설정) */
8000097a:	82 12       	mov %d2,1
8000097c:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    pwmHlConfig.base.coutxActiveState   = Ifx_ActiveState_high;                     /* 핀 활성 상태 설정 (Low or High일 때 활성 설정) */
80000980:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    pwmHlConfig.ccx                     = ccx;                                      /* 핀 적용 (Compare capture x) */
80000984:	d9 e2 c0 ff 	lea %a2,[%a14]-64
80000988:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    pwmHlConfig.coutx                   = coutx;                                    /* 핀 적용 (Compare output x) */
8000098c:	d9 e2 f8 ef 	lea %a2,[%a14]-72
80000990:	b5 e2 f8 ff 	st.a [%a14]-8,%a2
    IfxGtm_Tom_PwmHl_init(&GtmPwmHl.pwm, &pwmHlConfig);                             /* PWM 설정 값 적용 */
80000994:	80 c2       	mov.d %d2,%a12
80000996:	1b 42 04 80 	addi %d8,%d2,68
8000099a:	d9 e5 c8 ff 	lea %a5,[%a14]-56
8000099e:	60 84       	mov.a %a4,%d8
800009a0:	6d 00 59 14 	call 80003252 <IfxGtm_Tom_PwmHl_init>
    IfxGtm_Tom_PwmHl_setMode(&GtmPwmHl.pwm, Ifx_Pwm_Mode_centerAligned);            /* PWM 생성 방식 설정 */
800009a4:	82 04       	mov %d4,0
800009a6:	60 84       	mov.a %a4,%d8
800009a8:	6d 00 3a 10 	call 80002a1c <IfxGtm_Tom_PwmHl_setMode>
    GtmPwmHl.duty[0] = 0;    /* Ch.1 듀티 설정 */
800009ac:	82 02       	mov %d2,0
800009ae:	59 c2 1c 20 	st.w [%a12]156 <6000009c <GtmPwmHl+0x5c>>,%d2
    GtmPwmHl.duty[1] = 0;     /* Ch.2 듀티 설정 */
800009b2:	59 c2 20 20 	st.w [%a12]160 <600000a0 <GtmPwmHl+0x60>>,%d2
    PWM_dutyUpdate();           /* 듀티 설정 */
800009b6:	6d ff 33 ff 	call 8000081c <PWM_dutyUpdate>
    IfxGtm_Tom_Timer_run(&GtmPwmHl.timer);  /* 타이머 및 PWM 시작 */
800009ba:	40 c4       	mov.aa %a4,%a12
800009bc:	6d 00 09 0d 	call 800023ce <IfxGtm_Tom_Timer_run>
}
800009c0:	00 90       	ret 

800009c2 <init_Tom>:
{
800009c2:	40 ae       	mov.aa %a14,%sp
800009c4:	20 58       	sub.a %sp,88
   IfxGtm_Tom_Timer_initConfig(&timerConfig, &MODULE_GTM);
800009c6:	91 00 01 5f 	movh.a %a5,61456
800009ca:	d9 e4 ec ef 	lea %a4,[%a14]-84
800009ce:	6d 00 ed 0f 	call 800029a8 <IfxGtm_Tom_Timer_initConfig>
   timerConfig.base.frequency       = 2000;                                          /* PWM 주기 */
800009d2:	7b a0 4f 24 	movh %d2,17658
800009d6:	59 e2 ec ef 	st.w [%a14]-84,%d2
   timerConfig.base.isrPriority     = PRIORITY_GTM;                                  /* 인터럽트 우선순위 */
800009da:	3b 80 0c 20 	mov %d2,200
800009de:	f9 e2 f0 ef 	st.h [%a14]-80,%d2
   timerConfig.base.isrProvider     = IfxSrc_Tos_cpu0;                               /* 인터럽트 처리 cpu 설정 */
800009e2:	82 03       	mov %d3,0
800009e4:	59 e3 f4 ef 	st.w [%a14]-76,%d3
   timerConfig.base.minResolution   = (1.0/timerConfig.base.frequency) / 1000;       /* 최소 분해능 설정 */
800009e8:	7b 60 50 23 	movh %d2,13574
800009ec:	1b d2 7b 23 	addi %d2,%d2,14269
800009f0:	59 e2 f8 ef 	st.w [%a14]-72,%d2
   timerConfig.clock                = IfxGtm_Tom_Ch_ClkSrc_cmuFxclk0;                /* Base clock (100MHz)에서 몇을 나누어 사용할지 */
800009f4:	59 e3 f0 ff 	st.w [%a14]-16,%d3
   timerConfig.base.countDir        = IfxStdIf_Timer_CountDir_upAndDown;             /* 비교파 모양 설정 */
800009f8:	82 12       	mov %d2,1
800009fa:	59 e2 d8 ff 	st.w [%a14]-40,%d2
   timerConfig.tom                  = IfxGtm_Tom_0;                                  /* 몇 번째 TOM 사용할지 설정 */
800009fe:	59 e3 e4 ff 	st.w [%a14]-28,%d3
   timerConfig.timerChannel         = IfxGtm_Tom_Ch_0;                               /* TOM 채널 설정 */
80000a02:	59 e3 e8 ff 	st.w [%a14]-24,%d3
   timerConfig.triggerOut           = &IfxGtm_TOM0_0_TOUT77_P15_6_OUT;               /* trigger 출력 핀 설정 */
80000a06:	91 00 00 28 	movh.a %a2,32768
80000a0a:	d9 22 04 a0 	lea %a2,[%a2]644 <80000284 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>
80000a0e:	b5 e2 ec ff 	st.a [%a14]-20 <80000284 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%a2
   timerConfig.base.trigger.enabled             = TRUE;                              /* trigger 활성화 */
80000a12:	e9 e2 fc ef 	st.b [%a14]-68 <80000284 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%d2
   timerConfig.base.trigger.outputEnabled       = TRUE;                              /* trigger 출력 활성화 */
80000a16:	e9 e2 d5 ff 	st.b [%a14]-43 <80000284 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%d2
   timerConfig.base.trigger.triggerPoint        = 500;                               /* 이벤트 발생(ex: 1) 후 몇 틱(tick) 후에 이벤트를 끝낼지 (ex:0) */
80000a1a:	3b 40 1f 30 	mov %d3,500
80000a1e:	59 e3 c0 ff 	st.w [%a14]-64,%d3
   timerConfig.base.trigger.risingEdgeAtPeriod  = TRUE;                              /* 디폴트를 0으로할지 1로 할지 (ex: TRUE --> 디폴트 0, 이벤트 발생 시 1) */
80000a22:	e9 e2 d4 ff 	st.b [%a14]-44,%d2
   IfxGtm_Tom_Timer_init(&GtmPwmHl.timer, &timerConfig);                             /* 설정 값 반영 */
80000a26:	d9 e5 ec ef 	lea %a5,[%a14]-84
80000a2a:	91 00 00 46 	movh.a %a4,24576
80000a2e:	d9 44 00 10 	lea %a4,[%a4]64 <60000040 <GtmPwmHl>>
80000a32:	6d 00 77 0d 	call 80002520 <IfxGtm_Tom_Timer_init>
   init_PWM(&timerConfig);       /* PWM 초기 설정 */
80000a36:	d9 e4 ec ef 	lea %a4,[%a14]-84
80000a3a:	6d ff 60 ff 	call 800008fa <init_PWM>
}
80000a3e:	00 90       	ret 

80000a40 <init_GTM>:

void init_GTM(void)
{
80000a40:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_ICR);
80000a42:	4d c0 e2 8f 	mfcr %d8,$icr
    return reg.B.IE != 0;
80000a46:	37 08 e1 87 	extr.u %d8,%d8,15,1
    __disable();
80000a4a:	0d 00 40 03 	disable 
80000a4e:	00 00       	nop 
    boolean interruptState = IfxCpu_disableInterrupts();

    Ifx_GTM *gtm = &MODULE_GTM;
    float32 gtmFreq = IfxGtm_Cmu_getModuleFrequency(gtm);           /* GTM 모듈 클럭 주파수 가져오기(100MHz) */
80000a50:	91 00 01 4f 	movh.a %a4,61456
80000a54:	6d 00 35 16 	call 800036be <IfxGtm_Cmu_getModuleFrequency>
80000a58:	02 29       	mov %d9,%d2
    IfxGtm_enable(gtm);
80000a5a:	91 00 01 4f 	movh.a %a4,61456
80000a5e:	6d 00 06 16 	call 8000366a <IfxGtm_enable>

    IfxGtm_Cmu_setGclkFrequency(&MODULE_GTM, gtmFreq);              /* Global clock 주기 설정) */
80000a62:	02 94       	mov %d4,%d9
80000a64:	91 00 01 4f 	movh.a %a4,61456
80000a68:	6d 00 56 17 	call 80003914 <IfxGtm_Cmu_setGclkFrequency>

    float32 gtmGclkFreq = IfxGtm_Cmu_getGclkFrequency(gtm);
80000a6c:	91 00 01 4f 	movh.a %a4,61456
80000a70:	6d 00 2b 16 	call 800036c6 <IfxGtm_Cmu_getGclkFrequency>
    IfxGtm_Cmu_setClkFrequency(&MODULE_GTM, IfxGtm_Cmu_Clk_0, gtmGclkFreq); /* clk_0 클럭 주파수 설정) */
80000a74:	02 25       	mov %d5,%d2
80000a76:	82 04       	mov %d4,0
80000a78:	91 00 01 4f 	movh.a %a4,61456
80000a7c:	6d 00 06 17 	call 80003888 <IfxGtm_Cmu_setClkFrequency>

    init_Tom();         /* TOM 및 PWM 초기 설정 */
80000a80:	6d ff a1 ff 	call 800009c2 <init_Tom>
    if (enabled != FALSE)
80000a84:	df 08 04 00 	jeq %d8,0,80000a8c <init_GTM+0x4c>
        __enable();
80000a88:	0d 00 00 03 	enable 

    IfxCpu_restoreInterrupts(interruptState);   /* enable interrupts again */
    IfxGtm_Cmu_enableClocks(gtm, IFXGTM_CMU_CLKEN_FXCLK | IFXGTM_CMU_CLKEN_CLK0);
80000a8c:	7b 00 08 40 	movh %d4,128
80000a90:	c2 24       	add %d4,2
80000a92:	91 00 01 4f 	movh.a %a4,61456
80000a96:	6d 00 10 16 	call 800036b6 <IfxGtm_Cmu_enableClocks>
}
80000a9a:	00 90       	ret 

80000a9c <IfxGtm_PinMap_setTomTout>:
    IfxPort_setPinModeOutput(config->pin.port, config->pin.pinIndex, outputMode, config->select);
    IfxPort_setPinPadDriver(config->pin.port, config->pin.pinIndex, padDriver);
}

void IfxGtm_PinMap_setTomTout(IfxGtm_Tom_ToutMap *config, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
80000a9c:	40 ae       	mov.aa %a14,%sp
80000a9e:	40 4c       	mov.aa %a12,%a4
80000aa0:	02 58       	mov %d8,%d5
    uint32 outselReg = (config->toutn >> 4);
80000aa2:	19 42 0c 00 	ld.w %d2,[%a4]12
80000aa6:	8f c2 1f 70 	sh %d7,%d2,-4
    uint32 shift = (config->toutn & 0xFU) * 2;
80000aaa:	8f f2 00 21 	and %d2,%d2,15
80000aae:	06 12       	sh %d2,1
    uint32 outsel = (uint32)config->toutSel << shift;
80000ab0:	19 43 08 00 	ld.w %d3,[%a4]8
80000ab4:	0f 23 00 60 	sh %d6,%d3,%d2
    uint32 mask = 0x3U << shift;
80000ab8:	82 33       	mov %d3,3
80000aba:	0f 23 00 30 	sh %d3,%d3,%d2

    __ldmst_c(&(MODULE_GTM.INOUTSEL.T.OUTSEL[outselReg].U), mask, outsel);
80000abe:	8f 27 00 20 	sh %d2,%d7,2
80000ac2:	7b a0 01 5f 	movh %d5,61466
80000ac6:	1b 05 d3 5f 	addi %d5,%d5,-720
80000aca:	60 52       	mov.a %a2,%d5
80000acc:	01 22 00 26 	addsc.a %a2,%a2,%d2,0


/******************************************************************************/
IFX_INLINE void __ldmst_c(volatile void *address, unsigned mask, unsigned value)
{
    *(volatile uint32 *)address = (*(volatile uint32 *)address & ~(mask)) | (mask & value);
80000ad0:	54 22       	ld.w %d2,[%a2]
80000ad2:	c6 26       	xor %d6,%d2
80000ad4:	26 63       	and %d3,%d6
80000ad6:	c6 32       	xor %d2,%d3
80000ad8:	74 22       	st.w [%a2],%d2
    IfxPort_setPinModeOutput(config->pin.port, config->pin.pinIndex, outputMode, config->select);
80000ada:	19 45 18 00 	ld.w %d5,[%a4]24
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80000ade:	a6 45       	or %d5,%d4
80000ae0:	39 44 14 00 	ld.bu %d4,[%a4]20
80000ae4:	99 44 10 00 	ld.a %a4,[%a4]16
80000ae8:	6d 00 9e 0b 	call 80002224 <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(config->pin.port, config->pin.pinIndex, padDriver);
80000aec:	02 85       	mov %d5,%d8
80000aee:	39 c4 14 00 	ld.bu %d4,[%a12]20
80000af2:	99 c4 10 00 	ld.a %a4,[%a12]16
80000af6:	6d 00 ce 0b 	call 80002292 <IfxPort_setPinPadDriver>
}
80000afa:	00 90       	ret 

80000afc <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80000afc:	40 ae       	mov.aa %a14,%sp
80000afe:	40 4c       	mov.aa %a12,%a4
80000b00:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80000b02:	6d 00 39 0b 	call 80002174 <IfxScuWdt_getSafetyWatchdogPassword>
80000b06:	02 29       	mov %d9,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80000b08:	02 24       	mov %d4,%d2
80000b0a:	6d 00 df 09 	call 80001ec8 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80000b0e:	8b 08 a2 32 	ge.u %d3,%d8,32
80000b12:	df 03 0d 80 	jne %d3,0,80000b2c <IfxVadc_disableAccess+0x30>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
80000b16:	d9 c2 08 20 	lea %a2,[%a12]136
80000b1a:	19 c2 08 20 	ld.w %d2,[%a12]136
80000b1e:	d7 12 01 28 	insert %d2,%d2,1,%d8,1
80000b22:	74 22       	st.w [%a2],%d2
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80000b24:	02 94       	mov %d4,%d9
80000b26:	6d 00 57 0b 	call 800021d4 <IfxScuWdt_setSafetyEndinit>
}
80000b2a:	00 90       	ret 
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
80000b2c:	d9 c2 0c 20 	lea %a2,[%a12]140
80000b30:	19 c3 0c 20 	ld.w %d3,[%a12]140
80000b34:	8f f8 01 21 	and %d2,%d8,31
80000b38:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
80000b3c:	74 22       	st.w [%a2],%d2
80000b3e:	1d ff f3 ff 	j 80000b24 <IfxVadc_disableAccess+0x28>

80000b42 <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80000b42:	40 ae       	mov.aa %a14,%sp
80000b44:	40 4c       	mov.aa %a12,%a4
80000b46:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80000b48:	6d 00 16 0b 	call 80002174 <IfxScuWdt_getSafetyWatchdogPassword>
80000b4c:	02 29       	mov %d9,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80000b4e:	02 24       	mov %d4,%d2
80000b50:	6d 00 bc 09 	call 80001ec8 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80000b54:	8b 08 a2 32 	ge.u %d3,%d8,32
80000b58:	df 03 0d 80 	jne %d3,0,80000b72 <IfxVadc_enableAccess+0x30>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
80000b5c:	d9 c2 08 20 	lea %a2,[%a12]136
80000b60:	19 c2 08 20 	ld.w %d2,[%a12]136
80000b64:	d7 02 01 28 	insert %d2,%d2,0,%d8,1
80000b68:	74 22       	st.w [%a2],%d2
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80000b6a:	02 94       	mov %d4,%d9
80000b6c:	6d 00 34 0b 	call 800021d4 <IfxScuWdt_setSafetyEndinit>
}
80000b70:	00 90       	ret 
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
80000b72:	d9 c2 0c 20 	lea %a2,[%a12]140
80000b76:	19 c3 0c 20 	ld.w %d3,[%a12]140
80000b7a:	8f f8 01 21 	and %d2,%d8,31
80000b7e:	d7 03 01 22 	insert %d2,%d3,0,%d2,1
80000b82:	74 22       	st.w [%a2],%d2
80000b84:	1d ff f3 ff 	j 80000b6a <IfxVadc_enableAccess+0x28>

80000b88 <IfxVadc_disablePostCalibration>:
{
80000b88:	40 ae       	mov.aa %a14,%sp
80000b8a:	40 4c       	mov.aa %a12,%a4
80000b8c:	02 48       	mov %d8,%d4
80000b8e:	8f f5 0f 91 	and %d9,%d5,255
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
80000b92:	bf 84 03 80 	jlt.u %d4,8,80000b98 <IfxVadc_disablePostCalibration+0x10>
}
80000b96:	00 90       	ret 
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000b98:	3b f0 01 40 	mov %d4,31
80000b9c:	6d ff d3 ff 	call 80000b42 <IfxVadc_enableAccess>
        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80000ba0:	1b 08 01 80 	addi %d8,%d8,16
80000ba4:	82 12       	mov %d2,1
80000ba6:	0f 82 00 20 	sh %d2,%d2,%d8
        if (disable == TRUE)
80000baa:	df 19 10 00 	jeq %d9,1,80000bca <IfxVadc_disablePostCalibration+0x42>
            vadc->GLOBCFG.U &= ~mask;
80000bae:	d9 c2 00 20 	lea %a2,[%a12]128
80000bb2:	19 c3 00 20 	ld.w %d3,[%a12]128
80000bb6:	0f 23 e0 20 	andn %d2,%d3,%d2
80000bba:	74 22       	st.w [%a2],%d2
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000bbc:	3b f0 01 40 	mov %d4,31
80000bc0:	40 c4       	mov.aa %a4,%a12
80000bc2:	6d ff 9d ff 	call 80000afc <IfxVadc_disableAccess>
}
80000bc6:	1d ff e8 ff 	j 80000b96 <IfxVadc_disablePostCalibration+0xe>
            vadc->GLOBCFG.U |= mask;
80000bca:	d9 c2 00 20 	lea %a2,[%a12]128
80000bce:	19 c3 00 20 	ld.w %d3,[%a12]128
80000bd2:	a6 32       	or %d2,%d3
80000bd4:	74 22       	st.w [%a2],%d2
80000bd6:	1d ff f3 ff 	j 80000bbc <IfxVadc_disablePostCalibration+0x34>

80000bda <IfxVadc_getAdcAnalogFrequency>:
    IfxScuWdt_setCpuEndinit(passwd);
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
80000bda:	40 ae       	mov.aa %a14,%sp
80000bdc:	40 4c       	mov.aa %a12,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
80000bde:	6d 00 67 07 	call 80001aac <IfxScuCcu_getSpbFrequency>
80000be2:	19 c3 00 20 	ld.w %d3,[%a12]128
80000be6:	8f f3 01 31 	and %d3,%d3,31
80000bea:	c2 13       	add %d3,1
80000bec:	4b 03 61 31 	utof %d3,%d3
}
80000bf0:	4b 32 51 20 	div.f %d2,%d2,%d3
80000bf4:	00 90       	ret 

80000bf6 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80000bf6:	40 ae       	mov.aa %a14,%sp
80000bf8:	40 4c       	mov.aa %a12,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
80000bfa:	6d 00 59 07 	call 80001aac <IfxScuCcu_getSpbFrequency>
80000bfe:	19 c3 00 20 	ld.w %d3,[%a12]128
80000c02:	37 03 62 34 	extr.u %d3,%d3,8,2
80000c06:	c2 13       	add %d3,1
80000c08:	4b 03 61 31 	utof %d3,%d3
}
80000c0c:	4b 32 51 20 	div.f %d2,%d2,%d3
80000c10:	00 90       	ret 

80000c12 <IfxVadc_getSrcAddress>:
    }
}


volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
80000c12:	40 ae       	mov.aa %a14,%sp
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
80000c14:	bf 45 07 80 	jlt.u %d5,4,80000c22 <IfxVadc_getSrcAddress+0x10>
    {
        index -= 4;
80000c18:	c2 c5       	add %d5,-4

        if ((group & 0x1) != 0)
80000c1a:	6f 04 10 00 	jz.t %d4,0,80000c3a <IfxVadc_getSrcAddress+0x28>
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
80000c1e:	3b 90 00 40 	mov %d4,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
80000c22:	8f 24 00 20 	sh %d2,%d4,2
80000c26:	42 52       	add %d2,%d5
80000c28:	06 22       	sh %d2,2
80000c2a:	91 00 00 28 	movh.a %a2,32768
80000c2e:	d9 22 10 b0 	lea %a2,[%a2]720 <800002d0 <IfxVadc_cfg_srcAddresses>>
80000c32:	01 22 00 26 	addsc.a %a2,%a2,%d2,0

    return &(base[0]);
}
80000c36:	d4 22       	ld.a %a2,[%a2]
80000c38:	00 90       	ret 
            group = IfxVadc_GroupId_global0;    /* Shared interrupt common 0 is used */
80000c3a:	3b 80 00 40 	mov %d4,8
80000c3e:	1d ff f2 ff 	j 80000c22 <IfxVadc_getSrcAddress+0x10>

80000c42 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
80000c42:	40 ae       	mov.aa %a14,%sp
80000c44:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80000c46:	19 42 00 20 	ld.w %d2,[%a4]128
80000c4a:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
80000c4c:	37 48 02 84 	insert %d8,%d8,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
80000c50:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000c54:	3b f0 01 40 	mov %d4,31
80000c58:	6d ff 75 ff 	call 80000b42 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80000c5c:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000c60:	3b f0 01 40 	mov %d4,31
80000c64:	40 c4       	mov.aa %a4,%a12
80000c66:	6d ff 4b ff 	call 80000afc <IfxVadc_disableAccess>
}
80000c6a:	00 90       	ret 

80000c6c <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
80000c6c:	40 ae       	mov.aa %a14,%sp
80000c6e:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80000c70:	19 42 00 20 	ld.w %d2,[%a4]128
80000c74:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.DIVA  = converterClockDivider;
80000c76:	37 48 05 80 	insert %d8,%d8,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
80000c7a:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000c7e:	3b f0 01 40 	mov %d4,31
80000c82:	6d ff 60 ff 	call 80000b42 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80000c86:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000c8a:	3b f0 01 40 	mov %d4,31
80000c8e:	40 c4       	mov.aa %a4,%a12
80000c90:	6d ff 36 ff 	call 80000afc <IfxVadc_disableAccess>
}
80000c94:	00 90       	ret 

80000c96 <IfxVadc_initializeFAdcD>:


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
80000c96:	40 ae       	mov.aa %a14,%sp
80000c98:	80 4a       	mov.d %d10,%a4
80000c9a:	02 48       	mov %d8,%d4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80000c9c:	6d 00 08 07 	call 80001aac <IfxScuCcu_getSpbFrequency>
80000ca0:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
80000ca4:	4b 82 11 82 	div.u %e8,%d2,%d8
80000ca8:	1b f8 ff 3f 	addi %d3,%d8,-1
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80000cac:	82 34       	mov %d4,3
80000cae:	0b 43 90 41 	min.u %d4,%d3,%d4

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
80000cb2:	1b 14 00 80 	addi %d8,%d4,1
80000cb6:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80000cba:	60 a4       	mov.a %a4,%d10
80000cbc:	6d ff c3 ff 	call 80000c42 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
80000cc0:	02 82       	mov %d2,%d8
80000cc2:	00 90       	ret 

80000cc4 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
80000cc4:	40 ae       	mov.aa %a14,%sp
80000cc6:	80 49       	mov.d %d9,%a4
80000cc8:	02 48       	mov %d8,%d4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80000cca:	6d 00 f1 06 	call 80001aac <IfxScuCcu_getSpbFrequency>
80000cce:	4b 02 71 31 	ftouz %d3,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
80000cd2:	8f 23 00 40 	sh %d4,%d3,2
80000cd6:	4b 84 11 42 	div.u %e4,%d4,%d8

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80000cda:	1b 24 00 20 	addi %d2,%d4,2
80000cde:	06 e2       	sh %d2,-2
    divA   = __minu(divA - 1, 0x1Fu);
80000ce0:	c2 f2       	add %d2,-1
80000ce2:	3b f0 01 40 	mov %d4,31
80000ce6:	0b 42 90 41 	min.u %d4,%d2,%d4
    result = fadc / (divA + 1);
80000cea:	1b 14 00 20 	addi %d2,%d4,1
80000cee:	4b 23 11 62 	div.u %e6,%d3,%d2
80000cf2:	02 68       	mov %d8,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
80000cf4:	7b 10 13 50 	movh %d5,305
80000cf8:	1b 05 d0 52 	addi %d5,%d5,11520
80000cfc:	7f 65 0b 80 	jge.u %d5,%d6,80000d12 <IfxVadc_initializeFAdcI+0x4e>
80000d00:	3b f0 01 40 	mov %d4,31
80000d04:	0b 42 90 41 	min.u %d4,%d2,%d4
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80000d08:	1b 14 00 20 	addi %d2,%d4,1
80000d0c:	4b 23 11 22 	div.u %e2,%d3,%d2
80000d10:	02 28       	mov %d8,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80000d12:	7b 80 ff 2f 	movh %d2,65528
80000d16:	1b 02 ee 25 	addi %d2,%d2,24288
80000d1a:	42 82       	add %d2,%d8
80000d1c:	7b a0 12 30 	movh %d3,298
80000d20:	1b 03 be 38 	addi %d3,%d3,-29728
80000d24:	7f 23 05 80 	jge.u %d3,%d2,80000d2e <IfxVadc_initializeFAdcI+0x6a>
    {
        result = 0;             /* Min / Max FAdcI frequency */
80000d28:	82 08       	mov %d8,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80000d2a:	02 82       	mov %d2,%d8
80000d2c:	00 90       	ret 
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80000d2e:	60 94       	mov.a %a4,%d9
80000d30:	6d ff 9e ff 	call 80000c6c <IfxVadc_initialiseAdcConverterClock>
80000d34:	1d ff fb ff 	j 80000d2a <IfxVadc_initializeFAdcI+0x66>

80000d38 <IfxVadc_selectPowerSupplyVoltage>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80000d38:	40 ae       	mov.aa %a14,%sp
80000d3a:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80000d3c:	19 42 00 20 	ld.w %d2,[%a4]128
80000d40:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80000d42:	67 48 0e 80 	ins.t %d8,%d8,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
80000d46:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000d4a:	3b f0 01 40 	mov %d4,31
80000d4e:	6d ff fa fe 	call 80000b42 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80000d52:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000d56:	3b f0 01 40 	mov %d4,31
80000d5a:	40 c4       	mov.aa %a4,%a12
80000d5c:	6d ff d0 fe 	call 80000afc <IfxVadc_disableAccess>
}
80000d60:	00 90       	ret 

80000d62 <IfxVadc_setArbiterPriority>:


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80000d62:	40 ae       	mov.aa %a14,%sp
80000d64:	02 50       	mov %d0,%d5
    if (slotEnable != FALSE)
80000d66:	df 04 2a 00 	jeq %d4,0,80000dba <IfxVadc_setArbiterPriority+0x58>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80000d6a:	d9 42 04 00 	lea %a2,[%a4]4
80000d6e:	19 43 04 00 	ld.w %d3,[%a4]4
80000d72:	1b 87 01 20 	addi %d2,%d7,24
80000d76:	0f 24 00 20 	sh %d2,%d4,%d2
80000d7a:	a6 32       	or %d2,%d3
80000d7c:	74 22       	st.w [%a2],%d2
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80000d7e:	54 23       	ld.w %d3,[%a2]
80000d80:	06 27       	sh %d7,2
80000d82:	82 32       	mov %d2,3
80000d84:	0f 72 00 20 	sh %d2,%d2,%d7
80000d88:	0f 23 e0 20 	andn %d2,%d3,%d2
80000d8c:	74 22       	st.w [%a2],%d2
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80000d8e:	54 23       	ld.w %d3,[%a2]
80000d90:	0f 70 00 20 	sh %d2,%d0,%d7
80000d94:	a6 32       	or %d2,%d3
80000d96:	74 22       	st.w [%a2],%d2

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80000d98:	df 06 08 00 	jeq %d6,0,80000da8 <IfxVadc_setArbiterPriority+0x46>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80000d9c:	54 22       	ld.w %d2,[%a2]
80000d9e:	c2 37       	add %d7,3
80000da0:	d7 12 01 27 	insert %d2,%d2,1,%d7,1
80000da4:	74 22       	st.w [%a2],%d2
80000da6:	00 90       	ret 
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80000da8:	d9 42 04 00 	lea %a2,[%a4]4
80000dac:	19 42 04 00 	ld.w %d2,[%a4]4
80000db0:	c2 37       	add %d7,3
80000db2:	d7 02 01 27 	insert %d2,%d2,0,%d7,1
80000db6:	74 22       	st.w [%a2],%d2
80000db8:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80000dba:	d9 42 04 00 	lea %a2,[%a4]4
80000dbe:	19 43 04 00 	ld.w %d3,[%a4]4
80000dc2:	1b 87 01 20 	addi %d2,%d7,24
80000dc6:	d7 03 01 22 	insert %d2,%d3,0,%d2,1
80000dca:	74 22       	st.w [%a2],%d2
    }
}
80000dcc:	00 90       	ret 

80000dce <IfxVadc_setScan>:


void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
80000dce:	40 ae       	mov.aa %a14,%sp
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80000dd0:	d9 42 28 20 	lea %a2,[%a4]168
80000dd4:	19 42 28 20 	ld.w %d2,[%a4]168
80000dd8:	0f 42 c0 30 	xor %d3,%d2,%d4
80000ddc:	26 53       	and %d3,%d5
80000dde:	c6 32       	xor %d2,%d3
80000de0:	74 22       	st.w [%a2],%d2
}
80000de2:	00 90       	ret 

80000de4 <IfxVadc_startupCalibration>:


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80000de4:	40 ae       	mov.aa %a14,%sp
80000de6:	40 4c       	mov.aa %a12,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000de8:	3b f0 01 40 	mov %d4,31
80000dec:	6d ff ab fe 	call 80000b42 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80000df0:	d9 c2 00 20 	lea %a2,[%a12]128
80000df4:	19 c2 00 20 	ld.w %d2,[%a12]128
80000df8:	b7 12 81 2f 	insert %d2,%d2,1,31,1
80000dfc:	74 22       	st.w [%a2],%d2
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000dfe:	3b f0 01 40 	mov %d4,31
80000e02:	40 c4       	mov.aa %a4,%a12
80000e04:	6d ff 7c fe 	call 80000afc <IfxVadc_disableAccess>
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80000e08:	82 02       	mov %d2,0
        calibrationRunning = FALSE;
80000e0a:	82 04       	mov %d4,0
        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80000e0c:	1d 00 05 00 	j 80000e16 <IfxVadc_startupCalibration+0x32>
80000e10:	c2 12       	add %d2,1
80000e12:	8f f2 0f 21 	and %d2,%d2,255
80000e16:	ff 82 0d 80 	jge.u %d2,8,80000e30 <IfxVadc_startupCalibration+0x4c>
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80000e1a:	8f a2 00 30 	sh %d3,%d2,10
80000e1e:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80000e22:	19 23 40 20 	ld.w %d3,[%a2]1152
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
80000e26:	ef c3 f5 7f 	jz.t %d3,28,80000e10 <IfxVadc_startupCalibration+0x2c>
            {
                calibrationRunning = TRUE;
80000e2a:	82 14       	mov %d4,1
80000e2c:	1d ff f2 ff 	j 80000e10 <IfxVadc_startupCalibration+0x2c>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80000e30:	df 04 ec ff 	jne %d4,0,80000e08 <IfxVadc_startupCalibration+0x24>
}
80000e34:	00 90       	ret 

80000e36 <IfxVadc_Adc_initChannel>:
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80000e36:	40 ae       	mov.aa %a14,%sp
80000e38:	40 4f       	mov.aa %a15,%a4
80000e3a:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80000e3c:	99 52 38 00 	ld.a %a2,[%a5]56
}


IFX_INLINE Ifx_VADC *IfxVadc_Adc_getVadcFromGroup(const IfxVadc_Adc_Group *group)
{
    return group->module.vadc;
80000e40:	54 28       	ld.w %d8,[%a2]
    return group->group;
80000e42:	99 2d 04 00 	ld.a %a13,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80000e46:	b5 42 08 00 	st.a [%a4]8,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
80000e4a:	19 29 08 00 	ld.w %d9,[%a2]8
    IfxVadc_ChannelId channelIndex = config->channelId;
80000e4e:	19 5a 18 00 	ld.w %d10,[%a5]24

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80000e52:	02 94       	mov %d4,%d9
80000e54:	60 84       	mov.a %a4,%d8
80000e56:	6d ff 76 fe 	call 80000b42 <IfxVadc_enableAccess>

    /* Configure Channel */
    {
        IfxVadc_setReferenceInput(vadcG, channelIndex, config->reference);
80000e5a:	19 c3 20 00 	ld.w %d3,[%a12]32
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
80000e5e:	1b 0a 06 20 	addi %d2,%d10,96
80000e62:	06 22       	sh %d2,2
80000e64:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000e68:	54 22       	ld.w %d2,[%a2]
80000e6a:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
80000e6e:	74 22       	st.w [%a2],%d2
        IfxVadc_storeGroupResult(vadcG, channelIndex, config->resultRegister);
80000e70:	19 c3 24 00 	ld.w %d3,[%a12]36
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
80000e74:	54 22       	ld.w %d2,[%a2]
80000e76:	37 32 04 28 	insert %d2,%d2,%d3,16,4
80000e7a:	74 22       	st.w [%a2],%d2
        IfxVadc_setLowerBoundary(vadcG, channelIndex, config->lowerBoundary);
80000e7c:	19 c3 28 00 	ld.w %d3,[%a12]40
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80000e80:	54 22       	ld.w %d2,[%a2]
80000e82:	37 32 02 22 	insert %d2,%d2,%d3,4,2
80000e86:	74 22       	st.w [%a2],%d2
        IfxVadc_setUpperBoundary(vadcG, channelIndex, config->upperBoundary);
80000e88:	19 c3 2c 00 	ld.w %d3,[%a12]44
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
80000e8c:	54 22       	ld.w %d2,[%a2]
80000e8e:	37 32 02 23 	insert %d2,%d2,%d3,6,2
80000e92:	74 22       	st.w [%a2],%d2
        IfxVadc_setSyncRequest(vadcG, channelIndex, config->synchonize);
80000e94:	39 c3 01 00 	ld.bu %d3,[%a12]1
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
80000e98:	54 22       	ld.w %d2,[%a2]
80000e9a:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80000e9e:	74 22       	st.w [%a2],%d2
        IfxVadc_setChannelInputClass(vadcG, channelIndex, config->inputClass);
80000ea0:	19 c3 1c 00 	ld.w %d3,[%a12]28
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
80000ea4:	54 22       	ld.w %d2,[%a2]
80000ea6:	37 32 02 20 	insert %d2,%d2,%d3,0,2
80000eaa:	74 22       	st.w [%a2],%d2
        IfxVadc_setChannelLimitCheckMode(vadcG, channelIndex, config->limitCheck);
80000eac:	19 c3 34 00 	ld.w %d3,[%a12]52
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
80000eb0:	54 22       	ld.w %d2,[%a2]
80000eb2:	37 32 02 24 	insert %d2,%d2,%d3,8,2
80000eb6:	74 22       	st.w [%a2],%d2
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
80000eb8:	39 c3 03 00 	ld.bu %d3,[%a12]3
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
80000ebc:	54 22       	ld.w %d2,[%a2]
80000ebe:	67 32 15 20 	ins.t %d2,%d2,21,%d3,0
80000ec2:	74 22       	st.w [%a2],%d2
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
80000ec4:	14 c3       	ld.bu %d3,[%a12]
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
80000ec6:	54 22       	ld.w %d2,[%a2]
80000ec8:	67 32 14 20 	ins.t %d2,%d2,20,%d3,0
80000ecc:	74 22       	st.w [%a2],%d2
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
80000ece:	19 c3 30 00 	ld.w %d3,[%a12]48
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
80000ed2:	54 22       	ld.w %d2,[%a2]
80000ed4:	37 32 04 26 	insert %d2,%d2,%d3,12,4
80000ed8:	74 22       	st.w [%a2],%d2
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80000eda:	1b 09 01 b0 	addi %d11,%d9,16
80000ede:	02 b4       	mov %d4,%d11
80000ee0:	60 84       	mov.a %a4,%d8
80000ee2:	6d ff 30 fe 	call 80000b42 <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80000ee6:	39 c2 02 00 	ld.bu %d2,[%a12]2
80000eea:	df 02 4c 80 	jne %d2,0,80000f82 <IfxVadc_Adc_initChannel+0x14c>
    vadcG->CHASS.U |= (1 << channelIndex);
80000eee:	d9 d2 08 00 	lea %a2,[%a13]8
80000ef2:	19 d2 08 00 	ld.w %d2,[%a13]8
80000ef6:	d7 12 01 2a 	insert %d2,%d2,1,%d10,1
80000efa:	74 22       	st.w [%a2],%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80000efc:	02 b4       	mov %d4,%d11
80000efe:	60 84       	mov.a %a4,%d8
80000f00:	6d ff fe fd 	call 80000afc <IfxVadc_disableAccess>

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80000f04:	19 c4 14 00 	ld.w %d4,[%a12]20
80000f08:	48 02       	ld.w %d2,[%a15]0
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80000f0a:	d9 d2 20 40 	lea %a2,[%a13]288
80000f0e:	19 d5 20 40 	ld.w %d5,[%a13]288
80000f12:	06 22       	sh %d2,2
80000f14:	3b f0 00 30 	mov %d3,15
80000f18:	0f 23 00 30 	sh %d3,%d3,%d2
80000f1c:	0f 35 e0 30 	andn %d3,%d5,%d3
80000f20:	74 23       	st.w [%a2],%d3
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80000f22:	54 23       	ld.w %d3,[%a2]
80000f24:	0f 24 00 20 	sh %d2,%d4,%d2
80000f28:	a6 32       	or %d2,%d3
80000f2a:	74 22       	st.w [%a2],%d2

    if (config->channelPriority > 0)
80000f2c:	b9 c2 06 00 	ld.hu %d2,[%a12]6
80000f30:	df 02 32 80 	jne %d2,0,80000f94 <IfxVadc_Adc_initChannel+0x15e>
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80000f34:	19 c2 24 00 	ld.w %d2,[%a12]36
80000f38:	ff 82 51 80 	jge.u %d2,8,80000fda <IfxVadc_Adc_initChannel+0x1a4>
    {
        IfxVadc_setResultNodeEventPointer0(vadcG, config->resultSrcNr, config->resultRegister);
80000f3c:	19 c4 10 00 	ld.w %d4,[%a12]16
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80000f40:	d9 d2 30 40 	lea %a2,[%a13]304
80000f44:	19 d5 30 40 	ld.w %d5,[%a13]304
80000f48:	06 22       	sh %d2,2
80000f4a:	3b f0 00 30 	mov %d3,15
80000f4e:	0f 23 00 30 	sh %d3,%d3,%d2
80000f52:	0f 35 e0 30 	andn %d3,%d5,%d3
80000f56:	74 23       	st.w [%a2],%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80000f58:	54 23       	ld.w %d3,[%a2]
80000f5a:	0f 24 00 20 	sh %d2,%d4,%d2
80000f5e:	a6 32       	or %d2,%d3
80000f60:	74 22       	st.w [%a2],%d2
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80000f62:	b9 c2 04 00 	ld.hu %d2,[%a12]4
80000f66:	df 02 50 80 	jne %d2,0,80001006 <IfxVadc_Adc_initChannel+0x1d0>
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80000f6a:	02 94       	mov %d4,%d9
80000f6c:	60 84       	mov.a %a4,%d8
80000f6e:	6d ff c7 fd 	call 80000afc <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80000f72:	19 c2 24 00 	ld.w %d2,[%a12]36
80000f76:	68 12       	st.w [%a15]4,%d2
    channel->channel   = config->channelId;
80000f78:	19 c2 18 00 	ld.w %d2,[%a12]24
80000f7c:	68 02       	st.w [%a15]0,%d2

    return Status;
}
80000f7e:	82 02       	mov %d2,0
80000f80:	00 90       	ret 
    vadcG->CHASS.U &= ~(1 << channelIndex);
80000f82:	d9 d2 08 00 	lea %a2,[%a13]8
80000f86:	19 d2 08 00 	ld.w %d2,[%a13]8
80000f8a:	d7 02 01 2a 	insert %d2,%d2,0,%d10,1
80000f8e:	74 22       	st.w [%a2],%d2
}
80000f90:	1d ff b6 ff 	j 80000efc <IfxVadc_Adc_initChannel+0xc6>
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80000f94:	19 c5 14 00 	ld.w %d5,[%a12]20
80000f98:	02 94       	mov %d4,%d9
80000f9a:	6d ff 3c fe 	call 80000c12 <IfxVadc_getSrcAddress>
        IfxVadc_clearChannelRequest(vadcG, config->channelId);
80000f9e:	19 c4 18 00 	ld.w %d4,[%a12]24
    vadcG->CEFCLR.U = 1 << channelId;
80000fa2:	82 13       	mov %d3,1
80000fa4:	82 12       	mov %d2,1
80000fa6:	0f 42 00 20 	sh %d2,%d2,%d4
80000faa:	59 d2 10 40 	st.w [%a13]272,%d2
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80000fae:	19 c5 0c 00 	ld.w %d5,[%a12]12
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80000fb2:	39 c4 06 00 	ld.bu %d4,[%a12]6
80000fb6:	54 22       	ld.w %d2,[%a2]
80000fb8:	37 42 08 20 	insert %d2,%d2,%d4,0,8
80000fbc:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80000fbe:	54 22       	ld.w %d2,[%a2]
80000fc0:	37 52 82 25 	insert %d2,%d2,%d5,11,2
80000fc4:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80000fc6:	54 22       	ld.w %d2,[%a2]
80000fc8:	67 32 19 20 	ins.t %d2,%d2,25,%d3,0
80000fcc:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80000fce:	54 22       	ld.w %d2,[%a2]
80000fd0:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80000fd4:	74 22       	st.w [%a2],%d2
}
80000fd6:	1d ff af ff 	j 80000f34 <IfxVadc_Adc_initChannel+0xfe>
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
80000fda:	19 c4 10 00 	ld.w %d4,[%a12]16
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80000fde:	d9 d2 34 40 	lea %a2,[%a13]308
80000fe2:	19 d5 34 40 	ld.w %d5,[%a13]308
80000fe6:	c2 82       	add %d2,-8
80000fe8:	06 22       	sh %d2,2
80000fea:	3b f0 00 30 	mov %d3,15
80000fee:	0f 23 00 30 	sh %d3,%d3,%d2
80000ff2:	0f 35 e0 30 	andn %d3,%d5,%d3
80000ff6:	74 23       	st.w [%a2],%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80000ff8:	54 23       	ld.w %d3,[%a2]
80000ffa:	0f 24 00 20 	sh %d2,%d4,%d2
80000ffe:	a6 32       	or %d2,%d3
80001000:	74 22       	st.w [%a2],%d2
}
80001002:	1d ff b0 ff 	j 80000f62 <IfxVadc_Adc_initChannel+0x12c>
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80001006:	19 c5 10 00 	ld.w %d5,[%a12]16
8000100a:	02 94       	mov %d4,%d9
8000100c:	6d ff 03 fe 	call 80000c12 <IfxVadc_getSrcAddress>
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80001010:	19 c2 24 00 	ld.w %d2,[%a12]36
80001014:	1b 02 08 20 	addi %d2,%d2,128
80001018:	06 22       	sh %d2,2
8000101a:	01 d2 00 36 	addsc.a %a3,%a13,%d2,0
8000101e:	54 32       	ld.w %d2,[%a3]
80001020:	b7 12 81 2f 	insert %d2,%d2,1,31,1
80001024:	74 32       	st.w [%a3],%d2
    vadcG->REFCLR.U = 0x0000FFFFu;
80001026:	bb f0 ff 2f 	mov.u %d2,65535
8000102a:	59 d2 14 40 	st.w [%a13]276,%d2
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
8000102e:	19 c4 08 00 	ld.w %d4,[%a12]8
    src->B.SRPN = priority;
80001032:	39 c3 04 00 	ld.bu %d3,[%a12]4
80001036:	54 22       	ld.w %d2,[%a2]
80001038:	37 32 08 20 	insert %d2,%d2,%d3,0,8
8000103c:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
8000103e:	54 22       	ld.w %d2,[%a2]
80001040:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80001044:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80001046:	54 22       	ld.w %d2,[%a2]
80001048:	b7 12 81 2c 	insert %d2,%d2,1,25,1
8000104c:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
8000104e:	54 22       	ld.w %d2,[%a2]
80001050:	b7 12 01 25 	insert %d2,%d2,1,10,1
80001054:	74 22       	st.w [%a2],%d2
}
80001056:	1d ff 8a ff 	j 80000f6a <IfxVadc_Adc_initChannel+0x134>

8000105a <IfxVadc_Adc_initChannelConfig>:


void IfxVadc_Adc_initChannelConfig(IfxVadc_Adc_ChannelConfig *config, const IfxVadc_Adc_Group *group)
{
8000105a:	40 ae       	mov.aa %a14,%sp
8000105c:	40 4c       	mov.aa %a12,%a4
8000105e:	80 58       	mov.d %d8,%a5
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80001060:	3b c0 03 50 	mov %d5,60
80001064:	82 04       	mov %d4,0
80001066:	6d 00 7f 1d 	call 80004b64 <memset>
    config->group = group;
8000106a:	59 c8 38 00 	st.w [%a12]56,%d8
}
8000106e:	00 90       	ret 

80001070 <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80001070:	40 ae       	mov.aa %a14,%sp
80001072:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80001074:	d4 52       	ld.a %a2,[%a5]
80001076:	d4 2d       	ld.a %a13,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80001078:	19 58 04 00 	ld.w %d8,[%a5]4
8000107c:	8f a8 00 20 	sh %d2,%d8,10
80001080:	1b 02 48 20 	addi %d2,%d2,1152
80001084:	80 d3       	mov.d %d3,%a13
80001086:	0b 23 00 90 	add %d9,%d3,%d2

    /* check for write access */
    group->group   = vadcG;
8000108a:	59 49 04 00 	st.w [%a4]4,%d9
    group->module  = *config->module;
8000108e:	d4 52       	ld.a %a2,[%a5]
80001090:	54 22       	ld.w %d2,[%a2]
80001092:	74 42       	st.w [%a4],%d2
    IfxVadc_GroupId groupIndex      = config->groupId;
80001094:	19 5a 04 00 	ld.w %d10,[%a5]4
    group->groupId = groupIndex;
80001098:	59 4a 08 00 	st.w [%a4]8,%d10
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
8000109c:	40 d4       	mov.aa %a4,%a13
8000109e:	6d ff 9e fd 	call 80000bda <IfxVadc_getAdcAnalogFrequency>
800010a2:	02 2c       	mov %d12,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800010a4:	1b 0a 01 b0 	addi %d11,%d10,16
800010a8:	02 b4       	mov %d4,%d11
800010aa:	40 d4       	mov.aa %a4,%a13
800010ac:	6d ff 4b fd 	call 80000b42 <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
800010b0:	39 c4 38 10 	ld.bu %d4,[%a12]120
800010b4:	df 14 7c 00 	jeq %d4,1,800011ac <IfxVadc_Adc_initGroup+0x13c>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
800010b8:	82 07       	mov %d7,0
800010ba:	82 06       	mov %d6,0
800010bc:	82 05       	mov %d5,0
800010be:	82 04       	mov %d4,0
800010c0:	60 94       	mov.a %a4,%d9
800010c2:	6d ff 50 fe 	call 80000d62 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
800010c6:	39 c4 39 10 	ld.bu %d4,[%a12]121
800010ca:	df 14 7b 00 	jeq %d4,1,800011c0 <IfxVadc_Adc_initGroup+0x150>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
800010ce:	82 17       	mov %d7,1
800010d0:	82 06       	mov %d6,0
800010d2:	82 05       	mov %d5,0
800010d4:	82 04       	mov %d4,0
800010d6:	60 94       	mov.a %a4,%d9
800010d8:	6d ff 45 fe 	call 80000d62 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
800010dc:	39 c4 3a 10 	ld.bu %d4,[%a12]122
800010e0:	df 14 7a 00 	jeq %d4,1,800011d4 <IfxVadc_Adc_initGroup+0x164>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
800010e4:	82 27       	mov %d7,2
800010e6:	82 06       	mov %d6,0
800010e8:	82 05       	mov %d5,0
800010ea:	82 04       	mov %d4,0
800010ec:	60 94       	mov.a %a4,%d9
800010ee:	6d ff 3a fe 	call 80000d62 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
800010f2:	19 c2 08 00 	ld.w %d2,[%a12]8
800010f6:	5f a2 22 00 	jeq %d2,%d10,8000113a <IfxVadc_Adc_initGroup+0xca>
    return IfxVadc_Adc_masterIndex[slave][master];
800010fa:	8f 3a 00 30 	sh %d3,%d10,3
800010fe:	91 00 00 28 	movh.a %a2,32768
80001102:	d9 22 30 d0 	lea %a2,[%a2]880 <80000370 <IfxVadc_Adc_masterIndex>>
80001106:	80 24       	mov.d %d4,%a2
80001108:	42 34       	add %d4,%d3
8000110a:	60 42       	mov.a %a2,%d4
8000110c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001110:	14 22       	ld.bu %d2,[%a2]
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80001112:	8f a8 00 30 	sh %d3,%d8,10
80001116:	01 d3 00 26 	addsc.a %a2,%a13,%d3,0
8000111a:	d9 23 40 30 	lea %a3,[%a2]1216
8000111e:	19 23 40 30 	ld.w %d3,[%a2]1216
80001122:	37 23 02 30 	insert %d3,%d3,%d2,0,2
80001126:	74 33       	st.w [%a3],%d3
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80001128:	54 33       	ld.w %d3,[%a3]
8000112a:	8f 32 00 21 	and %d2,%d2,3
8000112e:	3b 80 00 40 	mov %d4,8
80001132:	0f 24 00 20 	sh %d2,%d4,%d2
80001136:	a6 32       	or %d2,%d3
80001138:	74 32       	st.w [%a3],%d2
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
8000113a:	8f a8 00 20 	sh %d2,%d8,10
8000113e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001142:	d9 23 40 20 	lea %a3,[%a2]1152
80001146:	19 23 40 20 	ld.w %d3,[%a2]1152
8000114a:	8f 33 c0 31 	andn %d3,%d3,3
8000114e:	74 33       	st.w [%a3],%d3

    /* Setup arbiter */
    /* turn off the group during initialization, see UM for sync mode */
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);
80001150:	19 c2 34 10 	ld.w %d2,[%a12]116
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80001154:	d9 23 40 20 	lea %a3,[%a2]1152
80001158:	19 23 40 20 	ld.w %d3,[%a2]1152
8000115c:	37 23 02 32 	insert %d3,%d3,%d2,4,2
80001160:	74 33       	st.w [%a3],%d3

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80001162:	39 c2 38 10 	ld.bu %d2,[%a12]120
80001166:	df 12 41 00 	jeq %d2,1,800011e8 <IfxVadc_Adc_initGroup+0x178>
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
8000116a:	39 c2 39 10 	ld.bu %d2,[%a12]121
8000116e:	df 12 b0 00 	jeq %d2,1,800012ce <IfxVadc_Adc_initGroup+0x25e>
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80001172:	39 c2 3a 10 	ld.bu %d2,[%a12]122
80001176:	df 12 1f 01 	jeq %d2,1,800013b4 <IfxVadc_Adc_initGroup+0x344>
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
8000117a:	19 c2 08 00 	ld.w %d2,[%a12]8
8000117e:	5f a2 76 01 	jeq %d2,%d10,8000146a <IfxVadc_Adc_initGroup+0x3fa>
80001182:	82 04       	mov %d4,0
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80001184:	8f a8 00 20 	sh %d2,%d8,10
80001188:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
8000118c:	d9 23 40 20 	lea %a3,[%a2]1152
80001190:	19 23 40 20 	ld.w %d3,[%a2]1152
80001194:	37 43 02 30 	insert %d3,%d3,%d4,0,2
80001198:	74 33       	st.w [%a3],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
8000119a:	39 c5 30 10 	ld.bu %d5,[%a12]112
8000119e:	02 a4       	mov %d4,%d10
800011a0:	40 d4       	mov.aa %a4,%a13
800011a2:	6d ff f3 fc 	call 80000b88 <IfxVadc_disablePostCalibration>

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
800011a6:	82 03       	mov %d3,0
800011a8:	1d 00 77 01 	j 80001496 <IfxVadc_Adc_initGroup+0x426>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
800011ac:	82 07       	mov %d7,0
800011ae:	19 c6 10 10 	ld.w %d6,[%a12]80
800011b2:	19 c5 0c 10 	ld.w %d5,[%a12]76
800011b6:	60 94       	mov.a %a4,%d9
800011b8:	6d ff d5 fd 	call 80000d62 <IfxVadc_setArbiterPriority>
800011bc:	1d ff 85 ff 	j 800010c6 <IfxVadc_Adc_initGroup+0x56>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
800011c0:	82 17       	mov %d7,1
800011c2:	19 c6 34 00 	ld.w %d6,[%a12]52
800011c6:	19 c5 30 00 	ld.w %d5,[%a12]48
800011ca:	60 94       	mov.a %a4,%d9
800011cc:	6d ff cb fd 	call 80000d62 <IfxVadc_setArbiterPriority>
800011d0:	1d ff 86 ff 	j 800010dc <IfxVadc_Adc_initGroup+0x6c>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
800011d4:	82 27       	mov %d7,2
800011d6:	19 c6 2c 10 	ld.w %d6,[%a12]108
800011da:	19 c5 28 10 	ld.w %d5,[%a12]104
800011de:	60 94       	mov.a %a4,%d9
800011e0:	6d ff c1 fd 	call 80000d62 <IfxVadc_setArbiterPriority>
800011e4:	1d ff 87 ff 	j 800010f2 <IfxVadc_Adc_initGroup+0x82>
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800011e8:	19 c2 08 10 	ld.w %d2,[%a12]72
800011ec:	df 02 37 00 	jeq %d2,0,8000125a <IfxVadc_Adc_initGroup+0x1ea>
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
800011f0:	8f a8 00 20 	sh %d2,%d8,10
800011f4:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800011f8:	d9 23 44 40 	lea %a3,[%a2]1284
800011fc:	19 22 44 40 	ld.w %d2,[%a2]1284
80001200:	b7 12 01 21 	insert %d2,%d2,1,2,1
80001204:	74 32       	st.w [%a3],%d2
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80001206:	19 c5 08 10 	ld.w %d5,[%a12]72
8000120a:	19 c4 00 10 	ld.w %d4,[%a12]64
    qctrl0.U        = vadcG->QCTRL0.U;
8000120e:	d9 23 40 40 	lea %a3,[%a2]1280
80001212:	19 22 40 40 	ld.w %d2,[%a2]1280
    qctrl0.B.XTWC   = 1;
80001216:	b7 12 81 27 	insert %d2,%d2,1,15,1
    qctrl0.B.XTMODE = triggerMode;
8000121a:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    qctrl0.B.XTSEL  = triggerSource;
8000121e:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80001222:	74 32       	st.w [%a3],%d2
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80001224:	19 c2 00 10 	ld.w %d2,[%a12]64
80001228:	8b f2 20 22 	ne %d2,%d2,15
8000122c:	df 02 22 80 	jne %d2,0,80001270 <IfxVadc_Adc_initGroup+0x200>
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80001230:	19 c3 3c 00 	ld.w %d3,[%a12]60
    qctrl0.U           = vadcG->QCTRL0.U;
80001234:	8f a8 00 20 	sh %d2,%d8,10
80001238:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
8000123c:	54 32       	ld.w %d2,[%a3]
    qctrl0.B.GTWC      = 1;
8000123e:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80001242:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80001246:	74 32       	st.w [%a3],%d2
    vadcG->QMR0.B.ENGT = gatingMode;
80001248:	d9 23 44 40 	lea %a3,[%a2]1284
8000124c:	19 22 44 40 	ld.w %d2,[%a2]1284
80001250:	b7 12 02 20 	insert %d2,%d2,1,0,2
80001254:	74 32       	st.w [%a3],%d2
}
80001256:	1d 00 0d 00 	j 80001270 <IfxVadc_Adc_initGroup+0x200>
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
8000125a:	8f a8 00 20 	sh %d2,%d8,10
8000125e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001262:	d9 23 44 40 	lea %a3,[%a2]1284
80001266:	19 22 44 40 	ld.w %d2,[%a2]1284
8000126a:	8f 42 c0 21 	andn %d2,%d2,4
8000126e:	74 32       	st.w [%a3],%d2
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80001270:	19 c2 00 10 	ld.w %d2,[%a12]64
80001274:	8b f2 00 22 	eq %d2,%d2,15
80001278:	df 02 1a 80 	jne %d2,0,800012ac <IfxVadc_Adc_initGroup+0x23c>
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
8000127c:	19 c5 3c 00 	ld.w %d5,[%a12]60
80001280:	19 c4 04 10 	ld.w %d4,[%a12]68
    qctrl0.U           = vadcG->QCTRL0.U;
80001284:	8f a8 00 20 	sh %d2,%d8,10
80001288:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
8000128c:	d9 23 40 40 	lea %a3,[%a2]1280
80001290:	19 22 40 40 	ld.w %d2,[%a2]1280
    qctrl0.B.GTWC      = 1;
80001294:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80001298:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
8000129c:	74 32       	st.w [%a3],%d2
    vadcG->QMR0.B.ENGT = gatingMode;
8000129e:	d9 23 44 40 	lea %a3,[%a2]1284
800012a2:	19 22 44 40 	ld.w %d2,[%a2]1284
800012a6:	37 42 02 20 	insert %d2,%d2,%d4,0,2
800012aa:	74 32       	st.w [%a3],%d2
        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
800012ac:	39 c3 38 00 	ld.bu %d3,[%a12]56
800012b0:	8b 03 20 32 	ne %d3,%d3,0
    vadcG->QMR0.B.FLUSH = flushQueue;
800012b4:	8f a8 00 20 	sh %d2,%d8,10
800012b8:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800012bc:	d9 23 44 40 	lea %a3,[%a2]1284
800012c0:	19 22 44 40 	ld.w %d2,[%a2]1284
800012c4:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
800012c8:	74 32       	st.w [%a3],%d2
}
800012ca:	1d ff 50 ff 	j 8000116a <IfxVadc_Adc_initGroup+0xfa>
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800012ce:	19 c2 2c 00 	ld.w %d2,[%a12]44
800012d2:	df 02 37 00 	jeq %d2,0,80001340 <IfxVadc_Adc_initGroup+0x2d0>
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
800012d6:	8f a8 00 20 	sh %d2,%d8,10
800012da:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800012de:	d9 23 64 40 	lea %a3,[%a2]1316
800012e2:	19 22 64 40 	ld.w %d2,[%a2]1316
800012e6:	b7 12 01 21 	insert %d2,%d2,1,2,1
800012ea:	74 32       	st.w [%a3],%d2
            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
800012ec:	19 c5 2c 00 	ld.w %d5,[%a12]44
800012f0:	19 c4 24 00 	ld.w %d4,[%a12]36
    asctrl.U        = vadcG->ASCTRL.U;
800012f4:	d9 23 60 40 	lea %a3,[%a2]1312
800012f8:	19 22 60 40 	ld.w %d2,[%a2]1312
    asctrl.B.XTWC   = 1;
800012fc:	b7 12 81 27 	insert %d2,%d2,1,15,1
    asctrl.B.XTMODE = triggerMode;
80001300:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    asctrl.B.XTSEL  = triggerSource;
80001304:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadcG->ASCTRL.U = asctrl.U;
80001308:	74 32       	st.w [%a3],%d2
            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
8000130a:	19 c2 24 00 	ld.w %d2,[%a12]36
8000130e:	8b f2 20 22 	ne %d2,%d2,15
80001312:	df 02 22 80 	jne %d2,0,80001356 <IfxVadc_Adc_initGroup+0x2e6>
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80001316:	19 c3 20 00 	ld.w %d3,[%a12]32
    asctrl.U           = vadcG->ASCTRL.U;
8000131a:	8f a8 00 20 	sh %d2,%d8,10
8000131e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001322:	54 32       	ld.w %d2,[%a3]
    asctrl.B.GTWC      = 1;
80001324:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80001328:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadcG->ASCTRL.U    = asctrl.U;
8000132c:	74 32       	st.w [%a3],%d2
    vadcG->ASMR.B.ENGT = gatingMode;
8000132e:	d9 23 64 40 	lea %a3,[%a2]1316
80001332:	19 22 64 40 	ld.w %d2,[%a2]1316
80001336:	b7 12 02 20 	insert %d2,%d2,1,0,2
8000133a:	74 32       	st.w [%a3],%d2
}
8000133c:	1d 00 0d 00 	j 80001356 <IfxVadc_Adc_initGroup+0x2e6>
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80001340:	8f a8 00 20 	sh %d2,%d8,10
80001344:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001348:	d9 23 64 40 	lea %a3,[%a2]1316
8000134c:	19 22 64 40 	ld.w %d2,[%a2]1316
80001350:	8f 42 c0 21 	andn %d2,%d2,4
80001354:	74 32       	st.w [%a3],%d2
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80001356:	19 c2 24 00 	ld.w %d2,[%a12]36
8000135a:	8b f2 00 22 	eq %d2,%d2,15
8000135e:	df 02 1a 80 	jne %d2,0,80001392 <IfxVadc_Adc_initGroup+0x322>
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80001362:	19 c5 20 00 	ld.w %d5,[%a12]32
80001366:	19 c4 28 00 	ld.w %d4,[%a12]40
    asctrl.U           = vadcG->ASCTRL.U;
8000136a:	8f a8 00 20 	sh %d2,%d8,10
8000136e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001372:	d9 23 60 40 	lea %a3,[%a2]1312
80001376:	19 22 60 40 	ld.w %d2,[%a2]1312
    asctrl.B.GTWC      = 1;
8000137a:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    asctrl.B.GTSEL     = gatingSource;
8000137e:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80001382:	74 32       	st.w [%a3],%d2
    vadcG->ASMR.B.ENGT = gatingMode;
80001384:	d9 23 64 40 	lea %a3,[%a2]1316
80001388:	19 22 64 40 	ld.w %d2,[%a2]1316
8000138c:	37 42 02 20 	insert %d2,%d2,%d4,0,2
80001390:	74 32       	st.w [%a3],%d2
        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80001392:	39 c3 1c 00 	ld.bu %d3,[%a12]28
80001396:	8b 03 20 32 	ne %d3,%d3,0
    vadcG->ASMR.B.SCAN = autoscanEnable;
8000139a:	8f a8 00 20 	sh %d2,%d8,10
8000139e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800013a2:	d9 23 64 40 	lea %a3,[%a2]1316
800013a6:	19 22 64 40 	ld.w %d2,[%a2]1316
800013aa:	67 32 04 20 	ins.t %d2,%d2,4,%d3,0
800013ae:	74 32       	st.w [%a3],%d2
}
800013b0:	1d ff e1 fe 	j 80001172 <IfxVadc_Adc_initGroup+0x102>
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800013b4:	19 c2 24 10 	ld.w %d2,[%a12]100
800013b8:	df 02 1e 00 	jeq %d2,0,800013f4 <IfxVadc_Adc_initGroup+0x384>
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
800013bc:	d9 d2 04 80 	lea %a2,[%a13]516
800013c0:	19 d2 04 80 	ld.w %d2,[%a13]516
800013c4:	b7 12 01 21 	insert %d2,%d2,1,2,1
800013c8:	74 22       	st.w [%a2],%d2
            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
800013ca:	19 c5 24 10 	ld.w %d5,[%a12]100
800013ce:	19 c4 1c 10 	ld.w %d4,[%a12]92
    brsctrl.U        = vadc->BRSCTRL.U;
800013d2:	d9 d2 00 80 	lea %a2,[%a13]512
800013d6:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.XTWC   = 1;
800013da:	b7 12 81 27 	insert %d2,%d2,1,15,1
    brsctrl.B.XTMODE = triggerMode;
800013de:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    brsctrl.B.XTSEL  = triggerSource;
800013e2:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
800013e6:	74 22       	st.w [%a2],%d2
            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
800013e8:	19 c2 1c 10 	ld.w %d2,[%a12]92
800013ec:	8b f2 20 22 	ne %d2,%d2,15
800013f0:	df 02 29 00 	jeq %d2,0,80001442 <IfxVadc_Adc_initGroup+0x3d2>
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
800013f4:	19 c2 1c 10 	ld.w %d2,[%a12]92
800013f8:	8b f2 00 22 	eq %d2,%d2,15
800013fc:	df 02 16 80 	jne %d2,0,80001428 <IfxVadc_Adc_initGroup+0x3b8>
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80001400:	19 c5 18 10 	ld.w %d5,[%a12]88
80001404:	19 c4 20 10 	ld.w %d4,[%a12]96
    brsctrl.U          = vadc->BRSCTRL.U;
80001408:	d9 d2 00 80 	lea %a2,[%a13]512
8000140c:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.GTWC     = 1;
80001410:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80001414:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80001418:	74 22       	st.w [%a2],%d2
    vadc->BRSMR.B.ENGT = gatingMode;
8000141a:	d9 d2 04 80 	lea %a2,[%a13]516
8000141e:	19 d2 04 80 	ld.w %d2,[%a13]516
80001422:	37 42 02 20 	insert %d2,%d2,%d4,0,2
80001426:	74 22       	st.w [%a2],%d2
        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80001428:	39 c3 14 10 	ld.bu %d3,[%a12]84
8000142c:	8b 03 20 32 	ne %d3,%d3,0
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80001430:	d9 d2 04 80 	lea %a2,[%a13]516
80001434:	19 d2 04 80 	ld.w %d2,[%a13]516
80001438:	67 32 04 20 	ins.t %d2,%d2,4,%d3,0
8000143c:	74 22       	st.w [%a2],%d2
}
8000143e:	1d ff 9e fe 	j 8000117a <IfxVadc_Adc_initGroup+0x10a>
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80001442:	19 c3 18 10 	ld.w %d3,[%a12]88
    brsctrl.U          = vadc->BRSCTRL.U;
80001446:	d9 d2 00 80 	lea %a2,[%a13]512
8000144a:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.GTWC     = 1;
8000144e:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80001452:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80001456:	74 22       	st.w [%a2],%d2
    vadc->BRSMR.B.ENGT = gatingMode;
80001458:	d9 d2 04 80 	lea %a2,[%a13]516
8000145c:	19 d2 04 80 	ld.w %d2,[%a13]516
80001460:	b7 12 02 20 	insert %d2,%d2,1,0,2
80001464:	74 22       	st.w [%a2],%d2
}
80001466:	1d ff c7 ff 	j 800013f4 <IfxVadc_Adc_initGroup+0x384>
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
8000146a:	82 34       	mov %d4,3
8000146c:	1d ff 8c fe 	j 80001184 <IfxVadc_Adc_initGroup+0x114>
80001470:	3b f0 0f 50 	mov %d5,255
80001474:	0b 54 90 51 	min.u %d5,%d4,%d5
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80001478:	8f 88 00 20 	sh %d2,%d8,8
8000147c:	42 62       	add %d2,%d6
8000147e:	1b 82 12 40 	addi %d4,%d2,296
80001482:	06 24       	sh %d4,2
80001484:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80001488:	54 24       	ld.w %d4,[%a2]
8000148a:	37 54 05 40 	insert %d4,%d4,%d5,0,5
8000148e:	74 24       	st.w [%a2],%d4
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80001490:	c2 13       	add %d3,1
80001492:	8f f3 0f 31 	and %d3,%d3,255
80001496:	ff 23 29 80 	jge.u %d3,2,800014e8 <IfxVadc_Adc_initGroup+0x478>
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
8000149a:	02 36       	mov %d6,%d3
8000149c:	1b 23 00 40 	addi %d4,%d3,2
800014a0:	06 34       	sh %d4,3
800014a2:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
800014a6:	54 25       	ld.w %d5,[%a2]
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
800014a8:	8f 88 00 20 	sh %d2,%d8,8
800014ac:	42 32       	add %d2,%d3
800014ae:	1b 82 12 40 	addi %d4,%d2,296
800014b2:	06 24       	sh %d4,2
800014b4:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
800014b8:	54 24       	ld.w %d4,[%a2]
800014ba:	37 54 03 44 	insert %d4,%d4,%d5,8,3
800014be:	74 24       	st.w [%a2],%d4
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
800014c0:	8f 33 00 40 	sh %d4,%d3,3
800014c4:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
800014c8:	19 24 0c 00 	ld.w %d4,[%a2]12
    ticks = (uint32)(sampleTime * analogFrequency) - 2;
800014cc:	4b c4 41 40 	mul.f %d4,%d4,%d12
800014d0:	4b 04 71 41 	ftouz %d4,%d4
800014d4:	c2 e4       	add %d4,-2
    if (ticks > 31)
800014d6:	8b 04 62 52 	lt.u %d5,%d4,32
800014da:	df 05 cb ff 	jne %d5,0,80001470 <IfxVadc_Adc_initGroup+0x400>
        ticks = (ticks / 16) + 15;
800014de:	06 c4       	sh %d4,-4
800014e0:	1b f4 00 40 	addi %d4,%d4,15
800014e4:	1d ff c6 ff 	j 80001470 <IfxVadc_Adc_initGroup+0x400>
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800014e8:	02 b4       	mov %d4,%d11
800014ea:	40 d4       	mov.aa %a4,%a13
800014ec:	6d ff 08 fb 	call 80000afc <IfxVadc_disableAccess>

    return status;
}
800014f0:	82 02       	mov %d2,0
800014f2:	00 90       	ret 

800014f4 <IfxVadc_Adc_initGroupConfig>:


void IfxVadc_Adc_initGroupConfig(IfxVadc_Adc_GroupConfig *config, IfxVadc_Adc *vadc)
{
800014f4:	40 ae       	mov.aa %a14,%sp
800014f6:	40 4c       	mov.aa %a12,%a4
800014f8:	80 58       	mov.d %d8,%a5
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
800014fa:	3b c0 07 50 	mov %d5,124
800014fe:	82 04       	mov %d4,0
80001500:	6d 00 32 1b 	call 80004b64 <memset>
80001504:	7b 60 58 23 	movh %d2,13702
80001508:	1b d2 7b 23 	addi %d2,%d2,14269
8000150c:	59 c2 0c 00 	st.w [%a12]12,%d2
80001510:	59 c2 14 00 	st.w [%a12]20,%d2
80001514:	82 12       	mov %d2,1
80001516:	59 c2 30 00 	st.w [%a12]48,%d2
8000151a:	e9 c2 38 00 	st.b [%a12]56,%d2
8000151e:	59 c2 0c 10 	st.w [%a12]76,%d2
80001522:	59 c2 28 10 	st.w [%a12]104,%d2
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80001526:	74 c8       	st.w [%a12],%d8
    config->master                 = config->groupId;
    config->disablePostCalibration = FALSE;
}
80001528:	00 90       	ret 

8000152a <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
8000152a:	40 ae       	mov.aa %a14,%sp
8000152c:	40 5d       	mov.aa %a13,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
8000152e:	d4 5c       	ld.a %a12,[%a5]
    vadc->vadc = vadcSFR;
80001530:	f4 4c       	st.a [%a4],%a12
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001532:	6d 00 0f 06 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80001536:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80001538:	02 24       	mov %d4,%d2
8000153a:	6d 00 a2 04 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
8000153e:	82 02       	mov %d2,0
80001540:	74 c2       	st.w [%a12],%d2
    IfxScuWdt_setCpuEndinit(passwd);
80001542:	02 84       	mov %d4,%d8
80001544:	6d 00 23 06 	call 8000218a <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80001548:	19 d4 24 00 	ld.w %d4,[%a13]36
8000154c:	40 c4       	mov.aa %a4,%a12
8000154e:	6d ff f5 fb 	call 80000d38 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80001552:	19 d4 18 00 	ld.w %d4,[%a13]24
80001556:	4b 04 71 41 	ftouz %d4,%d4
8000155a:	40 c4       	mov.aa %a4,%a12
8000155c:	6d ff b4 fb 	call 80000cc4 <IfxVadc_initializeFAdcI>
80001560:	df 02 04 80 	jne %d2,0,80001568 <IfxVadc_Adc_initModule+0x3e>
    {
        return IfxVadc_Status_notInitialised;
80001564:	82 12       	mov %d2,1
        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
}
80001566:	00 90       	ret 
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80001568:	19 d4 14 00 	ld.w %d4,[%a13]20
8000156c:	4b 04 71 41 	ftouz %d4,%d4
80001570:	40 c4       	mov.aa %a4,%a12
80001572:	6d ff 92 fb 	call 80000c96 <IfxVadc_initializeFAdcD>
    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80001576:	40 c4       	mov.aa %a4,%a12
80001578:	6d ff 31 fb 	call 80000bda <IfxVadc_getAdcAnalogFrequency>
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
8000157c:	82 03       	mov %d3,0
8000157e:	1d 00 12 00 	j 800015a2 <IfxVadc_Adc_initModule+0x78>
80001582:	3b f0 0f 50 	mov %d5,255
80001586:	0b 54 90 51 	min.u %d5,%d4,%d5
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
8000158a:	1b 86 02 40 	addi %d4,%d6,40
8000158e:	06 24       	sh %d4,2
80001590:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
80001594:	54 24       	ld.w %d4,[%a2]
80001596:	37 54 05 40 	insert %d4,%d4,%d5,0,5
8000159a:	74 24       	st.w [%a2],%d4
8000159c:	c2 13       	add %d3,1
8000159e:	8f f3 0f 31 	and %d3,%d3,255
800015a2:	ff 23 26 80 	jge.u %d3,2,800015ee <IfxVadc_Adc_initModule+0xc4>
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
800015a6:	02 36       	mov %d6,%d3
800015a8:	1b 13 00 40 	addi %d4,%d3,1
800015ac:	06 34       	sh %d4,3
800015ae:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
800015b2:	54 25       	ld.w %d5,[%a2]
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
800015b4:	1b 83 02 40 	addi %d4,%d3,40
800015b8:	06 24       	sh %d4,2
800015ba:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
800015be:	54 24       	ld.w %d4,[%a2]
800015c0:	37 54 03 44 	insert %d4,%d4,%d5,8,3
800015c4:	74 24       	st.w [%a2],%d4
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
800015c6:	8f 33 00 40 	sh %d4,%d3,3
800015ca:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
800015ce:	19 24 04 00 	ld.w %d4,[%a2]4
    ticks = (uint32)(sampleTime * analogFrequency) - 2;
800015d2:	4b 24 41 40 	mul.f %d4,%d4,%d2
800015d6:	4b 04 71 41 	ftouz %d4,%d4
800015da:	c2 e4       	add %d4,-2
    if (ticks > 31)
800015dc:	8b 04 62 52 	lt.u %d5,%d4,32
800015e0:	df 05 d1 ff 	jne %d5,0,80001582 <IfxVadc_Adc_initModule+0x58>
        ticks = (ticks / 16) + 15;
800015e4:	06 c4       	sh %d4,-4
800015e6:	1b f4 00 40 	addi %d4,%d4,15
800015ea:	1d ff cc ff 	j 80001582 <IfxVadc_Adc_initModule+0x58>
    if (config->startupCalibration == TRUE)
800015ee:	39 d2 20 00 	ld.bu %d2,[%a13]32
800015f2:	df 12 23 00 	jeq %d2,1,80001638 <IfxVadc_Adc_initModule+0x10e>
    return status;
800015f6:	82 02       	mov %d2,0
800015f8:	00 90       	ret 
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
800015fa:	1b 08 01 90 	addi %d9,%d8,16
800015fe:	02 94       	mov %d4,%d9
80001600:	40 c4       	mov.aa %a4,%a12
80001602:	6d ff a0 fa 	call 80000b42 <IfxVadc_enableAccess>
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80001606:	8f a8 00 20 	sh %d2,%d8,10
8000160a:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
8000160e:	d9 23 40 20 	lea %a3,[%a2]1152
80001612:	19 22 40 20 	ld.w %d2,[%a2]1152
80001616:	b7 32 02 20 	insert %d2,%d2,3,0,2
8000161a:	74 32       	st.w [%a3],%d2
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
8000161c:	02 94       	mov %d4,%d9
8000161e:	40 c4       	mov.aa %a4,%a12
80001620:	6d ff 6e fa 	call 80000afc <IfxVadc_disableAccess>
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80001624:	c2 18       	add %d8,1
80001626:	8f f8 0f 81 	and %d8,%d8,255
8000162a:	bf 88 e8 ff 	jlt.u %d8,8,800015fa <IfxVadc_Adc_initModule+0xd0>
        IfxVadc_startupCalibration(vadcSFR);
8000162e:	40 c4       	mov.aa %a4,%a12
80001630:	6d ff da fb 	call 80000de4 <IfxVadc_startupCalibration>
    return status;
80001634:	82 02       	mov %d2,0
80001636:	00 90       	ret 
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80001638:	82 08       	mov %d8,0
8000163a:	1d ff f8 ff 	j 8000162a <IfxVadc_Adc_initModule+0x100>

8000163e <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
8000163e:	40 ae       	mov.aa %a14,%sp
80001640:	40 4c       	mov.aa %a12,%a4
80001642:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80001644:	f4 c5       	st.a [%a12],%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80001646:	7b 90 b9 24 	movh %d2,19353
8000164a:	1b 02 68 29 	addi %d2,%d2,-27008
8000164e:	59 c2 18 00 	st.w [%a12]24,%d2

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80001652:	6d ff d2 fa 	call 80000bf6 <IfxVadc_getAdcDigitalFrequency>
80001656:	59 c2 14 00 	st.w [%a12]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
8000165a:	6d 00 29 02 	call 80001aac <IfxScuCcu_getSpbFrequency>
8000165e:	59 c2 1c 00 	st.w [%a12]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80001662:	82 02       	mov %d2,0
80001664:	59 c2 08 00 	st.w [%a12]8,%d2
    config->globalInputClass[0].sampleTime = 1.0e-6;
80001668:	7b 60 58 33 	movh %d3,13702
8000166c:	1b d3 7b 33 	addi %d3,%d3,14269
80001670:	59 c3 04 00 	st.w [%a12]4,%d3
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80001674:	59 c2 10 00 	st.w [%a12]16,%d2
    config->globalInputClass[1].sampleTime = 1.0e-6;
80001678:	59 c3 0c 00 	st.w [%a12]12,%d3
    config->startupCalibration             = FALSE;
8000167c:	e9 c2 20 00 	st.b [%a12]32,%d2
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
80001680:	59 c2 24 00 	st.w [%a12]36,%d2
}
80001684:	00 90       	ret 

80001686 <IfxStm_clearCompareFlag>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator)
{
80001686:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
80001688:	df 04 0a 80 	jne %d4,0,8000169c <IfxStm_clearCompareFlag+0x16>
    {
        stm->ISCR.B.CMP0IRR = 1U;
8000168c:	d9 42 00 10 	lea %a2,[%a4]64
80001690:	19 42 00 10 	ld.w %d2,[%a4]64
80001694:	b7 12 01 20 	insert %d2,%d2,1,0,1
80001698:	74 22       	st.w [%a2],%d2
8000169a:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
8000169c:	df 14 03 00 	jeq %d4,1,800016a2 <IfxStm_clearCompareFlag+0x1c>
    {
        stm->ISCR.B.CMP1IRR = 1U;
    }
}
800016a0:	00 90       	ret 
        stm->ISCR.B.CMP1IRR = 1U;
800016a2:	d9 42 00 10 	lea %a2,[%a4]64
800016a6:	19 42 00 10 	ld.w %d2,[%a4]64
800016aa:	b7 12 01 21 	insert %d2,%d2,1,2,1
800016ae:	74 22       	st.w [%a2],%d2
}
800016b0:	1d ff f8 ff 	j 800016a0 <IfxStm_clearCompareFlag+0x1a>

800016b4 <IfxStm_enableComparatorInterrupt>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator)
{
800016b4:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
800016b6:	df 04 0a 80 	jne %d4,0,800016ca <IfxStm_enableComparatorInterrupt+0x16>
    {
        stm->ICR.B.CMP0EN = 1U;
800016ba:	d9 42 3c 00 	lea %a2,[%a4]60
800016be:	19 42 3c 00 	ld.w %d2,[%a4]60
800016c2:	b7 12 01 20 	insert %d2,%d2,1,0,1
800016c6:	74 22       	st.w [%a2],%d2
800016c8:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
800016ca:	df 14 03 00 	jeq %d4,1,800016d0 <IfxStm_enableComparatorInterrupt+0x1c>
    {
        stm->ICR.B.CMP1EN = 1U;
    }
}
800016ce:	00 90       	ret 
        stm->ICR.B.CMP1EN = 1U;
800016d0:	d9 42 3c 00 	lea %a2,[%a4]60
800016d4:	19 42 3c 00 	ld.w %d2,[%a4]60
800016d8:	b7 12 01 22 	insert %d2,%d2,1,4,1
800016dc:	74 22       	st.w [%a2],%d2
}
800016de:	1d ff f8 ff 	j 800016ce <IfxStm_enableComparatorInterrupt+0x1a>

800016e2 <IfxStm_enableOcdsSuspend>:


void IfxStm_enableOcdsSuspend(Ifx_STM *stm)
{
800016e2:	40 ae       	mov.aa %a14,%sp
    Ifx_STM_OCS ocs = stm->OCS;
800016e4:	d9 42 28 30 	lea %a2,[%a4]232
800016e8:	19 42 28 30 	ld.w %d2,[%a4]232

    /* Only if OCDS is enabled write into the OCS register */
    if (MODULE_CBS.OSTATE.B.OEN == 1U)
800016ec:	85 f3 40 20 	ld.w %d3,f0000480 <_SMALL_DATA4_+0x5fff8480>
800016f0:	6f 03 03 80 	jnz.t %d3,0,800016f6 <IfxStm_enableOcdsSuspend+0x14>
        ocs.B.SUS_P      = 1;
        ocs.B.SUS        = 2;
        stm->OCS         = ocs;
        stm->OCS.B.SUS_P = 0;
    }
}
800016f4:	00 90       	ret 
        ocs.B.SUS_P      = 1;
800016f6:	b7 12 01 2e 	insert %d2,%d2,1,28,1
        ocs.B.SUS        = 2;
800016fa:	b7 22 04 2c 	insert %d2,%d2,2,24,4
        stm->OCS         = ocs;
800016fe:	74 22       	st.w [%a2],%d2
        stm->OCS.B.SUS_P = 0;
80001700:	54 22       	ld.w %d2,[%a2]
80001702:	b7 02 01 2e 	insert %d2,%d2,0,28,1
80001706:	74 22       	st.w [%a2],%d2
}
80001708:	1d ff f6 ff 	j 800016f4 <IfxStm_enableOcdsSuspend+0x12>

8000170c <IfxStm_getIndex>:
    return module;
}


IfxStm_Index IfxStm_getIndex(Ifx_STM *stm)
{
8000170c:	40 ae       	mov.aa %a14,%sp
    uint32       index;
    IfxStm_Index result;

    result = IfxStm_Index_none;

    for (index = 0; index < IFXSTM_NUM_MODULES; index++)
8000170e:	82 02       	mov %d2,0
80001710:	1d 00 03 00 	j 80001716 <IfxStm_getIndex+0xa>
80001714:	c2 12       	add %d2,1
80001716:	ff 32 18 80 	jge.u %d2,3,80001746 <IfxStm_getIndex+0x3a>
    {
        if (IfxStm_cfg_indexMap[index].module == stm)
8000171a:	8f 32 00 30 	sh %d3,%d2,3
8000171e:	91 00 00 28 	movh.a %a2,32768
80001722:	d9 22 38 a0 	lea %a2,[%a2]696 <800002b8 <IfxStm_cfg_indexMap>>
80001726:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000172a:	54 23       	ld.w %d3,[%a2]
8000172c:	80 44       	mov.d %d4,%a4
8000172e:	5f 43 f3 ff 	jne %d3,%d4,80001714 <IfxStm_getIndex+0x8>
        {
            result = (IfxStm_Index)IfxStm_cfg_indexMap[index].index;
80001732:	06 32       	sh %d2,3
80001734:	91 00 00 28 	movh.a %a2,32768
80001738:	d9 22 38 a0 	lea %a2,[%a2]696 <800002b8 <IfxStm_cfg_indexMap>>
8000173c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001740:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80001744:	00 90       	ret 
    result = IfxStm_Index_none;
80001746:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
80001748:	00 90       	ret 

8000174a <IfxStm_initCompare>:
    return comparator == IfxStm_Comparator_0 ? &MODULE_SRC.STM.STM[index].SR0 : &MODULE_SRC.STM.STM[index].SR1;
}


boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config)
{
8000174a:	40 ae       	mov.aa %a14,%sp
8000174c:	40 4d       	mov.aa %a13,%a4
8000174e:	40 5c       	mov.aa %a12,%a5
    sint32        index;
    boolean       result;
    Ifx_STM_CMCON comcon = stm->CMCON;
80001750:	19 42 38 00 	ld.w %d2,[%a4]56
    Ifx_STM_ICR   icr    = stm->ICR;
80001754:	19 43 3c 00 	ld.w %d3,[%a4]60

    if (config->comparator == 0)
80001758:	54 54       	ld.w %d4,[%a5]
8000175a:	df 04 82 80 	jne %d4,0,8000185e <IfxStm_initCompare+0x114>
    {
        comcon.B.MSIZE0  = config->compareSize;
8000175e:	19 54 0c 00 	ld.w %d4,[%a5]12
80001762:	37 42 05 20 	insert %d2,%d2,%d4,0,5
        comcon.B.MSTART0 = config->compareOffset;
80001766:	19 54 08 00 	ld.w %d4,[%a5]8
8000176a:	37 42 05 24 	insert %d2,%d2,%d4,8,5
        icr.B.CMP0OS     = config->comparatorInterrupt;
8000176e:	19 54 04 00 	ld.w %d4,[%a5]4
80001772:	67 43 02 30 	ins.t %d3,%d3,2,%d4,0
        result           = TRUE;
80001776:	82 18       	mov %d8,1
    {
        /*Invalid value */
        result = FALSE;
    }

    stm->ICR.U   = icr.U;
80001778:	59 d3 3c 00 	st.w [%a13]60,%d3
    stm->CMCON.U = comcon.U;
8000177c:	59 d2 38 00 	st.w [%a13]56,%d2

    /* configure interrupt */
    index = IfxStm_getIndex(stm);
80001780:	40 d4       	mov.aa %a4,%a13
80001782:	6d ff c5 ff 	call 8000170c <IfxStm_getIndex>

    if (config->triggerPriority > 0)
80001786:	b9 c3 14 00 	ld.hu %d3,[%a12]20
8000178a:	df 03 20 00 	jeq %d3,0,800017ca <IfxStm_initCompare+0x80>
    {
        volatile Ifx_SRC_SRCR *srcr;

        if (config->comparatorInterrupt == IfxStm_ComparatorInterrupt_ir0)
8000178e:	19 c4 04 00 	ld.w %d4,[%a12]4
80001792:	df 04 7a 80 	jne %d4,0,80001886 <IfxStm_initCompare+0x13c>
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR0);
80001796:	06 32       	sh %d2,3
80001798:	7b 40 00 4f 	movh %d4,61444
8000179c:	1b 04 49 48 	addi %d4,%d4,-31600
800017a0:	60 42       	mov.a %a2,%d4
800017a2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
        else
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
        }

        IfxSrc_init(srcr, config->typeOfService, config->triggerPriority);
800017a6:	19 c4 18 00 	ld.w %d4,[%a12]24
    src->B.SRPN = priority;
800017aa:	54 22       	ld.w %d2,[%a2]
800017ac:	37 32 08 20 	insert %d2,%d2,%d3,0,8
800017b0:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800017b2:	54 22       	ld.w %d2,[%a2]
800017b4:	37 42 82 25 	insert %d2,%d2,%d4,11,2
800017b8:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
800017ba:	54 22       	ld.w %d2,[%a2]
800017bc:	b7 12 81 2c 	insert %d2,%d2,1,25,1
800017c0:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
800017c2:	54 22       	ld.w %d2,[%a2]
800017c4:	b7 12 01 25 	insert %d2,%d2,1,10,1
800017c8:	74 22       	st.w [%a2],%d2
        IfxSrc_enable(srcr);
    }

    /*Configure the comparator ticks to current value to avoid any wrong triggering*/
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset);
800017ca:	39 c5 08 00 	ld.bu %d5,[%a12]8

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800017ce:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
800017d2:	19 d2 2c 00 	ld.w %d2,[%a13]44
800017d6:	8f 06 40 41 	or %d4,%d6,0
800017da:	02 23       	mov %d3,%d2
{
    uint64 now;

    now = IfxStm_get(stm);

    return (uint32)(now >> offset);
800017dc:	8b 05 82 22 	ge %d2,%d5,32
800017e0:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
800017e4:	ab 03 a0 32 	seln %d3,%d2,%d3,0
800017e8:	8f f5 01 21 	and %d2,%d5,31
800017ec:	8b 02 02 51 	rsub %d5,%d2,32
800017f0:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
800017f4:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
800017f8:	54 c2       	ld.w %d2,[%a12]
800017fa:	1b c2 00 20 	addi %d2,%d2,12
800017fe:	06 22       	sh %d2,2
80001800:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001804:	74 23       	st.w [%a2],%d3

    /* clear the interrupt flag of the selected comparator before enabling the interrupt */
    /* this is to avaoid the unneccesary interrupt for the compare match of reset values of the registers */
    IfxStm_clearCompareFlag(stm, config->comparator);
80001806:	54 c4       	ld.w %d4,[%a12]
80001808:	40 d4       	mov.aa %a4,%a13
8000180a:	6d ff 3e ff 	call 80001686 <IfxStm_clearCompareFlag>
    /* enable the interrupt for the selected comparator */
    IfxStm_enableComparatorInterrupt(stm, config->comparator);
8000180e:	54 c4       	ld.w %d4,[%a12]
80001810:	40 d4       	mov.aa %a4,%a13
80001812:	6d ff 51 ff 	call 800016b4 <IfxStm_enableComparatorInterrupt>

    /*Configure the comparator ticks */
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset) + config->ticks;
80001816:	39 c5 08 00 	ld.bu %d5,[%a12]8
    result  = stm->TIM0.U;
8000181a:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
8000181e:	19 d2 2c 00 	ld.w %d2,[%a13]44
80001822:	8f 06 40 41 	or %d4,%d6,0
80001826:	02 23       	mov %d3,%d2
    return (uint32)(now >> offset);
80001828:	8b 05 82 22 	ge %d2,%d5,32
8000182c:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
80001830:	ab 03 a0 32 	seln %d3,%d2,%d3,0
80001834:	8f f5 01 21 	and %d2,%d5,31
80001838:	8b 02 02 51 	rsub %d5,%d2,32
8000183c:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
80001840:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
80001844:	02 34       	mov %d4,%d3
80001846:	19 c3 10 00 	ld.w %d3,[%a12]16
8000184a:	54 c2       	ld.w %d2,[%a12]
8000184c:	42 43       	add %d3,%d4
8000184e:	1b c2 00 20 	addi %d2,%d2,12
80001852:	06 22       	sh %d2,2
80001854:	01 d2 00 d6 	addsc.a %a13,%a13,%d2,0
80001858:	74 d3       	st.w [%a13],%d3

    return result;
}
8000185a:	02 82       	mov %d2,%d8
8000185c:	00 90       	ret 
    else if (config->comparator == 1)
8000185e:	df 14 05 00 	jeq %d4,1,80001868 <IfxStm_initCompare+0x11e>
        result = FALSE;
80001862:	82 08       	mov %d8,0
80001864:	1d ff 8a ff 	j 80001778 <IfxStm_initCompare+0x2e>
        comcon.B.MSIZE1  = config->compareSize;
80001868:	19 54 0c 00 	ld.w %d4,[%a5]12
8000186c:	37 42 05 28 	insert %d2,%d2,%d4,16,5
        comcon.B.MSTART1 = config->compareOffset;
80001870:	19 54 08 00 	ld.w %d4,[%a5]8
80001874:	37 42 05 2c 	insert %d2,%d2,%d4,24,5
        icr.B.CMP1OS     = config->comparatorInterrupt;
80001878:	19 54 04 00 	ld.w %d4,[%a5]4
8000187c:	67 43 06 30 	ins.t %d3,%d3,6,%d4,0
        result           = TRUE;
80001880:	82 18       	mov %d8,1
80001882:	1d ff 7b ff 	j 80001778 <IfxStm_initCompare+0x2e>
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
80001886:	06 32       	sh %d2,3
80001888:	c2 42       	add %d2,4
8000188a:	7b 40 00 4f 	movh %d4,61444
8000188e:	1b 04 49 48 	addi %d4,%d4,-31600
80001892:	60 42       	mov.a %a2,%d4
80001894:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001898:	1d ff 87 ff 	j 800017a6 <IfxStm_initCompare+0x5c>

8000189c <IfxStm_initCompareConfig>:


void IfxStm_initCompareConfig(IfxStm_CompareConfig *config)
{
8000189c:	40 ae       	mov.aa %a14,%sp
    config->comparator          = IfxStm_Comparator_0;
8000189e:	82 02       	mov %d2,0
800018a0:	74 42       	st.w [%a4],%d2
    config->compareOffset       = IfxStm_ComparatorOffset_0;
800018a2:	59 42 08 00 	st.w [%a4]8,%d2
    config->compareSize         = IfxStm_ComparatorSize_32Bits;
800018a6:	3b f0 01 30 	mov %d3,31
800018aa:	59 43 0c 00 	st.w [%a4]12,%d3
    config->comparatorInterrupt = IfxStm_ComparatorInterrupt_ir0;     /*User must select the interrupt output */
800018ae:	59 42 04 00 	st.w [%a4]4,%d2
    config->ticks               = 0xFFFFFFFF;
800018b2:	82 f3       	mov %d3,-1
800018b4:	59 43 10 00 	st.w [%a4]16,%d3
    config->triggerPriority     = 0;
800018b8:	f9 42 14 00 	st.h [%a4]20,%d2
    config->typeOfService       = IfxSrc_Tos_cpu0;
800018bc:	59 42 18 00 	st.w [%a4]24,%d2
}
800018c0:	00 90       	ret 

800018c2 <IfxScuCcu_isOscillatorStable>:
    *cfg = IfxScuCcu_defaultErayPllConfig;
}


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
800018c2:	40 ae       	mov.aa %a14,%sp
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
800018c4:	6d 00 46 04 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
800018c8:	02 28       	mov %d8,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800018ca:	91 30 00 2f 	movh.a %a2,61443
800018ce:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
800018d2:	54 23       	ld.w %d3,[%a2]
800018d4:	8f 03 c6 31 	andn %d3,%d3,96
800018d8:	74 23       	st.w [%a2],%d3

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
800018da:	91 00 00 36 	movh.a %a3,24576
800018de:	19 33 18 00 	ld.w %d3,[%a3]24 <60000018 <IfxScuCcu_xtalFrequency>>
800018e2:	7b 00 b6 26 	movh %d2,27488
800018e6:	1b b2 a6 2c 	addi %d2,%d2,-13717
800018ea:	73 23 68 20 	mul.u %e2,%d3,%d2
800018ee:	8f c3 1e 20 	sh %d2,%d3,-20
800018f2:	c2 f2       	add %d2,-1
800018f4:	54 23       	ld.w %d3,[%a2]
800018f6:	37 23 05 38 	insert %d3,%d3,%d2,16,5
800018fa:	74 23       	st.w [%a2],%d3

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
800018fc:	54 23       	ld.w %d3,[%a2]
800018fe:	b7 13 01 31 	insert %d3,%d3,1,2,1
80001902:	74 23       	st.w [%a2],%d3
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
80001904:	3b 00 28 30 	mov %d3,640

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80001908:	1d 00 05 00 	j 80001912 <IfxScuCcu_isOscillatorStable+0x50>
    {
        TimeoutCtr--;
8000190c:	c2 f3       	add %d3,-1

        if (TimeoutCtr == 0)
8000190e:	df 03 25 00 	jeq %d3,0,80001958 <IfxScuCcu_isOscillatorStable+0x96>
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80001912:	91 30 00 2f 	movh.a %a2,61443
80001916:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
8000191a:	54 25       	ld.w %d5,[%a2]
8000191c:	6f 15 f8 7f 	jz.t %d5,1,8000190c <IfxScuCcu_isOscillatorStable+0x4a>
80001920:	54 25       	ld.w %d5,[%a2]
80001922:	6f 85 f5 7f 	jz.t %d5,8,8000190c <IfxScuCcu_isOscillatorStable+0x4a>
    boolean status     = 0;
80001926:	82 09       	mov %d9,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80001928:	02 84       	mov %d4,%d8
8000192a:	6d 00 aa 02 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000192e:	91 30 00 2f 	movh.a %a2,61443
80001932:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80001936:	54 23       	ld.w %d3,[%a2]
80001938:	b7 13 81 31 	insert %d3,%d3,1,3,1
8000193c:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000193e:	91 30 00 2f 	movh.a %a2,61443
80001942:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001946:	54 23       	ld.w %d3,[%a2]
80001948:	b7 13 81 31 	insert %d3,%d3,1,3,1
8000194c:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinitPw);
8000194e:	02 84       	mov %d4,%d8
80001950:	6d 00 1d 04 	call 8000218a <IfxScuWdt_setCpuEndinit>
    }

    return status;
}
80001954:	02 92       	mov %d2,%d9
80001956:	00 90       	ret 
            status = 1;
80001958:	82 19       	mov %d9,1
8000195a:	1d ff e7 ff 	j 80001928 <IfxScuCcu_isOscillatorStable+0x66>

8000195e <IfxScuCcu_getOscFrequency>:
{
8000195e:	40 ae       	mov.aa %a14,%sp
    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80001960:	91 30 00 2f 	movh.a %a2,61443
80001964:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001968:	54 22       	ld.w %d2,[%a2]
8000196a:	37 02 62 2e 	extr.u %d2,%d2,28,2
8000196e:	df 02 10 00 	jeq %d2,0,8000198e <IfxScuCcu_getOscFrequency+0x30>
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80001972:	54 22       	ld.w %d2,[%a2]
80001974:	37 02 62 2e 	extr.u %d2,%d2,28,2
80001978:	df 12 04 00 	jeq %d2,1,80001980 <IfxScuCcu_getOscFrequency+0x22>
        freq = 0.0f;
8000197c:	82 02       	mov %d2,0
}
8000197e:	00 90       	ret 
        freq = (float32)IfxScuCcu_xtalFrequency;
80001980:	91 00 00 26 	movh.a %a2,24576
80001984:	19 22 18 00 	ld.w %d2,[%a2]24 <60000018 <IfxScuCcu_xtalFrequency>>
80001988:	4b 02 61 21 	utof %d2,%d2
8000198c:	00 90       	ret 
        freq = IFXSCU_EVR_OSC_FREQUENCY;
8000198e:	7b f0 cb 24 	movh %d2,19647
80001992:	1b 02 c2 2b 	addi %d2,%d2,-17376
80001996:	00 90       	ret 

80001998 <IfxScuCcu_getPllFrequency>:
{
80001998:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
8000199a:	6d ff e2 ff 	call 8000195e <IfxScuCcu_getOscFrequency>
8000199e:	02 24       	mov %d4,%d2
    if (scu->PLLSTAT.B.VCOBYST == 1)
800019a0:	91 30 00 2f 	movh.a %a2,61443
800019a4:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800019a8:	19 23 14 00 	ld.w %d3,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
800019ac:	6f 03 27 80 	jnz.t %d3,0,800019fa <IfxScuCcu_getPllFrequency+0x62>
    else if (scu->PLLSTAT.B.FINDIS == 1)
800019b0:	91 30 00 2f 	movh.a %a2,61443
800019b4:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800019b8:	19 22 14 00 	ld.w %d2,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
800019bc:	6f 32 2d 80 	jnz.t %d2,3,80001a16 <IfxScuCcu_getPllFrequency+0x7e>
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
800019c0:	91 30 00 2f 	movh.a %a2,61443
800019c4:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800019c8:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
800019cc:	37 02 e7 24 	extr.u %d2,%d2,9,7
800019d0:	c2 12       	add %d2,1
800019d2:	4b 02 41 21 	itof %d2,%d2
800019d6:	4b 42 41 30 	mul.f %d3,%d2,%d4
800019da:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
800019de:	8f f4 07 41 	and %d4,%d4,127
800019e2:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
800019e6:	37 02 64 2c 	extr.u %d2,%d2,24,4
800019ea:	c2 12       	add %d2,1
800019ec:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
800019f0:	4b 02 41 21 	itof %d2,%d2
800019f4:	4b 23 51 20 	div.f %d2,%d3,%d2
}
800019f8:	00 90       	ret 
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
800019fa:	91 30 00 2f 	movh.a %a2,61443
800019fe:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001a02:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001a06:	37 02 67 28 	extr.u %d2,%d2,16,7
80001a0a:	c2 12       	add %d2,1
80001a0c:	4b 02 41 21 	itof %d2,%d2
80001a10:	4b 24 51 20 	div.f %d2,%d4,%d2
80001a14:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80001a16:	91 30 00 2f 	movh.a %a2,61443
80001a1a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001a1e:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001a22:	8f f4 07 41 	and %d4,%d4,127
80001a26:	c2 14       	add %d4,1
80001a28:	6d 00 c3 1b 	call 800051ae <__floatsidf>
80001a2c:	0b 23 10 68 	mov %e6,%d3,%d2
80001a30:	82 04       	mov %d4,0
80001a32:	7b 80 19 54 	movh %d5,16792
80001a36:	1b 45 78 5d 	addi %d5,%d5,-10364
80001a3a:	6d 00 12 1b 	call 8000505e <__divdf3>
80001a3e:	0b 23 10 48 	mov %e4,%d3,%d2
80001a42:	6d 00 01 1c 	call 80005244 <__truncdfsf2>
80001a46:	00 90       	ret 

80001a48 <IfxScuCcu_getSourceFrequency>:
{
80001a48:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON0.B.CLKSEL)
80001a4a:	91 30 00 2f 	movh.a %a2,61443
80001a4e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001a52:	54 22       	ld.w %d2,[%a2]
80001a54:	37 02 62 2e 	extr.u %d2,%d2,28,2
80001a58:	df 02 07 00 	jeq %d2,0,80001a66 <IfxScuCcu_getSourceFrequency+0x1e>
80001a5c:	df 12 0a 80 	jne %d2,1,80001a70 <IfxScuCcu_getSourceFrequency+0x28>
        sourcefreq = IfxScuCcu_getPllFrequency();
80001a60:	6d ff 9c ff 	call 80001998 <IfxScuCcu_getPllFrequency>
        break;
80001a64:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
80001a66:	7b f0 cb 24 	movh %d2,19647
80001a6a:	1b 02 c2 2b 	addi %d2,%d2,-17376
80001a6e:	00 90       	ret 
        sourcefreq = 0;
80001a70:	82 02       	mov %d2,0
}
80001a72:	00 90       	ret 

80001a74 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80001a74:	40 ae       	mov.aa %a14,%sp
80001a76:	02 48       	mov %d8,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80001a78:	6d ff e8 ff 	call 80001a48 <IfxScuCcu_getSourceFrequency>
80001a7c:	91 30 00 2f 	movh.a %a2,61443
80001a80:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001a84:	54 23       	ld.w %d3,[%a2]
80001a86:	37 03 64 34 	extr.u %d3,%d3,8,4
80001a8a:	4b 03 41 31 	itof %d3,%d3
80001a8e:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80001a92:	4b 28 41 40 	mul.f %d4,%d8,%d2
80001a96:	4b 04 71 41 	ftouz %d4,%d4
    uint32 stmCountBegin = STM0_TIM0.U;
80001a9a:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80001a9e:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80001aa2:	a2 32       	sub %d2,%d3
80001aa4:	3f 42 fd ff 	jlt.u %d2,%d4,80001a9e <IfxScuCcu_wait+0x2a>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80001aa8:	00 90       	ret 
	...

80001aac <IfxScuCcu_getSpbFrequency>:
{
80001aac:	40 ae       	mov.aa %a14,%sp
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80001aae:	6d ff cd ff 	call 80001a48 <IfxScuCcu_getSourceFrequency>
    switch (SCU_CCUCON0.B.LPDIV)
80001ab2:	91 30 00 2f 	movh.a %a2,61443
80001ab6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001aba:	54 23       	ld.w %d3,[%a2]
80001abc:	37 03 64 36 	extr.u %d3,%d3,12,4
80001ac0:	ff 53 39 80 	jge.u %d3,5,80001b32 <IfxScuCcu_getSpbFrequency+0x86>
80001ac4:	91 00 00 28 	movh.a %a2,32768
80001ac8:	d9 22 94 b1 	lea %a2,[%a2]6868 <80001ad4 <IfxScuCcu_getSpbFrequency+0x28>>
80001acc:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
80001ad0:	dc 02       	ji %a2
80001ad2:	00 00       	nop 
80001ad4:	1d 00 0a 00 	j 80001ae8 <IfxScuCcu_getSpbFrequency+0x3c>
80001ad8:	1d 00 19 00 	j 80001b0a <IfxScuCcu_getSpbFrequency+0x5e>
80001adc:	1d 00 1c 00 	j 80001b14 <IfxScuCcu_getSpbFrequency+0x68>
80001ae0:	1d 00 1f 00 	j 80001b1e <IfxScuCcu_getSpbFrequency+0x72>
80001ae4:	1d 00 22 00 	j 80001b28 <IfxScuCcu_getSpbFrequency+0x7c>
        if (SCU_CCUCON0.B.SPBDIV == 0)
80001ae8:	91 30 00 2f 	movh.a %a2,61443
80001aec:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001af0:	54 23       	ld.w %d3,[%a2]
80001af2:	37 03 64 38 	extr.u %d3,%d3,16,4
80001af6:	df 03 20 00 	jeq %d3,0,80001b36 <IfxScuCcu_getSpbFrequency+0x8a>
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
80001afa:	54 23       	ld.w %d3,[%a2]
80001afc:	37 03 64 38 	extr.u %d3,%d3,16,4
80001b00:	4b 03 41 31 	itof %d3,%d3
80001b04:	4b 32 51 20 	div.f %d2,%d2,%d3
80001b08:	00 90       	ret 
        spbFrequency = sourceFrequency / 30;
80001b0a:	7b 00 1f 34 	movh %d3,16880
80001b0e:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001b12:	00 90       	ret 
        spbFrequency = sourceFrequency / 60;
80001b14:	7b 00 27 34 	movh %d3,17008
80001b18:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001b1c:	00 90       	ret 
        spbFrequency = sourceFrequency / 120;
80001b1e:	7b 00 2f 34 	movh %d3,17136
80001b22:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001b26:	00 90       	ret 
        spbFrequency = sourceFrequency / 240;
80001b28:	7b 00 37 34 	movh %d3,17264
80001b2c:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001b30:	00 90       	ret 
    switch (SCU_CCUCON0.B.LPDIV)
80001b32:	82 02       	mov %d2,0
80001b34:	00 90       	ret 
            spbFrequency = 0.0f;
80001b36:	82 02       	mov %d2,0
}
80001b38:	00 90       	ret 

80001b3a <IfxScuCcu_getSpbFrequency_end>:
	...

80001b3c <IfxScuCcu_init>:
{
80001b3c:	40 ae       	mov.aa %a14,%sp
80001b3e:	40 4c       	mov.aa %a12,%a4
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80001b40:	19 42 10 10 	ld.w %d2,[%a4]80
80001b44:	91 00 00 26 	movh.a %a2,24576
80001b48:	59 22 18 00 	st.w [%a2]24 <60000018 <IfxScuCcu_xtalFrequency>>,%d2
    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80001b4c:	6d 00 02 03 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80001b50:	02 2a       	mov %d10,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
80001b52:	6d 00 11 03 	call 80002174 <IfxScuWdt_getSafetyWatchdogPassword>
80001b56:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80001b58:	02 a4       	mov %d4,%d10
80001b5a:	6d 00 92 01 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80001b5e:	91 30 00 2f 	movh.a %a2,61443
80001b62:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001b66:	54 2d       	ld.w %d13,[%a2]
80001b68:	37 0d e1 d1 	extr.u %d13,%d13,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
80001b6c:	54 22       	ld.w %d2,[%a2]
80001b6e:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001b72:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80001b74:	02 a4       	mov %d4,%d10
80001b76:	6d 00 0a 03 	call 8000218a <IfxScuWdt_setCpuEndinit>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001b7a:	02 84       	mov %d4,%d8
80001b7c:	6d 00 a6 01 	call 80001ec8 <IfxScuWdt_clearSafetyEndinit>
        while (SCU_CCUCON0.B.LCK != 0U)
80001b80:	91 30 00 2f 	movh.a %a2,61443
80001b84:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001b88:	54 23       	ld.w %d3,[%a2]
80001b8a:	bf 03 fb 7f 	jlt %d3,0,80001b80 <IfxScuCcu_init+0x44>
        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80001b8e:	54 22       	ld.w %d2,[%a2]
80001b90:	b7 02 02 2e 	insert %d2,%d2,0,28,2
80001b94:	74 22       	st.w [%a2],%d2
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80001b96:	54 22       	ld.w %d2,[%a2]
80001b98:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80001b9c:	74 22       	st.w [%a2],%d2
        SCU_PLLCON0.B.SETFINDIS = 1;
80001b9e:	91 30 00 2f 	movh.a %a2,61443
80001ba2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001ba6:	54 22       	ld.w %d2,[%a2]
80001ba8:	b7 12 01 22 	insert %d2,%d2,1,4,1
80001bac:	74 22       	st.w [%a2],%d2
        while (SCU_CCUCON1.B.LCK != 0U)
80001bae:	91 30 00 2f 	movh.a %a2,61443
80001bb2:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001bb6:	54 23       	ld.w %d3,[%a2]
80001bb8:	bf 03 fb 7f 	jlt %d3,0,80001bae <IfxScuCcu_init+0x72>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80001bbc:	54 22       	ld.w %d2,[%a2]
80001bbe:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80001bc2:	74 22       	st.w [%a2],%d2
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80001bc4:	54 22       	ld.w %d2,[%a2]
80001bc6:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80001bca:	74 22       	st.w [%a2],%d2
        status             |= IfxScuCcu_isOscillatorStable();
80001bcc:	6d ff 7b fe 	call 800018c2 <IfxScuCcu_isOscillatorStable>
80001bd0:	02 2c       	mov %d12,%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001bd2:	02 84       	mov %d4,%d8
80001bd4:	6d 00 00 03 	call 800021d4 <IfxScuWdt_setSafetyEndinit>
    if (status == 0)
80001bd8:	df 0c 28 00 	jeq %d12,0,80001c28 <IfxScuCcu_init+0xec>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001bdc:	02 84       	mov %d4,%d8
80001bde:	6d 00 75 01 	call 80001ec8 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80001be2:	91 30 00 2f 	movh.a %a2,61443
80001be6:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001bea:	54 23       	ld.w %d3,[%a2]
80001bec:	8f 03 c4 31 	andn %d3,%d3,64
80001bf0:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001bf2:	02 84       	mov %d4,%d8
80001bf4:	6d 00 f0 02 	call 800021d4 <IfxScuWdt_setSafetyEndinit>
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80001bf8:	02 a4       	mov %d4,%d10
80001bfa:	6d 00 42 01 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80001bfe:	91 30 00 2f 	movh.a %a2,61443
80001c02:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80001c06:	54 23       	ld.w %d3,[%a2]
80001c08:	b7 13 81 31 	insert %d3,%d3,1,3,1
80001c0c:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80001c0e:	91 30 00 2f 	movh.a %a2,61443
80001c12:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001c16:	54 23       	ld.w %d3,[%a2]
80001c18:	67 d3 03 30 	ins.t %d3,%d3,3,%d13,0
80001c1c:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinit_pw);
80001c1e:	02 a4       	mov %d4,%d10
80001c20:	6d 00 b5 02 	call 8000218a <IfxScuWdt_setCpuEndinit>
}
80001c24:	02 c2       	mov %d2,%d12
80001c26:	00 90       	ret 
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001c28:	02 84       	mov %d4,%d8
80001c2a:	6d 00 4f 01 	call 80001ec8 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80001c2e:	91 30 00 2f 	movh.a %a2,61443
80001c32:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001c36:	54 23       	ld.w %d3,[%a2]
80001c38:	6f 53 fb 7f 	jz.t %d3,5,80001c2e <IfxScuCcu_init+0xf2>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80001c3c:	39 c3 0a 00 	ld.bu %d3,[%a12]10
80001c40:	91 30 00 2f 	movh.a %a2,61443
80001c44:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80001c48:	54 22       	ld.w %d2,[%a2]
80001c4a:	37 32 07 20 	insert %d2,%d2,%d3,0,7
80001c4e:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80001c50:	39 c3 08 00 	ld.bu %d3,[%a12]8
80001c54:	91 30 00 2f 	movh.a %a2,61443
80001c58:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001c5c:	54 22       	ld.w %d2,[%a2]
80001c5e:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
80001c62:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
80001c64:	39 c3 09 00 	ld.bu %d3,[%a12]9
80001c68:	54 22       	ld.w %d2,[%a2]
80001c6a:	37 32 87 24 	insert %d2,%d2,%d3,9,7
80001c6e:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80001c70:	54 22       	ld.w %d2,[%a2]
80001c72:	b7 12 01 23 	insert %d2,%d2,1,6,1
80001c76:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
80001c78:	54 22       	ld.w %d2,[%a2]
80001c7a:	b7 02 01 28 	insert %d2,%d2,0,16,1
80001c7e:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80001c80:	54 22       	ld.w %d2,[%a2]
80001c82:	b7 12 81 22 	insert %d2,%d2,1,5,1
80001c86:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80001c88:	54 22       	ld.w %d2,[%a2]
80001c8a:	b7 12 01 28 	insert %d2,%d2,1,16,1
80001c8e:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.RESLD = 1;
80001c90:	54 22       	ld.w %d2,[%a2]
80001c92:	b7 12 01 29 	insert %d2,%d2,1,18,1
80001c96:	74 22       	st.w [%a2],%d2
                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80001c98:	7b 20 85 43 	movh %d4,14418
80001c9c:	1b 74 71 4b 	addi %d4,%d4,-18665
80001ca0:	6d ff ea fe 	call 80001a74 <IfxScuCcu_wait>
                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
80001ca4:	91 30 00 2f 	movh.a %a2,61443
80001ca8:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001cac:	54 23       	ld.w %d3,[%a2]
80001cae:	6f 23 fb 7f 	jz.t %d3,2,80001ca4 <IfxScuCcu_init+0x168>
                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80001cb2:	91 30 00 2f 	movh.a %a2,61443
80001cb6:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001cba:	54 22       	ld.w %d2,[%a2]
80001cbc:	8f 12 c0 21 	andn %d2,%d2,1
80001cc0:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80001cc2:	91 30 00 2f 	movh.a %a2,61443
80001cc6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001cca:	54 23       	ld.w %d3,[%a2]
80001ccc:	bf 03 fb 7f 	jlt %d3,0,80001cc2 <IfxScuCcu_init+0x186>
                    SCU_CCUCON0.B.CLKSEL = 0x01;
80001cd0:	54 22       	ld.w %d2,[%a2]
80001cd2:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80001cd6:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80001cd8:	91 30 00 2f 	movh.a %a2,61443
80001cdc:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001ce0:	54 23       	ld.w %d3,[%a2]
80001ce2:	bf 03 fb 7f 	jlt %d3,0,80001cd8 <IfxScuCcu_init+0x19c>
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80001ce6:	19 c4 0c 00 	ld.w %d4,[%a12]12
80001cea:	6d ff c5 fe 	call 80001a74 <IfxScuCcu_wait>
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80001cee:	91 30 00 2f 	movh.a %a2,61443
80001cf2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001cf6:	54 23       	ld.w %d3,[%a2]
80001cf8:	19 c4 14 00 	ld.w %d4,[%a12]20 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001cfc:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80001d00:	19 c2 10 00 	ld.w %d2,[%a12]16
80001d04:	26 42       	and %d2,%d4
80001d06:	a6 23       	or %d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80001d08:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon0.B.UP     = 1;
80001d0c:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80001d10:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON1.B.LCK != 0U)
80001d12:	91 30 00 2f 	movh.a %a2,61443
80001d16:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001d1a:	54 23       	ld.w %d3,[%a2]
80001d1c:	bf 03 fb 7f 	jlt %d3,0,80001d12 <IfxScuCcu_init+0x1d6>
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80001d20:	54 23       	ld.w %d3,[%a2]
80001d22:	19 c4 1c 00 	ld.w %d4,[%a12]28
80001d26:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80001d2a:	19 c2 18 00 	ld.w %d2,[%a12]24
80001d2e:	26 42       	and %d2,%d4
80001d30:	a6 23       	or %d3,%d2
                        ccucon1.B.INSEL = 1;
80001d32:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon1.B.UP    = 1;
80001d36:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON1     = ccucon1;
80001d3a:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON2.B.LCK != 0U)
80001d3c:	91 30 00 2f 	movh.a %a2,61443
80001d40:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x6002e040>>
80001d44:	54 23       	ld.w %d3,[%a2]
80001d46:	bf 03 fb 7f 	jlt %d3,0,80001d3c <IfxScuCcu_init+0x200>
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80001d4a:	54 23       	ld.w %d3,[%a2]
80001d4c:	19 c4 24 00 	ld.w %d4,[%a12]36
80001d50:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80001d54:	19 c2 20 00 	ld.w %d2,[%a12]32
80001d58:	26 42       	and %d2,%d4
80001d5a:	a6 32       	or %d2,%d3
                        ccucon2.B.UP = 1;
80001d5c:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON2  = ccucon2;
80001d60:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON5.B.LCK != 0U)
80001d62:	91 30 00 2f 	movh.a %a2,61443
80001d66:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
80001d6a:	54 23       	ld.w %d3,[%a2]
80001d6c:	bf 03 fb 7f 	jlt %d3,0,80001d62 <IfxScuCcu_init+0x226>
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80001d70:	54 23       	ld.w %d3,[%a2]
80001d72:	19 c4 2c 00 	ld.w %d4,[%a12]44
80001d76:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80001d7a:	19 c2 28 00 	ld.w %d2,[%a12]40
80001d7e:	26 42       	and %d2,%d4
80001d80:	a6 32       	or %d2,%d3
                        ccucon5.B.UP = 1;
80001d82:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON5  = ccucon5;
80001d86:	74 22       	st.w [%a2],%d2
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80001d88:	91 30 00 2f 	movh.a %a2,61443
80001d8c:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x6002e080>>
80001d90:	54 23       	ld.w %d3,[%a2]
80001d92:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036080 <_SMALL_DATA4_+0x6002e080>>
80001d96:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80001d9a:	19 c2 30 00 	ld.w %d2,[%a12]48
80001d9e:	26 42       	and %d2,%d4
80001da0:	a6 32       	or %d2,%d3
                        SCU_CCUCON6 = ccucon6;
80001da2:	74 22       	st.w [%a2],%d2
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80001da4:	91 30 00 2f 	movh.a %a2,61443
80001da8:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x6002e084>>
80001dac:	54 23       	ld.w %d3,[%a2]
80001dae:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f0036084 <_SMALL_DATA4_+0x6002e084>>
80001db2:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80001db6:	19 c2 38 00 	ld.w %d2,[%a12]56
80001dba:	26 42       	and %d2,%d4
80001dbc:	a6 32       	or %d2,%d3
                        SCU_CCUCON7 = ccucon7;
80001dbe:	74 22       	st.w [%a2],%d2
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80001dc0:	91 30 00 2f 	movh.a %a2,61443
80001dc4:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80001dc8:	54 23       	ld.w %d3,[%a2]
80001dca:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80001dce:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80001dd2:	19 c2 00 10 	ld.w %d2,[%a12]64
80001dd6:	26 42       	and %d2,%d4
80001dd8:	a6 32       	or %d2,%d3
                        SCU_CCUCON8 = ccucon8;
80001dda:	74 22       	st.w [%a2],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001ddc:	02 84       	mov %d4,%d8
80001dde:	6d 00 fb 01 	call 800021d4 <IfxScuWdt_setSafetyEndinit>
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80001de2:	91 00 80 df 	movh.a %a13,63488
80001de6:	d9 dd 14 02 	lea %a13,[%a13]8212 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80001dea:	54 d9       	ld.w %d9,[%a13]
80001dec:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80001df0:	0f 49 e0 90 	andn %d9,%d9,%d4
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80001df4:	19 c2 08 10 	ld.w %d2,[%a12]72
80001df8:	26 42       	and %d2,%d4
80001dfa:	a6 29       	or %d9,%d2
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80001dfc:	02 a4       	mov %d4,%d10
80001dfe:	6d 00 40 00 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80001e02:	74 d9       	st.w [%a13],%d9
                IfxScuWdt_setCpuEndinit(endinit_pw);
80001e04:	02 a4       	mov %d4,%d10
80001e06:	6d 00 c2 01 	call 8000218a <IfxScuWdt_setCpuEndinit>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80001e0a:	02 c9       	mov %d9,%d12
80001e0c:	1d 00 0d 00 	j 80001e26 <IfxScuCcu_init+0x2ea>
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80001e10:	99 c2 04 00 	ld.a %a2,[%a12]4
80001e14:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001e18:	19 24 04 00 	ld.w %d4,[%a2]4
80001e1c:	6d ff 2c fe 	call 80001a74 <IfxScuCcu_wait>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80001e20:	c2 19       	add %d9,1
80001e22:	8f f9 0f 91 	and %d9,%d9,255
80001e26:	14 c3       	ld.bu %d3,[%a12]
80001e28:	7f 39 da fe 	jge.u %d9,%d3,80001bdc <IfxScuCcu_init+0xa0>
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001e2c:	02 84       	mov %d4,%d8
80001e2e:	6d 00 4d 00 	call 80001ec8 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80001e32:	91 30 00 2f 	movh.a %a2,61443
80001e36:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001e3a:	54 23       	ld.w %d3,[%a2]
80001e3c:	6f 53 fb 7f 	jz.t %d3,5,80001e32 <IfxScuCcu_init+0x2f6>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80001e40:	53 c9 20 b0 	mul %d11,%d9,12
80001e44:	99 c2 04 00 	ld.a %a2,[%a12]4
80001e48:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001e4c:	14 24       	ld.bu %d4,[%a2]
80001e4e:	91 30 00 2f 	movh.a %a2,61443
80001e52:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80001e56:	54 23       	ld.w %d3,[%a2]
80001e58:	37 43 07 30 	insert %d3,%d3,%d4,0,7
80001e5c:	74 23       	st.w [%a2],%d3
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001e5e:	02 84       	mov %d4,%d8
80001e60:	6d 00 ba 01 	call 800021d4 <IfxScuWdt_setSafetyEndinit>
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
80001e64:	99 c2 04 00 	ld.a %a2,[%a12]4
80001e68:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001e6c:	d9 22 08 00 	lea %a2,[%a2]8
80001e70:	d4 22       	ld.a %a2,[%a2]
80001e72:	bd 02 cf 7f 	jz.a %a2,80001e10 <IfxScuCcu_init+0x2d4>
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
80001e76:	2d 02 00 00 	calli %a2
80001e7a:	1d ff cb ff 	j 80001e10 <IfxScuCcu_init+0x2d4>

80001e7e <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
80001e7e:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001e80:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001e84:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80001e88:	7b 30 00 3f 	movh %d3,61443
80001e8c:	1b 03 10 36 	addi %d3,%d3,24832
80001e90:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001e94:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001e96:	54 22       	ld.w %d2,[%a2]
80001e98:	6f 12 0b 00 	jz.t %d2,1,80001eae <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e9c:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001ea0:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001ea4:	54 22       	ld.w %d2,[%a2]
80001ea6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001eaa:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001eac:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001eae:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001eb2:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001eb6:	54 22       	ld.w %d2,[%a2]
80001eb8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ebc:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ebe:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80001ec0:	54 22       	ld.w %d2,[%a2]
80001ec2:	6f 02 ff ff 	jnz.t %d2,0,80001ec0 <IfxScuWdt_clearCpuEndinit+0x42>
}
80001ec6:	00 90       	ret 

80001ec8 <IfxScuWdt_clearSafetyEndinit>:


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
80001ec8:	40 ae       	mov.aa %a14,%sp
80001eca:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001ece:	91 30 00 2f 	movh.a %a2,61443
80001ed2:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001ed6:	54 22       	ld.w %d2,[%a2]
80001ed8:	6f 12 0b 00 	jz.t %d2,1,80001eee <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001edc:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001ee0:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001ee4:	54 22       	ld.w %d2,[%a2]
80001ee6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001eea:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001eec:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001eee:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001ef2:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001ef6:	91 30 00 2f 	movh.a %a2,61443
80001efa:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001efe:	54 22       	ld.w %d2,[%a2]
80001f00:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001f04:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001f06:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001f08:	91 30 00 2f 	movh.a %a2,61443
80001f0c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001f10:	54 22       	ld.w %d2,[%a2]
80001f12:	6f 02 fb ff 	jnz.t %d2,0,80001f08 <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80001f16:	00 90       	ret 

80001f18 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80001f18:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001f1a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001f1e:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80001f22:	7b 30 00 3f 	movh %d3,61443
80001f26:	1b 03 10 36 	addi %d3,%d3,24832
80001f2a:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001f2e:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001f30:	54 22       	ld.w %d2,[%a2]
80001f32:	6f 12 0b 00 	jz.t %d2,1,80001f48 <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001f36:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001f3a:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001f3e:	54 22       	ld.w %d2,[%a2]
80001f40:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001f44:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001f46:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001f48:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001f4a:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001f4e:	54 22       	ld.w %d2,[%a2]
80001f50:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001f54:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001f56:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001f58:	54 22       	ld.w %d2,[%a2]
80001f5a:	6f 02 ff ff 	jnz.t %d2,0,80001f58 <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80001f5e:	d9 23 04 00 	lea %a3,[%a2]4
80001f62:	19 22 04 00 	ld.w %d2,[%a2]4
80001f66:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001f6a:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001f6c:	54 22       	ld.w %d2,[%a2]
80001f6e:	6f 12 09 00 	jz.t %d2,1,80001f80 <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001f72:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001f76:	54 22       	ld.w %d2,[%a2]
80001f78:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001f7c:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001f7e:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001f80:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001f84:	54 22       	ld.w %d2,[%a2]
80001f86:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001f8a:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001f8c:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80001f8e:	54 22       	ld.w %d2,[%a2]
80001f90:	6f 02 ff 7f 	jz.t %d2,0,80001f8e <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80001f94:	00 90       	ret 

80001f96 <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
80001f96:	40 ae       	mov.aa %a14,%sp
80001f98:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001f9c:	91 30 00 2f 	movh.a %a2,61443
80001fa0:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001fa4:	54 22       	ld.w %d2,[%a2]
80001fa6:	6f 12 0b 00 	jz.t %d2,1,80001fbc <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001faa:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001fae:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001fb2:	54 22       	ld.w %d2,[%a2]
80001fb4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001fb8:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001fba:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001fbc:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001fbe:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001fc2:	91 30 00 2f 	movh.a %a2,61443
80001fc6:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001fca:	54 22       	ld.w %d2,[%a2]
80001fcc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001fd0:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001fd2:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001fd4:	91 30 00 2f 	movh.a %a2,61443
80001fd8:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001fdc:	54 22       	ld.w %d2,[%a2]
80001fde:	6f 02 fb ff 	jnz.t %d2,0,80001fd4 <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80001fe2:	91 30 00 2f 	movh.a %a2,61443
80001fe6:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80001fea:	54 22       	ld.w %d2,[%a2]
80001fec:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001ff0:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001ff2:	91 30 00 2f 	movh.a %a2,61443
80001ff6:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001ffa:	54 22       	ld.w %d2,[%a2]
80001ffc:	6f 12 09 00 	jz.t %d2,1,8000200e <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002000:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002004:	54 22       	ld.w %d2,[%a2]
80002006:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000200a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000200c:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000200e:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002012:	91 30 00 2f 	movh.a %a2,61443
80002016:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000201a:	54 22       	ld.w %d2,[%a2]
8000201c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002020:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002022:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002024:	91 30 00 2f 	movh.a %a2,61443
80002028:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000202c:	54 22       	ld.w %d2,[%a2]
8000202e:	6f 02 fb 7f 	jz.t %d2,0,80002024 <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80002032:	00 90       	ret 

80002034 <IfxScuWdt_enableCpuWatchdog>:


void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
80002034:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80002036:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000203a:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000203e:	7b 30 00 3f 	movh %d3,61443
80002042:	1b 03 10 36 	addi %d3,%d3,24832
80002046:	13 c2 20 23 	madd %d2,%d3,%d2,12
8000204a:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
8000204c:	54 22       	ld.w %d2,[%a2]
8000204e:	6f 12 0b 00 	jz.t %d2,1,80002064 <IfxScuWdt_enableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002052:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002056:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000205a:	54 22       	ld.w %d2,[%a2]
8000205c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002060:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002062:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002064:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002066:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000206a:	54 22       	ld.w %d2,[%a2]
8000206c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002070:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002072:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80002074:	54 22       	ld.w %d2,[%a2]
80002076:	6f 02 ff ff 	jnz.t %d2,0,80002074 <IfxScuWdt_enableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
8000207a:	d9 23 04 00 	lea %a3,[%a2]4
8000207e:	19 22 04 00 	ld.w %d2,[%a2]4
80002082:	8f 82 c0 21 	andn %d2,%d2,8
80002086:	74 32       	st.w [%a3],%d2
    if (watchdog->CON0.B.LCK)
80002088:	54 22       	ld.w %d2,[%a2]
8000208a:	6f 12 09 00 	jz.t %d2,1,8000209c <IfxScuWdt_enableCpuWatchdog+0x68>
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000208e:	8f 14 40 31 	or %d3,%d4,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002092:	54 22       	ld.w %d2,[%a2]
80002094:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002098:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000209a:	74 22       	st.w [%a2],%d2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000209c:	8f 34 40 41 	or %d4,%d4,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800020a0:	54 22       	ld.w %d2,[%a2]
800020a2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800020a6:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800020a8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800020aa:	54 22       	ld.w %d2,[%a2]
800020ac:	6f 02 ff 7f 	jz.t %d2,0,800020aa <IfxScuWdt_enableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800020b0:	00 90       	ret 

800020b2 <IfxScuWdt_enableSafetyWatchdog>:


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
800020b2:	40 ae       	mov.aa %a14,%sp
800020b4:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
800020b8:	91 30 00 2f 	movh.a %a2,61443
800020bc:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800020c0:	54 22       	ld.w %d2,[%a2]
800020c2:	6f 12 0b 00 	jz.t %d2,1,800020d8 <IfxScuWdt_enableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800020c6:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800020ca:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800020ce:	54 22       	ld.w %d2,[%a2]
800020d0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800020d4:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800020d6:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800020d8:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800020da:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800020de:	91 30 00 2f 	movh.a %a2,61443
800020e2:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800020e6:	54 22       	ld.w %d2,[%a2]
800020e8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800020ec:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800020ee:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800020f0:	91 30 00 2f 	movh.a %a2,61443
800020f4:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800020f8:	54 22       	ld.w %d2,[%a2]
800020fa:	6f 02 fb ff 	jnz.t %d2,0,800020f0 <IfxScuWdt_enableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
800020fe:	91 30 00 2f 	movh.a %a2,61443
80002102:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80002106:	54 22       	ld.w %d2,[%a2]
80002108:	8f 82 c0 21 	andn %d2,%d2,8
8000210c:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
8000210e:	91 30 00 2f 	movh.a %a2,61443
80002112:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002116:	54 22       	ld.w %d2,[%a2]
80002118:	6f 12 09 00 	jz.t %d2,1,8000212a <IfxScuWdt_enableSafetyWatchdog+0x78>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000211c:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002120:	54 22       	ld.w %d2,[%a2]
80002122:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002126:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002128:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000212a:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000212e:	91 30 00 2f 	movh.a %a2,61443
80002132:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002136:	54 22       	ld.w %d2,[%a2]
80002138:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000213c:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000213e:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002140:	91 30 00 2f 	movh.a %a2,61443
80002144:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002148:	54 22       	ld.w %d2,[%a2]
8000214a:	6f 02 fb 7f 	jz.t %d2,0,80002140 <IfxScuWdt_enableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
8000214e:	00 90       	ret 

80002150 <IfxScuWdt_getCpuWatchdogPassword>:


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
80002150:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80002152:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80002156:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8000215a:	7b 30 00 3f 	movh %d3,61443
8000215e:	1b 03 10 36 	addi %d3,%d3,24832
80002162:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
80002166:	60 22       	mov.a %a2,%d2
80002168:	54 22       	ld.w %d2,[%a2]
8000216a:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
8000216e:	8f f2 83 21 	xor %d2,%d2,63
80002172:	00 90       	ret 

80002174 <IfxScuWdt_getSafetyWatchdogPassword>:
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
80002174:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
80002176:	91 30 00 2f 	movh.a %a2,61443
8000217a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000217e:	54 22       	ld.w %d2,[%a2]
80002180:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80002184:	8f f2 83 21 	xor %d2,%d2,63
80002188:	00 90       	ret 

8000218a <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
8000218a:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
8000218c:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80002190:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80002194:	7b 30 00 3f 	movh %d3,61443
80002198:	1b 03 10 36 	addi %d3,%d3,24832
8000219c:	13 c2 20 23 	madd %d2,%d3,%d2,12
800021a0:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
800021a2:	54 22       	ld.w %d2,[%a2]
800021a4:	6f 12 0b 00 	jz.t %d2,1,800021ba <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021a8:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800021ac:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800021b0:	54 22       	ld.w %d2,[%a2]
800021b2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021b6:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800021b8:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021ba:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800021be:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800021c2:	54 22       	ld.w %d2,[%a2]
800021c4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021c8:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800021ca:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800021cc:	54 22       	ld.w %d2,[%a2]
800021ce:	6f 02 ff 7f 	jz.t %d2,0,800021cc <IfxScuWdt_setCpuEndinit+0x42>
}
800021d2:	00 90       	ret 

800021d4 <IfxScuWdt_setSafetyEndinit>:


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
800021d4:	40 ae       	mov.aa %a14,%sp
800021d6:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
800021da:	91 30 00 2f 	movh.a %a2,61443
800021de:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800021e2:	54 22       	ld.w %d2,[%a2]
800021e4:	6f 12 0b 00 	jz.t %d2,1,800021fa <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800021e8:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800021ec:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800021f0:	54 22       	ld.w %d2,[%a2]
800021f2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800021f6:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800021f8:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800021fa:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800021fe:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002202:	91 30 00 2f 	movh.a %a2,61443
80002206:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000220a:	54 22       	ld.w %d2,[%a2]
8000220c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002210:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002212:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002214:	91 30 00 2f 	movh.a %a2,61443
80002218:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000221c:	54 22       	ld.w %d2,[%a2]
8000221e:	6f 02 fb 7f 	jz.t %d2,0,80002214 <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80002222:	00 90       	ret 

80002224 <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80002224:	40 ae       	mov.aa %a14,%sp
80002226:	40 4c       	mov.aa %a12,%a4
80002228:	02 5a       	mov %d10,%d5
8000222a:	8f f4 0f c1 	and %d12,%d4,255
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
8000222e:	80 42       	mov.d %d2,%a4
80002230:	1b 02 01 b0 	addi %d11,%d2,16
    uint8                 iocrIndex = (pinIndex / 4);
80002234:	37 04 66 91 	extr.u %d9,%d4,2,6
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80002238:	8f 34 00 41 	and %d4,%d4,3
8000223c:	8f 34 00 80 	sh %d8,%d4,3

    if (port == &MODULE_P40)
80002240:	7b 40 00 2f 	movh %d2,61444
80002244:	1b 02 00 2e 	addi %d2,%d2,-8192
80002248:	80 43       	mov.d %d3,%a4
8000224a:	5f 23 12 00 	jeq %d3,%d2,8000226e <IfxPort_setPinMode+0x4a>
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
        IfxScuWdt_setCpuEndinit(passwd);
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
8000224e:	8f 29 00 20 	sh %d2,%d9,2
80002252:	60 b2       	mov.a %a2,%d11
80002254:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002258:	3b f0 0f 40 	mov %d4,255
8000225c:	0f 84 00 40 	sh %d4,%d4,%d8
80002260:	0f 8a 00 20 	sh %d2,%d10,%d8
                     ::"a"(address), "d"(mask), "d"((long long)value));
80002264:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
80002266:	02 43       	mov %d3,%d4
80002268:	49 22 40 08 	ldmst [%a2]0,%e2
}
8000226c:	00 90       	ret 
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000226e:	6d ff 71 ff 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80002272:	02 2d       	mov %d13,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80002274:	02 24       	mov %d4,%d2
80002276:	6d ff 04 fe 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
8000227a:	d9 c2 20 10 	lea %a2,[%a12]96
8000227e:	19 c2 20 10 	ld.w %d2,[%a12]96
80002282:	d7 02 01 2c 	insert %d2,%d2,0,%d12,1
80002286:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(passwd);
80002288:	02 d4       	mov %d4,%d13
8000228a:	6d ff 80 ff 	call 8000218a <IfxScuWdt_setCpuEndinit>
8000228e:	1d ff e0 ff 	j 8000224e <IfxPort_setPinMode+0x2a>

80002292 <IfxPort_setPinPadDriver>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80002292:	40 ae       	mov.aa %a14,%sp
80002294:	80 4b       	mov.d %d11,%a4
80002296:	02 5a       	mov %d10,%d5
80002298:	8f f4 0f 81 	and %d8,%d4,255
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000229c:	6d ff 5a ff 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
800022a0:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
800022a2:	02 24       	mov %d4,%d2
800022a4:	6d ff ed fd 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
800022a8:	1b 0b 04 40 	addi %d4,%d11,64
        uint8            pdrIndex = (pinIndex / 8);
800022ac:	8f d8 1f 20 	sh %d2,%d8,-3
        uint8            shift    = (pinIndex & 0x7U) * 4;
800022b0:	8f 78 00 31 	and %d3,%d8,7
800022b4:	06 23       	sh %d3,2
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
800022b6:	06 22       	sh %d2,2
800022b8:	60 42       	mov.a %a2,%d4
800022ba:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
800022be:	3b f0 00 20 	mov %d2,15
800022c2:	0f 32 00 20 	sh %d2,%d2,%d3
800022c6:	0f 3a 00 30 	sh %d3,%d10,%d3
                     ::"a"(address), "d"(mask), "d"((long long)value));
800022ca:	53 13 40 60 	mul.u %e6,%d3,1
    __asm__ volatile("mov %H2,%1 \n\
800022ce:	02 27       	mov %d7,%d2
800022d0:	49 46 40 08 	ldmst [%a4]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
800022d4:	02 94       	mov %d4,%d9
800022d6:	6d ff 5a ff 	call 8000218a <IfxScuWdt_setCpuEndinit>
}
800022da:	00 90       	ret 

800022dc <IfxGtm_Tom_Timer_acknowledgeTimerIrq>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxGtm_Tom_Timer_acknowledgeTimerIrq(IfxGtm_Tom_Timer *driver)
{
800022dc:	40 ae       	mov.aa %a14,%sp
    boolean event;

    event = IfxGtm_Tom_Ch_isZeroNotification(driver->tom, driver->timerChannel);
800022de:	19 43 14 00 	ld.w %d3,[%a4]20
800022e2:	19 42 24 00 	ld.w %d2,[%a4]36
}


IFX_INLINE Ifx_GTM_TOM_CH *IfxGtm_Tom_Ch_getChannelPointer(Ifx_GTM_TOM *tom, IfxGtm_Tom_Ch channel)
{
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800022e6:	06 62       	sh %d2,6
800022e8:	60 32       	mov.a %a2,%d3
800022ea:	01 22 00 26 	addsc.a %a2,%a2,%d2,0

IFX_INLINE boolean IfxGtm_Tom_Ch_isZeroNotification(Ifx_GTM_TOM *tom, IfxGtm_Tom_Ch channel)
{
    boolean         notify;
    Ifx_GTM_TOM_CH *tomCh = IfxGtm_Tom_Ch_getChannelPointer(tom, channel);
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
800022ee:	d9 23 1c 00 	lea %a3,[%a2]28
800022f2:	19 22 1c 00 	ld.w %d2,[%a2]28
800022f6:	6f 02 08 00 	jz.t %d2,0,80002306 <IfxGtm_Tom_Timer_acknowledgeTimerIrq+0x2a>
    tomCh->IRQ_NOTIFY.B.CCU0TC = 1;
800022fa:	54 32       	ld.w %d2,[%a3]
800022fc:	b7 12 01 20 	insert %d2,%d2,1,0,1
80002300:	74 32       	st.w [%a3],%d2
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
80002302:	82 12       	mov %d2,1
}
80002304:	00 90       	ret 
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
80002306:	82 02       	mov %d2,0
    }
    else
    {}

    return event;
}
80002308:	00 90       	ret 

8000230a <IfxGtm_Tom_Timer_applyUpdate>:
    }
}


void IfxGtm_Tom_Timer_applyUpdate(IfxGtm_Tom_Timer *driver)
{
8000230a:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[0], driver->tgcGlobalControlApplyUpdate[0]);
8000230c:	99 42 18 00 	ld.a %a2,[%a4]24
}


IFX_INLINE void IfxGtm_Tom_Tgc_writeGlobalControl(Ifx_GTM_TOM_TGC *tgc, uint32 control)
{
    tgc->GLB_CTRL.U = control;
80002310:	19 42 3c 00 	ld.w %d2,[%a4]60
80002314:	74 22       	st.w [%a2],%d2

    if (driver->tgc[1])
80002316:	99 42 1c 00 	ld.a %a2,[%a4]28
8000231a:	bd 02 05 00 	jz.a %a2,80002324 <IfxGtm_Tom_Timer_applyUpdate+0x1a>
    {
        IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[1], driver->tgcGlobalControlApplyUpdate[1]);  /* Note: Write of 0 value has no effect */
8000231e:	19 42 00 10 	ld.w %d2,[%a4]64
80002322:	74 22       	st.w [%a2],%d2
    }
}
80002324:	00 90       	ret 

80002326 <IfxGtm_Tom_Timer_disableUpdate>:


void IfxGtm_Tom_Timer_disableUpdate(IfxGtm_Tom_Timer *driver)
{
80002326:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[0], driver->tgcGlobalControlDisableUpdate[0]);
80002328:	99 42 18 00 	ld.a %a2,[%a4]24
8000232c:	19 42 34 00 	ld.w %d2,[%a4]52
80002330:	74 22       	st.w [%a2],%d2

    if (driver->tgc[1])
80002332:	99 42 1c 00 	ld.a %a2,[%a4]28
80002336:	bd 02 05 00 	jz.a %a2,80002340 <IfxGtm_Tom_Timer_disableUpdate+0x1a>
    {
        IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[1], driver->tgcGlobalControlDisableUpdate[1]); /* Note: Write of 0 value has no effect */
8000233a:	19 42 38 00 	ld.w %d2,[%a4]56
8000233e:	74 22       	st.w [%a2],%d2
    }
}
80002340:	00 90       	ret 

80002342 <IfxGtm_Tom_Timer_getPeriod>:
    return driver->offset;
}


Ifx_TimerValue IfxGtm_Tom_Timer_getPeriod(IfxGtm_Tom_Timer *driver)
{
80002342:	40 ae       	mov.aa %a14,%sp
    return driver->base.period;
}
80002344:	54 42       	ld.w %d2,[%a4]
80002346:	00 90       	ret 

80002348 <IfxGtm_Tom_Timer_setPeriod>:
    return status;
}


boolean IfxGtm_Tom_Timer_setPeriod(IfxGtm_Tom_Timer *driver, Ifx_TimerValue period)
{
80002348:	40 ae       	mov.aa %a14,%sp
    driver->base.period = period;
8000234a:	74 44       	st.w [%a4],%d4
    IfxGtm_Tom_Ch_setCompareZeroShadow(driver->tom, driver->timerChannel, (uint16)period);
8000234c:	19 43 24 00 	ld.w %d3,[%a4]36
80002350:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002354:	06 63       	sh %d3,6
80002356:	99 42 14 00 	ld.a %a2,[%a4]20
8000235a:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->SR0.U = shadowZero;
8000235e:	59 24 04 00 	st.w [%a2]4,%d4

    if (driver->triggerChannel != driver->timerChannel)
80002362:	19 42 28 00 	ld.w %d2,[%a4]40
80002366:	19 43 24 00 	ld.w %d3,[%a4]36
8000236a:	5f 32 0a 00 	jeq %d2,%d3,8000237e <IfxGtm_Tom_Timer_setPeriod+0x36>
    {
        IfxGtm_Tom_Ch_setCompareZeroShadow(driver->tom, driver->triggerChannel, (uint16)period);
8000236e:	19 43 14 00 	ld.w %d3,[%a4]20
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002372:	06 62       	sh %d2,6
80002374:	60 32       	mov.a %a2,%d3
80002376:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->SR0.U = shadowZero;
8000237a:	59 24 04 00 	st.w [%a2]4,%d4
    }

    return TRUE;
}
8000237e:	82 12       	mov %d2,1
80002380:	00 90       	ret 

80002382 <IfxGtm_Tom_Timer_setFrequency>:
{
80002382:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue period = IfxStdIf_Timer_sToTick(driver->base.clockFreq, 1.0f / frequency);
80002384:	19 43 08 00 	ld.w %d3,[%a4]8
80002388:	7b 00 f8 23 	movh %d2,16256
8000238c:	4b 42 51 20 	div.f %d2,%d2,%d4
 * \param  seconds time value in seconds to be converted
 * \return Return the converted time in timer ticks
 */
IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)
{
    return seconds * clockFreq;
80002390:	4b 23 41 20 	mul.f %d2,%d3,%d2
80002394:	4b 02 71 41 	ftouz %d4,%d2
    if ((period & (0xFFFF << 16)) != 0)
80002398:	b7 04 10 20 	insert %d2,%d4,0,0,16
8000239c:	df 02 04 00 	jeq %d2,0,800023a4 <IfxGtm_Tom_Timer_setFrequency+0x22>
        status = FALSE;
800023a0:	82 02       	mov %d2,0
}
800023a2:	00 90       	ret 
        IfxGtm_Tom_Timer_setPeriod(driver, period);
800023a4:	6d ff d2 ff 	call 80002348 <IfxGtm_Tom_Timer_setPeriod>
    boolean        status = TRUE;
800023a8:	82 12       	mov %d2,1
800023aa:	00 90       	ret 

800023ac <IfxGtm_Tom_Timer_setTrigger>:
    IfxGtm_Tom_Ch_setOneShotMode(driver->tom, driver->timerChannel, enabled);
}


void IfxGtm_Tom_Timer_setTrigger(IfxGtm_Tom_Timer *driver, Ifx_TimerValue triggerPoint)
{
800023ac:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Ch_setCompareOneShadow(driver->tom, driver->triggerChannel, (uint16)triggerPoint + 1);
800023ae:	19 43 14 00 	ld.w %d3,[%a4]20
800023b2:	19 42 28 00 	ld.w %d2,[%a4]40
800023b6:	37 04 70 40 	extr.u %d4,%d4,0,16
800023ba:	c2 14       	add %d4,1
800023bc:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800023c0:	06 62       	sh %d2,6
800023c2:	60 32       	mov.a %a2,%d3
800023c4:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->SR1.U = shadowOne;
800023c8:	59 24 08 00 	st.w [%a2]8,%d4
}
800023cc:	00 90       	ret 

800023ce <IfxGtm_Tom_Timer_run>:
{
800023ce:	40 ae       	mov.aa %a14,%sp
800023d0:	40 4c       	mov.aa %a12,%a4
    IfxGtm_Tom_Tgc_enableChannels(driver->tgc[0], driver->channelsMask[0], 0, TRUE);
800023d2:	99 4d 18 00 	ld.a %a13,[%a4]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
800023d6:	82 06       	mov %d6,0
800023d8:	82 05       	mov %d5,0
800023da:	b9 44 2c 00 	ld.hu %d4,[%a4]44
800023de:	6d 00 f3 0a 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
800023e2:	59 d2 00 10 	st.w [%a13]64,%d2
        tgc->ENDIS_STAT.U = value;
800023e6:	59 d2 04 10 	st.w [%a13]68,%d2
    if (driver->tgc[1])
800023ea:	99 cd 1c 00 	ld.a %a13,[%a12]28
800023ee:	bd 0d 0c 00 	jz.a %a13,80002406 <IfxGtm_Tom_Timer_run+0x38>
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
800023f2:	82 06       	mov %d6,0
800023f4:	82 05       	mov %d5,0
800023f6:	b9 c4 2e 00 	ld.hu %d4,[%a12]46
800023fa:	6d 00 e5 0a 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
800023fe:	59 d2 00 10 	st.w [%a13]64,%d2
        tgc->ENDIS_STAT.U = value;
80002402:	59 d2 04 10 	st.w [%a13]68,%d2
}
80002406:	00 90       	ret 

80002408 <IfxGtm_Tom_Timer_updateInputFrequency>:
    }
}


void IfxGtm_Tom_Timer_updateInputFrequency(IfxGtm_Tom_Timer *driver)
{
80002408:	40 ae       	mov.aa %a14,%sp
8000240a:	20 18       	sub.a %sp,24
8000240c:	40 4c       	mov.aa %a12,%a4
    driver->base.clockFreq = IfxGtm_Tom_Ch_getClockFrequency(driver->gtm, driver->tom, driver->timerChannel);
8000240e:	99 44 10 00 	ld.a %a4,[%a4]16
80002412:	19 c2 24 00 	ld.w %d2,[%a12]36
    IfxGtm_Cmu_Fxclk     clkIndex[5] = {
80002416:	91 00 00 26 	movh.a %a2,24576
8000241a:	d9 22 00 00 	lea %a2,[%a2]0 <60000000 <LCF_DSPR1_START>>
8000241e:	d9 e3 ec ff 	lea %a3,[%a14]-20 <60000000 <LCF_DSPR1_START>>
80002422:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
80002426:	89 34 48 01 	st.d [%a3+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
8000242a:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
8000242e:	89 34 48 01 	st.d [%a3+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80002432:	44 24       	ld.w %d4,[%a2+]
80002434:	64 34       	st.w [%a3+],%d4
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002436:	06 62       	sh %d2,6
80002438:	99 c2 14 00 	ld.a %a2,[%a12]20
8000243c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    clk = (IfxGtm_Tom_Ch_ClkSrc)tomCh->CTRL.B.CLK_SRC_SR;
80002440:	54 22       	ld.w %d2,[%a2]
80002442:	37 02 63 26 	extr.u %d2,%d2,12,3
    if (clk == IfxGtm_Tom_Ch_ClkSrc_noClock)
80002446:	df 52 06 80 	jne %d2,5,80002452 <IfxGtm_Tom_Timer_updateInputFrequency+0x4a>
        return (float32)0.0f;
8000244a:	82 02       	mov %d2,0
8000244c:	59 c2 08 00 	st.w [%a12]8,%d2
}
80002450:	00 90       	ret 
        return IfxGtm_Cmu_getFxClkFrequency(gtm, clkIndex[clk], TRUE);
80002452:	06 22       	sh %d2,2
80002454:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
80002458:	82 15       	mov %d5,1
8000245a:	19 24 ec ff 	ld.w %d4,[%a2]-20
8000245e:	6d 00 b1 09 	call 800037c0 <IfxGtm_Cmu_getFxClkFrequency>
80002462:	1d ff f5 ff 	j 8000244c <IfxGtm_Tom_Timer_updateInputFrequency+0x44>

80002466 <IfxGtm_Tom_Timer_addToChannelMask>:
{
80002466:	40 ae       	mov.aa %a14,%sp
80002468:	40 4c       	mov.aa %a12,%a4
    if (driver->timerChannel <= IfxGtm_Tom_Ch_7)
8000246a:	19 42 24 00 	ld.w %d2,[%a4]36
8000246e:	8b 82 80 22 	ge %d2,%d2,8
80002472:	df 02 39 80 	jne %d2,0,800024e4 <IfxGtm_Tom_Timer_addToChannelMask+0x7e>
        if (channel <= IfxGtm_Tom_Ch_7)
80002476:	8b 84 80 22 	ge %d2,%d4,8
8000247a:	df 02 1b 80 	jne %d2,0,800024b0 <IfxGtm_Tom_Timer_addToChannelMask+0x4a>
            driver->channelsMask[0]                 |= 1 << channel;
8000247e:	c9 42 2c 00 	ld.h %d2,[%a4]44
80002482:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
80002486:	37 02 70 50 	extr.u %d5,%d2,0,16
8000248a:	f9 45 2c 00 	st.h [%a4]44,%d5
            driver->tgcGlobalControlDisableUpdate[0] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[0], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
8000248e:	3b 00 01 60 	mov %d6,16
80002492:	82 04       	mov %d4,0
80002494:	6d 00 98 0a 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
80002498:	59 c2 34 00 	st.w [%a12]52,%d2
            driver->tgcGlobalControlApplyUpdate[0]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[0], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
8000249c:	3b 00 01 60 	mov %d6,16
800024a0:	82 05       	mov %d5,0
800024a2:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
800024a6:	6d 00 8f 0a 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
800024aa:	59 c2 3c 00 	st.w [%a12]60,%d2
800024ae:	00 90       	ret 
            driver->channelsMask[1]                 |= 1 << (channel - IfxGtm_Tom_Ch_8);
800024b0:	c2 84       	add %d4,-8
800024b2:	c9 42 2e 00 	ld.h %d2,[%a4]46
800024b6:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
800024ba:	37 02 70 50 	extr.u %d5,%d2,0,16
800024be:	f9 45 2e 00 	st.h [%a4]46,%d5
            driver->tgcGlobalControlDisableUpdate[1] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[1], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
800024c2:	3b 00 01 60 	mov %d6,16
800024c6:	82 04       	mov %d4,0
800024c8:	6d 00 7e 0a 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
800024cc:	59 c2 38 00 	st.w [%a12]56,%d2
            driver->tgcGlobalControlApplyUpdate[1]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[1], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
800024d0:	3b 00 01 60 	mov %d6,16
800024d4:	82 05       	mov %d5,0
800024d6:	b9 c4 2e 00 	ld.hu %d4,[%a12]46
800024da:	6d 00 75 0a 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
800024de:	59 c2 00 10 	st.w [%a12]64,%d2
800024e2:	00 90       	ret 
        driver->channelsMask[0]                 |= 1 << (channel - IfxGtm_Tom_Ch_8);
800024e4:	c2 84       	add %d4,-8
800024e6:	c9 42 2c 00 	ld.h %d2,[%a4]44
800024ea:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
800024ee:	37 02 70 50 	extr.u %d5,%d2,0,16
800024f2:	f9 45 2c 00 	st.h [%a4]44,%d5
        driver->tgcGlobalControlDisableUpdate[0] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[0], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
800024f6:	3b 00 01 60 	mov %d6,16
800024fa:	82 04       	mov %d4,0
800024fc:	6d 00 64 0a 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
80002500:	59 c2 34 00 	st.w [%a12]52,%d2
        driver->tgcGlobalControlApplyUpdate[0]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[0], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002504:	3b 00 01 60 	mov %d6,16
80002508:	82 05       	mov %d5,0
8000250a:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
8000250e:	6d 00 5b 0a 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
80002512:	59 c2 3c 00 	st.w [%a12]60,%d2
}
80002516:	00 90       	ret 

80002518 <IfxGtm_Tom_Timer_getOffset>:
{
80002518:	40 ae       	mov.aa %a14,%sp
}
8000251a:	19 42 30 00 	ld.w %d2,[%a4]48
8000251e:	00 90       	ret 

80002520 <IfxGtm_Tom_Timer_init>:
{
80002520:	40 ae       	mov.aa %a14,%sp
80002522:	40 4c       	mov.aa %a12,%a4
80002524:	40 5d       	mov.aa %a13,%a5
    driver->gtm          = config->gtm;
80002526:	d9 53 34 00 	lea %a3,[%a5]52
8000252a:	19 52 34 00 	ld.w %d2,[%a5]52
8000252e:	59 42 10 00 	st.w [%a4]16,%d2
    driver->tomIndex     = config->tom;
80002532:	19 52 38 00 	ld.w %d2,[%a5]56
80002536:	59 42 20 00 	st.w [%a4]32,%d2
    driver->tom          = &config->gtm->TOM[config->tom];
8000253a:	1b 02 01 20 	addi %d2,%d2,16
8000253e:	8f b2 00 20 	sh %d2,%d2,11
80002542:	54 33       	ld.w %d3,[%a3]
80002544:	0b 23 00 50 	add %d5,%d3,%d2
80002548:	59 45 14 00 	st.w [%a4]20,%d5
    driver->timerChannel = config->timerChannel;
8000254c:	19 54 3c 00 	ld.w %d4,[%a5]60
80002550:	59 44 24 00 	st.w [%a4]36,%d4
    base->triggerEnabled = config->base.trigger.enabled;
80002554:	39 52 10 00 	ld.bu %d2,[%a5]16
80002558:	e9 42 04 00 	st.b [%a4]4,%d2
    if (base->triggerEnabled)
8000255c:	df 02 0d 00 	jeq %d2,0,80002576 <IfxGtm_Tom_Timer_init+0x56>
        if (config->triggerOut != NULL_PTR)
80002560:	99 52 00 10 	ld.a %a2,[%a5]64
80002564:	bd 02 5b 00 	jz.a %a2,8000261a <IfxGtm_Tom_Timer_init+0xfa>
            driver->triggerChannel = config->triggerOut->channel;
80002568:	19 22 04 00 	ld.w %d2,[%a2]4
8000256c:	59 42 28 00 	st.w [%a4]40,%d2
    boolean                result = TRUE;
80002570:	82 18       	mov %d8,1
80002572:	1d 00 05 00 	j 8000257c <IfxGtm_Tom_Timer_init+0x5c>
        driver->triggerChannel = driver->timerChannel; // Set to timer channel to disable its use
80002576:	59 44 28 00 	st.w [%a4]40,%d4
    boolean                result = TRUE;
8000257a:	82 18       	mov %d8,1
    if (config->timerChannel <= 7)
8000257c:	19 d2 3c 00 	ld.w %d2,[%a13]60
80002580:	8b 82 80 22 	ge %d2,%d2,8
80002584:	df 02 4e 80 	jne %d2,0,80002620 <IfxGtm_Tom_Timer_init+0x100>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC0_GLB_CTRL;
80002588:	1b 05 03 20 	addi %d2,%d5,48
        driver->tgc[0] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 0);
8000258c:	59 c2 18 00 	st.w [%a12]24,%d2
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
80002590:	1b 05 23 20 	addi %d2,%d5,560
        driver->tgc[1] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
80002594:	59 c2 1c 00 	st.w [%a12]28,%d2
    driver->channelsMask[0]                  = 0;
80002598:	82 02       	mov %d2,0
8000259a:	f9 c2 2c 00 	st.h [%a12]44,%d2
    driver->tgcGlobalControlApplyUpdate[0]   = 0;
8000259e:	82 03       	mov %d3,0
800025a0:	59 c3 3c 00 	st.w [%a12]60,%d3
    driver->tgcGlobalControlDisableUpdate[0] = 0;
800025a4:	59 c3 34 00 	st.w [%a12]52,%d3
    driver->channelsMask[1]                  = 0;
800025a8:	f9 c3 2e 00 	st.h [%a12]46,%d3
    driver->tgcGlobalControlApplyUpdate[1]   = 0;
800025ac:	59 c3 00 10 	st.w [%a12]64,%d3
    driver->tgcGlobalControlDisableUpdate[1] = 0;
800025b0:	59 c3 38 00 	st.w [%a12]56,%d3
    IfxGtm_Tom_Ch_setClockSource(driver->tom, driver->timerChannel, config->clock);
800025b4:	19 d6 04 10 	ld.w %d6,[%a13]68
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800025b8:	06 64       	sh %d4,6
800025ba:	60 52       	mov.a %a2,%d5
800025bc:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
800025c0:	54 23       	ld.w %d3,[%a2]
800025c2:	37 63 03 36 	insert %d3,%d3,%d6,12,3
800025c6:	74 23       	st.w [%a2],%d3
    IfxGtm_Tom_Ch_setTriggerOutput(driver->tom, driver->timerChannel, IfxGtm_Tom_Ch_OutputTrigger_generate);
800025c8:	19 c2 24 00 	ld.w %d2,[%a12]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800025cc:	06 62       	sh %d2,6
800025ce:	99 c2 14 00 	ld.a %a2,[%a12]20
800025d2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
800025d6:	54 23       	ld.w %d3,[%a2]
800025d8:	b7 13 01 3c 	insert %d3,%d3,1,24,1
800025dc:	74 23       	st.w [%a2],%d3
    IfxGtm_Tom_Timer_updateInputFrequency(driver);
800025de:	40 c4       	mov.aa %a4,%a12
800025e0:	6d ff 14 ff 	call 80002408 <IfxGtm_Tom_Timer_updateInputFrequency>
    if ((config->base.minResolution > 0) && ((1.0f / base->clockFreq) > config->base.minResolution))
800025e4:	19 d2 0c 00 	ld.w %d2,[%a13]12
800025e8:	82 03       	mov %d3,0
800025ea:	4b 32 01 30 	cmp.f %d3,%d2,%d3
800025ee:	6f 23 0d 00 	jz.t %d3,2,80002608 <IfxGtm_Tom_Timer_init+0xe8>
800025f2:	19 c4 08 00 	ld.w %d4,[%a12]8
800025f6:	7b 00 f8 33 	movh %d3,16256
800025fa:	4b 43 51 30 	div.f %d3,%d3,%d4
800025fe:	4b 32 01 20 	cmp.f %d2,%d2,%d3
80002602:	6f 02 03 00 	jz.t %d2,0,80002608 <IfxGtm_Tom_Timer_init+0xe8>
        result = FALSE;
80002606:	82 08       	mov %d8,0
    result &= IfxGtm_Tom_Timer_setFrequency(driver, config->base.frequency);
80002608:	54 d4       	ld.w %d4,[%a13]
8000260a:	40 c4       	mov.aa %a4,%a12
8000260c:	6d ff bb fe 	call 80002382 <IfxGtm_Tom_Timer_setFrequency>
80002610:	26 28       	and %d8,%d2
    if (result == TRUE)
80002612:	df 08 10 80 	jne %d8,0,80002632 <IfxGtm_Tom_Timer_init+0x112>
}
80002616:	02 82       	mov %d2,%d8
80002618:	00 90       	ret 
            result = FALSE;
8000261a:	82 08       	mov %d8,0
8000261c:	1d ff b0 ff 	j 8000257c <IfxGtm_Tom_Timer_init+0x5c>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
80002620:	1b 05 23 20 	addi %d2,%d5,560
        driver->tgc[0] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
80002624:	59 c2 18 00 	st.w [%a12]24,%d2
        driver->tgc[1] = NULL_PTR; /* NOTE currently no concatenation between TOMs */
80002628:	82 02       	mov %d2,0
8000262a:	59 c2 1c 00 	st.w [%a12]28,%d2
8000262e:	1d ff b5 ff 	j 80002598 <IfxGtm_Tom_Timer_init+0x78>
        driver->offset = IfxStdIf_Timer_sToTick(driver->base.clockFreq, 1.0f / config->base.frequency * config->base.startOffset);
80002632:	19 c3 08 00 	ld.w %d3,[%a12]8
80002636:	54 d4       	ld.w %d4,[%a13]
80002638:	7b 00 f8 23 	movh %d2,16256
8000263c:	4b 42 51 20 	div.f %d2,%d2,%d4
80002640:	19 d4 30 00 	ld.w %d4,[%a13]48
80002644:	4b 42 41 20 	mul.f %d2,%d2,%d4
80002648:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000264c:	4b 02 71 21 	ftouz %d2,%d2
80002650:	59 c2 30 00 	st.w [%a12]48,%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, driver->timerChannel, driver->offset);
80002654:	19 c3 24 00 	ld.w %d3,[%a12]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002658:	06 63       	sh %d3,6
8000265a:	99 c2 14 00 	ld.a %a2,[%a12]20
8000265e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CN0.U = value;
80002662:	59 22 14 00 	st.w [%a2]20,%d2
        maskShift = (config->timerChannel <= 7) ? 0 : 8;
80002666:	19 d2 3c 00 	ld.w %d2,[%a13]60
8000266a:	8b 82 80 22 	ge %d2,%d2,8
8000266e:	df 02 53 80 	jne %d2,0,80002714 <IfxGtm_Tom_Timer_init+0x1f4>
80002672:	82 09       	mov %d9,0
        IfxGtm_Tom_Timer_addToChannelMask(driver, driver->timerChannel);
80002674:	19 c4 24 00 	ld.w %d4,[%a12]36
80002678:	40 c4       	mov.aa %a4,%a12
8000267a:	6d ff f6 fe 	call 80002466 <IfxGtm_Tom_Timer_addToChannelMask>
        if (base->triggerEnabled)
8000267e:	39 c2 04 00 	ld.bu %d2,[%a12]4
80002682:	df 02 3a 00 	jeq %d2,0,800026f6 <IfxGtm_Tom_Timer_init+0x1d6>
            IfxGtm_Tom_Ch triggerChannel     = driver->triggerChannel;
80002686:	19 c3 28 00 	ld.w %d3,[%a12]40
            uint16        triggerChannelMask = 1 << (triggerChannel - maskShift);
8000268a:	0b 93 80 20 	sub %d2,%d3,%d9
8000268e:	82 19       	mov %d9,1
80002690:	0f 29 00 90 	sh %d9,%d9,%d2
            IfxGtm_Tom_Ch_setSignalLevel(driver->tom, triggerChannel, config->base.trigger.risingEdgeAtPeriod ? Ifx_ActiveState_high : Ifx_ActiveState_low);
80002694:	39 d2 28 00 	ld.bu %d2,[%a13]40
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002698:	8f 63 00 40 	sh %d4,%d3,6
8000269c:	99 c2 14 00 	ld.a %a2,[%a12]20
800026a0:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
800026a4:	df 02 3c 80 	jne %d2,0,8000271c <IfxGtm_Tom_Timer_init+0x1fc>
800026a8:	82 05       	mov %d5,0
800026aa:	54 22       	ld.w %d2,[%a2]
800026ac:	67 52 0b 20 	ins.t %d2,%d2,11,%d5,0
800026b0:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800026b2:	99 c2 14 00 	ld.a %a2,[%a12]20
800026b6:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CN0.U = value;
800026ba:	19 c2 30 00 	ld.w %d2,[%a12]48
800026be:	59 22 14 00 	st.w [%a2]20,%d2
            if (triggerChannel != driver->timerChannel)
800026c2:	19 c2 24 00 	ld.w %d2,[%a12]36
800026c6:	5f 32 2e 80 	jne %d2,%d3,80002722 <IfxGtm_Tom_Timer_init+0x202>
            IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc[0], triggerChannelMask, 0, FALSE);
800026ca:	cc c6       	ld.a %a15,[%a12]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
800026cc:	82 06       	mov %d6,0
800026ce:	82 05       	mov %d5,0
800026d0:	37 09 70 40 	extr.u %d4,%d9,0,16
800026d4:	6d 00 78 09 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
800026d8:	59 f2 08 10 	st.w [%a15]72,%d2
            if ((config->base.trigger.outputEnabled) && (config->initPins == TRUE))
800026dc:	39 d2 29 00 	ld.bu %d2,[%a13]41
800026e0:	df 02 06 00 	jeq %d2,0,800026ec <IfxGtm_Tom_Timer_init+0x1cc>
800026e4:	39 d2 10 10 	ld.bu %d2,[%a13]80
800026e8:	df 12 47 00 	jeq %d2,1,80002776 <IfxGtm_Tom_Timer_init+0x256>
            IfxGtm_Tom_Timer_setTrigger(driver, config->base.trigger.triggerPoint);
800026ec:	19 d4 14 00 	ld.w %d4,[%a13]20
800026f0:	40 c4       	mov.aa %a4,%a12
800026f2:	6d ff 5d fe 	call 800023ac <IfxGtm_Tom_Timer_setTrigger>
            boolean                timerHasIrq   = config->base.isrPriority > 0;
800026f6:	b9 d2 04 00 	ld.hu %d2,[%a13]4
800026fa:	8b 02 20 62 	ne %d6,%d2,0
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
800026fe:	b9 d3 18 00 	ld.hu %d3,[%a13]24
80002702:	df 03 44 00 	jeq %d3,0,8000278a <IfxGtm_Tom_Timer_init+0x26a>
80002706:	39 c3 04 00 	ld.bu %d3,[%a12]4
8000270a:	df 03 ce 80 	jne %d3,0,800028a6 <IfxGtm_Tom_Timer_init+0x386>
8000270e:	82 05       	mov %d5,0
80002710:	1d 00 3e 00 	j 8000278c <IfxGtm_Tom_Timer_init+0x26c>
        maskShift = (config->timerChannel <= 7) ? 0 : 8;
80002714:	3b 80 00 90 	mov %d9,8
80002718:	1d ff ae ff 	j 80002674 <IfxGtm_Tom_Timer_init+0x154>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
8000271c:	82 15       	mov %d5,1
8000271e:	1d ff c6 ff 	j 800026aa <IfxGtm_Tom_Timer_init+0x18a>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002722:	99 c2 14 00 	ld.a %a2,[%a12]20
80002726:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
8000272a:	54 22       	ld.w %d2,[%a2]
8000272c:	b7 12 01 2a 	insert %d2,%d2,1,20,1
80002730:	74 22       	st.w [%a2],%d2
                IfxGtm_Tom_Ch_setClockSource(driver->tom, triggerChannel, config->clock);
80002732:	19 d3 04 10 	ld.w %d3,[%a13]68
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002736:	99 c2 14 00 	ld.a %a2,[%a12]20
8000273a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
8000273e:	54 22       	ld.w %d2,[%a2]
80002740:	37 32 03 26 	insert %d2,%d2,%d3,12,3
80002744:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002746:	99 c2 14 00 	ld.a %a2,[%a12]20
8000274a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
8000274e:	54 22       	ld.w %d2,[%a2]
80002750:	b7 02 01 2c 	insert %d2,%d2,0,24,1
80002754:	74 22       	st.w [%a2],%d2
                IfxGtm_Tom_Tgc_enableChannels(driver->tgc[0], triggerChannelMask, 0, FALSE);
80002756:	cc c6       	ld.a %a15,[%a12]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80002758:	82 06       	mov %d6,0
8000275a:	82 05       	mov %d5,0
8000275c:	37 09 70 40 	extr.u %d4,%d9,0,16
80002760:	6d 00 32 09 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80002764:	59 f2 00 10 	st.w [%a15]64,%d2
                IfxGtm_Tom_Timer_addToChannelMask(driver, driver->triggerChannel);
80002768:	19 c4 28 00 	ld.w %d4,[%a12]40
8000276c:	40 c4       	mov.aa %a4,%a12
8000276e:	6d ff 7c fe 	call 80002466 <IfxGtm_Tom_Timer_addToChannelMask>
80002772:	1d ff ac ff 	j 800026ca <IfxGtm_Tom_Timer_init+0x1aa>
                IfxGtm_PinMap_setTomTout(config->triggerOut, config->base.trigger.outputMode, config->base.trigger.outputDriver);
80002776:	19 d5 24 00 	ld.w %d5,[%a13]36
8000277a:	19 d4 20 00 	ld.w %d4,[%a13]32
8000277e:	99 d4 00 10 	ld.a %a4,[%a13]64
80002782:	6d ff 8d f1 	call 80000a9c <IfxGtm_PinMap_setTomTout>
80002786:	1d ff b3 ff 	j 800026ec <IfxGtm_Tom_Timer_init+0x1cc>
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
8000278a:	82 05       	mov %d5,0
8000278c:	8f f5 0f 51 	and %d5,%d5,255
            if (driver->triggerChannel == driver->timerChannel)
80002790:	19 c4 28 00 	ld.w %d4,[%a12]40
80002794:	19 c3 24 00 	ld.w %d3,[%a12]36
80002798:	5f 34 8a 00 	jeq %d4,%d3,800028ac <IfxGtm_Tom_Timer_init+0x38c>
                if (timerHasIrq)
8000279c:	df 02 41 00 	jeq %d2,0,8000281e <IfxGtm_Tom_Timer_init+0x2fe>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800027a0:	06 63       	sh %d3,6
800027a2:	99 c2 14 00 	ld.a %a2,[%a12]20
800027a6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    en.U = tomCh->IRQ_EN.U;
800027aa:	d9 23 20 00 	lea %a3,[%a2]32
800027ae:	19 24 20 00 	ld.w %d4,[%a2]32
800027b2:	02 42       	mov %d2,%d4
    tomCh->IRQ_EN.U            = IFX_ZEROS;
800027b4:	82 03       	mov %d3,0
800027b6:	74 33       	st.w [%a3],%d3
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
800027b8:	d9 23 28 00 	lea %a3,[%a2]40
800027bc:	19 23 28 00 	ld.w %d3,[%a2]40
800027c0:	b7 23 02 30 	insert %d3,%d3,2,0,2
800027c4:	74 33       	st.w [%a3],%d3
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
800027c6:	d9 23 20 00 	lea %a3,[%a2]32
800027ca:	59 24 20 00 	st.w [%a2]32,%d4
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
800027ce:	b7 12 01 20 	insert %d2,%d2,1,0,1
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
800027d2:	8f 22 c0 21 	andn %d2,%d2,2
    tomCh->IRQ_EN.U            = en.U;
800027d6:	74 32       	st.w [%a3],%d2
                    src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->timerChannel);
800027d8:	19 d3 38 00 	ld.w %d3,[%a13]56
800027dc:	19 c2 24 00 	ld.w %d2,[%a12]36
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
800027e0:	86 f2       	sha %d2,-1
800027e2:	06 33       	sh %d3,3
800027e4:	42 32       	add %d2,%d3
800027e6:	06 22       	sh %d2,2
800027e8:	7b 40 00 3f 	movh %d3,61444
800027ec:	1b 03 b8 39 	addi %d3,%d3,-25728
800027f0:	60 32       	mov.a %a2,%d3
800027f2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
                    IfxSrc_init(src, config->base.isrProvider, config->base.isrPriority);
800027f6:	19 d4 08 00 	ld.w %d4,[%a13]8
    src->B.SRPN = priority;
800027fa:	39 d3 04 00 	ld.bu %d3,[%a13]4
800027fe:	54 22       	ld.w %d2,[%a2]
80002800:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80002804:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80002806:	54 22       	ld.w %d2,[%a2]
80002808:	37 42 82 25 	insert %d2,%d2,%d4,11,2
8000280c:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
8000280e:	54 22       	ld.w %d2,[%a2]
80002810:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80002814:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80002816:	54 22       	ld.w %d2,[%a2]
80002818:	b7 12 01 25 	insert %d2,%d2,1,10,1
8000281c:	74 22       	st.w [%a2],%d2
                if (triggerHasIrq)
8000281e:	df 05 8f 00 	jeq %d5,0,8000293c <IfxGtm_Tom_Timer_init+0x41c>
                    IfxGtm_Tom_Ch_setNotification(driver->tom, driver->triggerChannel, irqMode, FALSE, TRUE);
80002822:	19 c2 28 00 	ld.w %d2,[%a12]40
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002826:	06 62       	sh %d2,6
80002828:	99 c2 14 00 	ld.a %a2,[%a12]20
8000282c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    en.U = tomCh->IRQ_EN.U;
80002830:	d9 23 20 00 	lea %a3,[%a2]32
80002834:	19 23 20 00 	ld.w %d3,[%a2]32
    tomCh->IRQ_EN.U            = IFX_ZEROS;
80002838:	82 02       	mov %d2,0
8000283a:	74 32       	st.w [%a3],%d2
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
8000283c:	d9 23 28 00 	lea %a3,[%a2]40
80002840:	19 22 28 00 	ld.w %d2,[%a2]40
80002844:	b7 22 02 20 	insert %d2,%d2,2,0,2
80002848:	74 32       	st.w [%a3],%d2
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
8000284a:	d9 23 20 00 	lea %a3,[%a2]32
8000284e:	59 23 20 00 	st.w [%a2]32,%d3
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
80002852:	8f 13 c0 31 	andn %d3,%d3,1
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
80002856:	b7 13 81 30 	insert %d3,%d3,1,1,1
    tomCh->IRQ_EN.U            = en.U;
8000285a:	74 33       	st.w [%a3],%d3
                    src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->triggerChannel);
8000285c:	19 d3 38 00 	ld.w %d3,[%a13]56
80002860:	19 c2 28 00 	ld.w %d2,[%a12]40
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
80002864:	86 f2       	sha %d2,-1
80002866:	06 33       	sh %d3,3
80002868:	42 32       	add %d2,%d3
8000286a:	06 22       	sh %d2,2
8000286c:	7b 40 00 3f 	movh %d3,61444
80002870:	1b 03 b8 39 	addi %d3,%d3,-25728
80002874:	60 32       	mov.a %a2,%d3
80002876:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
                    IfxSrc_init(src, config->base.trigger.isrProvider, config->base.trigger.isrPriority);
8000287a:	19 d4 1c 00 	ld.w %d4,[%a13]28
    src->B.SRPN = priority;
8000287e:	39 d3 18 00 	ld.bu %d3,[%a13]24
80002882:	54 22       	ld.w %d2,[%a2]
80002884:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80002888:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
8000288a:	54 22       	ld.w %d2,[%a2]
8000288c:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80002890:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80002892:	54 22       	ld.w %d2,[%a2]
80002894:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80002898:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
8000289a:	54 22       	ld.w %d2,[%a2]
8000289c:	b7 12 01 25 	insert %d2,%d2,1,10,1
800028a0:	74 22       	st.w [%a2],%d2
}
800028a2:	1d 00 4d 00 	j 8000293c <IfxGtm_Tom_Timer_init+0x41c>
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
800028a6:	82 15       	mov %d5,1
800028a8:	1d ff 72 ff 	j 8000278c <IfxGtm_Tom_Timer_init+0x26c>
                IfxGtm_Tom_Ch_setNotification(driver->tom, driver->timerChannel, timerHasIrq ? config->irqModeTimer : config->irqModeTrigger, timerHasIrq, triggerHasIrq);
800028ac:	19 c4 14 00 	ld.w %d4,[%a12]20
800028b0:	df 02 70 00 	jeq %d2,0,80002990 <IfxGtm_Tom_Timer_init+0x470>
800028b4:	19 d7 08 10 	ld.w %d7,[%a13]72
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800028b8:	06 63       	sh %d3,6
800028ba:	60 42       	mov.a %a2,%d4
800028bc:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    en.U = tomCh->IRQ_EN.U;
800028c0:	d9 23 20 00 	lea %a3,[%a2]32
800028c4:	19 20 20 00 	ld.w %d0,[%a2]32
800028c8:	02 03       	mov %d3,%d0
    tomCh->IRQ_EN.U            = IFX_ZEROS;
800028ca:	82 04       	mov %d4,0
800028cc:	74 34       	st.w [%a3],%d4
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
800028ce:	d9 23 28 00 	lea %a3,[%a2]40
800028d2:	19 24 28 00 	ld.w %d4,[%a2]40
800028d6:	37 74 02 40 	insert %d4,%d4,%d7,0,2
800028da:	74 34       	st.w [%a3],%d4
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
800028dc:	d9 23 20 00 	lea %a3,[%a2]32
800028e0:	59 20 20 00 	st.w [%a2]32,%d0
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
800028e4:	67 63 00 30 	ins.t %d3,%d3,0,%d6,0
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
800028e8:	67 53 01 30 	ins.t %d3,%d3,1,%d5,0
    tomCh->IRQ_EN.U            = en.U;
800028ec:	74 33       	st.w [%a3],%d3
                src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->timerChannel);
800028ee:	19 d4 38 00 	ld.w %d4,[%a13]56
800028f2:	19 c3 24 00 	ld.w %d3,[%a12]36
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
800028f6:	86 f3       	sha %d3,-1
800028f8:	06 34       	sh %d4,3
800028fa:	42 43       	add %d3,%d4
800028fc:	06 23       	sh %d3,2
800028fe:	7b 40 00 4f 	movh %d4,61444
80002902:	1b 04 b8 49 	addi %d4,%d4,-25728
80002906:	60 42       	mov.a %a2,%d4
80002908:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
                IfxSrc_init(src, timerHasIrq ? config->base.isrProvider : config->base.trigger.isrProvider, timerHasIrq ? config->base.isrPriority : config->base.trigger.isrPriority);
8000290c:	df 02 46 00 	jeq %d2,0,80002998 <IfxGtm_Tom_Timer_init+0x478>
80002910:	19 d4 08 00 	ld.w %d4,[%a13]8
80002914:	df 02 46 00 	jeq %d2,0,800029a0 <IfxGtm_Tom_Timer_init+0x480>
80002918:	b9 d3 04 00 	ld.hu %d3,[%a13]4
    src->B.SRPN = priority;
8000291c:	54 22       	ld.w %d2,[%a2]
8000291e:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80002922:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80002924:	54 22       	ld.w %d2,[%a2]
80002926:	37 42 82 25 	insert %d2,%d2,%d4,11,2
8000292a:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
8000292c:	54 22       	ld.w %d2,[%a2]
8000292e:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80002932:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80002934:	54 22       	ld.w %d2,[%a2]
80002936:	b7 12 01 25 	insert %d2,%d2,1,10,1
8000293a:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc[0], driver->channelsMask[0], 0, 0, 0);
8000293c:	99 cd 18 00 	ld.a %a13,[%a12]24
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
80002940:	82 06       	mov %d6,0
80002942:	82 05       	mov %d5,0
80002944:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
80002948:	6d 00 3e 08 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
8000294c:	02 29       	mov %d9,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
8000294e:	3b 00 01 60 	mov %d6,16
80002952:	82 05       	mov %d5,0
80002954:	82 04       	mov %d4,0
80002956:	6d 00 37 08 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
8000295a:	a6 92       	or %d2,%d9
8000295c:	59 d2 08 00 	st.w [%a13]8,%d2
        IfxGtm_Tom_Tgc_trigger(driver->tgc[0]);
80002960:	99 c2 18 00 	ld.a %a2,[%a12]24
    tgc->GLB_CTRL.U = 1 << IFX_GTM_TOM_TGC0_GLB_CTRL_HOST_TRIG_OFF;
80002964:	82 12       	mov %d2,1
80002966:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc[0], 0, driver->channelsMask[0], 0, 0);
80002968:	99 cd 18 00 	ld.a %a13,[%a12]24
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
8000296c:	82 06       	mov %d6,0
8000296e:	b9 c5 2c 00 	ld.hu %d5,[%a12]44
80002972:	82 04       	mov %d4,0
80002974:	6d 00 28 08 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
80002978:	02 29       	mov %d9,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
8000297a:	3b 00 01 60 	mov %d6,16
8000297e:	82 05       	mov %d5,0
80002980:	82 04       	mov %d4,0
80002982:	6d 00 21 08 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
80002986:	a6 92       	or %d2,%d9
80002988:	59 d2 08 00 	st.w [%a13]8,%d2
}
8000298c:	1d ff 45 fe 	j 80002616 <IfxGtm_Tom_Timer_init+0xf6>
                IfxGtm_Tom_Ch_setNotification(driver->tom, driver->timerChannel, timerHasIrq ? config->irqModeTimer : config->irqModeTrigger, timerHasIrq, triggerHasIrq);
80002990:	19 d7 0c 10 	ld.w %d7,[%a13]76
80002994:	1d ff 92 ff 	j 800028b8 <IfxGtm_Tom_Timer_init+0x398>
                IfxSrc_init(src, timerHasIrq ? config->base.isrProvider : config->base.trigger.isrProvider, timerHasIrq ? config->base.isrPriority : config->base.trigger.isrPriority);
80002998:	19 d4 1c 00 	ld.w %d4,[%a13]28
8000299c:	1d ff bc ff 	j 80002914 <IfxGtm_Tom_Timer_init+0x3f4>
800029a0:	b9 d3 18 00 	ld.hu %d3,[%a13]24
800029a4:	1d ff bc ff 	j 8000291c <IfxGtm_Tom_Timer_init+0x3fc>

800029a8 <IfxGtm_Tom_Timer_initConfig>:
{
800029a8:	40 ae       	mov.aa %a14,%sp
800029aa:	40 4c       	mov.aa %a12,%a4
800029ac:	80 58       	mov.d %d8,%a5
    IfxStdIf_Timer_initConfig(&config->base);
800029ae:	6d 00 7d 0e 	call 800046a8 <IfxStdIf_Timer_initConfig>
    config->gtm            = gtm;
800029b2:	59 c8 34 00 	st.w [%a12]52,%d8
    config->tom            = IfxGtm_Tom_0;
800029b6:	82 02       	mov %d2,0
800029b8:	59 c2 38 00 	st.w [%a12]56,%d2
    config->timerChannel   = IfxGtm_Tom_Ch_0;
800029bc:	59 c2 3c 00 	st.w [%a12]60,%d2
    config->triggerOut     = NULL_PTR;
800029c0:	59 c2 00 10 	st.w [%a12]64,%d2
    config->clock          = IfxGtm_Tom_Ch_ClkSrc_cmuFxclk0;
800029c4:	59 c2 04 10 	st.w [%a12]68,%d2
    config->base.countDir  = IfxStdIf_Timer_CountDir_up;
800029c8:	59 c2 2c 00 	st.w [%a12]44,%d2
    config->irqModeTimer   = IfxGtm_IrqMode_level;
800029cc:	59 c2 08 10 	st.w [%a12]72,%d2
    config->irqModeTrigger = IfxGtm_IrqMode_level;
800029d0:	59 c2 0c 10 	st.w [%a12]76,%d2
    config->initPins       = TRUE;
800029d4:	82 12       	mov %d2,1
800029d6:	e9 c2 10 10 	st.b [%a12]80,%d2
}
800029da:	00 90       	ret 

800029dc <IfxGtm_Tom_PwmHl_setDeadtime>:
    config->initPins = TRUE;
}


boolean IfxGtm_Tom_PwmHl_setDeadtime(IfxGtm_Tom_PwmHl *driver, float32 deadtime)
{
800029dc:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue value = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, deadtime);
800029de:	99 42 20 00 	ld.a %a2,[%a4]32
800029e2:	19 22 08 00 	ld.w %d2,[%a2]8
800029e6:	4b 42 41 20 	mul.f %d2,%d2,%d4
800029ea:	4b 02 71 21 	ftouz %d2,%d2
    driver->base.deadtime = value;
800029ee:	74 42       	st.w [%a4],%d2

    return TRUE;
}
800029f0:	82 12       	mov %d2,1
800029f2:	00 90       	ret 

800029f4 <IfxGtm_Tom_PwmHl_setMinPulse>:


boolean IfxGtm_Tom_PwmHl_setMinPulse(IfxGtm_Tom_PwmHl *driver, float32 minPulse)
{
800029f4:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue value = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, minPulse);
800029f6:	99 42 20 00 	ld.a %a2,[%a4]32
800029fa:	19 22 08 00 	ld.w %d2,[%a2]8
800029fe:	4b 42 41 20 	mul.f %d2,%d2,%d4
80002a02:	4b 02 71 21 	ftouz %d2,%d2

    driver->base.minPulse = value + driver->base.deadtime;
80002a06:	54 43       	ld.w %d3,[%a4]
80002a08:	42 32       	add %d2,%d3
80002a0a:	59 42 04 00 	st.w [%a4]4,%d2
    driver->base.maxPulse = driver->timer->base.period - driver->base.minPulse;
80002a0e:	54 23       	ld.w %d3,[%a2]
80002a10:	0b 23 80 20 	sub %d2,%d3,%d2
80002a14:	59 42 08 00 	st.w [%a4]8,%d2

    return TRUE;
}
80002a18:	82 12       	mov %d2,1
80002a1a:	00 90       	ret 

80002a1c <IfxGtm_Tom_PwmHl_setMode>:


boolean IfxGtm_Tom_PwmHl_setMode(IfxGtm_Tom_PwmHl *driver, Ifx_Pwm_Mode mode)
{
80002a1c:	40 ae       	mov.aa %a14,%sp
    boolean                result = TRUE;
    IfxGtm_Tom_PwmHl_Base *base   = &driver->base;

    if (base->mode != mode)
80002a1e:	19 42 0c 00 	ld.w %d2,[%a4]12
80002a22:	5f 42 a4 00 	jeq %d2,%d4,80002b6a <IfxGtm_Tom_PwmHl_setMode+0x14e>
    {
        if ((mode > Ifx_Pwm_Mode_off) || (IfxGtm_Tom_PwmHl_modes[mode].update == NULL_PTR))
80002a26:	ff 54 11 80 	jge.u %d4,5,80002a48 <IfxGtm_Tom_PwmHl_setMode+0x2c>
80002a2a:	91 00 00 28 	movh.a %a2,32768
80002a2e:	80 22       	mov.d %d2,%a2
80002a30:	1b 82 42 20 	addi %d2,%d2,1064
80002a34:	13 44 21 22 	madd %d2,%d2,%d4,20
80002a38:	60 22       	mov.a %a2,%d2
80002a3a:	19 22 08 00 	ld.w %d2,[%a2]8
80002a3e:	df 02 3c 00 	jeq %d2,0,80002ab6 <IfxGtm_Tom_PwmHl_setMode+0x9a>
    boolean                result = TRUE;
80002a42:	82 12       	mov %d2,1
80002a44:	1d 00 04 00 	j 80002a4c <IfxGtm_Tom_PwmHl_setMode+0x30>
        {
            mode   = Ifx_Pwm_Mode_off;
            result = FALSE;
80002a48:	82 02       	mov %d2,0
            mode   = Ifx_Pwm_Mode_off;
80002a4a:	82 44       	mov %d4,4
        }

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mode == IfxGtm_Tom_PwmHl_modes[mode].mode);

        base->mode             = mode;
80002a4c:	59 44 0c 00 	st.w [%a4]12,%d4
        driver->update         = IfxGtm_Tom_PwmHl_modes[mode].update;
80002a50:	91 00 00 28 	movh.a %a2,32768
80002a54:	80 23       	mov.d %d3,%a2
80002a56:	1b 83 42 30 	addi %d3,%d3,1064
80002a5a:	13 44 21 33 	madd %d3,%d3,%d4,20
80002a5e:	60 32       	mov.a %a2,%d3
80002a60:	19 23 08 00 	ld.w %d3,[%a2]8
80002a64:	59 43 24 00 	st.w [%a4]36,%d3
        driver->updateAndShift = IfxGtm_Tom_PwmHl_modes[mode].updateAndShift;
80002a68:	19 23 0c 00 	ld.w %d3,[%a2]12
80002a6c:	59 43 28 00 	st.w [%a4]40,%d3
        driver->updatePulse    = IfxGtm_Tom_PwmHl_modes[mode].updatePulse;
80002a70:	19 23 10 00 	ld.w %d3,[%a2]16
80002a74:	59 43 2c 00 	st.w [%a4]44,%d3

        if (base->mode != Ifx_Pwm_Mode_off)
80002a78:	df 44 0e 00 	jeq %d4,4,80002a94 <IfxGtm_Tom_PwmHl_setMode+0x78>
        {
            base->inverted = IfxGtm_Tom_PwmHl_modes[mode].inverted;
80002a7c:	91 00 00 28 	movh.a %a2,32768
80002a80:	80 23       	mov.d %d3,%a2
80002a82:	1b 83 42 30 	addi %d3,%d3,1064
80002a86:	13 44 21 33 	madd %d3,%d3,%d4,20
80002a8a:	60 32       	mov.a %a2,%d3
80002a8c:	39 23 04 00 	ld.bu %d3,[%a2]4
80002a90:	e9 43 1c 00 	st.b [%a4]28,%d3
        }
        else
        {                       /* Keep previous inverted for off mode */
        }

        if (base->inverted)
80002a94:	39 43 1c 00 	ld.bu %d3,[%a4]28
80002a98:	df 03 13 00 	jeq %d3,0,80002abe <IfxGtm_Tom_PwmHl_setMode+0xa2>
        {
            driver->ccxTemp   = driver->coutx;
80002a9c:	80 43       	mov.d %d3,%a4
80002a9e:	1b 43 04 30 	addi %d3,%d3,68
80002aa2:	59 43 10 10 	st.w [%a4]80,%d3
            driver->coutxTemp = driver->ccx;
80002aa6:	80 43       	mov.d %d3,%a4
80002aa8:	1b 83 03 30 	addi %d3,%d3,56
80002aac:	59 43 14 10 	st.w [%a4]84,%d3
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002ab0:	82 04       	mov %d4,0
80002ab2:	1d 00 3d 00 	j 80002b2c <IfxGtm_Tom_PwmHl_setMode+0x110>
            result = FALSE;
80002ab6:	82 02       	mov %d2,0
            mode   = Ifx_Pwm_Mode_off;
80002ab8:	82 44       	mov %d4,4
80002aba:	1d ff c9 ff 	j 80002a4c <IfxGtm_Tom_PwmHl_setMode+0x30>
        }
        else
        {
            driver->ccxTemp   = driver->ccx;
80002abe:	80 43       	mov.d %d3,%a4
80002ac0:	1b 83 03 30 	addi %d3,%d3,56
80002ac4:	59 43 10 10 	st.w [%a4]80,%d3
            driver->coutxTemp = driver->coutx;
80002ac8:	80 43       	mov.d %d3,%a4
80002aca:	1b 43 04 30 	addi %d3,%d3,68
80002ace:	59 43 14 10 	st.w [%a4]84,%d3
80002ad2:	1d ff ef ff 	j 80002ab0 <IfxGtm_Tom_PwmHl_setMode+0x94>
                IfxGtm_Tom_Ch channel;

                channel = driver->ccx[channelIndex];
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
                    ? base->ccxActiveState
                    : IfxGtm_Tom_PwmHl_invertActiveState(driver->base.ccxActiveState));
80002ad6:	19 43 14 00 	ld.w %d3,[%a4]20
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80002ada:	8b 03 00 32 	eq %d3,%d3,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002ade:	06 65       	sh %d5,6
80002ae0:	60 62       	mov.a %a2,%d6
80002ae2:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002ae6:	df 13 37 00 	jeq %d3,1,80002b54 <IfxGtm_Tom_PwmHl_setMode+0x138>
80002aea:	82 05       	mov %d5,0
80002aec:	54 23       	ld.w %d3,[%a2]
80002aee:	67 53 0b 30 	ins.t %d3,%d3,11,%d5,0
80002af2:	74 23       	st.w [%a2],%d3

                channel = driver->coutx[channelIndex];
80002af4:	1b 14 01 30 	addi %d3,%d4,17
80002af8:	06 23       	sh %d3,2
80002afa:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80002afe:	54 25       	ld.w %d5,[%a2]
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80002b00:	19 46 30 00 	ld.w %d6,[%a4]48
80002b04:	39 43 1c 00 	ld.bu %d3,[%a4]28
80002b08:	df 03 29 00 	jeq %d3,0,80002b5a <IfxGtm_Tom_PwmHl_setMode+0x13e>
                    ? IfxGtm_Tom_PwmHl_invertActiveState(driver->base.coutxActiveState)
80002b0c:	19 43 18 00 	ld.w %d3,[%a4]24
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80002b10:	8b 03 00 32 	eq %d3,%d3,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002b14:	06 65       	sh %d5,6
80002b16:	60 62       	mov.a %a2,%d6
80002b18:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002b1c:	df 13 23 00 	jeq %d3,1,80002b62 <IfxGtm_Tom_PwmHl_setMode+0x146>
80002b20:	82 05       	mov %d5,0
80002b22:	54 23       	ld.w %d3,[%a2]
80002b24:	67 53 0b 30 	ins.t %d3,%d3,11,%d5,0
80002b28:	74 23       	st.w [%a2],%d3
            for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002b2a:	c2 14       	add %d4,1
80002b2c:	39 43 1d 00 	ld.bu %d3,[%a4]29
80002b30:	7f 34 1c 80 	jge.u %d4,%d3,80002b68 <IfxGtm_Tom_PwmHl_setMode+0x14c>
                channel = driver->ccx[channelIndex];
80002b34:	1b e4 00 30 	addi %d3,%d4,14
80002b38:	06 23       	sh %d3,2
80002b3a:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80002b3e:	54 25       	ld.w %d5,[%a2]
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80002b40:	19 46 30 00 	ld.w %d6,[%a4]48
80002b44:	39 43 1c 00 	ld.bu %d3,[%a4]28
80002b48:	df 03 c7 7f 	jeq %d3,0,80002ad6 <IfxGtm_Tom_PwmHl_setMode+0xba>
80002b4c:	19 43 14 00 	ld.w %d3,[%a4]20
80002b50:	1d ff c7 ff 	j 80002ade <IfxGtm_Tom_PwmHl_setMode+0xc2>
80002b54:	82 15       	mov %d5,1
80002b56:	1d ff cb ff 	j 80002aec <IfxGtm_Tom_PwmHl_setMode+0xd0>
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80002b5a:	19 43 18 00 	ld.w %d3,[%a4]24
80002b5e:	1d ff db ff 	j 80002b14 <IfxGtm_Tom_PwmHl_setMode+0xf8>
80002b62:	82 15       	mov %d5,1
80002b64:	1d ff df ff 	j 80002b22 <IfxGtm_Tom_PwmHl_setMode+0x106>
80002b68:	00 90       	ret 
    boolean                result = TRUE;
80002b6a:	82 12       	mov %d2,1
            }
        }
    }

    return result;
}
80002b6c:	00 90       	ret 

80002b6e <IfxGtm_Tom_PwmHl_setOnTime>:


void IfxGtm_Tom_PwmHl_setOnTime(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80002b6e:	40 ae       	mov.aa %a14,%sp
    driver->update(driver, tOn);
80002b70:	99 42 24 00 	ld.a %a2,[%a4]36
80002b74:	2d 02 00 00 	calli %a2
}
80002b78:	00 90       	ret 

80002b7a <IfxGtm_Tom_PwmHl_updateCenterAligned>:
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
}


IFX_STATIC void IfxGtm_Tom_PwmHl_updateCenterAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80002b7a:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
80002b7c:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
80002b7e:	99 42 20 00 	ld.a %a2,[%a4]32
80002b82:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002b84:	82 03       	mov %d3,0
80002b86:	1d 00 5e 00 	j 80002c42 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc8>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {                       /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
80002b8a:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80002b8c:	5f 52 2e 00 	jeq %d2,%d5,80002be8 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x6e>
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1) */);
        }
        else if (x == 0)
80002b90:	df 02 75 80 	jne %d2,0,80002c7a <IfxGtm_Tom_PwmHl_updateCenterAligned+0x100>
        {
            cm0 = 1;
            cm1 = period + 2;
80002b94:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
80002b98:	99 42 10 10 	ld.a %a2,[%a4]80
80002b9c:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002ba0:	54 26       	ld.w %d6,[%a2]
80002ba2:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002ba6:	06 66       	sh %d6,6
80002ba8:	99 42 30 00 	ld.a %a2,[%a4]48
80002bac:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002bb0:	82 16       	mov %d6,1
80002bb2:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
80002bb6:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80002bba:	99 42 14 10 	ld.a %a2,[%a4]84
80002bbe:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002bc2:	54 26       	ld.w %d6,[%a2]
80002bc4:	1b 17 00 40 	addi %d4,%d7,1
80002bc8:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002bcc:	06 66       	sh %d6,6
80002bce:	99 42 30 00 	ld.a %a2,[%a4]48
80002bd2:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002bd6:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80002bda:	59 22 08 00 	st.w [%a2]8,%d2
}
80002bde:	1d 00 2f 00 	j 80002c3c <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc2>
            x = 0;
80002be2:	82 02       	mov %d2,0
80002be4:	1d ff d4 ff 	j 80002b8c <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80002be8:	99 42 10 10 	ld.a %a2,[%a4]80
80002bec:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002bf0:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
80002bf2:	37 05 70 20 	extr.u %d2,%d5,0,16
80002bf6:	1b 12 00 00 	addi %d0,%d2,1
80002bfa:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
80002bfe:	1b 27 00 60 	addi %d6,%d7,2
80002c02:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002c06:	06 61       	sh %d1,6
80002c08:	99 42 30 00 	ld.a %a2,[%a4]48
80002c0c:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80002c10:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
80002c14:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
80002c18:	99 42 14 10 	ld.a %a2,[%a4]84
80002c1c:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002c20:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
80002c22:	c2 22       	add %d2,2
80002c24:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002c28:	06 64       	sh %d4,6
80002c2a:	99 42 30 00 	ld.a %a2,[%a4]48
80002c2e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80002c32:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002c36:	82 22       	mov %d2,2
80002c38:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002c3c:	c2 13       	add %d3,1
80002c3e:	8f f3 0f 31 	and %d3,%d3,255
80002c42:	39 42 1d 00 	ld.bu %d2,[%a4]29
80002c46:	7f 23 4e 80 	jge.u %d3,%d2,80002ce2 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x168>
        x = tOn[channelIndex];
80002c4a:	8f 23 00 40 	sh %d4,%d3,2
80002c4e:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
80002c52:	54 22       	ld.w %d2,[%a2]
        if (driver->base.inverted != FALSE)
80002c54:	39 46 1c 00 	ld.bu %d6,[%a4]28
80002c58:	df 06 04 00 	jeq %d6,0,80002c60 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xe6>
            x = period - x;
80002c5c:	0b 25 80 20 	sub %d2,%d5,%d2
        if ((x < driver->base.minPulse) || (x <= deadtime))
80002c60:	19 46 04 00 	ld.w %d6,[%a4]4
80002c64:	3f 62 93 ff 	jlt.u %d2,%d6,80002b8a <IfxGtm_Tom_PwmHl_updateCenterAligned+0x10>
80002c68:	7f 27 bd ff 	jge.u %d7,%d2,80002be2 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x68>
        else if (x > driver->base.maxPulse)
80002c6c:	19 46 08 00 	ld.w %d6,[%a4]8
80002c70:	7f 26 8e ff 	jge.u %d6,%d2,80002b8c <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
            x = period;
80002c74:	02 52       	mov %d2,%d5
80002c76:	1d ff 8b ff 	j 80002b8c <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
        }
        else
        {                           /* x% duty cycle */
            cm1 = (period - x) / 2; // CM1
80002c7a:	0b 25 80 60 	sub %d6,%d5,%d2
80002c7e:	06 f6       	sh %d6,-1
            cm0 = (period + x) / 2; // CM0
80002c80:	42 52       	add %d2,%d5
80002c82:	8f f2 1f 80 	sh %d8,%d2,-1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
80002c86:	99 42 10 10 	ld.a %a2,[%a4]80
80002c8a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002c8e:	54 2a       	ld.w %d10,[%a2]
80002c90:	37 02 f0 90 	extr.u %d9,%d2,1,16
80002c94:	bb f0 ff 2f 	mov.u %d2,65535
80002c98:	26 28       	and %d8,%d2
80002c9a:	37 07 70 00 	extr.u %d0,%d7,0,16
80002c9e:	0b 60 00 10 	add %d1,%d0,%d6
80002ca2:	37 01 70 10 	extr.u %d1,%d1,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002ca6:	06 6a       	sh %d10,6
80002ca8:	99 42 30 00 	ld.a %a2,[%a4]48
80002cac:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->SR0.U = shadowZero;
80002cb0:	59 28 04 00 	st.w [%a2]4,%d8
    tomCh->SR1.U = shadowOne;
80002cb4:	59 21 08 00 	st.w [%a2]8,%d1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80002cb8:	99 42 14 10 	ld.a %a2,[%a4]84
80002cbc:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002cc0:	54 21       	ld.w %d1,[%a2]
80002cc2:	0b 09 00 40 	add %d4,%d9,%d0
80002cc6:	37 04 70 40 	extr.u %d4,%d4,0,16
80002cca:	26 62       	and %d2,%d6
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002ccc:	06 61       	sh %d1,6
80002cce:	99 42 30 00 	ld.a %a2,[%a4]48
80002cd2:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80002cd6:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80002cda:	59 22 08 00 	st.w [%a2]8,%d2
}
80002cde:	1d ff af ff 	j 80002c3c <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc2>
        }
    }
}
80002ce2:	00 90       	ret 

80002ce4 <IfxGtm_Tom_PwmHl_updateEdgeAligned>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateEdgeAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80002ce4:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
80002ce6:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
80002ce8:	99 42 20 00 	ld.a %a2,[%a4]32
80002cec:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002cee:	82 03       	mov %d3,0
80002cf0:	1d 00 5e 00 	j 80002dac <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc8>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {                       /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
80002cf4:	82 00       	mov %d0,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80002cf6:	5f 50 2e 00 	jeq %d0,%d5,80002d52 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x6e>
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1) */);
        }
        else if (x == 0)
80002cfa:	df 00 75 80 	jne %d0,0,80002de4 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x100>
        {
            cm0 = 1;
            cm1 = period + 2;
80002cfe:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
80002d02:	99 42 10 10 	ld.a %a2,[%a4]80
80002d06:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002d0a:	54 26       	ld.w %d6,[%a2]
80002d0c:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002d10:	06 66       	sh %d6,6
80002d12:	99 42 30 00 	ld.a %a2,[%a4]48
80002d16:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002d1a:	82 16       	mov %d6,1
80002d1c:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
80002d20:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80002d24:	99 42 14 10 	ld.a %a2,[%a4]84
80002d28:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002d2c:	54 26       	ld.w %d6,[%a2]
80002d2e:	1b 17 00 40 	addi %d4,%d7,1
80002d32:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002d36:	06 66       	sh %d6,6
80002d38:	99 42 30 00 	ld.a %a2,[%a4]48
80002d3c:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002d40:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80002d44:	59 22 08 00 	st.w [%a2]8,%d2
}
80002d48:	1d 00 2f 00 	j 80002da6 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc2>
            x = 0;
80002d4c:	82 00       	mov %d0,0
80002d4e:	1d ff d4 ff 	j 80002cf6 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80002d52:	99 42 10 10 	ld.a %a2,[%a4]80
80002d56:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002d5a:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
80002d5c:	37 05 70 20 	extr.u %d2,%d5,0,16
80002d60:	1b 12 00 00 	addi %d0,%d2,1
80002d64:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
80002d68:	1b 27 00 60 	addi %d6,%d7,2
80002d6c:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002d70:	06 61       	sh %d1,6
80002d72:	99 42 30 00 	ld.a %a2,[%a4]48
80002d76:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80002d7a:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
80002d7e:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
80002d82:	99 42 14 10 	ld.a %a2,[%a4]84
80002d86:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002d8a:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
80002d8c:	c2 22       	add %d2,2
80002d8e:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002d92:	06 64       	sh %d4,6
80002d94:	99 42 30 00 	ld.a %a2,[%a4]48
80002d98:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80002d9c:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002da0:	82 22       	mov %d2,2
80002da2:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002da6:	c2 13       	add %d3,1
80002da8:	8f f3 0f 31 	and %d3,%d3,255
80002dac:	39 42 1d 00 	ld.bu %d2,[%a4]29
80002db0:	7f 23 44 80 	jge.u %d3,%d2,80002e38 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x154>
        x = tOn[channelIndex];
80002db4:	8f 23 00 40 	sh %d4,%d3,2
80002db8:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
80002dbc:	54 20       	ld.w %d0,[%a2]
        if (driver->base.inverted != FALSE)
80002dbe:	39 46 1c 00 	ld.bu %d6,[%a4]28
80002dc2:	df 06 04 00 	jeq %d6,0,80002dca <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xe6>
            x = period - x;
80002dc6:	0b 05 80 00 	sub %d0,%d5,%d0
        if ((x < driver->base.minPulse) || (x <= deadtime))
80002dca:	19 46 04 00 	ld.w %d6,[%a4]4
80002dce:	3f 60 93 ff 	jlt.u %d0,%d6,80002cf4 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x10>
80002dd2:	7f 07 bd ff 	jge.u %d7,%d0,80002d4c <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x68>
        else if (x > driver->base.maxPulse)
80002dd6:	19 46 08 00 	ld.w %d6,[%a4]8
80002dda:	7f 06 8e ff 	jge.u %d6,%d0,80002cf6 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
            x = period;
80002dde:	02 50       	mov %d0,%d5
80002de0:	1d ff 8b ff 	j 80002cf6 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
        }
        else
        {                       /* x% duty cycle */
            cm1 = 2;            // CM1, set to 2 due to a GTM issue. should be 1 according to spec
            cm0 = x;            // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
80002de4:	99 42 10 10 	ld.a %a2,[%a4]80
80002de8:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002dec:	54 28       	ld.w %d8,[%a2]
80002dee:	37 00 70 10 	extr.u %d1,%d0,0,16
80002df2:	37 07 70 20 	extr.u %d2,%d7,0,16
80002df6:	1b 22 00 60 	addi %d6,%d2,2
80002dfa:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002dfe:	06 68       	sh %d8,6
80002e00:	99 42 30 00 	ld.a %a2,[%a4]48
80002e04:	01 28 00 26 	addsc.a %a2,%a2,%d8,0
    tomCh->SR0.U = shadowZero;
80002e08:	59 21 04 00 	st.w [%a2]4,%d1
    tomCh->SR1.U = shadowOne;
80002e0c:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80002e10:	99 42 14 10 	ld.a %a2,[%a4]84
80002e14:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002e18:	54 24       	ld.w %d4,[%a2]
80002e1a:	42 12       	add %d2,%d1
80002e1c:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002e20:	06 64       	sh %d4,6
80002e22:	99 42 30 00 	ld.a %a2,[%a4]48
80002e26:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80002e2a:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002e2e:	82 22       	mov %d2,2
80002e30:	59 22 08 00 	st.w [%a2]8,%d2
}
80002e34:	1d ff b9 ff 	j 80002da6 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc2>
        }
    }
}
80002e38:	00 90       	ret 

80002e3a <IfxGtm_Tom_PwmHl_updateOff>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateOff(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80002e3a:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(tOn)
    uint8 channelIndex;
    Ifx_TimerValue period;

    period = driver->timer->base.period;
80002e3c:	99 42 20 00 	ld.a %a2,[%a4]32
80002e40:	54 27       	ld.w %d7,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002e42:	82 02       	mov %d2,0
80002e44:	1d 00 2d 00 	j 80002e9e <IfxGtm_Tom_PwmHl_updateOff+0x64>
    {
        IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80002e48:	8f 22 00 40 	sh %d4,%d2,2
80002e4c:	99 42 10 10 	ld.a %a2,[%a4]80
80002e50:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002e54:	54 26       	ld.w %d6,[%a2]
            2 /* 1 will keep the previous level */, period + 2);
80002e56:	37 07 70 30 	extr.u %d3,%d7,0,16
80002e5a:	1b 23 00 50 	addi %d5,%d3,2
80002e5e:	37 05 70 50 	extr.u %d5,%d5,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002e62:	06 66       	sh %d6,6
80002e64:	99 42 30 00 	ld.a %a2,[%a4]48
80002e68:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002e6c:	82 26       	mov %d6,2
80002e6e:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
80002e72:	59 25 08 00 	st.w [%a2]8,%d5
        IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], period + 1, 2);
80002e76:	99 42 14 10 	ld.a %a2,[%a4]84
80002e7a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002e7e:	54 24       	ld.w %d4,[%a2]
80002e80:	c2 13       	add %d3,1
80002e82:	37 03 70 30 	extr.u %d3,%d3,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002e86:	06 64       	sh %d4,6
80002e88:	99 42 30 00 	ld.a %a2,[%a4]48
80002e8c:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80002e90:	59 23 04 00 	st.w [%a2]4,%d3
    tomCh->SR1.U = shadowOne;
80002e94:	59 26 08 00 	st.w [%a2]8,%d6
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002e98:	c2 12       	add %d2,1
80002e9a:	8f f2 0f 21 	and %d2,%d2,255
80002e9e:	39 43 1d 00 	ld.bu %d3,[%a4]29
80002ea2:	3f 32 d3 ff 	jlt.u %d2,%d3,80002e48 <IfxGtm_Tom_PwmHl_updateOff+0xe>
    }
}
80002ea6:	00 90       	ret 

80002ea8 <IfxGtm_Tom_PwmHl_updateAndShiftOff>:
{
80002ea8:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
80002eaa:	a0 05       	mov.a %a5,0
80002eac:	6d ff c7 ff 	call 80002e3a <IfxGtm_Tom_PwmHl_updateOff>
}
80002eb0:	00 90       	ret 

80002eb2 <IfxGtm_Tom_PwmHl_updatePulse>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updatePulse(IfxGtm_Tom_PwmHl *driver, float32 *tOn, float32 *offset)
{
80002eb2:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;

    period = driver->timer->base.period;
80002eb4:	99 42 20 00 	ld.a %a2,[%a4]32
80002eb8:	54 23       	ld.w %d3,[%a2]

    /* Top channels */
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002eba:	82 04       	mov %d4,0
80002ebc:	1d 00 38 00 	j 80002f2c <IfxGtm_Tom_PwmHl_updatePulse+0x7a>
        else
        {}

        if ((x < driver->base.minPulse) || (o > period))
        {
            x = 0;
80002ec0:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80002ec2:	5f 32 1f 00 	jeq %d2,%d3,80002f00 <IfxGtm_Tom_PwmHl_updatePulse+0x4e>
        {   /* 100% duty cycle */
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
                period + 1 /* No compare event */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
80002ec6:	df 02 62 80 	jne %d2,0,80002f8a <IfxGtm_Tom_PwmHl_updatePulse+0xd8>
        {
            cm0 = 1;
            cm1 = period + 2;
80002eca:	1b 23 00 20 	addi %d2,%d3,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
80002ece:	99 42 10 10 	ld.a %a2,[%a4]80
80002ed2:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80002ed6:	54 25       	ld.w %d5,[%a2]
80002ed8:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002edc:	06 65       	sh %d5,6
80002ede:	99 42 30 00 	ld.a %a2,[%a4]48
80002ee2:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80002ee6:	82 15       	mov %d5,1
80002ee8:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
80002eec:	59 22 08 00 	st.w [%a2]8,%d2
}
80002ef0:	1d 00 1b 00 	j 80002f26 <IfxGtm_Tom_PwmHl_updatePulse+0x74>
            x = 0;
80002ef4:	82 02       	mov %d2,0
80002ef6:	1d ff e6 ff 	j 80002ec2 <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            x = period;
80002efa:	02 32       	mov %d2,%d3
80002efc:	1d ff e3 ff 	j 80002ec2 <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80002f00:	99 42 10 10 	ld.a %a2,[%a4]80
80002f04:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80002f08:	54 25       	ld.w %d5,[%a2]
                period + 1 /* No compare event */,
80002f0a:	1b 13 00 20 	addi %d2,%d3,1
80002f0e:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002f12:	06 65       	sh %d5,6
80002f14:	99 42 30 00 	ld.a %a2,[%a4]48
80002f18:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80002f1c:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002f20:	82 22       	mov %d2,2
80002f22:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002f26:	c2 14       	add %d4,1
80002f28:	8f f4 0f 41 	and %d4,%d4,255
80002f2c:	39 42 1d 00 	ld.bu %d2,[%a4]29
80002f30:	7f 24 44 80 	jge.u %d4,%d2,80002fb8 <IfxGtm_Tom_PwmHl_updatePulse+0x106>
        x = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, tOn[channelIndex]);
80002f34:	99 42 20 00 	ld.a %a2,[%a4]32
80002f38:	19 25 08 00 	ld.w %d5,[%a2]8
80002f3c:	8f 24 00 60 	sh %d6,%d4,2
80002f40:	01 56 00 26 	addsc.a %a2,%a5,%d6,0
80002f44:	54 22       	ld.w %d2,[%a2]
80002f46:	4b 25 41 20 	mul.f %d2,%d5,%d2
80002f4a:	4b 02 71 21 	ftouz %d2,%d2
        o = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, offset[channelIndex]);
80002f4e:	01 66 00 26 	addsc.a %a2,%a6,%d6,0
80002f52:	54 27       	ld.w %d7,[%a2]
80002f54:	4b 75 41 50 	mul.f %d5,%d5,%d7
80002f58:	4b 05 71 51 	ftouz %d5,%d5
        if (driver->base.inverted != FALSE)
80002f5c:	39 47 1c 00 	ld.bu %d7,[%a4]28
80002f60:	df 07 04 00 	jeq %d7,0,80002f68 <IfxGtm_Tom_PwmHl_updatePulse+0xb6>
            x = period - x;
80002f64:	0b 23 80 20 	sub %d2,%d3,%d2
        if ((x < driver->base.minPulse) || (o > period))
80002f68:	19 47 04 00 	ld.w %d7,[%a4]4
80002f6c:	3f 72 aa ff 	jlt.u %d2,%d7,80002ec0 <IfxGtm_Tom_PwmHl_updatePulse+0xe>
80002f70:	3f 53 c2 ff 	jlt.u %d3,%d5,80002ef4 <IfxGtm_Tom_PwmHl_updatePulse+0x42>
        else if ((x > driver->base.maxPulse) || (o + x > period))
80002f74:	19 47 08 00 	ld.w %d7,[%a4]8
80002f78:	3f 27 c1 ff 	jlt.u %d7,%d2,80002efa <IfxGtm_Tom_PwmHl_updatePulse+0x48>
80002f7c:	0b 52 00 70 	add %d7,%d2,%d5
80002f80:	7f 73 a1 ff 	jge.u %d3,%d7,80002ec2 <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            x = period;
80002f84:	02 32       	mov %d2,%d3
80002f86:	1d ff 9e ff 	j 80002ec2 <IfxGtm_Tom_PwmHl_updatePulse+0x10>
        }
        else
        {                /* x% duty cycle */
            cm1 = 2 + o; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
80002f8a:	1b 25 00 70 	addi %d7,%d5,2
            cm0 = o + x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
80002f8e:	42 25       	add %d5,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
80002f90:	99 42 10 10 	ld.a %a2,[%a4]80
80002f94:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80002f98:	54 26       	ld.w %d6,[%a2]
80002f9a:	bb f0 ff 2f 	mov.u %d2,65535
80002f9e:	26 25       	and %d5,%d2
80002fa0:	26 72       	and %d2,%d7
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002fa2:	06 66       	sh %d6,6
80002fa4:	99 42 30 00 	ld.a %a2,[%a4]48
80002fa8:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002fac:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
80002fb0:	59 22 08 00 	st.w [%a2]8,%d2
}
80002fb4:	1d ff b9 ff 	j 80002f26 <IfxGtm_Tom_PwmHl_updatePulse+0x74>
        }
    }

    /* Bottom channels */
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002fb8:	82 04       	mov %d4,0
80002fba:	1d 00 36 00 	j 80003026 <IfxGtm_Tom_PwmHl_updatePulse+0x174>
        else
        {}

        if (x < driver->base.minPulse)
        {
            x = 0;
80002fbe:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80002fc0:	5f 32 1b 00 	jeq %d2,%d3,80002ff6 <IfxGtm_Tom_PwmHl_updatePulse+0x144>
        {   /* 100% duty cycle */
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
80002fc4:	df 02 5b 80 	jne %d2,0,8000307a <IfxGtm_Tom_PwmHl_updatePulse+0x1c8>
        {
            cm0 = 1;
            cm1 = period + 2;
80002fc8:	1b 23 00 60 	addi %d6,%d3,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0, cm1);
80002fcc:	8f 24 00 20 	sh %d2,%d4,2
80002fd0:	99 42 14 10 	ld.a %a2,[%a4]84
80002fd4:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002fd8:	54 25       	ld.w %d5,[%a2]
80002fda:	37 06 70 20 	extr.u %d2,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002fde:	06 65       	sh %d5,6
80002fe0:	99 42 30 00 	ld.a %a2,[%a4]48
80002fe4:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80002fe8:	82 15       	mov %d5,1
80002fea:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
80002fee:	59 22 08 00 	st.w [%a2]8,%d2
}
80002ff2:	1d 00 17 00 	j 80003020 <IfxGtm_Tom_PwmHl_updatePulse+0x16e>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
80002ff6:	8f 24 00 20 	sh %d2,%d4,2
80002ffa:	99 42 14 10 	ld.a %a2,[%a4]84
80002ffe:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003002:	54 25       	ld.w %d5,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
80003004:	1b 23 00 20 	addi %d2,%d3,2
80003008:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000300c:	06 65       	sh %d5,6
8000300e:	99 42 30 00 	ld.a %a2,[%a4]48
80003012:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80003016:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
8000301a:	82 22       	mov %d2,2
8000301c:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003020:	c2 14       	add %d4,1
80003022:	8f f4 0f 41 	and %d4,%d4,255
80003026:	39 42 1d 00 	ld.bu %d2,[%a4]29
8000302a:	7f 24 42 80 	jge.u %d4,%d2,800030ae <IfxGtm_Tom_PwmHl_updatePulse+0x1fc>
        x = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, tOn[channelIndex + driver->base.channelCount]);
8000302e:	99 42 20 00 	ld.a %a2,[%a4]32
80003032:	19 25 08 00 	ld.w %d5,[%a2]8
80003036:	42 42       	add %d2,%d4
80003038:	8f 22 00 60 	sh %d6,%d2,2
8000303c:	01 56 00 26 	addsc.a %a2,%a5,%d6,0
80003040:	54 22       	ld.w %d2,[%a2]
80003042:	4b 25 41 20 	mul.f %d2,%d5,%d2
80003046:	4b 02 71 21 	ftouz %d2,%d2
        o = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, offset[channelIndex + driver->base.channelCount]);
8000304a:	01 66 00 26 	addsc.a %a2,%a6,%d6,0
8000304e:	54 26       	ld.w %d6,[%a2]
80003050:	4b 65 41 60 	mul.f %d6,%d5,%d6
80003054:	4b 06 71 61 	ftouz %d6,%d6
        if (driver->base.inverted != FALSE)
80003058:	39 45 1c 00 	ld.bu %d5,[%a4]28
8000305c:	df 05 04 00 	jeq %d5,0,80003064 <IfxGtm_Tom_PwmHl_updatePulse+0x1b2>
            x = period - x;
80003060:	0b 23 80 20 	sub %d2,%d3,%d2
        if (x < driver->base.minPulse)
80003064:	19 45 04 00 	ld.w %d5,[%a4]4
80003068:	3f 52 ab ff 	jlt.u %d2,%d5,80002fbe <IfxGtm_Tom_PwmHl_updatePulse+0x10c>
        else if (x > driver->base.maxPulse)
8000306c:	19 45 08 00 	ld.w %d5,[%a4]8
80003070:	7f 25 a8 ff 	jge.u %d5,%d2,80002fc0 <IfxGtm_Tom_PwmHl_updatePulse+0x10e>
            x = period;
80003074:	02 32       	mov %d2,%d3
80003076:	1d ff a5 ff 	j 80002fc0 <IfxGtm_Tom_PwmHl_updatePulse+0x10e>
        }
        else
        {                /* x% duty cycle */
            cm1 = 2 + o; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
8000307a:	1b 26 00 70 	addi %d7,%d6,2
            cm0 = o + x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
8000307e:	0b 62 00 50 	add %d5,%d2,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0, cm1);
80003082:	8f 24 00 20 	sh %d2,%d4,2
80003086:	99 42 14 10 	ld.a %a2,[%a4]84
8000308a:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000308e:	54 26       	ld.w %d6,[%a2]
80003090:	bb f0 ff 2f 	mov.u %d2,65535
80003094:	26 25       	and %d5,%d2
80003096:	26 72       	and %d2,%d7
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003098:	06 66       	sh %d6,6
8000309a:	99 42 30 00 	ld.a %a2,[%a4]48
8000309e:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
800030a2:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
800030a6:	59 22 08 00 	st.w [%a2]8,%d2
}
800030aa:	1d ff bb ff 	j 80003020 <IfxGtm_Tom_PwmHl_updatePulse+0x16e>
        }
    }
}
800030ae:	00 90       	ret 

800030b0 <IfxGtm_Tom_PwmHl_updatePulseOff>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updatePulseOff(IfxGtm_Tom_PwmHl *driver, float32 *tOn, float32 *offset)
{
800030b0:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(tOn)
    IFX_UNUSED_PARAMETER(offset)
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
800030b2:	a0 05       	mov.a %a5,0
800030b4:	6d ff c3 fe 	call 80002e3a <IfxGtm_Tom_PwmHl_updateOff>
}
800030b8:	00 90       	ret 

800030ba <IfxGtm_Tom_PwmHl_updateShiftCenterAligned>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateShiftCenterAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn, Ifx_TimerValue *shift)
{
800030ba:	40 ae       	mov.aa %a14,%sp
800030bc:	80 6b       	mov.d %d11,%a6
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
800030be:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
800030c0:	99 42 20 00 	ld.a %a2,[%a4]32
800030c4:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
800030c6:	82 03       	mov %d3,0
800030c8:	1d 00 5e 00 	j 80003184 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xca>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {   /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
800030cc:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
800030ce:	5f 52 2e 00 	jeq %d2,%d5,8000312a <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x70>
                2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
800030d2:	df 02 75 80 	jne %d2,0,800031bc <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x102>
        {
            cm0 = 1;
            cm1 = period + 2;
800030d6:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
800030da:	99 42 10 10 	ld.a %a2,[%a4]80
800030de:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800030e2:	54 26       	ld.w %d6,[%a2]
800030e4:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800030e8:	06 66       	sh %d6,6
800030ea:	99 42 30 00 	ld.a %a2,[%a4]48
800030ee:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
800030f2:	82 16       	mov %d6,1
800030f4:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
800030f8:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
800030fc:	99 42 14 10 	ld.a %a2,[%a4]84
80003100:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003104:	54 26       	ld.w %d6,[%a2]
80003106:	1b 17 00 40 	addi %d4,%d7,1
8000310a:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000310e:	06 66       	sh %d6,6
80003110:	99 42 30 00 	ld.a %a2,[%a4]48
80003114:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80003118:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
8000311c:	59 22 08 00 	st.w [%a2]8,%d2
}
80003120:	1d 00 2f 00 	j 8000317e <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xc4>
            x = 0;
80003124:	82 02       	mov %d2,0
80003126:	1d ff d4 ff 	j 800030ce <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
8000312a:	99 42 10 10 	ld.a %a2,[%a4]80
8000312e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003132:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
80003134:	37 05 70 20 	extr.u %d2,%d5,0,16
80003138:	1b 12 00 00 	addi %d0,%d2,1
8000313c:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
80003140:	1b 27 00 60 	addi %d6,%d7,2
80003144:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003148:	06 61       	sh %d1,6
8000314a:	99 42 30 00 	ld.a %a2,[%a4]48
8000314e:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80003152:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
80003156:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
8000315a:	99 42 14 10 	ld.a %a2,[%a4]84
8000315e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003162:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
80003164:	c2 22       	add %d2,2
80003166:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000316a:	06 64       	sh %d4,6
8000316c:	99 42 30 00 	ld.a %a2,[%a4]48
80003170:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80003174:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80003178:	82 22       	mov %d2,2
8000317a:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
8000317e:	c2 13       	add %d3,1
80003180:	8f f3 0f 31 	and %d3,%d3,255
80003184:	39 42 1d 00 	ld.bu %d2,[%a4]29
80003188:	7f 23 64 80 	jge.u %d3,%d2,80003250 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x196>
        x = tOn[channelIndex];
8000318c:	8f 23 00 40 	sh %d4,%d3,2
80003190:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
80003194:	54 22       	ld.w %d2,[%a2]
        if (driver->base.inverted != FALSE)
80003196:	39 46 1c 00 	ld.bu %d6,[%a4]28
8000319a:	df 06 04 00 	jeq %d6,0,800031a2 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xe8>
            x = period - x;
8000319e:	0b 25 80 20 	sub %d2,%d5,%d2
        if ((x < driver->base.minPulse) || (x <= deadtime))
800031a2:	19 46 04 00 	ld.w %d6,[%a4]4
800031a6:	3f 62 93 ff 	jlt.u %d2,%d6,800030cc <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x12>
800031aa:	7f 27 bd ff 	jge.u %d7,%d2,80003124 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x6a>
        else if (x > driver->base.maxPulse)
800031ae:	19 46 08 00 	ld.w %d6,[%a4]8
800031b2:	7f 26 8e ff 	jge.u %d6,%d2,800030ce <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
            x = period;
800031b6:	02 52       	mov %d2,%d5
800031b8:	1d ff 8b ff 	j 800030ce <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
        }
        else
        {                           /* x% duty cycle */
            s = shift[channelIndex];
800031bc:	60 b2       	mov.a %a2,%d11
800031be:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800031c2:	54 26       	ld.w %d6,[%a2]

            if (s > 0)
800031c4:	df 06 3e 00 	jeq %d6,0,80003240 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x186>
            {
                s = __minX(s, (period - x) / 2 - 1);
800031c8:	0b 25 80 00 	sub %d0,%d5,%d2
800031cc:	06 f0       	sh %d0,-1
800031ce:	c2 f0       	add %d0,-1
800031d0:	0b 60 90 61 	min.u %d6,%d0,%d6
            else
            {
                s = __maxX(s, (x - period) / 2 + 1);
            }

            cm1 = s + (period - x) / 2; // CM1
800031d4:	0b 25 80 00 	sub %d0,%d5,%d2
800031d8:	06 f0       	sh %d0,-1
800031da:	42 60       	add %d0,%d6
            cm0 = s + (period + x) / 2; // CM0
800031dc:	42 52       	add %d2,%d5
800031de:	06 f2       	sh %d2,-1
800031e0:	42 26       	add %d6,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
800031e2:	99 42 10 10 	ld.a %a2,[%a4]80
800031e6:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800031ea:	54 2a       	ld.w %d10,[%a2]
800031ec:	37 06 70 90 	extr.u %d9,%d6,0,16
800031f0:	bb f0 ff 2f 	mov.u %d2,65535
800031f4:	0f 26 80 80 	and %d8,%d6,%d2
800031f8:	37 07 70 60 	extr.u %d6,%d7,0,16
800031fc:	0b 06 00 10 	add %d1,%d6,%d0
80003200:	37 01 70 10 	extr.u %d1,%d1,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003204:	06 6a       	sh %d10,6
80003206:	99 42 30 00 	ld.a %a2,[%a4]48
8000320a:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->SR0.U = shadowZero;
8000320e:	59 28 04 00 	st.w [%a2]4,%d8
    tomCh->SR1.U = shadowOne;
80003212:	59 21 08 00 	st.w [%a2]8,%d1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80003216:	99 42 14 10 	ld.a %a2,[%a4]84
8000321a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000321e:	54 21       	ld.w %d1,[%a2]
80003220:	0b 69 00 40 	add %d4,%d9,%d6
80003224:	37 04 70 40 	extr.u %d4,%d4,0,16
80003228:	26 02       	and %d2,%d0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000322a:	06 61       	sh %d1,6
8000322c:	99 42 30 00 	ld.a %a2,[%a4]48
80003230:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80003234:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80003238:	59 22 08 00 	st.w [%a2]8,%d2
}
8000323c:	1d ff a1 ff 	j 8000317e <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xc4>
                s = __maxX(s, (x - period) / 2 + 1);
80003240:	0b 52 80 00 	sub %d0,%d2,%d5
80003244:	06 f0       	sh %d0,-1
80003246:	c2 10       	add %d0,1
80003248:	0b 60 b0 61 	max.u %d6,%d0,%d6
8000324c:	1d ff c4 ff 	j 800031d4 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x11a>
        }
    }
}
80003250:	00 90       	ret 

80003252 <IfxGtm_Tom_PwmHl_init>:
{
80003252:	40 ae       	mov.aa %a14,%sp
80003254:	20 18       	sub.a %sp,24
80003256:	40 4c       	mov.aa %a12,%a4
80003258:	40 5d       	mov.aa %a13,%a5
    IfxGtm_Tom_Timer *timer        = config->timer;
8000325a:	cc 59       	ld.a %a15,[%a5]36
    driver->base.mode             = Ifx_Pwm_Mode_init;
8000325c:	82 52       	mov %d2,5
8000325e:	59 42 0c 00 	st.w [%a4]12,%d2
    driver->timer                 = timer;
80003262:	ec 48       	st.a [%a4]32,%a15
    driver->base.setMode          = 0;
80003264:	82 02       	mov %d2,0
80003266:	e9 42 10 00 	st.b [%a4]16,%d2
    driver->base.inverted         = FALSE;
8000326a:	e9 42 1c 00 	st.b [%a4]28,%d2
    driver->base.ccxActiveState   = config->base.ccxActiveState;
8000326e:	19 52 1c 00 	ld.w %d2,[%a5]28
80003272:	59 42 14 00 	st.w [%a4]20,%d2
    driver->base.coutxActiveState = config->base.coutxActiveState;
80003276:	19 52 20 00 	ld.w %d2,[%a5]32
8000327a:	59 42 18 00 	st.w [%a4]24,%d2
    driver->base.channelCount     = config->base.channelCount;
8000327e:	39 52 08 00 	ld.bu %d2,[%a5]8
80003282:	e9 42 1d 00 	st.b [%a4]29,%d2
    IfxGtm_Tom_PwmHl_setDeadtime(driver, config->base.deadtime);
80003286:	54 54       	ld.w %d4,[%a5]
80003288:	6d ff aa fb 	call 800029dc <IfxGtm_Tom_PwmHl_setDeadtime>
    IfxGtm_Tom_PwmHl_setMinPulse(driver, config->base.minPulse);
8000328c:	19 d4 04 00 	ld.w %d4,[%a13]4
80003290:	40 c4       	mov.aa %a4,%a12
80003292:	6d ff b1 fb 	call 800029f4 <IfxGtm_Tom_PwmHl_setMinPulse>
    driver->tom = &(timer->gtm->TOM[config->tom]);
80003296:	19 d2 28 00 	ld.w %d2,[%a13]40
8000329a:	1b 02 01 20 	addi %d2,%d2,16
8000329e:	8f b2 00 20 	sh %d2,%d2,11
800032a2:	48 43       	ld.w %d3,[%a15]16
800032a4:	42 23       	add %d3,%d2
800032a6:	59 c3 30 00 	st.w [%a12]48,%d3
    if (config->ccx[0]->channel <= 7)
800032aa:	99 d2 2c 00 	ld.a %a2,[%a13]44
800032ae:	d4 22       	ld.a %a2,[%a2]
800032b0:	19 22 04 00 	ld.w %d2,[%a2]4
800032b4:	8b 82 80 22 	ge %d2,%d2,8
800032b8:	df 02 1c 80 	jne %d2,0,800032f0 <IfxGtm_Tom_PwmHl_init+0x9e>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC0_GLB_CTRL;
800032bc:	1b 03 03 20 	addi %d2,%d3,48
        driver->tgc = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 0);
800032c0:	59 c2 34 00 	st.w [%a12]52,%d2
    maskShift = (config->ccx[0]->channel <= 7) ? 0 : 8;
800032c4:	99 d2 2c 00 	ld.a %a2,[%a13]44
800032c8:	d4 22       	ld.a %a2,[%a2]
800032ca:	19 22 04 00 	ld.w %d2,[%a2]4
800032ce:	8b 82 80 22 	ge %d2,%d2,8
800032d2:	df 02 15 80 	jne %d2,0,800032fc <IfxGtm_Tom_PwmHl_init+0xaa>
800032d6:	82 0f       	mov %d15,0
    IfxGtm_Tom_Ch_ClkSrc clock = IfxGtm_Tom_Ch_getClockSource(timer->tom, timer->timerChannel);
800032d8:	48 92       	ld.w %d2,[%a15]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800032da:	06 62       	sh %d2,6
800032dc:	c8 52       	ld.a %a2,[%a15]20
800032de:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    clk = (IfxGtm_Tom_Ch_ClkSrc)tomCh->CTRL.B.CLK_SRC_SR;
800032e2:	54 2e       	ld.w %d14,[%a2]
800032e4:	37 0e 63 e6 	extr.u %d14,%d14,12,3
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
800032e8:	82 08       	mov %d8,0
    uint16            channelsMask = 0;
800032ea:	82 09       	mov %d9,0
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
800032ec:	1d 00 af 00 	j 8000344a <IfxGtm_Tom_PwmHl_init+0x1f8>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
800032f0:	1b 03 23 20 	addi %d2,%d3,560
        driver->tgc = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
800032f4:	59 c2 34 00 	st.w [%a12]52,%d2
800032f8:	1d ff e6 ff 	j 800032c4 <IfxGtm_Tom_PwmHl_init+0x72>
    maskShift = (config->ccx[0]->channel <= 7) ? 0 : 8;
800032fc:	da 08       	mov %d15,8
800032fe:	1d ff ed ff 	j 800032d8 <IfxGtm_Tom_PwmHl_init+0x86>
            : IfxGtm_Tom_PwmHl_invertActiveState(config->base.ccxActiveState));
80003302:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80003306:	8b 02 00 22 	eq %d2,%d2,0
8000330a:	1d 00 cf 00 	j 800034a8 <IfxGtm_Tom_PwmHl_init+0x256>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
8000330e:	82 13       	mov %d3,1
80003310:	1d 00 d2 00 	j 800034b4 <IfxGtm_Tom_PwmHl_init+0x262>
            : IfxGtm_Tom_PwmHl_invertActiveState(config->base.ccxActiveState));
80003314:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80003318:	8b 02 00 22 	eq %d2,%d2,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000331c:	60 92       	mov.a %a2,%d9
8000331e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003322:	df 12 f1 00 	jeq %d2,1,80003504 <IfxGtm_Tom_PwmHl_init+0x2b2>
80003326:	82 03       	mov %d3,0
80003328:	54 22       	ld.w %d2,[%a2]
8000332a:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
8000332e:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003330:	99 c2 30 00 	ld.a %a2,[%a12]48
80003334:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
80003338:	54 22       	ld.w %d2,[%a2]
8000333a:	b7 12 01 2a 	insert %d2,%d2,1,20,1
8000333e:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003340:	99 c2 30 00 	ld.a %a2,[%a12]48
80003344:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
80003348:	54 22       	ld.w %d2,[%a2]
8000334a:	b7 02 01 2c 	insert %d2,%d2,0,24,1
8000334e:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, channel, IfxGtm_Tom_Timer_getOffset(driver->timer));
80003350:	19 ca 30 00 	ld.w %d10,[%a12]48
80003354:	99 c4 20 00 	ld.a %a4,[%a12]32
80003358:	6d ff e0 f8 	call 80002518 <IfxGtm_Tom_Timer_getOffset>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000335c:	60 92       	mov.a %a2,%d9
8000335e:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CN0.U = value;
80003362:	59 22 14 00 	st.w [%a2]20,%d2
        if (config->initPins == TRUE)
80003366:	39 d2 34 00 	ld.bu %d2,[%a13]52
8000336a:	df 12 d0 00 	jeq %d2,1,8000350a <IfxGtm_Tom_PwmHl_init+0x2b8>
        channel                     = config->coutx[channelIndex]->channel;
8000336e:	99 d2 30 00 	ld.a %a2,[%a13]48
80003372:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003376:	d4 22       	ld.a %a2,[%a2]
80003378:	19 2a 04 00 	ld.w %d10,[%a2]4
        driver->coutx[channelIndex] = channel;
8000337c:	1b 18 01 30 	addi %d3,%d8,17
80003380:	06 23       	sh %d3,2
80003382:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80003386:	74 2a       	st.w [%a2],%d10
        channelMask                 = 1 << (channel - maskShift);
80003388:	19 e2 ec ff 	ld.w %d2,[%a14]-20
8000338c:	0b 2a 80 30 	sub %d3,%d10,%d2
80003390:	82 1b       	mov %d11,1
80003392:	0f 3b 00 b0 	sh %d11,%d11,%d3
80003396:	37 0b 70 90 	extr.u %d9,%d11,0,16
        channelsMask               |= channelMask;
8000339a:	a6 d9       	or %d9,%d13
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000339c:	06 6a       	sh %d10,6
8000339e:	99 c2 30 00 	ld.a %a2,[%a12]48
800033a2:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
800033a6:	54 22       	ld.w %d2,[%a2]
800033a8:	37 e2 03 26 	insert %d2,%d2,%d14,12,3
800033ac:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
800033ae:	19 c3 30 00 	ld.w %d3,[%a12]48
800033b2:	39 c2 1c 00 	ld.bu %d2,[%a12]28
800033b6:	df 02 cd 00 	jeq %d2,0,80003550 <IfxGtm_Tom_PwmHl_init+0x2fe>
            ? IfxGtm_Tom_PwmHl_invertActiveState(config->base.coutxActiveState)
800033ba:	19 d2 20 00 	ld.w %d2,[%a13]32
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
800033be:	8b 02 00 22 	eq %d2,%d2,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800033c2:	60 a2       	mov.a %a2,%d10
800033c4:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
800033c8:	df 12 c8 00 	jeq %d2,1,80003558 <IfxGtm_Tom_PwmHl_init+0x306>
800033cc:	82 03       	mov %d3,0
800033ce:	54 22       	ld.w %d2,[%a2]
800033d0:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
800033d4:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_enableChannels(driver->tgc, channelMask, 0, TRUE);
800033d6:	19 cd 34 00 	ld.w %d13,[%a12]52
800033da:	37 0b 70 b0 	extr.u %d11,%d11,0,16
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
800033de:	82 06       	mov %d6,0
800033e0:	82 05       	mov %d5,0
800033e2:	02 b4       	mov %d4,%d11
800033e4:	6d 00 f0 02 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
800033e8:	60 d2       	mov.a %a2,%d13
800033ea:	59 22 00 10 	st.w [%a2]64,%d2
        tgc->ENDIS_STAT.U = value;
800033ee:	59 22 04 10 	st.w [%a2]68,%d2
        IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc, channelMask, 0, TRUE);
800033f2:	19 cd 34 00 	ld.w %d13,[%a12]52
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
800033f6:	82 06       	mov %d6,0
800033f8:	82 05       	mov %d5,0
800033fa:	02 b4       	mov %d4,%d11
800033fc:	6d 00 e4 02 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
80003400:	60 d2       	mov.a %a2,%d13
80003402:	59 22 08 10 	st.w [%a2]72,%d2
        tgc->OUTEN_STAT.U = value;
80003406:	59 22 0c 10 	st.w [%a2]76,%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000340a:	99 c2 30 00 	ld.a %a2,[%a12]48
8000340e:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
80003412:	54 22       	ld.w %d2,[%a2]
80003414:	b7 12 01 2a 	insert %d2,%d2,1,20,1
80003418:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000341a:	99 c2 30 00 	ld.a %a2,[%a12]48
8000341e:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
80003422:	54 22       	ld.w %d2,[%a2]
80003424:	b7 02 01 2c 	insert %d2,%d2,0,24,1
80003428:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, channel, IfxGtm_Tom_Timer_getOffset(driver->timer));
8000342a:	19 cb 30 00 	ld.w %d11,[%a12]48
8000342e:	99 c4 20 00 	ld.a %a4,[%a12]32
80003432:	6d ff 73 f8 	call 80002518 <IfxGtm_Tom_Timer_getOffset>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003436:	60 a2       	mov.a %a2,%d10
80003438:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
    tomCh->CN0.U = value;
8000343c:	59 22 14 00 	st.w [%a2]20,%d2
        if (config->initPins == TRUE)
80003440:	39 d2 34 00 	ld.bu %d2,[%a13]52
80003444:	df 12 8d 00 	jeq %d2,1,8000355e <IfxGtm_Tom_PwmHl_init+0x30c>
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
80003448:	c2 18       	add %d8,1
8000344a:	39 d2 08 00 	ld.bu %d2,[%a13]8
8000344e:	7f 28 ab 80 	jge.u %d8,%d2,800035a4 <IfxGtm_Tom_PwmHl_init+0x352>
        channel                   = config->ccx[channelIndex]->channel;
80003452:	8f 28 00 c0 	sh %d12,%d8,2
80003456:	99 d2 2c 00 	ld.a %a2,[%a13]44
8000345a:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
8000345e:	d4 22       	ld.a %a2,[%a2]
80003460:	19 22 04 00 	ld.w %d2,[%a2]4
        driver->ccx[channelIndex] = channel;
80003464:	1b e8 00 30 	addi %d3,%d8,14
80003468:	06 23       	sh %d3,2
8000346a:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
8000346e:	74 22       	st.w [%a2],%d2
        channelMask               = 1 << (channel - maskShift);
80003470:	59 ef ec ff 	st.w [%a14]-20,%d15
80003474:	0b f2 80 30 	sub %d3,%d2,%d15
80003478:	82 1a       	mov %d10,1
8000347a:	0f 3a 00 a0 	sh %d10,%d10,%d3
8000347e:	37 0a 70 d0 	extr.u %d13,%d10,0,16
        channelsMask             |= channelMask;
80003482:	a6 9d       	or %d13,%d9
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003484:	8f 62 00 90 	sh %d9,%d2,6
80003488:	99 c2 30 00 	ld.a %a2,[%a12]48
8000348c:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
80003490:	54 22       	ld.w %d2,[%a2]
80003492:	37 e2 03 26 	insert %d2,%d2,%d14,12,3
80003496:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, !driver->base.inverted
80003498:	19 c3 30 00 	ld.w %d3,[%a12]48
8000349c:	39 c2 1c 00 	ld.bu %d2,[%a12]28
800034a0:	df 02 31 ff 	jne %d2,0,80003302 <IfxGtm_Tom_PwmHl_init+0xb0>
800034a4:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800034a8:	60 92       	mov.a %a2,%d9
800034aa:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
800034ae:	df 12 30 7f 	jeq %d2,1,8000330e <IfxGtm_Tom_PwmHl_init+0xbc>
800034b2:	82 03       	mov %d3,0
800034b4:	54 22       	ld.w %d2,[%a2]
800034b6:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
800034ba:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_enableChannels(driver->tgc, channelMask, 0, TRUE); /* Write the SOUR outout with !SL */
800034bc:	19 cb 34 00 	ld.w %d11,[%a12]52
800034c0:	37 0a 70 a0 	extr.u %d10,%d10,0,16
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
800034c4:	82 06       	mov %d6,0
800034c6:	82 05       	mov %d5,0
800034c8:	02 a4       	mov %d4,%d10
800034ca:	6d 00 7d 02 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
800034ce:	60 b2       	mov.a %a2,%d11
800034d0:	59 22 00 10 	st.w [%a2]64,%d2
        tgc->ENDIS_STAT.U = value;
800034d4:	59 22 04 10 	st.w [%a2]68,%d2
        IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc, channelMask, 0, TRUE);
800034d8:	19 cb 34 00 	ld.w %d11,[%a12]52
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
800034dc:	82 06       	mov %d6,0
800034de:	82 05       	mov %d5,0
800034e0:	02 a4       	mov %d4,%d10
800034e2:	6d 00 71 02 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
800034e6:	60 b2       	mov.a %a2,%d11
800034e8:	59 22 08 10 	st.w [%a2]72,%d2
        tgc->OUTEN_STAT.U = value;
800034ec:	59 22 0c 10 	st.w [%a2]76,%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
800034f0:	19 c3 30 00 	ld.w %d3,[%a12]48
800034f4:	39 c2 1c 00 	ld.bu %d2,[%a12]28
800034f8:	df 02 0e 7f 	jeq %d2,0,80003314 <IfxGtm_Tom_PwmHl_init+0xc2>
800034fc:	19 d2 1c 00 	ld.w %d2,[%a13]28
80003500:	1d ff 0e ff 	j 8000331c <IfxGtm_Tom_PwmHl_init+0xca>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003504:	82 13       	mov %d3,1
80003506:	1d ff 11 ff 	j 80003328 <IfxGtm_Tom_PwmHl_init+0xd6>
            IfxGtm_PinMap_setTomTout(config->ccx[channelIndex],
8000350a:	99 d2 2c 00 	ld.a %a2,[%a13]44
8000350e:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003512:	19 d5 10 00 	ld.w %d5,[%a13]16
80003516:	19 d4 0c 00 	ld.w %d4,[%a13]12
8000351a:	d4 24       	ld.a %a4,[%a2]
8000351c:	6d ff c0 ea 	call 80000a9c <IfxGtm_PinMap_setTomTout>
            IfxPort_setPinState(config->ccx[channelIndex]->pin.port, config->ccx[channelIndex]->pin.pinIndex, config->base.ccxActiveState ? IfxPort_State_low : IfxPort_State_high);
80003520:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003524:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003528:	d4 22       	ld.a %a2,[%a2]
8000352a:	99 23 10 00 	ld.a %a3,[%a2]16
8000352e:	39 22 14 00 	ld.bu %d2,[%a2]20
80003532:	19 d3 1c 00 	ld.w %d3,[%a13]28
80003536:	df 03 0a 00 	jeq %d3,0,8000354a <IfxGtm_Tom_PwmHl_init+0x2f8>
8000353a:	7b 10 00 30 	movh %d3,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000353e:	0f 23 00 20 	sh %d2,%d3,%d2
80003542:	59 32 04 00 	st.w [%a3]4,%d2
}
80003546:	1d ff 14 ff 	j 8000336e <IfxGtm_Tom_PwmHl_init+0x11c>
8000354a:	82 13       	mov %d3,1
8000354c:	1d ff f9 ff 	j 8000353e <IfxGtm_Tom_PwmHl_init+0x2ec>
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
80003550:	19 d2 20 00 	ld.w %d2,[%a13]32
80003554:	1d ff 37 ff 	j 800033c2 <IfxGtm_Tom_PwmHl_init+0x170>
80003558:	82 13       	mov %d3,1
8000355a:	1d ff 3a ff 	j 800033ce <IfxGtm_Tom_PwmHl_init+0x17c>
            IfxGtm_PinMap_setTomTout(config->coutx[channelIndex],
8000355e:	99 d2 30 00 	ld.a %a2,[%a13]48
80003562:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003566:	19 d5 10 00 	ld.w %d5,[%a13]16
8000356a:	19 d4 0c 00 	ld.w %d4,[%a13]12
8000356e:	d4 24       	ld.a %a4,[%a2]
80003570:	6d ff 96 ea 	call 80000a9c <IfxGtm_PinMap_setTomTout>
            IfxPort_setPinState(config->coutx[channelIndex]->pin.port, config->coutx[channelIndex]->pin.pinIndex, config->base.coutxActiveState ? IfxPort_State_low : IfxPort_State_high);
80003574:	99 d2 30 00 	ld.a %a2,[%a13]48
80003578:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
8000357c:	d4 22       	ld.a %a2,[%a2]
8000357e:	99 23 10 00 	ld.a %a3,[%a2]16
80003582:	39 22 14 00 	ld.bu %d2,[%a2]20
80003586:	19 d3 20 00 	ld.w %d3,[%a13]32
8000358a:	df 03 0a 00 	jeq %d3,0,8000359e <IfxGtm_Tom_PwmHl_init+0x34c>
8000358e:	7b 10 00 30 	movh %d3,1
    port->OMR.U = action << pinIndex;
80003592:	0f 23 00 20 	sh %d2,%d3,%d2
80003596:	59 32 04 00 	st.w [%a3]4,%d2
}
8000359a:	1d ff 57 ff 	j 80003448 <IfxGtm_Tom_PwmHl_init+0x1f6>
8000359e:	82 13       	mov %d3,1
800035a0:	1d ff f9 ff 	j 80003592 <IfxGtm_Tom_PwmHl_init+0x340>
    IfxGtm_Tom_PwmHl_setMode(driver, Ifx_Pwm_Mode_off);
800035a4:	82 44       	mov %d4,4
800035a6:	40 c4       	mov.aa %a4,%a12
800035a8:	6d ff 3a fa 	call 80002a1c <IfxGtm_Tom_PwmHl_setMode>
    Ifx_TimerValue tOn[IFXGTM_TOM_PWMHL_MAX_NUM_CHANNELS] = {0};
800035ac:	82 02       	mov %d2,0
800035ae:	59 e2 f4 ff 	st.w [%a14]-12,%d2
800035b2:	59 e2 f8 ff 	st.w [%a14]-8,%d2
800035b6:	59 e2 fc ff 	st.w [%a14]-4,%d2
    IfxGtm_Tom_PwmHl_updateOff(driver, tOn);     /* tOn do not need defined values */
800035ba:	d9 e5 f4 ff 	lea %a5,[%a14]-12
800035be:	40 c4       	mov.aa %a4,%a12
800035c0:	6d ff 3d fc 	call 80002e3a <IfxGtm_Tom_PwmHl_updateOff>
    IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc, channelsMask, 0, 0, 0);
800035c4:	99 cd 34 00 	ld.a %a13,[%a12]52
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
800035c8:	82 06       	mov %d6,0
800035ca:	82 05       	mov %d5,0
800035cc:	02 94       	mov %d4,%d9
800035ce:	6d 00 fb 01 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
800035d2:	02 28       	mov %d8,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
800035d4:	3b 00 01 60 	mov %d6,16
800035d8:	82 05       	mov %d5,0
800035da:	82 04       	mov %d4,0
800035dc:	6d 00 f4 01 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
800035e0:	a6 82       	or %d2,%d8
800035e2:	59 d2 08 00 	st.w [%a13]8,%d2
    IfxGtm_Tom_Tgc_trigger(driver->tgc);
800035e6:	99 c2 34 00 	ld.a %a2,[%a12]52
    tgc->GLB_CTRL.U = 1 << IFX_GTM_TOM_TGC0_GLB_CTRL_HOST_TRIG_OFF;
800035ea:	82 12       	mov %d2,1
800035ec:	74 22       	st.w [%a2],%d2
    IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc, 0, channelsMask, 0, 0);
800035ee:	99 cd 34 00 	ld.a %a13,[%a12]52
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
800035f2:	82 06       	mov %d6,0
800035f4:	02 95       	mov %d5,%d9
800035f6:	82 04       	mov %d4,0
800035f8:	6d 00 e6 01 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
800035fc:	02 28       	mov %d8,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
800035fe:	3b 00 01 60 	mov %d6,16
80003602:	82 05       	mov %d5,0
80003604:	82 04       	mov %d4,0
80003606:	6d 00 df 01 	call 800039c4 <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
8000360a:	a6 82       	or %d2,%d8
8000360c:	59 d2 08 00 	st.w [%a13]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003610:	82 08       	mov %d8,0
80003612:	1d 00 15 00 	j 8000363c <IfxGtm_Tom_PwmHl_init+0x3ea>
        IfxGtm_Tom_Timer_addToChannelMask(timer, driver->ccx[channelIndex]);
80003616:	1b e8 00 20 	addi %d2,%d8,14
8000361a:	06 22       	sh %d2,2
8000361c:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003620:	54 24       	ld.w %d4,[%a2]
80003622:	40 f4       	mov.aa %a4,%a15
80003624:	6d ff 21 f7 	call 80002466 <IfxGtm_Tom_Timer_addToChannelMask>
        IfxGtm_Tom_Timer_addToChannelMask(timer, driver->coutx[channelIndex]);
80003628:	1b 18 01 20 	addi %d2,%d8,17
8000362c:	06 22       	sh %d2,2
8000362e:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003632:	54 24       	ld.w %d4,[%a2]
80003634:	40 f4       	mov.aa %a4,%a15
80003636:	6d ff 18 f7 	call 80002466 <IfxGtm_Tom_Timer_addToChannelMask>
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
8000363a:	c2 18       	add %d8,1
8000363c:	39 c2 1d 00 	ld.bu %d2,[%a12]29
80003640:	3f 28 eb ff 	jlt.u %d8,%d2,80003616 <IfxGtm_Tom_PwmHl_init+0x3c4>
}
80003644:	82 12       	mov %d2,1
80003646:	00 90       	ret 

80003648 <IfxGtm_Tom_PwmHl_initConfig>:
{
80003648:	40 ae       	mov.aa %a14,%sp
8000364a:	40 4c       	mov.aa %a12,%a4
    IfxStdIf_PwmHl_initConfig(&config->base);
8000364c:	6d 00 17 08 	call 8000467a <IfxStdIf_PwmHl_initConfig>
    config->timer    = NULL_PTR;
80003650:	82 02       	mov %d2,0
80003652:	59 c2 24 00 	st.w [%a12]36,%d2
    config->tom      = IfxGtm_Tom_0;
80003656:	59 c2 28 00 	st.w [%a12]40,%d2
    config->ccx      = NULL_PTR;
8000365a:	59 c2 2c 00 	st.w [%a12]44,%d2
    config->coutx    = NULL_PTR;
8000365e:	59 c2 30 00 	st.w [%a12]48,%d2
    config->initPins = TRUE;
80003662:	82 12       	mov %d2,1
80003664:	e9 c2 34 00 	st.b [%a12]52,%d2
}
80003668:	00 90       	ret 

8000366a <IfxGtm_enable>:
    IfxScuWdt_setCpuEndinit(psw);
}


void IfxGtm_enable(Ifx_GTM *gtm)
{
8000366a:	40 ae       	mov.aa %a14,%sp
8000366c:	80 49       	mov.d %d9,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
8000366e:	6d ff 71 f5 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80003672:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(psw);
80003674:	02 24       	mov %d4,%d2
80003676:	6d ff 04 f4 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
    gtm->CLC.B.DISR = 0;
8000367a:	7b a0 00 20 	movh %d2,10
8000367e:	1b 02 d0 2f 	addi %d2,%d2,-768
80003682:	60 92       	mov.a %a2,%d9
80003684:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
80003688:	54 43       	ld.w %d3,[%a4]
8000368a:	8f 13 c0 31 	andn %d3,%d3,1
8000368e:	74 43       	st.w [%a4],%d3
    IfxScuWdt_setCpuEndinit(psw);
80003690:	02 84       	mov %d4,%d8
80003692:	6d ff 7c f5 	call 8000218a <IfxScuWdt_setCpuEndinit>
}
80003696:	00 90       	ret 

80003698 <IfxGtm_getSysClkFrequency>:


float32 IfxGtm_getSysClkFrequency(void)
{
80003698:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
8000369a:	6d ff d7 f1 	call 80001a48 <IfxScuCcu_getSourceFrequency>
8000369e:	91 30 00 2f 	movh.a %a2,61443
800036a2:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800036a6:	54 23       	ld.w %d3,[%a2]
800036a8:	37 03 64 36 	extr.u %d3,%d3,12,4
800036ac:	4b 03 41 31 	itof %d3,%d3
    return IfxScuCcu_getGtmFrequency();
}
800036b0:	4b 32 51 20 	div.f %d2,%d2,%d3
800036b4:	00 90       	ret 

800036b6 <IfxGtm_Cmu_enableClocks>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxGtm_Cmu_enableClocks(Ifx_GTM *gtm, uint32 clkMask)
{
800036b6:	40 ae       	mov.aa %a14,%sp
    gtm->CMU.CLK_EN.U = clkMask;
800036b8:	59 44 00 c0 	st.w [%a4]768,%d4
}
800036bc:	00 90       	ret 

800036be <IfxGtm_Cmu_getModuleFrequency>:
    return IfxGtm_Cmu_getModuleFrequency(gtm) * multiplier;
}


float32 IfxGtm_Cmu_getModuleFrequency(Ifx_GTM *gtm)
{
800036be:	40 ae       	mov.aa %a14,%sp
    return IfxGtm_getSysClkFrequency();
800036c0:	6d ff ec ff 	call 80003698 <IfxGtm_getSysClkFrequency>
}
800036c4:	00 90       	ret 

800036c6 <IfxGtm_Cmu_getGclkFrequency>:
{
800036c6:	40 ae       	mov.aa %a14,%sp
    float32 N          = gtm->CMU.GCLK_DEN.B.GCLK_DEN;
800036c8:	19 42 08 c0 	ld.w %d2,[%a4]776
800036cc:	37 02 78 20 	extr.u %d2,%d2,0,24
800036d0:	4b 02 61 81 	utof %d8,%d2
    float32 Z          = gtm->CMU.GCLK_NUM.B.GCLK_NUM;
800036d4:	19 42 04 c0 	ld.w %d2,[%a4]772
800036d8:	37 02 78 20 	extr.u %d2,%d2,0,24
800036dc:	4b 02 61 21 	utof %d2,%d2
    float32 multiplier = N / Z;
800036e0:	4b 28 51 80 	div.f %d8,%d8,%d2
    return IfxGtm_Cmu_getModuleFrequency(gtm) * multiplier;
800036e4:	6d ff ed ff 	call 800036be <IfxGtm_Cmu_getModuleFrequency>
}
800036e8:	4b 82 41 20 	mul.f %d2,%d2,%d8
800036ec:	00 90       	ret 

800036ee <IfxGtm_Cmu_isClkClockEnabled>:


boolean IfxGtm_Cmu_isClkClockEnabled(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex)
{
800036ee:	40 ae       	mov.aa %a14,%sp
    return ((gtm->CMU.CLK_EN.U >> (2 * clkIndex)) & IFX_GTM_CMU_CLK_EN_EN_CLK0_MSK) == 0x3;
800036f0:	19 43 00 c0 	ld.w %d3,[%a4]768
800036f4:	8f 14 00 20 	sh %d2,%d4,1
800036f8:	57 03 62 22 	extr.u %d2,%d3,%d2,2
}
800036fc:	8b 32 00 22 	eq %d2,%d2,3
80003700:	00 90       	ret 

80003702 <IfxGtm_Cmu_getClkFrequency>:
{
80003702:	40 ae       	mov.aa %a14,%sp
80003704:	40 4c       	mov.aa %a12,%a4
80003706:	02 48       	mov %d8,%d4
80003708:	8f f5 0f 91 	and %d9,%d5,255
    if ((IfxGtm_Cmu_isClkClockEnabled(gtm, clkIndex) != FALSE) || (assumeEnabled != FALSE))
8000370c:	6d ff f1 ff 	call 800036ee <IfxGtm_Cmu_isClkClockEnabled>
80003710:	df 02 04 80 	jne %d2,0,80003718 <IfxGtm_Cmu_getClkFrequency+0x16>
80003714:	df 09 49 00 	jeq %d9,0,800037a6 <IfxGtm_Cmu_getClkFrequency+0xa4>
        switch (clkIndex)
80003718:	df 68 2c 00 	jeq %d8,6,80003770 <IfxGtm_Cmu_getClkFrequency+0x6e>
8000371c:	ff 78 15 80 	jge.u %d8,7,80003746 <IfxGtm_Cmu_getClkFrequency+0x44>
80003720:	ff 68 45 80 	jge.u %d8,6,800037aa <IfxGtm_Cmu_getClkFrequency+0xa8>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK0_5[clkIndex].CTRL.B.CLK_CNT + 1);
80003724:	40 c4       	mov.aa %a4,%a12
80003726:	6d ff d0 ff 	call 800036c6 <IfxGtm_Cmu_getGclkFrequency>
8000372a:	1b 38 0c 30 	addi %d3,%d8,195
8000372e:	06 23       	sh %d3,2
80003730:	01 c3 00 c6 	addsc.a %a12,%a12,%d3,0
80003734:	54 c3       	ld.w %d3,[%a12]
80003736:	37 03 78 30 	extr.u %d3,%d3,0,24
8000373a:	c2 13       	add %d3,1
8000373c:	4b 03 41 31 	itof %d3,%d3
80003740:	4b 32 51 20 	div.f %d2,%d2,%d3
            break;
80003744:	00 90       	ret 
        switch (clkIndex)
80003746:	df 78 13 80 	jne %d8,7,8000376c <IfxGtm_Cmu_getClkFrequency+0x6a>
            if (gtm->CMU.CLK_7.CTRL.B.CLK7_SEL == 0)
8000374a:	19 c2 28 c0 	ld.w %d2,[%a12]808
8000374e:	ef 82 27 80 	jnz.t %d2,24,8000379c <IfxGtm_Cmu_getClkFrequency+0x9a>
                frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK_7.CTRL.B.CLK_CNT + 1);
80003752:	40 c4       	mov.aa %a4,%a12
80003754:	6d ff b9 ff 	call 800036c6 <IfxGtm_Cmu_getGclkFrequency>
80003758:	19 c3 28 c0 	ld.w %d3,[%a12]808
8000375c:	37 03 78 30 	extr.u %d3,%d3,0,24
80003760:	c2 13       	add %d3,1
80003762:	4b 03 41 31 	itof %d3,%d3
80003766:	4b 32 51 20 	div.f %d2,%d2,%d3
8000376a:	00 90       	ret 
        switch (clkIndex)
8000376c:	82 02       	mov %d2,0
8000376e:	00 90       	ret 
            if (gtm->CMU.CLK_6.CTRL.B.CLK6_SEL == 0)
80003770:	19 c2 24 c0 	ld.w %d2,[%a12]804
80003774:	ef 82 0f 80 	jnz.t %d2,24,80003792 <IfxGtm_Cmu_getClkFrequency+0x90>
                frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK_6.CTRL.B.CLK_CNT + 1);
80003778:	40 c4       	mov.aa %a4,%a12
8000377a:	6d ff a6 ff 	call 800036c6 <IfxGtm_Cmu_getGclkFrequency>
8000377e:	19 c3 24 c0 	ld.w %d3,[%a12]804
80003782:	37 03 78 30 	extr.u %d3,%d3,0,24
80003786:	c2 13       	add %d3,1
80003788:	4b 03 41 31 	itof %d3,%d3
8000378c:	4b 32 51 20 	div.f %d2,%d2,%d3
80003790:	00 90       	ret 
                frequency = IfxGtm_Dpll_getSubIncFrequency(gtm, IfxGtm_Dpll_SubInc_2);
80003792:	82 14       	mov %d4,1
80003794:	40 c4       	mov.aa %a4,%a12
80003796:	6d 00 14 01 	call 800039be <IfxGtm_Dpll_getSubIncFrequency>
8000379a:	00 90       	ret 
                frequency = IfxGtm_Dpll_getSubIncFrequency(gtm, IfxGtm_Dpll_SubInc_1);
8000379c:	82 04       	mov %d4,0
8000379e:	40 c4       	mov.aa %a4,%a12
800037a0:	6d 00 0f 01 	call 800039be <IfxGtm_Dpll_getSubIncFrequency>
800037a4:	00 90       	ret 
        frequency = 0.0f;
800037a6:	82 02       	mov %d2,0
800037a8:	00 90       	ret 
        switch (clkIndex)
800037aa:	82 02       	mov %d2,0
}
800037ac:	00 90       	ret 

800037ae <IfxGtm_Cmu_isFxClockEnabled>:
    return ((gtm->CMU.CLK_EN.U >> (2 * clkIndex + 16)) & IFX_GTM_CMU_CLK_EN_EN_CLK0_MSK) == 0x3;
}


boolean IfxGtm_Cmu_isFxClockEnabled(Ifx_GTM *gtm)
{
800037ae:	40 ae       	mov.aa %a14,%sp
    return gtm->CMU.CLK_EN.B.EN_FXCLK == 0x3;
800037b0:	19 42 00 c0 	ld.w %d2,[%a4]768
800037b4:	37 02 62 2b 	extr.u %d2,%d2,22,2
}
800037b8:	8b 32 00 22 	eq %d2,%d2,3
800037bc:	00 90       	ret 

800037be <IfxGtm_Cmu_isFxClockEnabled_end>:
	...

800037c0 <IfxGtm_Cmu_getFxClkFrequency>:
{
800037c0:	40 ae       	mov.aa %a14,%sp
800037c2:	40 4c       	mov.aa %a12,%a4
800037c4:	02 49       	mov %d9,%d4
800037c6:	8f f5 0f 81 	and %d8,%d5,255
    if (IfxGtm_Cmu_isFxClockEnabled(gtm) || (assumeEnabled != FALSE))
800037ca:	6d ff f2 ff 	call 800037ae <IfxGtm_Cmu_isFxClockEnabled>
800037ce:	df 02 04 80 	jne %d2,0,800037d6 <IfxGtm_Cmu_getFxClkFrequency+0x16>
800037d2:	df 08 57 00 	jeq %d8,0,80003880 <IfxGtm_Cmu_getFxClkFrequency+0xc0>
        fxSelect = gtm->CMU.FXCLK.CTRL.B.FXCLK_SEL;
800037d6:	19 c2 04 d0 	ld.w %d2,[%a12]836
800037da:	8f f2 00 21 	and %d2,%d2,15
800037de:	02 23       	mov %d3,%d2
        if (fxSelect == 0)
800037e0:	df 02 0f 00 	jeq %d2,0,800037fe <IfxGtm_Cmu_getFxClkFrequency+0x3e>
        else if (fxSelect <= 6)
800037e4:	bf 72 24 80 	jlt.u %d2,7,8000382c <IfxGtm_Cmu_getFxClkFrequency+0x6c>
        else if (fxSelect == 7)
800037e8:	df 72 2a 00 	jeq %d2,7,8000383c <IfxGtm_Cmu_getFxClkFrequency+0x7c>
        else if (fxSelect == 8)
800037ec:	3b 80 00 20 	mov %d2,8
800037f0:	5f 23 2d 00 	jeq %d3,%d2,8000384a <IfxGtm_Cmu_getFxClkFrequency+0x8a>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm);
800037f4:	40 c4       	mov.aa %a4,%a12
800037f6:	6d ff 68 ff 	call 800036c6 <IfxGtm_Cmu_getGclkFrequency>
800037fa:	1d 00 05 00 	j 80003804 <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm);
800037fe:	40 c4       	mov.aa %a4,%a12
80003800:	6d ff 63 ff 	call 800036c6 <IfxGtm_Cmu_getGclkFrequency>
        switch (clkIndex)
80003804:	ff 59 40 80 	jge.u %d9,5,80003884 <IfxGtm_Cmu_getFxClkFrequency+0xc4>
80003808:	91 00 00 28 	movh.a %a2,32768
8000380c:	d9 22 98 03 	lea %a2,[%a2]14360 <80003818 <IfxGtm_Cmu_getFxClkFrequency+0x58>>
80003810:	01 29 02 26 	addsc.a %a2,%a2,%d9,2
80003814:	dc 02       	ji %a2
80003816:	00 00       	nop 
80003818:	1d 00 37 00 	j 80003886 <IfxGtm_Cmu_getFxClkFrequency+0xc6>
8000381c:	1d 00 1e 00 	j 80003858 <IfxGtm_Cmu_getFxClkFrequency+0x98>
80003820:	1d 00 21 00 	j 80003862 <IfxGtm_Cmu_getFxClkFrequency+0xa2>
80003824:	1d 00 24 00 	j 8000386c <IfxGtm_Cmu_getFxClkFrequency+0xac>
80003828:	1d 00 27 00 	j 80003876 <IfxGtm_Cmu_getFxClkFrequency+0xb6>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, (IfxGtm_Cmu_Clk)(fxSelect - 1), assumeEnabled);
8000382c:	02 85       	mov %d5,%d8
8000382e:	1b f2 ff 4f 	addi %d4,%d2,-1
80003832:	40 c4       	mov.aa %a4,%a12
80003834:	6d ff 67 ff 	call 80003702 <IfxGtm_Cmu_getClkFrequency>
80003838:	1d ff e6 ff 	j 80003804 <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, IfxGtm_Cmu_Clk_6, assumeEnabled);
8000383c:	02 85       	mov %d5,%d8
8000383e:	82 64       	mov %d4,6
80003840:	40 c4       	mov.aa %a4,%a12
80003842:	6d ff 60 ff 	call 80003702 <IfxGtm_Cmu_getClkFrequency>
80003846:	1d ff df ff 	j 80003804 <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, IfxGtm_Cmu_Clk_7, assumeEnabled);
8000384a:	02 85       	mov %d5,%d8
8000384c:	82 74       	mov %d4,7
8000384e:	40 c4       	mov.aa %a4,%a12
80003850:	6d ff 59 ff 	call 80003702 <IfxGtm_Cmu_getClkFrequency>
80003854:	1d ff d8 ff 	j 80003804 <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = frequency / 16;
80003858:	7b 00 d8 33 	movh %d3,15744
8000385c:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
80003860:	00 90       	ret 
            frequency = frequency / 256;
80003862:	7b 00 b8 33 	movh %d3,15232
80003866:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
8000386a:	00 90       	ret 
            frequency = frequency / 4096;
8000386c:	7b 00 98 33 	movh %d3,14720
80003870:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
80003874:	00 90       	ret 
            frequency = frequency / 65536;
80003876:	7b 00 78 33 	movh %d3,14208
8000387a:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
8000387e:	00 90       	ret 
        frequency = 0.0f;
80003880:	82 02       	mov %d2,0
80003882:	00 90       	ret 
            frequency = 0.0f;
80003884:	82 02       	mov %d2,0
}
80003886:	00 90       	ret 

80003888 <IfxGtm_Cmu_setClkFrequency>:
    }
}


void IfxGtm_Cmu_setClkFrequency(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex, float32 frequency)
{
80003888:	40 ae       	mov.aa %a14,%sp
8000388a:	40 4c       	mov.aa %a12,%a4
8000388c:	02 48       	mov %d8,%d4
8000388e:	02 59       	mov %d9,%d5
    float32 t   = (IfxGtm_Cmu_getGclkFrequency(gtm) / frequency) - 1;
80003890:	6d ff 1b ff 	call 800036c6 <IfxGtm_Cmu_getGclkFrequency>
80003894:	4b 92 51 50 	div.f %d5,%d2,%d9
80003898:	7b 00 f8 23 	movh %d2,16256
8000389c:	6b 02 31 55 	sub.f %d5,%d5,%d2
    uint32  cnt = (uint32)t;
800038a0:	4b 05 71 91 	ftouz %d9,%d5

    if ((t - (float32)cnt) > 0.5f)
800038a4:	4b 09 61 21 	utof %d2,%d9
800038a8:	6b 02 31 25 	sub.f %d2,%d5,%d2
800038ac:	7b 00 f0 33 	movh %d3,16128
800038b0:	4b 32 01 20 	cmp.f %d2,%d2,%d3
800038b4:	6f 22 03 00 	jz.t %d2,2,800038ba <IfxGtm_Cmu_setClkFrequency+0x32>
    {                           /* Round to nearest */
        cnt++;
800038b8:	c2 19       	add %d9,1
    }

    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
800038ba:	6d ff 4b f4 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
800038be:	02 2a       	mov %d10,%d2
    IfxScuWdt_clearCpuEndinit(psw);
800038c0:	02 24       	mov %d4,%d2
800038c2:	6d ff de f2 	call 80001e7e <IfxScuWdt_clearCpuEndinit>

    switch (clkIndex)
800038c6:	df 68 1e 00 	jeq %d8,6,80003902 <IfxGtm_Cmu_setClkFrequency+0x7a>
800038ca:	ff 78 11 80 	jge.u %d8,7,800038ec <IfxGtm_Cmu_setClkFrequency+0x64>
800038ce:	ff 68 0b 80 	jge.u %d8,6,800038e4 <IfxGtm_Cmu_setClkFrequency+0x5c>
    case IfxGtm_Cmu_Clk_1:
    case IfxGtm_Cmu_Clk_2:
    case IfxGtm_Cmu_Clk_3:
    case IfxGtm_Cmu_Clk_4:
    case IfxGtm_Cmu_Clk_5:
        gtm->CMU.CLK0_5[clkIndex].CTRL.B.CLK_CNT = cnt;
800038d2:	1b 38 0c 20 	addi %d2,%d8,195
800038d6:	06 22       	sh %d2,2
800038d8:	01 c2 00 c6 	addsc.a %a12,%a12,%d2,0
800038dc:	54 c2       	ld.w %d2,[%a12]
800038de:	37 92 18 20 	insert %d2,%d2,%d9,0,24
800038e2:	74 c2       	st.w [%a12],%d2
        break;
    default:
        break;
    }

    IfxScuWdt_setCpuEndinit(psw);
800038e4:	02 a4       	mov %d4,%d10
800038e6:	6d ff 52 f4 	call 8000218a <IfxScuWdt_setCpuEndinit>
}
800038ea:	00 90       	ret 
    switch (clkIndex)
800038ec:	df 78 fc ff 	jne %d8,7,800038e4 <IfxGtm_Cmu_setClkFrequency+0x5c>
        gtm->CMU.CLK_7.CTRL.B.CLK_CNT = cnt;
800038f0:	d9 c2 28 c0 	lea %a2,[%a12]808
800038f4:	19 c2 28 c0 	ld.w %d2,[%a12]808
800038f8:	37 92 18 20 	insert %d2,%d2,%d9,0,24
800038fc:	74 22       	st.w [%a2],%d2
        break;
800038fe:	1d ff f3 ff 	j 800038e4 <IfxGtm_Cmu_setClkFrequency+0x5c>
        gtm->CMU.CLK_6.CTRL.B.CLK_CNT = cnt;
80003902:	d9 c2 24 c0 	lea %a2,[%a12]804
80003906:	19 c2 24 c0 	ld.w %d2,[%a12]804
8000390a:	37 92 18 20 	insert %d2,%d2,%d9,0,24
8000390e:	74 22       	st.w [%a2],%d2
        break;
80003910:	1d ff ea ff 	j 800038e4 <IfxGtm_Cmu_setClkFrequency+0x5c>

80003914 <IfxGtm_Cmu_setGclkFrequency>:
    IfxScuWdt_setCpuEndinit(psw);
}


void IfxGtm_Cmu_setGclkFrequency(Ifx_GTM *gtm, float32 frequency)
{
80003914:	40 ae       	mov.aa %a14,%sp
80003916:	40 4c       	mov.aa %a12,%a4
80003918:	02 48       	mov %d8,%d4
    float32 f;
    float32 bestDistance = frequency;

    float32 fIn          = IfxGtm_Cmu_getModuleFrequency(gtm);
8000391a:	6d ff d2 fe 	call 800036be <IfxGtm_Cmu_getModuleFrequency>
    float32 bestDistance = frequency;
8000391e:	02 85       	mov %d5,%d8
    uint32  z, n, nBest = 1, zBest = 1;
80003920:	82 19       	mov %d9,1
80003922:	02 9a       	mov %d10,%d9
    float32 t;

#if 1

    for (z = 1; z < 0xFFFFFF; z++)
80003924:	02 94       	mov %d4,%d9
80003926:	1d 00 22 00 	j 8000396a <IfxGtm_Cmu_setGclkFrequency+0x56>
                bestDistance = distance;
                nBest        = n;
                zBest        = z;
            }

            if (bestDistance < 0.1f)
8000392a:	7b d0 dc 63 	movh %d6,15821
8000392e:	1b d6 cc 6c 	addi %d6,%d6,-13107
80003932:	4b 65 01 60 	cmp.f %d6,%d5,%d6
80003936:	6f 06 16 80 	jnz.t %d6,0,80003962 <IfxGtm_Cmu_setGclkFrequency+0x4e>
        for (n = z; n > 0; n--)
8000393a:	c2 f3       	add %d3,-1
8000393c:	df 03 14 00 	jeq %d3,0,80003964 <IfxGtm_Cmu_setGclkFrequency+0x50>
            f        = t * n;
80003940:	4b 03 61 61 	utof %d6,%d3
80003944:	4b 06 41 60 	mul.f %d6,%d6,%d0
            distance = fabsf(frequency - f);
80003948:	6b 06 31 68 	sub.f %d6,%d8,%d6
8000394c:	b7 06 81 6f 	insert %d6,%d6,0,31,1
            if (distance < bestDistance)
80003950:	4b 65 01 70 	cmp.f %d7,%d5,%d6
80003954:	6f 27 eb 7f 	jz.t %d7,2,8000392a <IfxGtm_Cmu_setGclkFrequency+0x16>
                zBest        = z;
80003958:	02 49       	mov %d9,%d4
                nBest        = n;
8000395a:	02 3a       	mov %d10,%d3
                bestDistance = distance;
8000395c:	02 65       	mov %d5,%d6
8000395e:	1d ff e6 ff 	j 8000392a <IfxGtm_Cmu_setGclkFrequency+0x16>
            {
                endLoop = TRUE;
80003962:	82 13       	mov %d3,1
                break;
            }
        }

        if (endLoop)
80003964:	df 03 0f 80 	jne %d3,0,80003982 <IfxGtm_Cmu_setGclkFrequency+0x6e>
    for (z = 1; z < 0xFFFFFF; z++)
80003968:	c2 14       	add %d4,1
8000396a:	7b 00 10 30 	movh %d3,256
8000396e:	c2 e3       	add %d3,-2
80003970:	3f 43 09 80 	jlt.u %d3,%d4,80003982 <IfxGtm_Cmu_setGclkFrequency+0x6e>
        t = fIn / z;
80003974:	4b 04 61 01 	utof %d0,%d4
80003978:	4b 02 51 00 	div.f %d0,%d2,%d0
        for (n = z; n > 0; n--)
8000397c:	02 43       	mov %d3,%d4
8000397e:	1d ff df ff 	j 8000393c <IfxGtm_Cmu_setGclkFrequency+0x28>
        }
    }

#endif

    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80003982:	6d ff e7 f3 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80003986:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(psw);
80003988:	02 24       	mov %d4,%d2
8000398a:	6d ff 7a f2 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
    gtm->CMU.GCLK_NUM.B.GCLK_NUM = zBest;
8000398e:	b7 09 08 9c 	insert %d9,%d9,0,24,8
80003992:	d9 c2 04 c0 	lea %a2,[%a12]772
80003996:	19 c3 04 c0 	ld.w %d3,[%a12]772
8000399a:	37 93 18 30 	insert %d3,%d3,%d9,0,24
8000399e:	74 23       	st.w [%a2],%d3
    gtm->CMU.GCLK_NUM.B.GCLK_NUM = zBest;   /* write twice to be sure */
800039a0:	54 23       	ld.w %d3,[%a2]
800039a2:	37 93 18 30 	insert %d3,%d3,%d9,0,24
800039a6:	74 23       	st.w [%a2],%d3
    gtm->CMU.GCLK_DEN.B.GCLK_DEN = nBest;
800039a8:	d9 c2 08 c0 	lea %a2,[%a12]776
800039ac:	19 c3 08 c0 	ld.w %d3,[%a12]776
800039b0:	37 a3 18 30 	insert %d3,%d3,%d10,0,24
800039b4:	74 23       	st.w [%a2],%d3
    IfxScuWdt_setCpuEndinit(psw);
800039b6:	02 84       	mov %d4,%d8
800039b8:	6d ff e9 f3 	call 8000218a <IfxScuWdt_setCpuEndinit>
}
800039bc:	00 90       	ret 

800039be <IfxGtm_Dpll_getSubIncFrequency>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

float32 IfxGtm_Dpll_getSubIncFrequency(Ifx_GTM *gtm, IfxGtm_Dpll_SubInc index)
{
800039be:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(gtm)
    IFX_UNUSED_PARAMETER(index)
    return 0.0F;
}
800039c0:	82 02       	mov %d2,0
800039c2:	00 90       	ret 

800039c4 <IfxGtm_Tom_Tgc_buildFeature>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint32 IfxGtm_Tom_Tgc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset)
{
800039c4:	40 ae       	mov.aa %a14,%sp
    uint8  i;
    uint32 reg  = 0;
    uint32 mask = enableMask | (disableMask << 16);
800039c6:	8f 05 01 50 	sh %d5,%d5,16
800039ca:	a6 54       	or %d4,%d5
    uint32 reg  = 0;
800039cc:	82 02       	mov %d2,0

    for (i = 0; i < IFXGTM_TOM_NUM_TGC_CHANNELS; i++)
800039ce:	82 03       	mov %d3,0
800039d0:	1d 00 06 00 	j 800039dc <IfxGtm_Tom_Tgc_buildFeature+0x18>
        if (mask & 0x10000)
        {
            reg |= IfxGtm_FeatureControl_disable << shift;
        }

        mask = mask >> 1;
800039d4:	06 f4       	sh %d4,-1
    for (i = 0; i < IFXGTM_TOM_NUM_TGC_CHANNELS; i++)
800039d6:	c2 13       	add %d3,1
800039d8:	8f f3 0f 31 	and %d3,%d3,255
800039dc:	ff 83 17 80 	jge.u %d3,8,80003a0a <IfxGtm_Tom_Tgc_buildFeature+0x46>
        uint8 shift = (i * 2) + bitfieldOffset;
800039e0:	8f 13 00 50 	sh %d5,%d3,1
800039e4:	8f f5 0f 51 	and %d5,%d5,255
800039e8:	42 65       	add %d5,%d6
800039ea:	8f f5 0f 51 	and %d5,%d5,255
        if (mask & 0x1)
800039ee:	6f 04 06 00 	jz.t %d4,0,800039fa <IfxGtm_Tom_Tgc_buildFeature+0x36>
            reg |= IfxGtm_FeatureControl_enable << shift;
800039f2:	82 27       	mov %d7,2
800039f4:	0f 57 00 70 	sh %d7,%d7,%d5
800039f8:	a6 72       	or %d2,%d7
        if (mask & 0x10000)
800039fa:	ef 04 ed 7f 	jz.t %d4,16,800039d4 <IfxGtm_Tom_Tgc_buildFeature+0x10>
            reg |= IfxGtm_FeatureControl_disable << shift;
800039fe:	82 17       	mov %d7,1
80003a00:	0f 57 00 70 	sh %d7,%d7,%d5
80003a04:	a6 72       	or %d2,%d7
80003a06:	1d ff e7 ff 	j 800039d4 <IfxGtm_Tom_Tgc_buildFeature+0x10>
    }

    return reg;
}
80003a0a:	00 90       	ret 

80003a0c <IfxCpu_Trap_memoryManagementError>:
{
80003a0c:	40 ae       	mov.aa %a14,%sp
80003a0e:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003a10:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003a12:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
80003a16:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003a1a:	8f 72 00 21 	and %d2,%d2,7
80003a1e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003a22:	80 22       	mov.d %d2,%a2
80003a24:	0f 54 a0 30 	or %d3,%d4,%d5
80003a28:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80003a2c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003a30:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003a32:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003a36:	00 80       	rfe 
}
80003a38:	00 90       	ret 

80003a3a <IfxCpu_Trap_internalProtectionError>:
{
80003a3a:	40 ae       	mov.aa %a14,%sp
80003a3c:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003a3e:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003a40:	b7 14 18 44 	insert %d4,%d4,1,8,24
80003a44:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003a48:	8f 72 00 21 	and %d2,%d2,7
80003a4c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003a50:	80 22       	mov.d %d2,%a2
80003a52:	0f 54 a0 30 	or %d3,%d4,%d5
80003a56:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
80003a5a:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003a5e:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003a60:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003a64:	00 80       	rfe 
}
80003a66:	00 90       	ret 

80003a68 <IfxCpu_Trap_instructionError>:
{
80003a68:	40 ae       	mov.aa %a14,%sp
80003a6a:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003a6c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003a6e:	b7 24 18 44 	insert %d4,%d4,2,8,24
80003a72:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003a76:	8f 72 00 21 	and %d2,%d2,7
80003a7a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003a7e:	80 22       	mov.d %d2,%a2
80003a80:	0f 54 a0 30 	or %d3,%d4,%d5
80003a84:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
80003a88:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003a8c:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003a8e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003a92:	00 80       	rfe 
}
80003a94:	00 90       	ret 

80003a96 <IfxCpu_Trap_contextManagementError>:
{
80003a96:	40 ae       	mov.aa %a14,%sp
80003a98:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003a9a:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003a9c:	b7 34 18 44 	insert %d4,%d4,3,8,24
80003aa0:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003aa4:	8f 72 00 21 	and %d2,%d2,7
80003aa8:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003aac:	80 22       	mov.d %d2,%a2
80003aae:	0f 54 a0 30 	or %d3,%d4,%d5
80003ab2:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80003ab6:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003aba:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003abc:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003ac0:	00 80       	rfe 
}
80003ac2:	00 90       	ret 

80003ac4 <IfxCpu_Trap_busError>:
{
80003ac4:	40 ae       	mov.aa %a14,%sp
80003ac6:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003ac8:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003aca:	b7 44 18 44 	insert %d4,%d4,4,8,24
80003ace:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003ad2:	8f 72 00 21 	and %d2,%d2,7
80003ad6:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003ada:	80 22       	mov.d %d2,%a2
80003adc:	0f 54 a0 30 	or %d3,%d4,%d5
80003ae0:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
80003ae4:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003ae8:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003aea:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003aee:	00 80       	rfe 
}
80003af0:	00 90       	ret 

80003af2 <IfxCpu_Trap_assertion>:
{
80003af2:	40 ae       	mov.aa %a14,%sp
80003af4:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003af6:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003af8:	8f f4 0f 41 	and %d4,%d4,255
80003afc:	3b 00 50 20 	mov %d2,1280
80003b00:	a6 24       	or %d4,%d2
80003b02:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003b06:	8f 72 00 21 	and %d2,%d2,7
80003b0a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003b0e:	80 22       	mov.d %d2,%a2
80003b10:	0f 54 a0 30 	or %d3,%d4,%d5
80003b14:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80003b18:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003b1c:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003b1e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003b22:	00 80       	rfe 
}
80003b24:	00 90       	ret 

80003b26 <IfxCpu_Trap_systemCall_Cpu0>:
{
80003b26:	40 ae       	mov.aa %a14,%sp
80003b28:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003b2a:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003b2c:	b7 64 18 44 	insert %d4,%d4,6,8,24
80003b30:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003b34:	8f 72 00 21 	and %d2,%d2,7
80003b38:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003b3c:	80 22       	mov.d %d2,%a2
80003b3e:	0f 54 a0 30 	or %d3,%d4,%d5
80003b42:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
80003b46:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003b4a:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003b4e:	00 80       	rfe 
}
80003b50:	00 90       	ret 

80003b52 <IfxCpu_Trap_systemCall_Cpu1>:
{
80003b52:	40 ae       	mov.aa %a14,%sp
80003b54:	20 08       	sub.a %sp,8
80003b56:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003b58:	b7 64 18 44 	insert %d4,%d4,6,8,24
80003b5c:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003b60:	8f 72 00 21 	and %d2,%d2,7
80003b64:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003b68:	80 22       	mov.d %d2,%a2
80003b6a:	0f 54 a0 30 	or %d3,%d4,%d5
80003b6e:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80003b72:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003b76:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003b7a:	00 80       	rfe 
}
80003b7c:	00 90       	ret 

80003b7e <IfxCpu_Trap_systemCall_Cpu2>:
{
80003b7e:	40 ae       	mov.aa %a14,%sp
80003b80:	20 08       	sub.a %sp,8
80003b82:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003b84:	b7 64 18 44 	insert %d4,%d4,6,8,24
80003b88:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003b8c:	8f 72 00 21 	and %d2,%d2,7
80003b90:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003b94:	80 22       	mov.d %d2,%a2
80003b96:	0f 54 a0 30 	or %d3,%d4,%d5
80003b9a:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80003b9e:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003ba2:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003ba6:	00 80       	rfe 
}
80003ba8:	00 90       	ret 

80003baa <IfxCpu_Trap_nonMaskableInterrupt>:
{
80003baa:	40 ae       	mov.aa %a14,%sp
80003bac:	20 08       	sub.a %sp,8
80003bae:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003bb0:	b7 74 18 44 	insert %d4,%d4,7,8,24
80003bb4:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003bb8:	8f 72 00 21 	and %d2,%d2,7
80003bbc:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003bc0:	80 22       	mov.d %d2,%a2
80003bc2:	0f 54 a0 30 	or %d3,%d4,%d5
80003bc6:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
80003bca:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003bce:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003bd2:	00 80       	rfe 
}
80003bd4:	00 90       	ret 

80003bd6 <IfxCpu_getIndex>:
    return cpuMode;
}


IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
{
80003bd6:	40 ae       	mov.aa %a14,%sp
    IfxCpu_ResourceCpu result;
    uint32             index;
    result = IfxCpu_ResourceCpu_none;

    for (index = 0; index < IFXCPU_NUM_MODULES; index++)
80003bd8:	82 02       	mov %d2,0
80003bda:	1d 00 03 00 	j 80003be0 <IfxCpu_getIndex+0xa>
80003bde:	c2 12       	add %d2,1
80003be0:	ff 32 18 80 	jge.u %d2,3,80003c10 <IfxCpu_getIndex+0x3a>
    {
        if (IfxCpu_cfg_indexMap[index].module == cpu)
80003be4:	8f 32 00 30 	sh %d3,%d2,3
80003be8:	91 00 00 28 	movh.a %a2,32768
80003bec:	d9 22 20 a0 	lea %a2,[%a2]672 <800002a0 <IfxCpu_cfg_indexMap>>
80003bf0:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003bf4:	54 23       	ld.w %d3,[%a2]
80003bf6:	80 44       	mov.d %d4,%a4
80003bf8:	5f 43 f3 ff 	jne %d3,%d4,80003bde <IfxCpu_getIndex+0x8>
        {
            result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
80003bfc:	06 32       	sh %d2,3
80003bfe:	91 00 00 28 	movh.a %a2,32768
80003c02:	d9 22 20 a0 	lea %a2,[%a2]672 <800002a0 <IfxCpu_cfg_indexMap>>
80003c06:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003c0a:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80003c0e:	00 90       	ret 
    result = IfxCpu_ResourceCpu_none;
80003c10:	82 32       	mov %d2,3
        }
    }

    return result;
}
80003c12:	00 90       	ret 

80003c14 <IfxCpu_getCoreMode>:
{
80003c14:	40 ae       	mov.aa %a14,%sp
80003c16:	80 48       	mov.d %d8,%a4
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
80003c18:	6d ff df ff 	call 80003bd6 <IfxCpu_getIndex>


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80003c1c:	4d c0 e1 3f 	mfcr %d3,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003c20:	8f 73 00 31 	and %d3,%d3,7
    if (IfxCpu_getCoreIndex() != index)
80003c24:	5f 32 22 00 	jeq %d2,%d3,80003c68 <IfxCpu_getCoreMode+0x54>
        dbgsr = cpu->DBGSR;
80003c28:	bb 00 d0 3f 	mov.u %d3,64768
80003c2c:	60 82       	mov.a %a2,%d8
80003c2e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003c32:	54 23       	ld.w %d3,[%a2]
    if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
80003c34:	37 03 e2 40 	extr.u %d4,%d3,1,2
80003c38:	df 14 1c 00 	jeq %d4,1,80003c70 <IfxCpu_getCoreMode+0x5c>
        if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
80003c3c:	df 04 1c 80 	jne %d4,0,80003c74 <IfxCpu_getCoreMode+0x60>
            pmcsr_val = &MODULE_SCU.PMCSR[index];
80003c40:	06 22       	sh %d2,2
80003c42:	7b 30 00 3f 	movh %d3,61443
80003c46:	1b 43 0d 36 	addi %d3,%d3,24788
80003c4a:	60 32       	mov.a %a2,%d3
80003c4c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
            if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
80003c50:	54 22       	ld.w %d2,[%a2]
80003c52:	37 02 63 24 	extr.u %d2,%d2,8,3
80003c56:	df 12 11 00 	jeq %d2,1,80003c78 <IfxCpu_getCoreMode+0x64>
                if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
80003c5a:	54 22       	ld.w %d2,[%a2]
80003c5c:	37 02 63 24 	extr.u %d2,%d2,8,3
80003c60:	df 32 0e 00 	jeq %d2,3,80003c7c <IfxCpu_getCoreMode+0x68>
    cpuMode = IfxCpu_CoreMode_unknown;
80003c64:	82 52       	mov %d2,5
80003c66:	00 90       	ret 
        dbgsr.U = __mfcr(CPU_DBGSR);
80003c68:	4d 00 d0 3f 	mfcr %d3,$dbgsr
80003c6c:	1d ff e4 ff 	j 80003c34 <IfxCpu_getCoreMode+0x20>
        cpuMode = IfxCpu_CoreMode_halt;
80003c70:	82 02       	mov %d2,0
80003c72:	00 90       	ret 
            cpuMode = IfxCpu_CoreMode_unknown;
80003c74:	82 52       	mov %d2,5
80003c76:	00 90       	ret 
                cpuMode = IfxCpu_CoreMode_run;
80003c78:	82 12       	mov %d2,1
80003c7a:	00 90       	ret 
                    cpuMode = IfxCpu_CoreMode_idle;
80003c7c:	82 22       	mov %d2,2
}
80003c7e:	00 90       	ret 

80003c80 <IfxCpu_setCoreMode>:
    *lock = 0;
}


boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
{
80003c80:	40 ae       	mov.aa %a14,%sp
80003c82:	80 4c       	mov.d %d12,%a4
80003c84:	02 48       	mov %d8,%d4
    uint8              reqslp;
    boolean            retValue;
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
80003c86:	6d ff a8 ff 	call 80003bd6 <IfxCpu_getIndex>
80003c8a:	02 2a       	mov %d10,%d2

    /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
80003c8c:	8b 08 20 42 	ne %d4,%d8,0
80003c90:	8b 38 20 32 	ne %d3,%d8,3
80003c94:	26 43       	and %d3,%d4
                || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
80003c96:	df 03 0a 00 	jeq %d3,0,80003caa <IfxCpu_setCoreMode+0x2a>
80003c9a:	df 48 05 00 	jeq %d8,4,80003ca4 <IfxCpu_setCoreMode+0x24>
80003c9e:	82 19       	mov %d9,1
80003ca0:	1d 00 06 00 	j 80003cac <IfxCpu_setCoreMode+0x2c>
80003ca4:	82 09       	mov %d9,0
80003ca6:	1d 00 03 00 	j 80003cac <IfxCpu_setCoreMode+0x2c>
80003caa:	82 09       	mov %d9,0
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
80003cac:	8f f9 0f 91 	and %d9,%d9,255

    reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
80003cb0:	8b 28 00 82 	eq %d8,%d8,2

    if (retValue == TRUE)
80003cb4:	df 09 04 80 	jne %d9,0,80003cbc <IfxCpu_setCoreMode+0x3c>
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
        }
    }

    return retValue;
}
80003cb8:	02 92       	mov %d2,%d9
80003cba:	00 90       	ret 
    reg.U = __mfcr(CPU_CORE_ID);
80003cbc:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003cc0:	8f 72 00 21 	and %d2,%d2,7
        if (IfxCpu_getCoreIndex() != index)
80003cc4:	5f 2a 24 00 	jeq %d10,%d2,80003d0c <IfxCpu_setCoreMode+0x8c>
            uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
80003cc8:	6d ff 56 f2 	call 80002174 <IfxScuWdt_getSafetyWatchdogPassword>
80003ccc:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
80003cce:	02 24       	mov %d4,%d2
80003cd0:	6d ff fc f0 	call 80001ec8 <IfxScuWdt_clearSafetyEndinit>
            MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
80003cd4:	1b 5a 03 20 	addi %d2,%d10,53
80003cd8:	06 22       	sh %d2,2
80003cda:	7b 30 00 3f 	movh %d3,61443
80003cde:	1b 03 00 36 	addi %d3,%d3,24576
80003ce2:	60 32       	mov.a %a2,%d3
80003ce4:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003ce8:	54 23       	ld.w %d3,[%a2]
80003cea:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80003cee:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setSafetyEndinit(safetyWdtPw);
80003cf0:	02 b4       	mov %d4,%d11
80003cf2:	6d ff 71 f2 	call 800021d4 <IfxScuWdt_setSafetyEndinit>
            cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
80003cf6:	bb 00 d0 2f 	mov.u %d2,64768
80003cfa:	60 c2       	mov.a %a2,%d12
80003cfc:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003d00:	54 22       	ld.w %d2,[%a2]
80003d02:	b7 22 82 20 	insert %d2,%d2,2,1,2
80003d06:	74 22       	st.w [%a2],%d2
80003d08:	1d ff d8 ff 	j 80003cb8 <IfxCpu_setCoreMode+0x38>
            uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
80003d0c:	6d ff 22 f2 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80003d10:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearCpuEndinit(cpuWdtPw);
80003d12:	02 24       	mov %d4,%d2
80003d14:	6d ff b5 f0 	call 80001e7e <IfxScuWdt_clearCpuEndinit>
            MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
80003d18:	1b 5a 03 20 	addi %d2,%d10,53
80003d1c:	06 22       	sh %d2,2
80003d1e:	7b 30 00 3f 	movh %d3,61443
80003d22:	1b 03 00 36 	addi %d3,%d3,24576
80003d26:	60 32       	mov.a %a2,%d3
80003d28:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003d2c:	54 23       	ld.w %d3,[%a2]
80003d2e:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80003d32:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
80003d34:	02 b4       	mov %d4,%d11
80003d36:	6d ff 2a f2 	call 8000218a <IfxScuWdt_setCpuEndinit>
80003d3a:	1d ff bf ff 	j 80003cb8 <IfxCpu_setCoreMode+0x38>

80003d3e <IfxCpu_setProgramCounter>:


boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
{
80003d3e:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80003d40:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003d44:	8f 72 00 21 	and %d2,%d2,7
    if (cpu < IfxCpu_ResourceCpu_none)
80003d48:	ff 32 17 80 	jge.u %d2,3,80003d76 <IfxCpu_setProgramCounter+0x38>
        module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
80003d4c:	06 32       	sh %d2,3
80003d4e:	91 00 00 28 	movh.a %a2,32768
80003d52:	d9 22 20 a0 	lea %a2,[%a2]672 <800002a0 <IfxCpu_cfg_indexMap>>
80003d56:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003d5a:	54 22       	ld.w %d2,[%a2]
    boolean retVal = TRUE;

    if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
80003d5c:	80 43       	mov.d %d3,%a4
80003d5e:	5f 23 0f 00 	jeq %d3,%d2,80003d7c <IfxCpu_setProgramCounter+0x3e>
    {
        retVal = FALSE;
    }
    else
    {
        cpu->PC.B.PC = programCounter >> 1;
80003d62:	bb 80 e0 2f 	mov.u %d2,65032
80003d66:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
80003d6a:	54 42       	ld.w %d2,[%a4]
80003d6c:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80003d70:	74 42       	st.w [%a4],%d2
    boolean retVal = TRUE;
80003d72:	82 12       	mov %d2,1
80003d74:	00 90       	ret 
        module = NULL_PTR;
80003d76:	82 02       	mov %d2,0
80003d78:	1d ff f2 ff 	j 80003d5c <IfxCpu_setProgramCounter+0x1e>
        retVal = FALSE;
80003d7c:	82 02       	mov %d2,0
    }

    return retVal;
}
80003d7e:	00 90       	ret 

80003d80 <IfxCpu_startCore>:
    return retVal;
}


boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
{
80003d80:	40 ae       	mov.aa %a14,%sp
80003d82:	80 49       	mov.d %d9,%a4
    boolean retVal = TRUE;

    /* Set the PC for Core 1 */
    retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
80003d84:	6d ff dd ff 	call 80003d3e <IfxCpu_setProgramCounter>
80003d88:	8f 12 00 81 	and %d8,%d2,1
    /* Get the mode for Core 1 and set it to RUNNING */

    /* Core not running already */
    if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
80003d8c:	60 94       	mov.a %a4,%d9
80003d8e:	6d ff 43 ff 	call 80003c14 <IfxCpu_getCoreMode>
80003d92:	df 02 04 00 	jeq %d2,0,80003d9a <IfxCpu_startCore+0x1a>
    {
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
    }

    return retVal;
}
80003d96:	02 82       	mov %d2,%d8
80003d98:	00 90       	ret 
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
80003d9a:	82 14       	mov %d4,1
80003d9c:	60 94       	mov.a %a4,%d9
80003d9e:	6d ff 71 ff 	call 80003c80 <IfxCpu_setCoreMode>
80003da2:	26 28       	and %d8,%d2
80003da4:	1d ff f9 ff 	j 80003d96 <IfxCpu_startCore+0x16>

80003da8 <IfxCpu_waitEvent>:


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
80003da8:	40 ae       	mov.aa %a14,%sp
80003daa:	40 4c       	mov.aa %a12,%a4
80003dac:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80003dae:	80 42       	mov.d %d2,%a4
80003db0:	b7 02 1c 20 	insert %d2,%d2,0,0,28
80003db4:	7b 00 00 3d 	movh %d3,53248
80003db8:	5f 32 28 00 	jeq %d2,%d3,80003e08 <IfxCpu_waitEvent+0x60>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80003dbc:	6d ff 46 ee 	call 80001a48 <IfxScuCcu_getSourceFrequency>
80003dc0:	91 30 00 2f 	movh.a %a2,61443
80003dc4:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80003dc8:	54 23       	ld.w %d3,[%a2]
80003dca:	37 03 64 34 	extr.u %d3,%d3,8,4
80003dce:	4b 03 41 31 	itof %d3,%d3
80003dd2:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
80003dd6:	7b a0 47 34 	movh %d3,17530
80003dda:	4b 32 51 20 	div.f %d2,%d2,%d3
80003dde:	4b 08 61 41 	utof %d4,%d8
80003de2:	4b 24 41 40 	mul.f %d4,%d4,%d2
80003de6:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
80003dea:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80003dee:	54 c2       	ld.w %d2,[%a12]
80003df0:	8f 72 00 21 	and %d2,%d2,7
80003df4:	df 72 18 00 	jeq %d2,7,80003e24 <IfxCpu_waitEvent+0x7c>
    __asm__ volatile ("nop" : : : "memory");
80003df8:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80003dfa:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80003dfe:	a2 42       	sub %d2,%d4
80003e00:	3f 32 f7 ff 	jlt.u %d2,%d3,80003dee <IfxCpu_waitEvent+0x46>
        {
            errorcnt = 1;
80003e04:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
80003e06:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80003e08:	80 42       	mov.d %d2,%a4
80003e0a:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
80003e0e:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
80003e12:	4d c0 e1 2f 	mfcr %d2,$core_id
80003e16:	8f c2 01 20 	sh %d2,%d2,28
80003e1a:	0b 23 80 20 	sub %d2,%d3,%d2
80003e1e:	60 2c       	mov.a %a12,%d2
80003e20:	1d ff ce ff 	j 80003dbc <IfxCpu_waitEvent+0x14>
    boolean          errorcnt      = 0U;
80003e24:	82 02       	mov %d2,0
80003e26:	00 90       	ret 

80003e28 <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
80003e28:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
80003e2a:	4d c0 e1 2f 	mfcr %d2,$core_id
80003e2e:	82 13       	mov %d3,1
80003e30:	57 30 21 22 	imask %e2,%d3,%d2,1
80003e34:	49 42 40 08 	ldmst [%a4]0,%e2
}
80003e38:	00 90       	ret 

80003e3a <Ifx_Cpp_Init>:
#pragma section
#elif defined(__DCC__)
#pragma section CONST
#endif
static void Ifx_Cpp_Init(void)
{
80003e3a:	40 ae       	mov.aa %a14,%sp
    Ifx_C_Init();           /*Initialization of C runtime variables */
80003e3c:	6d 00 5a 04 	call 800046f0 <Ifx_C_Init>
#elif defined (__HIGHTEC__)
extern void _init(void); /* cpp initialization */
    _init();
#elif defined (__GNUC__) && !defined(__HIGHTEC__)
    extern void _init(void); /* cpp initialization */
    _init();
80003e40:	6d 00 3a 0c 	call 800056b4 <_init>
#endif
}
80003e44:	00 90       	ret 

80003e46 <hardware_init_hook>:
{}
80003e46:	00 90       	ret 

80003e48 <software_init_hook>:
{}
80003e48:	00 90       	ret 

80003e4a <_Core0_start>:
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80003e4a:	91 30 00 2f 	movh.a %a2,61443
80003e4e:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
    __setareg(sp, __USTACK(0));
80003e52:	91 20 00 37 	movh.a %a3,28674
80003e56:	37 02 6e 21 	extr.u %d2,%d2,2,14
80003e5a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003e5e:	8f f2 83 81 	xor %d8,%d2,63
80003e62:	80 32       	mov.d %d2,%a3
80003e64:	1b 02 60 29 	addi %d2,%d2,-27136
80003e68:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80003e6a:	0d 00 80 04 	dsync 
    __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
80003e6e:	3b 00 98 20 	mov %d2,2432
80003e72:	cd 42 e0 0f 	mtcr $psw,%d2
    pcxi  = __mfcr(CPU_PCXI);
80003e76:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
80003e7a:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80003e7e:	cd 02 e0 0f 	mtcr $pcxi,%d2
    if (enable)
    {                           /* Step 3: Initiate invalidation of current cache contents if any */
        Ifx_CPU_PCON1 pcon1;
        pcon1.U       = 0;
        pcon1.B.PCINV = 1;
        __mtcr(CPU_PCON1, pcon1.U);
80003e82:	82 12       	mov %d2,1
80003e84:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80003e88:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003e8c:	8f 72 00 21 	and %d2,%d2,7
    }

    uint32 coreIndex   = IfxCpu_getCoreIndex();
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80003e90:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
80003e94:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
80003e98:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80003e9a:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80003e9c:	37 02 6e 21 	extr.u %d2,%d2,2,14
    /*PCACHE enable steps */
    {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80003ea0:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80003ea4:	6f 13 41 81 	jnz.t %d3,1,80004126 <_Core0_start+0x2dc>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ea8:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003eac:	54 22       	ld.w %d2,[%a2]
80003eae:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003eb2:	a6 32       	or %d2,%d3
80003eb4:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003eb8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80003eba:	54 22       	ld.w %d2,[%a2]
80003ebc:	6f 02 ff ff 	jnz.t %d2,0,80003eba <_Core0_start+0x70>
        Ifx_CPU_PCON0 pcon0;
        pcon0.U       = 0;
        pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
        __mtcr(CPU_PCON0, pcon0.U);
80003ec0:	82 02       	mov %d2,0
80003ec2:	cd c2 20 09 	mtcr $pcon0,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80003ec6:	54 22       	ld.w %d2,[%a2]
80003ec8:	6f 12 09 00 	jz.t %d2,1,80003eda <_Core0_start+0x90>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003ecc:	54 22       	ld.w %d2,[%a2]
80003ece:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ed2:	a6 32       	or %d2,%d3
80003ed4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003ed8:	74 22       	st.w [%a2],%d2

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003eda:	54 22       	ld.w %d2,[%a2]
80003edc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ee0:	a6 32       	or %d2,%d3
80003ee2:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003ee6:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80003ee8:	54 22       	ld.w %d2,[%a2]
80003eea:	6f 02 ff 7f 	jz.t %d2,0,80003ee8 <_Core0_start+0x9e>
    __asm__ volatile ("isync" : : : "memory");
80003eee:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80003ef2:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80003ef6:	7b 30 00 3f 	movh %d3,61443
80003efa:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003efe:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80003f02:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003f06:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80003f08:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80003f0a:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80003f0c:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80003f10:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80003f14:	6f 13 fd 80 	jnz.t %d3,1,8000410e <_Core0_start+0x2c4>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f18:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003f1c:	54 22       	ld.w %d2,[%a2]
80003f1e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f22:	a6 32       	or %d2,%d3
80003f24:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003f28:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80003f2a:	54 22       	ld.w %d2,[%a2]
80003f2c:	6f 02 ff ff 	jnz.t %d2,0,80003f2a <_Core0_start+0xe0>
        __mtcr(CPU_DCON0, dcon0.U);
80003f30:	82 22       	mov %d2,2
80003f32:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80003f36:	54 22       	ld.w %d2,[%a2]
80003f38:	6f 12 09 00 	jz.t %d2,1,80003f4a <_Core0_start+0x100>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003f3c:	54 22       	ld.w %d2,[%a2]
80003f3e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f42:	a6 32       	or %d2,%d3
80003f44:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003f48:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003f4a:	54 22       	ld.w %d2,[%a2]
80003f4c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f50:	a6 32       	or %d2,%d3
80003f52:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003f56:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80003f58:	54 22       	ld.w %d2,[%a2]
80003f5a:	6f 02 ff 7f 	jz.t %d2,0,80003f58 <_Core0_start+0x10e>
80003f5e:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80003f62:	91 30 00 2f 	movh.a %a2,61443
80003f66:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003f6a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f6e:	8f 28 00 30 	sh %d3,%d8,2
    if (watchdog->CON0.B.LCK)
80003f72:	6f 12 09 00 	jz.t %d2,1,80003f84 <_Core0_start+0x13a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003f76:	54 22       	ld.w %d2,[%a2]
80003f78:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f7c:	a6 32       	or %d2,%d3
80003f7e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003f82:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003f84:	91 30 00 2f 	movh.a %a2,61443
80003f88:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003f8c:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003f90:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f94:	a6 32       	or %d2,%d3
80003f96:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003f9a:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80003f9c:	54 22       	ld.w %d2,[%a2]
80003f9e:	6f 02 ff ff 	jnz.t %d2,0,80003f9c <_Core0_start+0x152>
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
80003fa2:	91 00 00 38 	movh.a %a3,32768
80003fa6:	80 32       	mov.d %d2,%a3
80003fa8:	1b 02 10 20 	addi %d2,%d2,256
80003fac:	cd 42 e2 0f 	mtcr $btv,%d2
    __mtcr(CPU_BIV, (uint32)__INTTAB(0));
80003fb0:	91 f0 01 38 	movh.a %a3,32799
80003fb4:	80 32       	mov.d %d2,%a3
80003fb6:	1b 02 00 24 	addi %d2,%d2,16384
80003fba:	cd 02 e2 0f 	mtcr $biv,%d2
    __mtcr(CPU_ISP, (uint32)__ISTACK(0));
80003fbe:	91 20 00 37 	movh.a %a3,28674
80003fc2:	80 32       	mov.d %d2,%a3
80003fc4:	1b 02 b0 29 	addi %d2,%d2,-25856
80003fc8:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80003fcc:	54 22       	ld.w %d2,[%a2]
80003fce:	6f 12 09 00 	jz.t %d2,1,80003fe0 <_Core0_start+0x196>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003fd2:	54 22       	ld.w %d2,[%a2]
80003fd4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003fd8:	a6 32       	or %d2,%d3
80003fda:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003fde:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003fe0:	91 30 00 2f 	movh.a %a2,61443
80003fe4:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003fe8:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003fec:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ff0:	a6 32       	or %d2,%d3
80003ff2:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003ff6:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80003ff8:	54 22       	ld.w %d2,[%a2]
80003ffa:	6f 02 ff 7f 	jz.t %d2,0,80003ff8 <_Core0_start+0x1ae>
    __setareg(a0, __SDATA1(0));
80003ffe:	91 10 00 26 	movh.a %a2,24577
80004002:	80 22       	mov.d %d2,%a2
80004004:	1b 02 00 28 	addi %d2,%d2,-32768
80004008:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(0));
8000400a:	91 10 00 28 	movh.a %a2,32769
8000400e:	80 22       	mov.d %d2,%a2
80004010:	1b 02 00 28 	addi %d2,%d2,-32768
80004014:	60 21       	mov.a %a1,%d2
    __setareg(a8, __SDATA3(0));
80004016:	91 10 00 28 	movh.a %a2,32769
8000401a:	80 22       	mov.d %d2,%a2
8000401c:	1b 02 00 28 	addi %d2,%d2,-32768
80004020:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(0));
80004022:	91 10 00 29 	movh.a %a2,36865
80004026:	80 22       	mov.d %d2,%a2
80004028:	1b 02 00 28 	addi %d2,%d2,-32768
8000402c:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
8000402e:	91 20 00 37 	movh.a %a3,28674
80004032:	91 20 00 27 	movh.a %a2,28674
80004036:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70019c00 <__CSA0>>
8000403a:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7001bc00 <__CSA0_END>>
8000403e:	01 32 20 20 	sub.a %a2,%a2,%a3
80004042:	80 22       	mov.d %d2,%a2
80004044:	8f a2 1f 70 	sh %d7,%d2,-6
    uint32 *prvCsa      = csaBegin;
80004048:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
8000404a:	1b d7 ff 0f 	addi %d0,%d7,-3
    for (k = 0U; k < numOfCsa; k++)
8000404e:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80004050:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004052:	7b f0 00 40 	movh %d4,15
    for (k = 0U; k < numOfCsa; k++)
80004056:	df 07 27 00 	jeq %d7,0,800040a4 <_Core0_start+0x25a>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000405a:	37 02 70 53 	extr.u %d5,%d2,6,16
8000405e:	8f 42 1f 60 	sh %d6,%d2,-12
80004062:	26 46       	and %d6,%d4
80004064:	a6 65       	or %d5,%d6
        if (k == 0U)
80004066:	df 03 16 00 	jeq %d3,0,80004092 <_Core0_start+0x248>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
8000406a:	74 25       	st.w [%a2],%d5
        if (k == (numOfCsa - 3U))
8000406c:	5f 03 04 80 	jne %d3,%d0,80004074 <_Core0_start+0x22a>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80004070:	cd c5 e3 0f 	mtcr $lcx,%d5
    for (k = 0U; k < numOfCsa; k++)
80004074:	c2 13       	add %d3,1
80004076:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80004078:	1b 02 04 50 	addi %d5,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8000407c:	5f 37 0f 00 	jeq %d7,%d3,8000409a <_Core0_start+0x250>
        nxtCsa += 16U;           /* next CSA */
80004080:	02 52       	mov %d2,%d5
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004082:	37 02 70 53 	extr.u %d5,%d2,6,16
80004086:	8f 42 1f 60 	sh %d6,%d2,-12
8000408a:	26 46       	and %d6,%d4
8000408c:	a6 65       	or %d5,%d6
        if (k == 0U)
8000408e:	df 03 ee ff 	jne %d3,0,8000406a <_Core0_start+0x220>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80004092:	cd 85 e3 0f 	mtcr $fcx,%d5
80004096:	1d ff eb ff 	j 8000406c <_Core0_start+0x222>
8000409a:	1b f7 ff 2f 	addi %d2,%d7,-1
8000409e:	06 62       	sh %d2,6
800040a0:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
800040a4:	82 02       	mov %d2,0
800040a6:	74 22       	st.w [%a2],%d2
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
800040a8:	6d ff 66 f0 	call 80002174 <IfxScuWdt_getSafetyWatchdogPassword>
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
800040ac:	02 84       	mov %d4,%d8
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
800040ae:	02 29       	mov %d9,%d2
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
800040b0:	6d ff 34 ef 	call 80001f18 <IfxScuWdt_disableCpuWatchdog>
        IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
800040b4:	02 94       	mov %d4,%d9
800040b6:	6d ff 70 ef 	call 80001f96 <IfxScuWdt_disableSafetyWatchdog>
       	hardware_init_hook();
800040ba:	6d ff c6 fe 	call 80003e46 <hardware_init_hook>
        Ifx_Cpp_Init();
800040be:	6d ff be fe 	call 80003e3a <Ifx_Cpp_Init>
       	software_init_hook();
800040c2:	6d ff c3 fe 	call 80003e48 <software_init_hook>
        IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
800040c6:	02 84       	mov %d4,%d8
800040c8:	6d ff b6 ef 	call 80002034 <IfxScuWdt_enableCpuWatchdog>
        IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
800040cc:	02 94       	mov %d4,%d9
800040ce:	6d ff f2 ef 	call 800020b2 <IfxScuWdt_enableSafetyWatchdog>
    IFXCPU_CSTART_CCU_INIT_HOOK();
800040d2:	91 00 00 48 	movh.a %a4,32768
800040d6:	d9 44 30 e0 	lea %a4,[%a4]944 <800003b0 <IfxScuCcu_defaultClockConfig>>
800040da:	6d ff 31 ed 	call 80001b3c <IfxScuCcu_init>
    (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
800040de:	91 00 00 28 	movh.a %a2,32768
800040e2:	80 22       	mov.d %d2,%a2
800040e4:	1b e2 13 44 	addi %d4,%d2,16702
800040e8:	91 30 88 4f 	movh.a %a4,63619
800040ec:	6d ff 4a fe 	call 80003d80 <IfxCpu_startCore>
    (void)IfxCpu_startCore(&MODULE_CPU2, (uint32)&_Core2_start);       /*The status returned by function call is ignored */
800040f0:	91 00 00 28 	movh.a %a2,32768
800040f4:	80 22       	mov.d %d2,%a2
800040f6:	1b c2 3d 44 	addi %d4,%d2,17372
800040fa:	91 50 88 4f 	movh.a %a4,63621
800040fe:	6d ff 41 fe 	call 80003d80 <IfxCpu_startCore>
    __non_return_call(core0_main);
80004102:	91 00 00 28 	movh.a %a2,32768
80004106:	d9 22 b6 a4 	lea %a2,[%a2]19126 <80004ab6 <core0_main>>
8000410a:	dc 02       	ji %a2
}
8000410c:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000410e:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004110:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004114:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004118:	0f 34 a0 20 	or %d2,%d4,%d3
8000411c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004120:	74 22       	st.w [%a2],%d2
80004122:	1d ff fd fe 	j 80003f1c <_Core0_start+0xd2>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004126:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004128:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000412c:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004130:	0f 34 a0 20 	or %d2,%d4,%d3
80004134:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004138:	74 22       	st.w [%a2],%d2
8000413a:	1d ff b9 fe 	j 80003eac <_Core0_start+0x62>

8000413e <_Core1_start>:
    password  = watchdog->CON0.B.PW;
8000413e:	91 30 00 2f 	movh.a %a2,61443
80004142:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004146:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
8000414a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[1]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(1);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(1));
8000414e:	91 20 00 26 	movh.a %a2,24578
80004152:	8f f2 83 41 	xor %d4,%d2,63
80004156:	80 22       	mov.d %d2,%a2
80004158:	1b 02 60 2b 	addi %d2,%d2,-18944
8000415c:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
8000415e:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART1_PSW_DEFAULT);    /* 0x00000980 */
80004162:	3b 00 98 20 	mov %d2,2432
80004166:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
8000416a:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART1_PCX_O_S_DEFAULT; /*0xfff00000; */
8000416e:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80004172:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
80004176:	82 12       	mov %d2,1
80004178:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000417c:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004180:	7b 30 00 3f 	movh %d3,61443
80004184:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004188:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000418c:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004190:	60 22       	mov.a %a2,%d2
80004192:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004194:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004196:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000419a:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
8000419e:	6f 13 13 81 	jnz.t %d3,1,800043c4 <_Core1_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041a2:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800041a6:	54 22       	ld.w %d2,[%a2]
800041a8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041ac:	a6 32       	or %d2,%d3
800041ae:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800041b2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800041b4:	54 22       	ld.w %d2,[%a2]
800041b6:	6f 02 ff ff 	jnz.t %d2,0,800041b4 <_Core1_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
800041ba:	82 02       	mov %d2,0
800041bc:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
800041c0:	54 22       	ld.w %d2,[%a2]
800041c2:	6f 12 09 00 	jz.t %d2,1,800041d4 <_Core1_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800041c6:	54 22       	ld.w %d2,[%a2]
800041c8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041cc:	a6 32       	or %d2,%d3
800041ce:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800041d2:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800041d4:	54 22       	ld.w %d2,[%a2]
800041d6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041da:	a6 32       	or %d2,%d3
800041dc:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800041e0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800041e2:	54 22       	ld.w %d2,[%a2]
800041e4:	6f 02 ff 7f 	jz.t %d2,0,800041e2 <_Core1_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
800041e8:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
800041ec:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800041f0:	7b 30 00 3f 	movh %d3,61443
800041f4:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800041f8:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800041fc:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004200:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80004202:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004204:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004206:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000420a:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
8000420e:	6f 13 cf 80 	jnz.t %d3,1,800043ac <_Core1_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004212:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004216:	54 22       	ld.w %d2,[%a2]
80004218:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000421c:	a6 32       	or %d2,%d3
8000421e:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004222:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004224:	54 22       	ld.w %d2,[%a2]
80004226:	6f 02 ff ff 	jnz.t %d2,0,80004224 <_Core1_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
8000422a:	82 02       	mov %d2,0
8000422c:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80004230:	54 22       	ld.w %d2,[%a2]
80004232:	6f 12 09 00 	jz.t %d2,1,80004244 <_Core1_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004236:	54 22       	ld.w %d2,[%a2]
80004238:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000423c:	a6 32       	or %d2,%d3
8000423e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004242:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004244:	54 22       	ld.w %d2,[%a2]
80004246:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000424a:	a6 32       	or %d2,%d3
8000424c:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004250:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004252:	54 22       	ld.w %d2,[%a2]
80004254:	6f 02 ff 7f 	jz.t %d2,0,80004252 <_Core1_start+0x114>
80004258:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
8000425c:	91 30 00 2f 	movh.a %a2,61443
80004260:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004264:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004268:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
8000426a:	6f 12 09 00 	jz.t %d2,1,8000427c <_Core1_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000426e:	54 22       	ld.w %d2,[%a2]
80004270:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004274:	a6 42       	or %d2,%d4
80004276:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000427a:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000427c:	91 30 00 2f 	movh.a %a2,61443
80004280:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004284:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004288:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000428c:	a6 42       	or %d2,%d4
8000428e:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004292:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004294:	54 22       	ld.w %d2,[%a2]
80004296:	6f 02 ff ff 	jnz.t %d2,0,80004294 <_Core1_start+0x156>

    /* Clear the ENDINIT bit in the WDT_CON1 register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(1));
8000429a:	91 f0 01 38 	movh.a %a3,32799
8000429e:	80 32       	mov.d %d2,%a3
800042a0:	1b 02 20 26 	addi %d2,%d2,25088
800042a4:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(1));
800042a8:	91 f0 01 38 	movh.a %a3,32799
800042ac:	80 32       	mov.d %d2,%a3
800042ae:	1b 02 00 24 	addi %d2,%d2,16384
800042b2:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(1));
800042b6:	91 20 00 36 	movh.a %a3,24578
800042ba:	80 32       	mov.d %d2,%a3
800042bc:	1b 02 b0 2b 	addi %d2,%d2,-17664
800042c0:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
800042c4:	54 22       	ld.w %d2,[%a2]
800042c6:	6f 12 09 00 	jz.t %d2,1,800042d8 <_Core1_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800042ca:	54 22       	ld.w %d2,[%a2]
800042cc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800042d0:	a6 42       	or %d2,%d4
800042d2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800042d6:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800042d8:	91 30 00 2f 	movh.a %a2,61443
800042dc:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800042e0:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800042e4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800042e8:	a6 42       	or %d2,%d4
800042ea:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800042ee:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800042f0:	54 22       	ld.w %d2,[%a2]
800042f2:	6f 02 ff 7f 	jz.t %d2,0,800042f0 <_Core1_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(1));
800042f6:	91 10 00 26 	movh.a %a2,24577
800042fa:	80 22       	mov.d %d2,%a2
800042fc:	1b 02 00 28 	addi %d2,%d2,-32768
80004300:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(1));
80004302:	91 10 00 28 	movh.a %a2,32769
80004306:	80 22       	mov.d %d2,%a2
80004308:	1b 02 00 28 	addi %d2,%d2,-32768
8000430c:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialised */
    __setareg(a8, __SDATA3(1));
8000430e:	91 10 00 28 	movh.a %a2,32769
80004312:	80 22       	mov.d %d2,%a2
80004314:	1b 02 00 28 	addi %d2,%d2,-32768
80004318:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(1));
8000431a:	91 10 00 29 	movh.a %a2,36865
8000431e:	80 22       	mov.d %d2,%a2
80004320:	1b 02 00 28 	addi %d2,%d2,-32768
80004324:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80004326:	91 20 00 36 	movh.a %a3,24578
8000432a:	91 20 00 26 	movh.a %a2,24578
8000432e:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <6001bc00 <__CSA1>>
80004332:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <6001dc00 <__CSA1_END>>
80004336:	01 32 20 20 	sub.a %a2,%a2,%a3
8000433a:	80 22       	mov.d %d2,%a2
8000433c:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80004340:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80004342:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80004346:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80004348:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000434a:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8000434e:	df 06 27 00 	jeq %d6,0,8000439c <_Core1_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004352:	37 02 70 43 	extr.u %d4,%d2,6,16
80004356:	8f 42 1f 50 	sh %d5,%d2,-12
8000435a:	26 75       	and %d5,%d7
8000435c:	a6 54       	or %d4,%d5
        if (k == 0U)
8000435e:	df 03 16 00 	jeq %d3,0,8000438a <_Core1_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80004362:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80004364:	5f 03 04 80 	jne %d3,%d0,8000436c <_Core1_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80004368:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8000436c:	c2 13       	add %d3,1
8000436e:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80004370:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80004374:	5f 36 0f 00 	jeq %d6,%d3,80004392 <_Core1_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80004378:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000437a:	37 02 70 43 	extr.u %d4,%d2,6,16
8000437e:	8f 42 1f 50 	sh %d5,%d2,-12
80004382:	26 75       	and %d5,%d7
80004384:	a6 54       	or %d4,%d5
        if (k == 0U)
80004386:	df 03 ee ff 	jne %d3,0,80004362 <_Core1_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
8000438a:	cd 84 e3 0f 	mtcr $fcx,%d4
8000438e:	1d ff eb ff 	j 80004364 <_Core1_start+0x226>
80004392:	1b f6 ff 2f 	addi %d2,%d6,-1
80004396:	06 62       	sh %d2,6
80004398:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
8000439c:	82 02       	mov %d2,0
8000439e:	74 22       	st.w [%a2],%d2

    IfxCpu_initCSA((uint32 *)__CSA(1), (uint32 *)__CSA_END(1));

    /*Call main function of Cpu0 */
    __non_return_call(core1_main);
800043a0:	91 00 00 28 	movh.a %a2,32768
800043a4:	d9 22 8c c4 	lea %a2,[%a2]19212 <80004b0c <core1_main>>
800043a8:	dc 02       	ji %a2
}
800043aa:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800043ac:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800043ae:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800043b2:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800043b6:	0f 35 a0 20 	or %d2,%d5,%d3
800043ba:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800043be:	74 22       	st.w [%a2],%d2
800043c0:	1d ff 2b ff 	j 80004216 <_Core1_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800043c4:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800043c6:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800043ca:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800043ce:	0f 35 a0 20 	or %d2,%d5,%d3
800043d2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800043d6:	74 22       	st.w [%a2],%d2
800043d8:	1d ff e7 fe 	j 800041a6 <_Core1_start+0x68>

800043dc <_Core2_start>:
    password  = watchdog->CON0.B.PW;
800043dc:	91 30 00 2f 	movh.a %a2,61443
800043e0:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800043e4:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800043e8:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[2]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(2);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(2));
800043ec:	91 20 00 25 	movh.a %a2,20482
800043f0:	8f f2 83 41 	xor %d4,%d2,63
800043f4:	80 22       	mov.d %d2,%a2
800043f6:	1b 02 60 2b 	addi %d2,%d2,-18944
800043fa:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
800043fc:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART2_PSW_DEFAULT);    /* 0x00000980 */
80004400:	3b 00 98 20 	mov %d2,2432
80004404:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
80004408:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART2_PCX_O_S_DEFAULT; /*0xfff00000; */
8000440c:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80004410:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
80004414:	82 12       	mov %d2,1
80004416:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000441a:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000441e:	7b 30 00 3f 	movh %d3,61443
80004422:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004426:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000442a:	13 c2 20 23 	madd %d2,%d3,%d2,12
8000442e:	60 22       	mov.a %a2,%d2
80004430:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004432:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004434:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80004438:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
8000443c:	6f 13 13 81 	jnz.t %d3,1,80004662 <_Core2_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004440:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004444:	54 22       	ld.w %d2,[%a2]
80004446:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000444a:	a6 32       	or %d2,%d3
8000444c:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004450:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004452:	54 22       	ld.w %d2,[%a2]
80004454:	6f 02 ff ff 	jnz.t %d2,0,80004452 <_Core2_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
80004458:	82 02       	mov %d2,0
8000445a:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
8000445e:	54 22       	ld.w %d2,[%a2]
80004460:	6f 12 09 00 	jz.t %d2,1,80004472 <_Core2_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004464:	54 22       	ld.w %d2,[%a2]
80004466:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000446a:	a6 32       	or %d2,%d3
8000446c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004470:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004472:	54 22       	ld.w %d2,[%a2]
80004474:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004478:	a6 32       	or %d2,%d3
8000447a:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000447e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004480:	54 22       	ld.w %d2,[%a2]
80004482:	6f 02 ff 7f 	jz.t %d2,0,80004480 <_Core2_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
80004486:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
8000448a:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000448e:	7b 30 00 3f 	movh %d3,61443
80004492:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004496:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000449a:	13 c2 20 23 	madd %d2,%d3,%d2,12
8000449e:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
800044a0:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800044a2:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800044a4:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800044a8:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800044ac:	6f 13 cf 80 	jnz.t %d3,1,8000464a <_Core2_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800044b0:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800044b4:	54 22       	ld.w %d2,[%a2]
800044b6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800044ba:	a6 32       	or %d2,%d3
800044bc:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800044c0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800044c2:	54 22       	ld.w %d2,[%a2]
800044c4:	6f 02 ff ff 	jnz.t %d2,0,800044c2 <_Core2_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
800044c8:	82 02       	mov %d2,0
800044ca:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
800044ce:	54 22       	ld.w %d2,[%a2]
800044d0:	6f 12 09 00 	jz.t %d2,1,800044e2 <_Core2_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800044d4:	54 22       	ld.w %d2,[%a2]
800044d6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800044da:	a6 32       	or %d2,%d3
800044dc:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800044e0:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800044e2:	54 22       	ld.w %d2,[%a2]
800044e4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800044e8:	a6 32       	or %d2,%d3
800044ea:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800044ee:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800044f0:	54 22       	ld.w %d2,[%a2]
800044f2:	6f 02 ff 7f 	jz.t %d2,0,800044f0 <_Core2_start+0x114>
800044f6:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
800044fa:	91 30 00 2f 	movh.a %a2,61443
800044fe:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004502:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004506:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
80004508:	6f 12 09 00 	jz.t %d2,1,8000451a <_Core2_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000450c:	54 22       	ld.w %d2,[%a2]
8000450e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004512:	a6 42       	or %d2,%d4
80004514:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004518:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000451a:	91 30 00 2f 	movh.a %a2,61443
8000451e:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004522:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004526:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000452a:	a6 42       	or %d2,%d4
8000452c:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004530:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004532:	54 22       	ld.w %d2,[%a2]
80004534:	6f 02 ff ff 	jnz.t %d2,0,80004532 <_Core2_start+0x156>

    /* Clear the ENDINIT bit in the Password register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(2));
80004538:	91 f0 01 38 	movh.a %a3,32799
8000453c:	80 32       	mov.d %d2,%a3
8000453e:	1b 02 10 26 	addi %d2,%d2,24832
80004542:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(2));
80004546:	91 f0 01 38 	movh.a %a3,32799
8000454a:	80 32       	mov.d %d2,%a3
8000454c:	1b 02 00 24 	addi %d2,%d2,16384
80004550:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(2));
80004554:	91 20 00 35 	movh.a %a3,20482
80004558:	80 32       	mov.d %d2,%a3
8000455a:	1b 02 b0 2b 	addi %d2,%d2,-17664
8000455e:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80004562:	54 22       	ld.w %d2,[%a2]
80004564:	6f 12 09 00 	jz.t %d2,1,80004576 <_Core2_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004568:	54 22       	ld.w %d2,[%a2]
8000456a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000456e:	a6 42       	or %d2,%d4
80004570:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004574:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004576:	91 30 00 2f 	movh.a %a2,61443
8000457a:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
8000457e:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004582:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004586:	a6 42       	or %d2,%d4
80004588:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000458c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8000458e:	54 22       	ld.w %d2,[%a2]
80004590:	6f 02 ff 7f 	jz.t %d2,0,8000458e <_Core2_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(2));
80004594:	91 10 00 26 	movh.a %a2,24577
80004598:	80 22       	mov.d %d2,%a2
8000459a:	1b 02 00 28 	addi %d2,%d2,-32768
8000459e:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(2));
800045a0:	91 10 00 28 	movh.a %a2,32769
800045a4:	80 22       	mov.d %d2,%a2
800045a6:	1b 02 00 28 	addi %d2,%d2,-32768
800045aa:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialized */
    __setareg(a8, __SDATA3(2));
800045ac:	91 10 00 28 	movh.a %a2,32769
800045b0:	80 22       	mov.d %d2,%a2
800045b2:	1b 02 00 28 	addi %d2,%d2,-32768
800045b6:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(2));
800045b8:	91 10 00 29 	movh.a %a2,36865
800045bc:	80 22       	mov.d %d2,%a2
800045be:	1b 02 00 28 	addi %d2,%d2,-32768
800045c2:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
800045c4:	91 20 00 35 	movh.a %a3,20482
800045c8:	91 20 00 25 	movh.a %a2,20482
800045cc:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <5001bc00 <__CSA2>>
800045d0:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <5001dc00 <__CSA2_END>>
800045d4:	01 32 20 20 	sub.a %a2,%a2,%a3
800045d8:	80 22       	mov.d %d2,%a2
800045da:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
800045de:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
800045e0:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
800045e4:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
800045e6:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800045e8:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
800045ec:	df 06 27 00 	jeq %d6,0,8000463a <_Core2_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800045f0:	37 02 70 43 	extr.u %d4,%d2,6,16
800045f4:	8f 42 1f 50 	sh %d5,%d2,-12
800045f8:	26 75       	and %d5,%d7
800045fa:	a6 54       	or %d4,%d5
        if (k == 0U)
800045fc:	df 03 16 00 	jeq %d3,0,80004628 <_Core2_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80004600:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80004602:	5f 03 04 80 	jne %d3,%d0,8000460a <_Core2_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80004606:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8000460a:	c2 13       	add %d3,1
8000460c:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
8000460e:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80004612:	5f 36 0f 00 	jeq %d6,%d3,80004630 <_Core2_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80004616:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004618:	37 02 70 43 	extr.u %d4,%d2,6,16
8000461c:	8f 42 1f 50 	sh %d5,%d2,-12
80004620:	26 75       	and %d5,%d7
80004622:	a6 54       	or %d4,%d5
        if (k == 0U)
80004624:	df 03 ee ff 	jne %d3,0,80004600 <_Core2_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80004628:	cd 84 e3 0f 	mtcr $fcx,%d4
8000462c:	1d ff eb ff 	j 80004602 <_Core2_start+0x226>
80004630:	1b f6 ff 2f 	addi %d2,%d6,-1
80004634:	06 62       	sh %d2,6
80004636:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
8000463a:	82 02       	mov %d2,0
8000463c:	74 22       	st.w [%a2],%d2
    /* Setup the context save area linked list. */

    IfxCpu_initCSA((uint32 *)__CSA(2), (uint32 *)__CSA_END(2));

    /*Call main function of Cpu0 */
    __non_return_call(core2_main);
8000463e:	91 00 00 28 	movh.a %a2,32768
80004642:	d9 22 ba c4 	lea %a2,[%a2]19258 <80004b3a <core2_main>>
80004646:	dc 02       	ji %a2
}
80004648:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000464a:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000464c:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004650:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004654:	0f 35 a0 20 	or %d2,%d5,%d3
80004658:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000465c:	74 22       	st.w [%a2],%d2
8000465e:	1d ff 2b ff 	j 800044b4 <_Core2_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004662:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004664:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004668:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000466c:	0f 35 a0 20 	or %d2,%d5,%d3
80004670:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004674:	74 22       	st.w [%a2],%d2
80004676:	1d ff e7 fe 	j 80004444 <_Core2_start+0x68>

8000467a <IfxStdIf_PwmHl_initConfig>:
 */

#include "IfxStdIf_PwmHl.h"

void IfxStdIf_PwmHl_initConfig(IfxStdIf_PwmHl_Config *config)
{
8000467a:	40 ae       	mov.aa %a14,%sp
    config->deadtime         = 0;
8000467c:	82 02       	mov %d2,0
8000467e:	74 42       	st.w [%a4],%d2
    config->minPulse         = 0;
80004680:	59 42 04 00 	st.w [%a4]4,%d2
    config->channelCount     = 0;
80004684:	82 02       	mov %d2,0
80004686:	e9 42 08 00 	st.b [%a4]8,%d2
    config->emergencyEnabled = FALSE;
8000468a:	e9 42 09 00 	st.b [%a4]9,%d2
    config->outputMode       = IfxPort_OutputMode_pushPull;
8000468e:	3b 00 08 20 	mov %d2,128
80004692:	59 42 0c 00 	st.w [%a4]12,%d2
    config->outputDriver     = IfxPort_PadDriver_cmosAutomotiveSpeed1;
80004696:	82 02       	mov %d2,0
80004698:	59 42 10 00 	st.w [%a4]16,%d2
    config->ccxActiveState   = Ifx_ActiveState_high;
8000469c:	82 12       	mov %d2,1
8000469e:	59 42 1c 00 	st.w [%a4]28,%d2
    config->coutxActiveState = Ifx_ActiveState_high;
800046a2:	59 42 20 00 	st.w [%a4]32,%d2
}
800046a6:	00 90       	ret 

800046a8 <IfxStdIf_Timer_initConfig>:
 */

#include "IfxStdIf_Timer.h"

void IfxStdIf_Timer_initConfig(IfxStdIf_Timer_Config *config)
{
800046a8:	40 ae       	mov.aa %a14,%sp
    config->frequency                  = 1000;
800046aa:	7b a0 47 24 	movh %d2,17530
800046ae:	74 42       	st.w [%a4],%d2
    config->isrPriority                = 0;
800046b0:	82 02       	mov %d2,0
800046b2:	f9 42 04 00 	st.h [%a4]4,%d2
    config->isrProvider                = IfxSrc_Tos_cpu0;
800046b6:	82 03       	mov %d3,0
800046b8:	59 43 08 00 	st.w [%a4]8,%d3
    config->minResolution              = 0;
800046bc:	82 04       	mov %d4,0
800046be:	59 44 0c 00 	st.w [%a4]12,%d4
    config->trigger.outputMode         = IfxPort_OutputMode_pushPull;
800046c2:	3b 00 08 50 	mov %d5,128
800046c6:	59 45 20 00 	st.w [%a4]32,%d5
    config->trigger.outputDriver       = IfxPort_PadDriver_cmosAutomotiveSpeed1;
800046ca:	59 43 24 00 	st.w [%a4]36,%d3
    config->trigger.risingEdgeAtPeriod = FALSE;
800046ce:	e9 42 28 00 	st.b [%a4]40,%d2
    config->trigger.outputEnabled      = FALSE;
800046d2:	e9 42 29 00 	st.b [%a4]41,%d2
    config->trigger.enabled            = FALSE;
800046d6:	e9 42 10 00 	st.b [%a4]16,%d2
    config->trigger.triggerPoint       = 0;
800046da:	59 43 14 00 	st.w [%a4]20,%d3
    config->trigger.isrPriority        = 0;
800046de:	f9 43 18 00 	st.h [%a4]24,%d3
    config->trigger.isrProvider        = IfxSrc_Tos_cpu0;
800046e2:	59 43 1c 00 	st.w [%a4]28,%d3
    config->countDir                   = IfxStdIf_Timer_CountDir_up;
800046e6:	59 43 2c 00 	st.w [%a4]44,%d3
    config->startOffset 					   = 0.0;
800046ea:	59 44 30 00 	st.w [%a4]48,%d4
}
800046ee:	00 90       	ret 

800046f0 <Ifx_C_Init>:
 *
 * Parameters: Nil
 * Return: Nil
 */
void Ifx_C_Init(void)
{
800046f0:	40 ae       	mov.aa %a14,%sp
800046f2:	20 08       	sub.a %sp,8
    IfxStart_CTablePtr pBlockDest, pBlockSrc;
    uint32             uiLength, uiCnt;
    uint32            *pTable;
    /* clear table */
    pTable = (uint32 *)&__clear_table;
800046f4:	91 00 00 28 	movh.a %a2,32768
800046f8:	d9 22 4c 20 	lea %a2,[%a2]1164 <8000048c <__clear_table>>

    while (pTable)
800046fc:	1d 00 32 00 	j 80004760 <Ifx_C_Init+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
80004700:	91 00 00 28 	movh.a %a2,32768
80004704:	d9 22 74 30 	lea %a2,[%a2]1268 <800004f4 <__copy_table>>
80004708:	1d 00 7c 00 	j 80004800 <Ifx_C_Init+0x110>
            *pBlockDest.ullPtr++ = 0;
8000470c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80004710:	80 22       	mov.d %d2,%a2
80004712:	1b 82 00 20 	addi %d2,%d2,8
80004716:	59 e2 fc ff 	st.w [%a14]-4,%d2
8000471a:	d2 02       	mov %e2,0
8000471c:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80004720:	02 52       	mov %d2,%d5
80004722:	1b f2 ff 5f 	addi %d5,%d2,-1
80004726:	df 02 f3 ff 	jne %d2,0,8000470c <Ifx_C_Init+0x1c>
        if (uiLength & 0x4)
8000472a:	6f 24 0a 00 	jz.t %d4,2,8000473e <Ifx_C_Init+0x4e>
            *pBlockDest.uiPtr++ = 0;
8000472e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80004732:	80 22       	mov.d %d2,%a2
80004734:	c2 42       	add %d2,4
80004736:	59 e2 fc ff 	st.w [%a14]-4,%d2
8000473a:	82 02       	mov %d2,0
8000473c:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
8000473e:	6f 14 0a 00 	jz.t %d4,1,80004752 <Ifx_C_Init+0x62>
            *pBlockDest.usPtr++ = 0;
80004742:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80004746:	80 22       	mov.d %d2,%a2
80004748:	c2 22       	add %d2,2
8000474a:	59 e2 fc ff 	st.w [%a14]-4,%d2
8000474e:	82 02       	mov %d2,0
80004750:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
80004752:	6f 04 06 00 	jz.t %d4,0,8000475e <Ifx_C_Init+0x6e>
            *pBlockDest.ucPtr = 0;
80004756:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000475a:	82 02       	mov %d2,0
8000475c:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
8000475e:	40 32       	mov.aa %a2,%a3
    while (pTable)
80004760:	bd 02 d0 7f 	jz.a %a2,80004700 <Ifx_C_Init+0x10>
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80004764:	d9 23 08 00 	lea %a3,[%a2]8
80004768:	54 22       	ld.w %d2,[%a2]
8000476a:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
8000476e:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
80004772:	df f4 c7 7f 	jeq %d4,-1,80004700 <Ifx_C_Init+0x10>
        uiCnt = uiLength / 8;
80004776:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
8000477a:	1d ff d4 ff 	j 80004722 <Ifx_C_Init+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
8000477e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80004782:	80 22       	mov.d %d2,%a2
80004784:	1b 82 00 20 	addi %d2,%d2,8
80004788:	59 e2 f8 ff 	st.w [%a14]-8,%d2
8000478c:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80004790:	80 32       	mov.d %d2,%a3
80004792:	1b 82 00 20 	addi %d2,%d2,8
80004796:	59 e2 fc ff 	st.w [%a14]-4,%d2
8000479a:	09 26 40 09 	ld.d %e6,[%a2]
8000479e:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
800047a2:	02 42       	mov %d2,%d4
800047a4:	1b f2 ff 4f 	addi %d4,%d2,-1
800047a8:	df 02 eb ff 	jne %d2,0,8000477e <Ifx_C_Init+0x8e>
        }

        if (uiLength & 0x4)
800047ac:	6f 23 10 00 	jz.t %d3,2,800047cc <Ifx_C_Init+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
800047b0:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
800047b4:	80 22       	mov.d %d2,%a2
800047b6:	c2 42       	add %d2,4
800047b8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
800047bc:	99 e3 fc ff 	ld.a %a3,[%a14]-4
800047c0:	80 32       	mov.d %d2,%a3
800047c2:	c2 42       	add %d2,4
800047c4:	59 e2 fc ff 	st.w [%a14]-4,%d2
800047c8:	54 22       	ld.w %d2,[%a2]
800047ca:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
800047cc:	6f 13 11 00 	jz.t %d3,1,800047ee <Ifx_C_Init+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
800047d0:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
800047d4:	80 32       	mov.d %d2,%a3
800047d6:	c2 22       	add %d2,2
800047d8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
800047dc:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800047e0:	80 22       	mov.d %d2,%a2
800047e2:	c2 22       	add %d2,2
800047e4:	59 e2 fc ff 	st.w [%a14]-4,%d2
800047e8:	b9 32 00 00 	ld.hu %d2,[%a3]0
800047ec:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
800047ee:	6f 03 08 00 	jz.t %d3,0,800047fe <Ifx_C_Init+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
800047f2:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
800047f6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800047fa:	14 32       	ld.bu %d2,[%a3]
800047fc:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
800047fe:	60 52       	mov.a %a2,%d5
    while (pTable)
80004800:	bd 02 14 00 	jz.a %a2,80004828 <Ifx_C_Init+0x138>
        pBlockSrc.uiPtr  = (uint32 *)*pTable++;
80004804:	54 22       	ld.w %d2,[%a2]
80004806:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        pBlockDest.uiPtr = (uint32 *)*pTable++;
8000480a:	19 22 04 00 	ld.w %d2,[%a2]4
8000480e:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80004812:	80 22       	mov.d %d2,%a2
80004814:	1b c2 00 50 	addi %d5,%d2,12
80004818:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
8000481c:	df f3 06 00 	jeq %d3,-1,80004828 <Ifx_C_Init+0x138>
        uiCnt = uiLength / 8;
80004820:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80004824:	1d ff c0 ff 	j 800047a4 <Ifx_C_Init+0xb4>
        }
    }
}
80004828:	00 90       	ret 

8000482a <init_GPIO>:
#include "GPIO.h"



void init_GPIO(void)
{
8000482a:	40 ae       	mov.aa %a14,%sp
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
8000482c:	3b 80 00 50 	mov %d5,8
80004830:	82 34       	mov %d4,3
80004832:	91 40 00 4f 	movh.a %a4,61444
80004836:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
8000483a:	6d ff f5 ec 	call 80002224 <IfxPort_setPinMode>
8000483e:	3b 80 00 50 	mov %d5,8
80004842:	82 44       	mov %d4,4
80004844:	91 40 00 4f 	movh.a %a4,61444
80004848:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
8000484c:	6d ff ec ec 	call 80002224 <IfxPort_setPinMode>
    IfxPort_setPinModeInput(PORT_023, IfxPort_InputMode_pullDown);
    IfxPort_setPinModeInput(PORT_024, IfxPort_InputMode_pullDown);
}
80004850:	00 90       	ret 

80004852 <Encoder>:
 */
#include "GPIO.h"
#include "Encoder.h"

void Encoder(void)
{
80004852:	40 ae       	mov.aa %a14,%sp
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
80004854:	91 40 00 2f 	movh.a %a2,61444
80004858:	d9 22 00 8a 	lea %a2,[%a2]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
8000485c:	d9 23 24 00 	lea %a3,[%a2]36 <f0040024 <_SMALL_DATA4_+0x60038024>>
80004860:	19 23 24 00 	ld.w %d3,[%a2]36 <f0040024 <_SMALL_DATA4_+0x60038024>>
80004864:	37 03 e1 51 	extr.u %d5,%d3,3,1
80004868:	54 38       	ld.w %d8,[%a3]
8000486a:	37 08 61 42 	extr.u %d4,%d8,4,1
   uint8 A = IfxPort_getPinState(PORT_023);
   uint8 B = IfxPort_getPinState(PORT_024);

   uint8 state = 0;

   if       (A == 0 && B == 0) {state = 0;}
8000486e:	87 83 23 82 	or.t %d8,%d3,3,%d8,4
80004872:	df 08 14 00 	jeq %d8,0,8000489a <Encoder+0x48>
   else if  (A == 1 && B == 0) {state = 1;}
80004876:	02 53       	mov %d3,%d5
80004878:	8f 14 80 21 	xor %d2,%d4,1
8000487c:	26 52       	and %d2,%d5
8000487e:	df 02 0d 80 	jne %d2,0,80004898 <Encoder+0x46>
   else if  (A == 1 && B == 1) {state = 2;}
80004882:	26 43       	and %d3,%d4
80004884:	df 03 4d 80 	jne %d3,0,8000491e <Encoder+0xcc>
   else if  (A == 0 && B == 1) {state = 3;}
80004888:	8f 15 80 21 	xor %d2,%d5,1
8000488c:	26 42       	and %d2,%d4
8000488e:	df 02 4b 80 	jne %d2,0,80004924 <Encoder+0xd2>
   uint8 state = 0;
80004892:	82 08       	mov %d8,0
80004894:	1d 00 03 00 	j 8000489a <Encoder+0x48>
   else if  (A == 1 && B == 0) {state = 1;}
80004898:	82 18       	mov %d8,1

   if       (state-state_old==1 || state-state_old==-3) {encoderCNT++; encoderDir = 1;}
8000489a:	91 00 00 26 	movh.a %a2,24576
8000489e:	39 22 30 30 	ld.bu %d2,[%a2]240 <600000f0 <state_old>>
800048a2:	0b 28 80 20 	sub %d2,%d8,%d2
800048a6:	8b 12 00 32 	eq %d3,%d2,1
800048aa:	8b d2 ff 34 	or.eq %d3,%d2,-3
800048ae:	df 03 3e 00 	jeq %d3,0,8000492a <Encoder+0xd8>
800048b2:	91 00 00 26 	movh.a %a2,24576
800048b6:	d9 23 2c 30 	lea %a3,[%a2]236 <600000ec <encoderCNT>>
800048ba:	54 32       	ld.w %d2,[%a3]
800048bc:	c2 12       	add %d2,1
800048be:	59 22 2c 30 	st.w [%a2]236 <600000ec <encoderCNT>>,%d2
800048c2:	91 00 00 26 	movh.a %a2,24576
800048c6:	82 12       	mov %d2,1
800048c8:	59 22 28 30 	st.w [%a2]232 <600000e8 <encoderDir>>,%d2
   else if  (state-state_old==-1 || state-state_old==3) {encoderCNT--; encoderDir = -1;}

   theta = encoderCNT*1/16*0.25*360;    //한바퀴 1/16
800048cc:	91 00 00 26 	movh.a %a2,24576
800048d0:	19 22 2c 30 	ld.w %d2,[%a2]236 <600000ec <encoderCNT>>
800048d4:	8b 02 40 42 	lt %d4,%d2,0
800048d8:	ab f2 00 44 	cadd %d4,%d4,%d2,15
800048dc:	86 c4       	sha %d4,-4
800048de:	6d 00 68 04 	call 800051ae <__floatsidf>
800048e2:	82 06       	mov %d6,0
800048e4:	7b 00 fd 73 	movh %d7,16336
800048e8:	0b 23 10 48 	mov %e4,%d3,%d2
800048ec:	6d 00 a7 02 	call 80004e3a <__muldf3>
800048f0:	82 06       	mov %d6,0
800048f2:	7b 70 07 74 	movh %d7,16503
800048f6:	1b 07 00 78 	addi %d7,%d7,-32768
800048fa:	0b 23 10 48 	mov %e4,%d3,%d2
800048fe:	6d 00 9e 02 	call 80004e3a <__muldf3>
80004902:	0b 23 10 48 	mov %e4,%d3,%d2
80004906:	6d 00 9f 04 	call 80005244 <__truncdfsf2>
8000490a:	91 00 00 26 	movh.a %a2,24576
8000490e:	d9 22 24 30 	lea %a2,[%a2]228 <600000e4 <theta>>
80004912:	74 22       	st.w [%a2],%d2

   state_old = state;
80004914:	91 00 00 26 	movh.a %a2,24576
80004918:	e9 28 30 30 	st.b [%a2]240 <600000f0 <state_old>>,%d8
}
8000491c:	00 90       	ret 
   else if  (A == 1 && B == 1) {state = 2;}
8000491e:	82 28       	mov %d8,2
80004920:	1d ff bd ff 	j 8000489a <Encoder+0x48>
   else if  (A == 0 && B == 1) {state = 3;}
80004924:	82 38       	mov %d8,3
80004926:	1d ff ba ff 	j 8000489a <Encoder+0x48>
   else if  (state-state_old==-1 || state-state_old==3) {encoderCNT--; encoderDir = -1;}
8000492a:	8b f2 1f 32 	eq %d3,%d2,-1
8000492e:	8b 32 e0 34 	or.eq %d3,%d2,3
80004932:	df 03 cd 7f 	jeq %d3,0,800048cc <Encoder+0x7a>
80004936:	91 00 00 26 	movh.a %a2,24576
8000493a:	d9 23 2c 30 	lea %a3,[%a2]236 <600000ec <encoderCNT>>
8000493e:	54 32       	ld.w %d2,[%a3]
80004940:	c2 f2       	add %d2,-1
80004942:	59 22 2c 30 	st.w [%a2]236 <600000ec <encoderCNT>>,%d2
80004946:	91 00 00 26 	movh.a %a2,24576
8000494a:	82 f2       	mov %d2,-1
8000494c:	59 22 28 30 	st.w [%a2]232 <600000e8 <encoderDir>>,%d2
80004950:	1d ff be ff 	j 800048cc <Encoder+0x7a>

80004954 <init_ADC_Group>:
#include "ADC.h"
#include "STM.h"
#include "GPIO.h"

void init_ADC_Group(void)
{
80004954:	40 ae       	mov.aa %a14,%sp
80004956:	20 a8       	sub.a %sp,168
    IfxVadc_Adc_Config      adcConf;                        /* Define a configuration structure for the VADC module */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);   /* adcConf 값을 디폴트 값(MODULE_VADC)오로 초기화 */
80004958:	91 20 00 5f 	movh.a %a5,61442
8000495c:	d9 e4 d8 ff 	lea %a4,[%a14]-40
80004960:	6d ff 6f e6 	call 8000163e <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&Vadc, &adcConf);                /* Vadc를 adcConf 값으로 초기화 */
80004964:	91 00 00 c6 	movh.a %a12,24576
80004968:	d9 cc 30 50 	lea %a12,[%a12]368 <60000170 <Vadc>>
8000496c:	d9 e5 d8 ff 	lea %a5,[%a14]-40 <60000170 <Vadc>>
80004970:	40 c4       	mov.aa %a4,%a12
80004972:	6d ff dc e5 	call 8000152a <IfxVadc_Adc_initModule>

    IfxVadc_Adc_GroupConfig     adcGroupConf;               /* Define a configuration structure for the VADC group */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &Vadc);      /* adc 그룹 구조체 초기화 및 Vadc 값 반영 */
80004976:	40 c5       	mov.aa %a5,%a12
80004978:	d9 e4 dc df 	lea %a4,[%a14]-164
8000497c:	6d ff bc e5 	call 800014f4 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_3;               /* Select the group 다른 아이디로는 그룹2, 그룹3으로 지정*/
80004980:	82 32       	mov %d2,3
80004982:	59 e2 e0 df 	st.w [%a14]-160,%d2
    adcGroupConf.master = adcGroupConf.groupId;             /* Select the master group */
80004986:	59 e2 e4 df 	st.w [%a14]-156,%d2

    adcGroupConf.arbiter.requestSlotScanEnabled = TRUE;     /* Enabled scan source 별도의 설정없이 ADC변환*/
8000498a:	82 12       	mov %d2,1
8000498c:	e9 e2 d5 ff 	st.b [%a14]-43,%d2
    adcGroupConf.scanRequest.autoscanEnabled    = TRUE;     /* Enabled auto scan mode */
80004990:	e9 e2 f8 df 	st.b [%a14]-136,%d2

    adcGroupConf.scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;  /* 특정 트리거 조건 없이 항상 변환 수행/인터럽트일 때는 다른 모드 */
80004994:	82 12       	mov %d2,1
80004996:	59 e2 c4 ef 	st.w [%a14]-124,%d2

    IfxVadc_Adc_initGroup(&adcGroup3, &adcGroupConf);       /* adc 그룹 설정 값 반영 */
8000499a:	d9 e5 dc df 	lea %a5,[%a14]-164
8000499e:	91 00 00 46 	movh.a %a4,24576
800049a2:	d9 44 24 50 	lea %a4,[%a4]356 <60000164 <adcGroup3>>
800049a6:	6d ff 65 e3 	call 80001070 <IfxVadc_Adc_initGroup>
}
800049aa:	00 90       	ret 

800049ac <init_ADC_G3_SingleCh>:

void init_ADC_G3_SingleCh(uint8 Channel)
{
800049ac:	40 ae       	mov.aa %a14,%sp
800049ae:	20 40       	sub.a %sp,64
800049b0:	8f f4 0f 81 	and %d8,%d4,255
    IfxVadc_Adc_ChannelConfig   adcChannelConfigInfo;
    uint32 ulTemp = ((uint32)1u << Channel);
800049b4:	82 19       	mov %d9,1
800049b6:	0f 89 00 90 	sh %d9,%d9,%d8

    IfxVadc_Adc_initChannelConfig(&adcChannelConfigInfo, &adcGroup3);           /* Fill it with default values */
800049ba:	91 00 00 c6 	movh.a %a12,24576
800049be:	d9 cc 24 50 	lea %a12,[%a12]356 <60000164 <adcGroup3>>
800049c2:	40 c5       	mov.aa %a5,%a12
800049c4:	d9 e4 c4 ff 	lea %a4,[%a14]-60
800049c8:	6d ff 49 e3 	call 8000105a <IfxVadc_Adc_initChannelConfig>

    adcChannelConfigInfo.channelId      = (IfxVadc_ChannelId) Channel;          /* Select the channel ID */
800049cc:	59 e8 dc ff 	st.w [%a14]-36,%d8
    adcChannelConfigInfo.resultRegister = (IfxVadc_ChannelResult) (Channel);    /* Use dedicated result register */
800049d0:	59 e8 e8 ff 	st.w [%a14]-24,%d8

    /* Initialize the channel */
    IfxVadc_Adc_initChannel(&adcG3Channel[Channel], &adcChannelConfigInfo);     /* 채널 초기화 */
800049d4:	d9 e5 c4 ff 	lea %a5,[%a14]-60
800049d8:	91 00 00 46 	movh.a %a4,24576
800049dc:	d9 44 04 40 	lea %a4,[%a4]260 <60000104 <adcG3Channel>>
800049e0:	01 48 03 46 	addsc.a %a4,%a4,%d8,3
800049e4:	01 48 02 46 	addsc.a %a4,%a4,%d8,2
800049e8:	6d ff 27 e2 	call 80000e36 <IfxVadc_Adc_initChannel>
}


IFX_INLINE void IfxVadc_Adc_setScan(IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setScan(group->group, channels, mask);
800049ec:	02 95       	mov %d5,%d9
800049ee:	02 94       	mov %d4,%d9
800049f0:	99 c4 04 00 	ld.a %a4,[%a12]4 <60000004 <LCF_DSPR1_START+0x4>>
800049f4:	6d ff ed e1 	call 80000dce <IfxVadc_setScan>

    /* Add the channel to the scan sequence */
    IfxVadc_Adc_setScan(&adcGroup3, ulTemp, ulTemp);                            /* the background scan sequence */
}
800049f8:	00 90       	ret 

800049fa <init_ADC_G3_Channel>:

void init_ADC_G3_Channel(void)
{
800049fa:	40 ae       	mov.aa %a14,%sp
    init_ADC_G3_SingleCh(ADC_G3_CH0);   /* 각 채널 초기화 */
800049fc:	82 04       	mov %d4,0
800049fe:	6d ff d7 ff 	call 800049ac <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH1);   //litekit A0(가변저항)
80004a02:	82 14       	mov %d4,1
80004a04:	6d ff d4 ff 	call 800049ac <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH2);
80004a08:	82 24       	mov %d4,2
80004a0a:	6d ff d1 ff 	call 800049ac <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH3);
80004a0e:	82 34       	mov %d4,3
80004a10:	6d ff ce ff 	call 800049ac <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH4);
80004a14:	82 44       	mov %d4,4
80004a16:	6d ff cb ff 	call 800049ac <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH5);
80004a1a:	82 54       	mov %d4,5
80004a1c:	6d ff c8 ff 	call 800049ac <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH6);
80004a20:	82 64       	mov %d4,6
80004a22:	6d ff c5 ff 	call 800049ac <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH7);   //가변저항
80004a26:	82 74       	mov %d4,7
80004a28:	6d ff c2 ff 	call 800049ac <init_ADC_G3_SingleCh>
}


IFX_INLINE void IfxVadc_Adc_startScan(IfxVadc_Adc_Group *group)
{
    IfxVadc_startScan(group->group);
80004a2c:	91 00 00 26 	movh.a %a2,24576
80004a30:	d9 22 24 50 	lea %a2,[%a2]356 <60000164 <adcGroup3>>
80004a34:	b0 42       	add.a %a2,4
80004a36:	d4 22       	ld.a %a2,[%a2]
    group->ASMR.B.LDEV = 1;     /* set Load event. Channels stored in ASSEL will be copied into pending register and conversion will start */
80004a38:	d9 23 24 20 	lea %a3,[%a2]164
80004a3c:	19 22 24 20 	ld.w %d2,[%a2]164
80004a40:	b7 12 81 24 	insert %d2,%d2,1,9,1
80004a44:	74 32       	st.w [%a3],%d2

    IfxVadc_Adc_startScan(&adcGroup3);  //아날로그값이 실제값으로 변환
    }
80004a46:	00 90       	ret 

80004a48 <ADC_G3_GetData>:

void ADC_G3_GetData(void)   //실제값을 디지털로 변환해서 가져오는 함수
{
80004a48:	40 ae       	mov.aa %a14,%sp
    Ifx_VADC_RES    ADC_result;                                     /* 변환 결과 값 구조체 선언 */

    uint8 ch;
    for (ch = ADC_G3_CH0; ch < ADC_G3_MAX; ch++)
80004a4a:	82 03       	mov %d3,0
80004a4c:	1d 00 25 00 	j 80004a96 <ADC_G3_GetData+0x4e>
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
80004a50:	91 00 00 26 	movh.a %a2,24576
80004a54:	80 22       	mov.d %d2,%a2
80004a56:	1b 42 10 20 	addi %d2,%d2,260
80004a5a:	13 c3 20 22 	madd %d2,%d2,%d3,12
80004a5e:	60 22       	mov.a %a2,%d2
80004a60:	99 23 08 00 	ld.a %a3,[%a2]8
80004a64:	19 34 04 00 	ld.w %d4,[%a3]4
80004a68:	19 22 04 00 	ld.w %d2,[%a2]4
    tmpResult.U = group->RES[resultIdx].U;
80004a6c:	1b 02 0a 20 	addi %d2,%d2,160
80004a70:	06 22       	sh %d2,2
80004a72:	60 42       	mov.a %a2,%d4
80004a74:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004a78:	54 22       	ld.w %d2,[%a2]
    {
        do{
            ADC_result = IfxVadc_Adc_getResult(&adcG3Channel[ch]);  /* 결과 값 가져오기 */
        }while(!ADC_result.B.VF);
80004a7a:	ff 02 eb 7f 	jge %d2,0,80004a50 <ADC_G3_GetData+0x8>

        ADC_G3_RAWDATA[ch] = ADC_result.B.RESULT;                   /* 결과 값 저장 */
80004a7e:	8f 13 00 40 	sh %d4,%d3,1
80004a82:	91 00 00 26 	movh.a %a2,24576
80004a86:	d9 22 34 30 	lea %a2,[%a2]244 <600000f4 <ADC_G3_RAWDATA>>
80004a8a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80004a8e:	b4 22       	st.h [%a2],%d2
    for (ch = ADC_G3_CH0; ch < ADC_G3_MAX; ch++)
80004a90:	c2 13       	add %d3,1
80004a92:	8f f3 0f 31 	and %d3,%d3,255
80004a96:	bf 83 dd ff 	jlt.u %d3,8,80004a50 <ADC_G3_GetData+0x8>
    IfxVadc_startScan(group->group);
80004a9a:	91 00 00 26 	movh.a %a2,24576
80004a9e:	d9 22 24 50 	lea %a2,[%a2]356 <60000164 <adcGroup3>>
80004aa2:	b0 42       	add.a %a2,4
80004aa4:	d4 22       	ld.a %a2,[%a2]
    group->ASMR.B.LDEV = 1;     /* set Load event. Channels stored in ASSEL will be copied into pending register and conversion will start */
80004aa6:	d9 23 24 20 	lea %a3,[%a2]164
80004aaa:	19 22 24 20 	ld.w %d2,[%a2]164
80004aae:	b7 12 81 24 	insert %d2,%d2,1,9,1
80004ab2:	74 32       	st.w [%a3],%d2
    }

    IfxVadc_Adc_startScan(&adcGroup3);
}
80004ab4:	00 90       	ret 

80004ab6 <core0_main>:

IfxCpu_syncEvent g_cpuSyncEvent = 0;


void core0_main(void)
{
80004ab6:	40 ae       	mov.aa %a14,%sp
    __enable();
80004ab8:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80004abc:	6d ff 4a eb 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80004ac0:	02 24       	mov %d4,%d2
80004ac2:	6d ff 2b ea 	call 80001f18 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80004ac6:	6d ff 57 eb 	call 80002174 <IfxScuWdt_getSafetyWatchdogPassword>
80004aca:	02 24       	mov %d4,%d2
80004acc:	6d ff 65 ea 	call 80001f96 <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80004ad0:	91 00 00 c6 	movh.a %a12,24576
80004ad4:	d9 cc 38 00 	lea %a12,[%a12]56 <60000038 <g_cpuSyncEvent>>
80004ad8:	40 c4       	mov.aa %a4,%a12
80004ada:	6d ff a7 f9 	call 80003e28 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80004ade:	82 14       	mov %d4,1
80004ae0:	40 c4       	mov.aa %a4,%a12
80004ae2:	6d ff 63 f9 	call 80003da8 <IfxCpu_waitEvent>

    init_GPIO();
80004ae6:	6d ff a2 fe 	call 8000482a <init_GPIO>
    init_STM();
80004aea:	6d ff 17 de 	call 80000718 <init_STM>
    init_ADC_Group(); init_ADC_G3_Channel();
80004aee:	6d ff 33 ff 	call 80004954 <init_ADC_Group>
80004af2:	6d ff 84 ff 	call 800049fa <init_ADC_G3_Channel>
    init_GTM();
80004af6:	6d ff a5 df 	call 80000a40 <init_GTM>

    direction = 1;
80004afa:	91 00 00 26 	movh.a %a2,24576
80004afe:	82 12       	mov %d2,1
80004b00:	59 22 3c 00 	st.w [%a2]60 <6000003c <direction>>,%d2

    while(1)
    {
        AppScheduling();
80004b04:	6d ff e3 dd 	call 800006ca <AppScheduling>
    while(1)
80004b08:	1d ff fe ff 	j 80004b04 <core0_main+0x4e>

80004b0c <core1_main>:
#include "Header_USER.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
80004b0c:	40 ae       	mov.aa %a14,%sp
80004b0e:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80004b12:	6d ff 1f eb 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80004b16:	02 24       	mov %d4,%d2
80004b18:	6d ff 00 ea 	call 80001f18 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80004b1c:	91 00 00 c6 	movh.a %a12,24576
80004b20:	d9 cc 38 00 	lea %a12,[%a12]56 <60000038 <g_cpuSyncEvent>>
80004b24:	40 c4       	mov.aa %a4,%a12
80004b26:	6d ff 81 f9 	call 80003e28 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80004b2a:	82 14       	mov %d4,1
80004b2c:	40 c4       	mov.aa %a4,%a12
80004b2e:	6d ff 3d f9 	call 80003da8 <IfxCpu_waitEvent>
    
    while(1)
    {
        Encoder();
80004b32:	6d ff 90 fe 	call 80004852 <Encoder>
    while(1)
80004b36:	1d ff fe ff 	j 80004b32 <core1_main+0x26>

80004b3a <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
80004b3a:	40 ae       	mov.aa %a14,%sp
80004b3c:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80004b40:	6d ff 08 eb 	call 80002150 <IfxScuWdt_getCpuWatchdogPassword>
80004b44:	02 24       	mov %d4,%d2
80004b46:	6d ff e9 e9 	call 80001f18 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80004b4a:	91 00 00 c6 	movh.a %a12,24576
80004b4e:	d9 cc 38 00 	lea %a12,[%a12]56 <60000038 <g_cpuSyncEvent>>
80004b52:	40 c4       	mov.aa %a4,%a12
80004b54:	6d ff 6a f9 	call 80003e28 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80004b58:	82 14       	mov %d4,1
80004b5a:	40 c4       	mov.aa %a4,%a12
80004b5c:	6d ff 26 f9 	call 80003da8 <IfxCpu_waitEvent>
    
    while(1)
80004b60:	1d 00 00 00 	j 80004b60 <core2_main+0x26>

80004b64 <memset>:
80004b64:	40 42       	mov.aa %a2,%a4
80004b66:	df 05 07 00 	jeq %d5,0,80004b74 <memset+0x10>
80004b6a:	60 53       	mov.a %a3,%d5
80004b6c:	b0 f3       	add.a %a3,-1
80004b6e:	24 44       	st.b [%a4+],%d4
80004b70:	fd 30 ff 7f 	loop %a3,80004b6e <memset+0xa>
80004b74:	00 90       	ret 

80004b76 <__extendsfdf2>:
80004b76:	20 20       	sub.a %sp,32
80004b78:	d9 a5 10 00 	lea %a5,[%sp]16
80004b7c:	d9 a4 0c 00 	lea %a4,[%sp]12
80004b80:	59 a4 0c 00 	st.w [%sp]12,%d4
80004b84:	6d 00 7f 03 	call 80005282 <__unpack_f>
80004b88:	19 a2 1c 00 	ld.w %d2,[%sp]28
80004b8c:	19 a6 18 00 	ld.w %d6,[%sp]24
80004b90:	53 12 40 40 	mul.u %e4,%d2,1
80004b94:	77 45 00 3f 	dextr %d3,%d5,%d4,30
80004b98:	8f e4 01 20 	sh %d2,%d4,30
80004b9c:	19 a5 14 00 	ld.w %d5,[%sp]20
80004ba0:	19 a4 10 00 	ld.w %d4,[%sp]16
80004ba4:	74 a2       	st.w [%sp],%d2
80004ba6:	59 a3 04 00 	st.w [%sp]4,%d3
80004baa:	6d 00 3d 03 	call 80005224 <__make_dp>
80004bae:	00 90       	ret 

80004bb0 <_fpadd_parts>:
80004bb0:	54 42       	ld.w %d2,[%a4]
80004bb2:	40 42       	mov.aa %a2,%a4
80004bb4:	bf 22 c2 80 	jlt.u %d2,2,80004d38 <_fpadd_parts+0x188>
80004bb8:	54 53       	ld.w %d3,[%a5]
80004bba:	40 52       	mov.aa %a2,%a5
80004bbc:	bf 23 be 80 	jlt.u %d3,2,80004d38 <_fpadd_parts+0x188>
80004bc0:	df 42 e3 00 	jeq %d2,4,80004d86 <_fpadd_parts+0x1d6>
80004bc4:	df 43 ba 00 	jeq %d3,4,80004d38 <_fpadd_parts+0x188>
80004bc8:	df 23 b9 00 	jeq %d3,2,80004d3a <_fpadd_parts+0x18a>
80004bcc:	df 22 b6 00 	jeq %d2,2,80004d38 <_fpadd_parts+0x188>
80004bd0:	19 40 08 00 	ld.w %d0,[%a4]8
80004bd4:	19 57 08 00 	ld.w %d7,[%a5]8
80004bd8:	09 44 4c 09 	ld.d %e4,[%a4]12
80004bdc:	0b 70 80 60 	sub %d6,%d0,%d7
80004be0:	09 52 4c 09 	ld.d %e2,[%a5]12
80004be4:	bf 06 c2 00 	jlt %d6,0,80004d68 <_fpadd_parts+0x1b8>
80004be8:	8b 06 84 12 	ge %d1,%d6,64
80004bec:	df 01 c4 80 	jne %d1,0,80004d74 <_fpadd_parts+0x1c4>
80004bf0:	df 06 2a 00 	jeq %d6,0,80004c44 <_fpadd_parts+0x94>
80004bf4:	8b 06 82 72 	ge %d7,%d6,32
80004bf8:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
80004bfc:	ab 03 a0 87 	seln %d8,%d7,%d3,0
80004c00:	8f f6 01 71 	and %d7,%d6,31
80004c04:	8b 07 02 11 	rsub %d1,%d7,32
80004c08:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80004c0c:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
80004c10:	8b 06 82 a2 	ge %d10,%d6,32
80004c14:	32 57       	rsub %d7
80004c16:	02 19       	mov %d9,%d1
80004c18:	8f f6 01 61 	and %d6,%d6,31
80004c1c:	82 f1       	mov %d1,-1
80004c1e:	0f 78 00 80 	sh %d8,%d8,%d7
80004c22:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
80004c26:	0f 61 00 60 	sh %d6,%d1,%d6
80004c2a:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
80004c2e:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80004c32:	0f 62 e0 10 	andn %d1,%d2,%d6
80004c36:	0f 73 e0 60 	andn %d6,%d3,%d7
80004c3a:	a6 16       	or %d6,%d1
80004c3c:	8b 06 00 95 	or.ne %d9,%d6,0
80004c40:	0b 98 10 28 	mov %e2,%d8,%d9
80004c44:	19 41 04 00 	ld.w %d1,[%a4]4
80004c48:	19 56 04 00 	ld.w %d6,[%a5]4
80004c4c:	5f 61 4c 00 	jeq %d1,%d6,80004ce4 <_fpadd_parts+0x134>
80004c50:	0b 24 c0 60 	subx %d6,%d4,%d2
80004c54:	0b 35 d0 70 	subc %d7,%d5,%d3
80004c58:	df 01 06 00 	jeq %d1,0,80004c64 <_fpadd_parts+0xb4>
80004c5c:	0b 42 c0 60 	subx %d6,%d2,%d4
80004c60:	0b 53 d0 70 	subc %d7,%d3,%d5
80004c64:	8b 07 00 31 	rsub %d3,%d7,0
80004c68:	8b 06 00 91 	rsub %d9,%d6,0
80004c6c:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
80004c70:	82 12       	mov %d2,1
80004c72:	bf 07 05 00 	jlt %d7,0,80004c7c <_fpadd_parts+0xcc>
80004c76:	02 69       	mov %d9,%d6
80004c78:	02 73       	mov %d3,%d7
80004c7a:	82 02       	mov %d2,0
80004c7c:	8b f9 9f 70 	addx %d7,%d9,-1
80004c80:	82 f5       	mov %d5,-1
80004c82:	8b f3 bf 60 	addc %d6,%d3,-1
80004c86:	06 c5       	sh %d5,-4
80004c88:	59 62 04 00 	st.w [%a6]4,%d2
80004c8c:	82 e1       	mov %d1,-2
80004c8e:	0b 56 00 21 	eq %d2,%d6,%d5
80004c92:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
80004c96:	59 60 08 00 	st.w [%a6]8,%d0
80004c9a:	59 69 0c 00 	st.w [%a6]12,%d9
80004c9e:	59 63 10 00 	st.w [%a6]16,%d3
80004ca2:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
80004ca6:	df 02 2b 80 	jne %d2,0,80004cfc <_fpadd_parts+0x14c>
80004caa:	1b f0 ff 7f 	addi %d7,%d0,-1
80004cae:	77 93 80 30 	dextr %d3,%d3,%d9,1
80004cb2:	06 19       	sh %d9,1
80004cb4:	8b f9 9f 00 	addx %d0,%d9,-1
80004cb8:	8b f3 bf 60 	addc %d6,%d3,-1
80004cbc:	0b 56 00 21 	eq %d2,%d6,%d5
80004cc0:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
80004cc4:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
80004cc8:	02 78       	mov %d8,%d7
80004cca:	c2 f7       	add %d7,-1
80004ccc:	df 02 f1 ff 	jne %d2,0,80004cae <_fpadd_parts+0xfe>
80004cd0:	82 32       	mov %d2,3
80004cd2:	59 69 0c 00 	st.w [%a6]12,%d9
80004cd6:	59 63 10 00 	st.w [%a6]16,%d3
80004cda:	59 68 08 00 	st.w [%a6]8,%d8
80004cde:	74 62       	st.w [%a6],%d2
80004ce0:	40 62       	mov.aa %a2,%a6
80004ce2:	00 90       	ret 
80004ce4:	0b 24 40 90 	addx %d9,%d4,%d2
80004ce8:	0b 35 50 30 	addc %d3,%d5,%d3
80004cec:	59 61 04 00 	st.w [%a6]4,%d1
80004cf0:	59 60 08 00 	st.w [%a6]8,%d0
80004cf4:	59 69 0c 00 	st.w [%a6]12,%d9
80004cf8:	59 63 10 00 	st.w [%a6]16,%d3
80004cfc:	82 32       	mov %d2,3
80004cfe:	7b 00 00 52 	movh %d5,8192
80004d02:	40 62       	mov.aa %a2,%a6
80004d04:	74 62       	st.w [%a6],%d2
80004d06:	0b 53 00 21 	eq %d2,%d3,%d5
80004d0a:	b7 02 01 20 	insert %d2,%d2,0,0,1
80004d0e:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
80004d12:	df 02 13 80 	jne %d2,0,80004d38 <_fpadd_parts+0x188>
80004d16:	8f f3 1f 20 	sh %d2,%d3,-1
80004d1a:	77 93 80 5f 	dextr %d5,%d3,%d9,31
80004d1e:	8f 19 00 31 	and %d3,%d9,1
80004d22:	59 62 10 00 	st.w [%a6]16,%d2
80004d26:	19 62 08 00 	ld.w %d2,[%a6]8
80004d2a:	a6 53       	or %d3,%d5
80004d2c:	c2 12       	add %d2,1
80004d2e:	d9 63 08 00 	lea %a3,[%a6]8
80004d32:	59 63 0c 00 	st.w [%a6]12,%d3
80004d36:	74 32       	st.w [%a3],%d2
80004d38:	00 90       	ret 
80004d3a:	40 42       	mov.aa %a2,%a4
80004d3c:	df 22 fe ff 	jne %d2,2,80004d38 <_fpadd_parts+0x188>
80004d40:	40 63       	mov.aa %a3,%a6
80004d42:	09 44 48 01 	ld.d %e4,[%a4+]8
80004d46:	89 34 48 01 	st.d [%a3+]8,%e4
80004d4a:	09 44 48 01 	ld.d %e4,[%a4+]8
80004d4e:	89 34 48 01 	st.d [%a3+]8,%e4
80004d52:	44 44       	ld.w %d4,[%a4+]
80004d54:	64 34       	st.w [%a3+],%d4
80004d56:	19 23 04 00 	ld.w %d3,[%a2]4
80004d5a:	19 52 04 00 	ld.w %d2,[%a5]4
80004d5e:	40 62       	mov.aa %a2,%a6
80004d60:	26 32       	and %d2,%d3
80004d62:	59 62 04 00 	st.w [%a6]4,%d2
80004d66:	00 90       	ret 
80004d68:	0b 07 80 60 	sub %d6,%d7,%d0
80004d6c:	8b 06 44 12 	lt %d1,%d6,64
80004d70:	df 01 1d 80 	jne %d1,0,80004daa <_fpadd_parts+0x1fa>
80004d74:	3f 07 06 00 	jlt %d7,%d0,80004d80 <_fpadd_parts+0x1d0>
80004d78:	d2 04       	mov %e4,0
80004d7a:	02 70       	mov %d0,%d7
80004d7c:	1d ff 64 ff 	j 80004c44 <_fpadd_parts+0x94>
80004d80:	d2 02       	mov %e2,0
80004d82:	1d ff 61 ff 	j 80004c44 <_fpadd_parts+0x94>
80004d86:	40 42       	mov.aa %a2,%a4
80004d88:	df 43 d8 ff 	jne %d3,4,80004d38 <_fpadd_parts+0x188>
80004d8c:	19 43 04 00 	ld.w %d3,[%a4]4
80004d90:	19 52 04 00 	ld.w %d2,[%a5]4
80004d94:	7b 00 00 48 	movh %d4,32768
80004d98:	0b 23 10 21 	ne %d2,%d3,%d2
80004d9c:	1b 04 20 40 	addi %d4,%d4,512
80004da0:	80 43       	mov.d %d3,%a4
80004da2:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
80004da6:	60 22       	mov.a %a2,%d2
80004da8:	00 90       	ret 
80004daa:	8b 06 82 02 	ge %d0,%d6,32
80004dae:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
80004db2:	ab 05 a0 80 	seln %d8,%d0,%d5,0
80004db6:	8f f6 01 01 	and %d0,%d6,31
80004dba:	8b 00 02 11 	rsub %d1,%d0,32
80004dbe:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80004dc2:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
80004dc6:	8b 06 82 a2 	ge %d10,%d6,32
80004dca:	32 50       	rsub %d0
80004dcc:	02 19       	mov %d9,%d1
80004dce:	8f f6 01 61 	and %d6,%d6,31
80004dd2:	82 f1       	mov %d1,-1
80004dd4:	0f 08 00 80 	sh %d8,%d8,%d0
80004dd8:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
80004ddc:	0f 61 00 60 	sh %d6,%d1,%d6
80004de0:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
80004de4:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80004de8:	0f 64 e0 10 	andn %d1,%d4,%d6
80004dec:	0f 05 e0 60 	andn %d6,%d5,%d0
80004df0:	a6 16       	or %d6,%d1
80004df2:	8b 06 00 95 	or.ne %d9,%d6,0
80004df6:	0b 98 10 48 	mov %e4,%d8,%d9
80004dfa:	02 70       	mov %d0,%d7
80004dfc:	1d ff 24 ff 	j 80004c44 <_fpadd_parts+0x94>

80004e00 <__adddf3>:
80004e00:	20 50       	sub.a %sp,80
80004e02:	d9 a5 14 00 	lea %a5,[%sp]20
80004e06:	d9 a4 04 00 	lea %a4,[%sp]4
80004e0a:	89 a4 44 09 	st.d [%sp]4,%e4
80004e0e:	89 a6 4c 09 	st.d [%sp]12,%e6
80004e12:	6d 00 57 03 	call 800054c0 <__unpack_d>
80004e16:	d9 a5 28 00 	lea %a5,[%sp]40
80004e1a:	d9 a4 0c 00 	lea %a4,[%sp]12
80004e1e:	6d 00 51 03 	call 800054c0 <__unpack_d>
80004e22:	d9 a4 14 00 	lea %a4,[%sp]20
80004e26:	d9 a6 3c 00 	lea %a6,[%sp]60
80004e2a:	d9 a5 28 00 	lea %a5,[%sp]40
80004e2e:	6d ff c1 fe 	call 80004bb0 <_fpadd_parts>
80004e32:	40 24       	mov.aa %a4,%a2
80004e34:	6d 00 77 02 	call 80005322 <__pack_d>
80004e38:	00 90       	ret 

80004e3a <__muldf3>:
80004e3a:	20 50       	sub.a %sp,80
80004e3c:	d9 a5 14 00 	lea %a5,[%sp]20
80004e40:	d9 a4 04 00 	lea %a4,[%sp]4
80004e44:	89 a4 44 09 	st.d [%sp]4,%e4
80004e48:	89 a6 4c 09 	st.d [%sp]12,%e6
80004e4c:	6d 00 3a 03 	call 800054c0 <__unpack_d>
80004e50:	d9 a5 28 00 	lea %a5,[%sp]40
80004e54:	d9 a4 0c 00 	lea %a4,[%sp]12
80004e58:	6d 00 34 03 	call 800054c0 <__unpack_d>
80004e5c:	19 a2 14 00 	ld.w %d2,[%sp]20
80004e60:	ff 22 0f 80 	jge.u %d2,2,80004e7e <__muldf3+0x44>
80004e64:	19 a3 18 00 	ld.w %d3,[%sp]24
80004e68:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004e6c:	d9 a4 14 00 	lea %a4,[%sp]20
80004e70:	0b 23 10 21 	ne %d2,%d3,%d2
80004e74:	59 a2 18 00 	st.w [%sp]24,%d2
80004e78:	6d 00 55 02 	call 80005322 <__pack_d>
80004e7c:	00 90       	ret 
80004e7e:	19 a3 28 00 	ld.w %d3,[%sp]40
80004e82:	bf 23 14 80 	jlt.u %d3,2,80004eaa <__muldf3+0x70>
80004e86:	df 42 0a 80 	jne %d2,4,80004e9a <__muldf3+0x60>
80004e8a:	91 00 00 48 	movh.a %a4,32768
80004e8e:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80004e92:	df 23 f3 7f 	jeq %d3,2,80004e78 <__muldf3+0x3e>
80004e96:	1d ff e7 ff 	j 80004e64 <__muldf3+0x2a>
80004e9a:	df 43 15 80 	jne %d3,4,80004ec4 <__muldf3+0x8a>
80004e9e:	91 00 00 48 	movh.a %a4,32768
80004ea2:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80004ea6:	df 22 e9 7f 	jeq %d2,2,80004e78 <__muldf3+0x3e>
80004eaa:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004eae:	19 a3 18 00 	ld.w %d3,[%sp]24
80004eb2:	d9 a4 28 00 	lea %a4,[%sp]40
80004eb6:	0b 23 10 21 	ne %d2,%d3,%d2
80004eba:	59 a2 2c 00 	st.w [%sp]44,%d2
80004ebe:	6d 00 32 02 	call 80005322 <__pack_d>
80004ec2:	00 90       	ret 
80004ec4:	19 a5 2c 00 	ld.w %d5,[%sp]44
80004ec8:	19 a4 18 00 	ld.w %d4,[%sp]24
80004ecc:	0b 45 10 a1 	ne %d10,%d5,%d4
80004ed0:	df 22 aa 00 	jeq %d2,2,80005024 <__muldf3+0x1ea>
80004ed4:	df 23 ae 00 	jeq %d3,2,80005030 <__muldf3+0x1f6>
80004ed8:	19 a6 34 00 	ld.w %d6,[%sp]52
80004edc:	19 a4 20 00 	ld.w %d4,[%sp]32
80004ee0:	82 03       	mov %d3,0
80004ee2:	73 46 68 00 	mul.u %e0,%d6,%d4
80004ee6:	19 a2 38 00 	ld.w %d2,[%sp]56
80004eea:	82 0b       	mov %d11,0
80004eec:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
80004ef0:	02 48       	mov %d8,%d4
80004ef2:	19 a7 24 00 	ld.w %d7,[%sp]36
80004ef6:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
80004efa:	73 42 68 40 	mul.u %e4,%d2,%d4
80004efe:	82 0d       	mov %d13,0
80004f00:	82 0c       	mov %d12,0
80004f02:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
80004f06:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
80004f0a:	73 27 68 80 	mul.u %e8,%d7,%d2
80004f0e:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
80004f12:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
80004f16:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
80004f1a:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
80004f1e:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
80004f22:	0b 35 00 61 	eq %d6,%d5,%d3
80004f26:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80004f2a:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80004f2e:	02 67       	mov %d7,%d6
80004f30:	82 06       	mov %d6,0
80004f32:	0b 06 40 60 	addx %d6,%d6,%d0
80004f36:	0b 12 50 50 	addc %d5,%d2,%d1
80004f3a:	0b 51 00 41 	eq %d4,%d1,%d5
80004f3e:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
80004f42:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
80004f46:	df 04 06 80 	jne %d4,0,80004f52 <__muldf3+0x118>
80004f4a:	8b 1b 80 b0 	addx %d11,%d11,1
80004f4e:	8b 07 a0 70 	addc %d7,%d7,0
80004f52:	82 04       	mov %d4,0
80004f54:	0b 83 40 30 	addx %d3,%d3,%d8
80004f58:	0b 94 50 20 	addc %d2,%d4,%d9
80004f5c:	0b b3 40 30 	addx %d3,%d3,%d11
80004f60:	0b 72 50 20 	addc %d2,%d2,%d7
80004f64:	19 a4 1c 00 	ld.w %d4,[%sp]28
80004f68:	19 a7 30 00 	ld.w %d7,[%sp]48
80004f6c:	59 aa 00 10 	st.w [%sp]64,%d10
80004f70:	0b 74 00 10 	add %d1,%d4,%d7
80004f74:	7b 00 00 42 	movh %d4,8192
80004f78:	1b 41 00 00 	addi %d0,%d1,4
80004f7c:	0b 42 00 71 	eq %d7,%d2,%d4
80004f80:	b7 07 01 70 	insert %d7,%d7,0,0,1
80004f84:	59 a0 04 10 	st.w [%sp]68,%d0
80004f88:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
80004f8c:	df 07 2b 80 	jne %d7,0,80004fe2 <__muldf3+0x1a8>
80004f90:	1b 51 00 70 	addi %d7,%d1,5
80004f94:	8f 13 00 01 	and %d0,%d3,1
80004f98:	02 71       	mov %d1,%d7
80004f9a:	df 00 07 00 	jeq %d0,0,80004fa8 <__muldf3+0x16e>
80004f9e:	77 65 80 6f 	dextr %d6,%d5,%d6,31
80004fa2:	06 f5       	sh %d5,-1
80004fa4:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
80004fa8:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80004fac:	06 f2       	sh %d2,-1
80004fae:	0b 24 30 01 	lt.u %d0,%d4,%d2
80004fb2:	0b 24 70 02 	or.eq %d0,%d4,%d2
80004fb6:	c2 17       	add %d7,1
80004fb8:	df 00 ee ff 	jne %d0,0,80004f94 <__muldf3+0x15a>
80004fbc:	59 a1 04 10 	st.w [%sp]68,%d1
80004fc0:	8f f3 0f 41 	and %d4,%d3,255
80004fc4:	8b 04 28 42 	ne %d4,%d4,128
80004fc8:	df 04 3a 00 	jeq %d4,0,8000503c <__muldf3+0x202>
80004fcc:	59 a2 0c 10 	st.w [%sp]76,%d2
80004fd0:	82 32       	mov %d2,3
80004fd2:	59 a3 08 10 	st.w [%sp]72,%d3
80004fd6:	d9 a4 3c 00 	lea %a4,[%sp]60
80004fda:	59 a2 3c 00 	st.w [%sp]60,%d2
80004fde:	1d ff 4d ff 	j 80004e78 <__muldf3+0x3e>
80004fe2:	7b 00 00 71 	movh %d7,4096
80004fe6:	0b 27 30 41 	lt.u %d4,%d7,%d2
80004fea:	0b 27 70 42 	or.eq %d4,%d7,%d2
80004fee:	df 04 e9 ff 	jne %d4,0,80004fc0 <__muldf3+0x186>
80004ff2:	77 32 80 20 	dextr %d2,%d2,%d3,1
80004ff6:	c2 f0       	add %d0,-1
80004ff8:	06 13       	sh %d3,1
80004ffa:	ff 05 06 00 	jge %d5,0,80005006 <__muldf3+0x1cc>
80004ffe:	8f 13 40 11 	or %d1,%d3,1
80005002:	0b 21 10 28 	mov %e2,%d1,%d2
80005006:	0b 72 00 41 	eq %d4,%d2,%d7
8000500a:	b7 04 01 40 	insert %d4,%d4,0,0,1
8000500e:	77 65 80 50 	dextr %d5,%d5,%d6,1
80005012:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
80005016:	06 16       	sh %d6,1
80005018:	df 04 ed ff 	jne %d4,0,80004ff2 <__muldf3+0x1b8>
8000501c:	59 a0 04 10 	st.w [%sp]68,%d0
80005020:	1d ff d0 ff 	j 80004fc0 <__muldf3+0x186>
80005024:	59 aa 18 00 	st.w [%sp]24,%d10
80005028:	d9 a4 14 00 	lea %a4,[%sp]20
8000502c:	1d ff 26 ff 	j 80004e78 <__muldf3+0x3e>
80005030:	59 aa 2c 00 	st.w [%sp]44,%d10
80005034:	d9 a4 28 00 	lea %a4,[%sp]40
80005038:	1d ff 20 ff 	j 80004e78 <__muldf3+0x3e>
8000503c:	77 32 00 4c 	dextr %d4,%d2,%d3,24
80005040:	a6 65       	or %d5,%d6
80005042:	8b 05 20 52 	ne %d5,%d5,0
80005046:	0f 45 e0 40 	andn %d4,%d5,%d4
8000504a:	df 04 c1 7f 	jeq %d4,0,80004fcc <__muldf3+0x192>
8000504e:	8b 03 88 30 	addx %d3,%d3,128
80005052:	8b 02 a0 20 	addc %d2,%d2,0
80005056:	8f f3 cf 31 	andn %d3,%d3,255
8000505a:	1d ff b9 ff 	j 80004fcc <__muldf3+0x192>

8000505e <__divdf3>:
8000505e:	20 38       	sub.a %sp,56
80005060:	d9 a5 10 00 	lea %a5,[%sp]16
80005064:	40 a4       	mov.aa %a4,%sp
80005066:	89 a4 40 09 	st.d [%sp],%e4
8000506a:	89 a6 48 09 	st.d [%sp]8,%e6
8000506e:	6d 00 29 02 	call 800054c0 <__unpack_d>
80005072:	d9 a5 24 00 	lea %a5,[%sp]36
80005076:	d9 a4 08 00 	lea %a4,[%sp]8
8000507a:	6d 00 23 02 	call 800054c0 <__unpack_d>
8000507e:	19 a2 10 00 	ld.w %d2,[%sp]16
80005082:	ff 22 07 80 	jge.u %d2,2,80005090 <__divdf3+0x32>
80005086:	d9 a4 10 00 	lea %a4,[%sp]16
8000508a:	6d 00 4c 01 	call 80005322 <__pack_d>
8000508e:	00 90       	ret 
80005090:	19 a3 24 00 	ld.w %d3,[%sp]36
80005094:	d9 a4 24 00 	lea %a4,[%sp]36
80005098:	bf 23 f9 ff 	jlt.u %d3,2,8000508a <__divdf3+0x2c>
8000509c:	19 a5 14 00 	ld.w %d5,[%sp]20
800050a0:	19 a4 28 00 	ld.w %d4,[%sp]40
800050a4:	c6 54       	xor %d4,%d5
800050a6:	59 a4 14 00 	st.w [%sp]20,%d4
800050aa:	1b e2 ff 4f 	addi %d4,%d2,-2
800050ae:	8f 24 c0 41 	andn %d4,%d4,2
800050b2:	df 04 0a 80 	jne %d4,0,800050c6 <__divdf3+0x68>
800050b6:	91 00 00 48 	movh.a %a4,32768
800050ba:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
800050be:	5f 32 e4 ff 	jne %d2,%d3,80005086 <__divdf3+0x28>
800050c2:	1d ff e4 ff 	j 8000508a <__divdf3+0x2c>
800050c6:	df 43 51 00 	jeq %d3,4,80005168 <__divdf3+0x10a>
800050ca:	df 23 5a 00 	jeq %d3,2,8000517e <__divdf3+0x120>
800050ce:	19 a3 18 00 	ld.w %d3,[%sp]24
800050d2:	19 a2 2c 00 	ld.w %d2,[%sp]44
800050d6:	09 a4 70 09 	ld.d %e4,[%sp]48
800050da:	0b 23 80 00 	sub %d0,%d3,%d2
800050de:	09 a2 5c 09 	ld.d %e2,[%sp]28
800050e2:	0b 53 00 61 	eq %d6,%d3,%d5
800050e6:	02 67       	mov %d7,%d6
800050e8:	0b 42 50 72 	and.ge.u %d7,%d2,%d4
800050ec:	59 a0 18 00 	st.w [%sp]24,%d0
800050f0:	0b 35 a0 72 	or.lt.u %d7,%d5,%d3
800050f4:	df 07 0b 80 	jne %d7,0,8000510a <__divdf3+0xac>
800050f8:	1b f0 ff 6f 	addi %d6,%d0,-1
800050fc:	77 23 80 30 	dextr %d3,%d3,%d2,1
80005100:	06 12       	sh %d2,1
80005102:	59 a6 18 00 	st.w [%sp]24,%d6
80005106:	0b 53 00 61 	eq %d6,%d3,%d5
8000510a:	3b d0 03 10 	mov %d1,61
8000510e:	d2 08       	mov %e8,0
80005110:	82 00       	mov %d0,0
80005112:	7b 00 00 71 	movh %d7,4096
80005116:	1d 00 04 00 	j 8000511e <__divdf3+0xc0>
8000511a:	0b 53 00 61 	eq %d6,%d3,%d5
8000511e:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80005122:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80005126:	df 06 0c 80 	jne %d6,0,8000513e <__divdf3+0xe0>
8000512a:	0f 08 a0 a0 	or %d10,%d8,%d0
8000512e:	0f 79 a0 60 	or %d6,%d9,%d7
80005132:	0b 42 c0 20 	subx %d2,%d2,%d4
80005136:	0b a6 10 88 	mov %e8,%d6,%d10
8000513a:	0b 53 d0 30 	subc %d3,%d3,%d5
8000513e:	c2 f1       	add %d1,-1
80005140:	77 07 80 0f 	dextr %d0,%d7,%d0,31
80005144:	77 23 80 30 	dextr %d3,%d3,%d2,1
80005148:	06 f7       	sh %d7,-1
8000514a:	06 12       	sh %d2,1
8000514c:	df 01 e7 ff 	jne %d1,0,8000511a <__divdf3+0xbc>
80005150:	8f f8 0f 41 	and %d4,%d8,255
80005154:	8b 04 28 42 	ne %d4,%d4,128
80005158:	df 04 1a 00 	jeq %d4,0,8000518c <__divdf3+0x12e>
8000515c:	59 a8 1c 00 	st.w [%sp]28,%d8
80005160:	59 a9 20 00 	st.w [%sp]32,%d9
80005164:	1d ff 91 ff 	j 80005086 <__divdf3+0x28>
80005168:	82 02       	mov %d2,0
8000516a:	a0 02       	mov.a %a2,0
8000516c:	a0 03       	mov.a %a3,0
8000516e:	89 a2 dc 09 	st.da [%sp]28,%a2
80005172:	59 a2 18 00 	st.w [%sp]24,%d2
80005176:	d9 a4 10 00 	lea %a4,[%sp]16
8000517a:	1d ff 88 ff 	j 8000508a <__divdf3+0x2c>
8000517e:	82 42       	mov %d2,4
80005180:	d9 a4 10 00 	lea %a4,[%sp]16
80005184:	59 a2 10 00 	st.w [%sp]16,%d2
80005188:	1d ff 81 ff 	j 8000508a <__divdf3+0x2c>
8000518c:	a6 32       	or %d2,%d3
8000518e:	77 89 00 4c 	dextr %d4,%d9,%d8,24
80005192:	8b 02 20 32 	ne %d3,%d2,0
80005196:	0f 43 e0 20 	andn %d2,%d3,%d4
8000519a:	df 02 e1 7f 	jeq %d2,0,8000515c <__divdf3+0xfe>
8000519e:	8b 08 88 80 	addx %d8,%d8,128
800051a2:	8b 09 a0 90 	addc %d9,%d9,0
800051a6:	8f f8 cf 81 	andn %d8,%d8,255
800051aa:	1d ff d9 ff 	j 8000515c <__divdf3+0xfe>

800051ae <__floatsidf>:
800051ae:	82 32       	mov %d2,3
800051b0:	20 18       	sub.a %sp,24
800051b2:	59 a2 04 00 	st.w [%sp]4,%d2
800051b6:	8f 14 1e 20 	sh %d2,%d4,-31
800051ba:	59 a2 08 00 	st.w [%sp]8,%d2
800051be:	df 04 0e 80 	jne %d4,0,800051da <__floatsidf+0x2c>
800051c2:	82 22       	mov %d2,2
800051c4:	59 a2 04 00 	st.w [%sp]4,%d2
800051c8:	d9 a4 04 00 	lea %a4,[%sp]4
800051cc:	6d 00 ab 00 	call 80005322 <__pack_d>
800051d0:	60 25       	mov.a %a5,%d2
800051d2:	60 34       	mov.a %a4,%d3
800051d4:	80 52       	mov.d %d2,%a5
800051d6:	80 43       	mov.d %d3,%a4
800051d8:	00 90       	ret 
800051da:	ff 04 0a 00 	jge %d4,0,800051ee <__floatsidf+0x40>
800051de:	7b 00 00 28 	movh %d2,32768
800051e2:	a0 05       	mov.a %a5,0
800051e4:	91 00 1e 4c 	movh.a %a4,49632
800051e8:	5f 24 f6 7f 	jeq %d4,%d2,800051d4 <__floatsidf+0x26>
800051ec:	32 54       	rsub %d4
800051ee:	0f 04 b0 61 	clz %d6,%d4
800051f2:	1b d6 01 60 	addi %d6,%d6,29
800051f6:	8f f6 01 21 	and %d2,%d6,31
800051fa:	82 05       	mov %d5,0
800051fc:	8b 06 82 72 	ge %d7,%d6,32
80005200:	17 45 80 32 	dextr %d3,%d5,%d4,%d2
80005204:	0f 24 00 20 	sh %d2,%d4,%d2
80005208:	2b 23 50 37 	seln %d3,%d7,%d3,%d2
8000520c:	8b c6 03 61 	rsub %d6,%d6,60
80005210:	ab 02 a0 27 	seln %d2,%d7,%d2,0
80005214:	59 a3 14 00 	st.w [%sp]20,%d3
80005218:	59 a6 0c 00 	st.w [%sp]12,%d6
8000521c:	59 a2 10 00 	st.w [%sp]16,%d2
80005220:	1d ff d4 ff 	j 800051c8 <__floatsidf+0x1a>

80005224 <__make_dp>:
80005224:	20 18       	sub.a %sp,24
80005226:	09 a2 d8 09 	ld.da %a2,[%sp]24
8000522a:	d9 a4 04 00 	lea %a4,[%sp]4
8000522e:	59 a4 04 00 	st.w [%sp]4,%d4
80005232:	59 a5 08 00 	st.w [%sp]8,%d5
80005236:	59 a6 0c 00 	st.w [%sp]12,%d6
8000523a:	89 a2 d0 09 	st.da [%sp]16,%a2
8000523e:	6d 00 72 00 	call 80005322 <__pack_d>
80005242:	00 90       	ret 

80005244 <__truncdfsf2>:
80005244:	20 20       	sub.a %sp,32
80005246:	d9 a5 0c 00 	lea %a5,[%sp]12
8000524a:	d9 a4 04 00 	lea %a4,[%sp]4
8000524e:	89 a4 44 09 	st.d [%sp]4,%e4
80005252:	6d 00 37 01 	call 800054c0 <__unpack_d>
80005256:	19 a3 18 00 	ld.w %d3,[%sp]24
8000525a:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000525e:	77 32 00 21 	dextr %d2,%d2,%d3,2
80005262:	b7 03 02 3f 	insert %d3,%d3,0,30,2
80005266:	02 27       	mov %d7,%d2
80005268:	df 03 04 00 	jeq %d3,0,80005270 <__truncdfsf2+0x2c>
8000526c:	8f 12 40 71 	or %d7,%d2,1
80005270:	19 a6 14 00 	ld.w %d6,[%sp]20
80005274:	19 a5 10 00 	ld.w %d5,[%sp]16
80005278:	19 a4 0c 00 	ld.w %d4,[%sp]12
8000527c:	6d 00 47 00 	call 8000530a <__make_fp>
80005280:	00 90       	ret 

80005282 <__unpack_f>:
80005282:	54 42       	ld.w %d2,[%a4]
80005284:	8f 12 1e 50 	sh %d5,%d2,-31
80005288:	37 02 e8 3b 	extr.u %d3,%d2,23,8
8000528c:	b7 02 89 4b 	insert %d4,%d2,0,23,9
80005290:	59 55 04 00 	st.w [%a5]4,%d5
80005294:	df 03 16 80 	jne %d3,0,800052c0 <__unpack_f+0x3e>
80005298:	df 04 25 00 	jeq %d4,0,800052e2 <__unpack_f+0x60>
8000529c:	82 33       	mov %d3,3
8000529e:	8f 74 00 20 	sh %d2,%d4,7
800052a2:	7b 00 00 54 	movh %d5,16384
800052a6:	74 53       	st.w [%a5],%d3
800052a8:	3b 10 f8 3f 	mov %d3,-127
800052ac:	06 12       	sh %d2,1
800052ae:	02 34       	mov %d4,%d3
800052b0:	c2 f3       	add %d3,-1
800052b2:	3f 52 fd ff 	jlt.u %d2,%d5,800052ac <__unpack_f+0x2a>
800052b6:	59 54 08 00 	st.w [%a5]8,%d4
800052ba:	59 52 0c 00 	st.w [%a5]12,%d2
800052be:	00 90       	ret 
800052c0:	8b f3 2f 52 	ne %d5,%d3,255
800052c4:	df 05 12 00 	jeq %d5,0,800052e8 <__unpack_f+0x66>
800052c8:	82 32       	mov %d2,3
800052ca:	1b 13 f8 3f 	addi %d3,%d3,-127
800052ce:	74 52       	st.w [%a5],%d2
800052d0:	8f 74 00 20 	sh %d2,%d4,7
800052d4:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
800052d8:	59 53 08 00 	st.w [%a5]8,%d3
800052dc:	59 52 0c 00 	st.w [%a5]12,%d2
800052e0:	00 90       	ret 
800052e2:	82 22       	mov %d2,2
800052e4:	74 52       	st.w [%a5],%d2
800052e6:	00 90       	ret 
800052e8:	df 04 05 80 	jne %d4,0,800052f2 <__unpack_f+0x70>
800052ec:	82 42       	mov %d2,4
800052ee:	74 52       	st.w [%a5],%d2
800052f0:	00 90       	ret 
800052f2:	37 02 61 3b 	extr.u %d3,%d2,22,1
800052f6:	06 72       	sh %d2,7
800052f8:	74 53       	st.w [%a5],%d3
800052fa:	7b 00 00 32 	movh %d3,8192
800052fe:	1b 03 f8 3f 	addi %d3,%d3,-128
80005302:	26 32       	and %d2,%d3
80005304:	59 52 0c 00 	st.w [%a5]12,%d2
80005308:	00 90       	ret 

8000530a <__make_fp>:
8000530a:	20 10       	sub.a %sp,16
8000530c:	40 a4       	mov.aa %a4,%sp
8000530e:	74 a4       	st.w [%sp],%d4
80005310:	59 a5 04 00 	st.w [%sp]4,%d5
80005314:	59 a6 08 00 	st.w [%sp]8,%d6
80005318:	59 a7 0c 00 	st.w [%sp]12,%d7
8000531c:	6d 00 31 01 	call 8000557e <__pack_f>
80005320:	00 90       	ret 

80005322 <__pack_d>:
80005322:	54 44       	ld.w %d4,[%a4]
80005324:	19 43 0c 00 	ld.w %d3,[%a4]12
80005328:	19 42 10 00 	ld.w %d2,[%a4]16
8000532c:	19 41 04 00 	ld.w %d1,[%a4]4
80005330:	bf 24 56 80 	jlt.u %d4,2,800053dc <__pack_d+0xba>
80005334:	7b 00 ff 57 	movh %d5,32752
80005338:	d2 06       	mov %e6,0
8000533a:	df 44 0b 00 	jeq %d4,4,80005350 <__pack_d+0x2e>
8000533e:	0f 23 a0 50 	or %d5,%d3,%d2
80005342:	8b 05 00 02 	eq %d0,%d5,0
80005346:	8b 24 e0 04 	or.eq %d0,%d4,2
8000534a:	82 05       	mov %d5,0
8000534c:	df 00 0c 00 	jeq %d0,0,80005364 <__pack_d+0x42>
80005350:	0b 10 00 28 	mov %e2,%d1
80005354:	a6 75       	or %d5,%d7
80005356:	8f f2 01 20 	sh %d2,%d2,31
8000535a:	0f 25 a0 40 	or %d4,%d5,%d2
8000535e:	02 43       	mov %d3,%d4
80005360:	02 62       	mov %d2,%d6
80005362:	00 90       	ret 
80005364:	19 44 08 00 	ld.w %d4,[%a4]8
80005368:	3b 20 c0 0f 	mov %d0,-1022
8000536c:	3f 04 41 00 	jlt %d4,%d0,800053ee <__pack_d+0xcc>
80005370:	3b 00 40 00 	mov %d0,1024
80005374:	7b 00 ff 57 	movh %d5,32752
80005378:	7f 04 ec 7f 	jge %d4,%d0,80005350 <__pack_d+0x2e>
8000537c:	8f f3 0f 51 	and %d5,%d3,255
80005380:	8b 05 28 52 	ne %d5,%d5,128
80005384:	df 05 1b 00 	jeq %d5,0,800053ba <__pack_d+0x98>
80005388:	8b f3 87 30 	addx %d3,%d3,127
8000538c:	8b 02 a0 20 	addc %d2,%d2,0
80005390:	7b 00 00 52 	movh %d5,8192
80005394:	0b 25 30 61 	lt.u %d6,%d5,%d2
80005398:	0b 25 70 62 	or.eq %d6,%d5,%d2
8000539c:	df 06 19 80 	jne %d6,0,800053ce <__pack_d+0xac>
800053a0:	1b f4 3f 40 	addi %d4,%d4,1023
800053a4:	0b 40 00 48 	mov %e4,%d4
800053a8:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800053ac:	06 82       	sh %d2,-8
800053ae:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
800053b2:	8f 44 01 50 	sh %d5,%d4,20
800053b6:	1d ff cd ff 	j 80005350 <__pack_d+0x2e>
800053ba:	8f 03 10 51 	and %d5,%d3,256
800053be:	df 05 e9 7f 	jeq %d5,0,80005390 <__pack_d+0x6e>
800053c2:	8b 03 88 30 	addx %d3,%d3,128
800053c6:	8b 02 a0 20 	addc %d2,%d2,0
800053ca:	1d ff e3 ff 	j 80005390 <__pack_d+0x6e>
800053ce:	77 32 80 3f 	dextr %d3,%d2,%d3,31
800053d2:	1b 04 40 40 	addi %d4,%d4,1024
800053d6:	06 f2       	sh %d2,-1
800053d8:	1d ff e6 ff 	j 800053a4 <__pack_d+0x82>
800053dc:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800053e0:	06 82       	sh %d2,-8
800053e2:	b7 12 8d 79 	insert %d7,%d2,1,19,13
800053e6:	7b 00 ff 57 	movh %d5,32752
800053ea:	1d ff b3 ff 	j 80005350 <__pack_d+0x2e>
800053ee:	0b 40 80 40 	sub %d4,%d0,%d4
800053f2:	8b 94 83 02 	ge %d0,%d4,57
800053f6:	df 00 ad ff 	jne %d0,0,80005350 <__pack_d+0x2e>
800053fa:	8b 04 82 52 	ge %d5,%d4,32
800053fe:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
80005402:	ab 02 a0 75 	seln %d7,%d5,%d2,0
80005406:	8f f4 01 51 	and %d5,%d4,31
8000540a:	8b 05 02 61 	rsub %d6,%d5,32
8000540e:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
80005412:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
80005416:	8b 04 82 82 	ge %d8,%d4,32
8000541a:	32 55       	rsub %d5
8000541c:	02 60       	mov %d0,%d6
8000541e:	8f f4 01 41 	and %d4,%d4,31
80005422:	82 f6       	mov %d6,-1
80005424:	0f 57 00 70 	sh %d7,%d7,%d5
80005428:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
8000542c:	0f 46 00 40 	sh %d4,%d6,%d4
80005430:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
80005434:	ab 04 a0 48 	seln %d4,%d8,%d4,0
80005438:	0f 43 e0 30 	andn %d3,%d3,%d4
8000543c:	0f 52 e0 20 	andn %d2,%d2,%d5
80005440:	a6 32       	or %d2,%d3
80005442:	02 03       	mov %d3,%d0
80005444:	8b 02 00 35 	or.ne %d3,%d2,0
80005448:	8f f3 0f 51 	and %d5,%d3,255
8000544c:	82 12       	mov %d2,1
8000544e:	8b 05 08 24 	and.eq %d2,%d5,128
80005452:	02 74       	mov %d4,%d7
80005454:	df 02 14 80 	jne %d2,0,8000547c <__pack_d+0x15a>
80005458:	8b f3 87 30 	addx %d3,%d3,127
8000545c:	8b 07 a0 20 	addc %d2,%d7,0
80005460:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80005464:	7b 00 00 31 	movh %d3,4096
80005468:	8f 82 1f 70 	sh %d7,%d2,-8
8000546c:	0b 32 50 21 	ge.u %d2,%d2,%d3
80005470:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80005474:	8f 42 01 50 	sh %d5,%d2,20
80005478:	1d ff 6c ff 	j 80005350 <__pack_d+0x2e>
8000547c:	8b 03 88 60 	addx %d6,%d3,128
80005480:	8b 07 a0 20 	addc %d2,%d7,0
80005484:	7b 00 00 a1 	movh %d10,4096
80005488:	8f 82 1f 70 	sh %d7,%d2,-8
8000548c:	77 62 00 6c 	dextr %d6,%d2,%d6,24
80005490:	0b a2 50 21 	ge.u %d2,%d2,%d10
80005494:	53 12 40 80 	mul.u %e8,%d2,1
80005498:	8f 03 10 01 	and %d0,%d3,256
8000549c:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800054a0:	8f 48 01 50 	sh %d5,%d8,20
800054a4:	df 00 56 ff 	jne %d0,0,80005350 <__pack_d+0x2e>
800054a8:	8f 84 1f 70 	sh %d7,%d4,-8
800054ac:	0b a4 50 21 	ge.u %d2,%d4,%d10
800054b0:	77 34 00 6c 	dextr %d6,%d4,%d3,24
800054b4:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800054b8:	8f 42 01 50 	sh %d5,%d2,20
800054bc:	1d ff 4a ff 	j 80005350 <__pack_d+0x2e>

800054c0 <__unpack_d>:
800054c0:	09 48 40 09 	ld.d %e8,[%a4]
800054c4:	3b f0 7f 00 	mov %d0,2047
800054c8:	8f 19 1e 70 	sh %d7,%d9,-31
800054cc:	37 09 6b 5a 	extr.u %d5,%d9,20,11
800054d0:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
800054d4:	59 57 04 00 	st.w [%a5]4,%d7
800054d8:	df 05 26 80 	jne %d5,0,80005524 <__unpack_d+0x64>
800054dc:	8b 08 20 22 	ne %d2,%d8,0
800054e0:	8b 06 00 25 	or.ne %d2,%d6,0
800054e4:	df 02 33 00 	jeq %d2,0,8000554a <__unpack_d+0x8a>
800054e8:	82 32       	mov %d2,3
800054ea:	77 86 00 34 	dextr %d3,%d6,%d8,8
800054ee:	8f 88 00 40 	sh %d4,%d8,8
800054f2:	74 52       	st.w [%a5],%d2
800054f4:	3b 10 c0 5f 	mov %d5,-1023
800054f8:	7b 00 00 61 	movh %d6,4096
800054fc:	77 43 80 30 	dextr %d3,%d3,%d4,1
80005500:	02 57       	mov %d7,%d5
80005502:	0b 63 00 21 	eq %d2,%d3,%d6
80005506:	b7 02 01 20 	insert %d2,%d2,0,0,1
8000550a:	06 14       	sh %d4,1
8000550c:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
80005510:	c2 f5       	add %d5,-1
80005512:	df 02 f5 ff 	jne %d2,0,800054fc <__unpack_d+0x3c>
80005516:	59 57 08 00 	st.w [%a5]8,%d7
8000551a:	59 54 0c 00 	st.w [%a5]12,%d4
8000551e:	59 53 10 00 	st.w [%a5]16,%d3
80005522:	00 90       	ret 
80005524:	5f 05 16 00 	jeq %d5,%d0,80005550 <__unpack_d+0x90>
80005528:	82 32       	mov %d2,3
8000552a:	1b 15 c0 5f 	addi %d5,%d5,-1023
8000552e:	8f 88 00 40 	sh %d4,%d8,8
80005532:	74 52       	st.w [%a5],%d2
80005534:	77 86 00 24 	dextr %d2,%d6,%d8,8
80005538:	59 55 08 00 	st.w [%a5]8,%d5
8000553c:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80005540:	59 54 0c 00 	st.w [%a5]12,%d4
80005544:	59 52 10 00 	st.w [%a5]16,%d2
80005548:	00 90       	ret 
8000554a:	82 22       	mov %d2,2
8000554c:	74 52       	st.w [%a5],%d2
8000554e:	00 90       	ret 
80005550:	8b 08 20 52 	ne %d5,%d8,0
80005554:	8b 06 00 55 	or.ne %d5,%d6,0
80005558:	df 05 05 80 	jne %d5,0,80005562 <__unpack_d+0xa2>
8000555c:	82 42       	mov %d2,4
8000555e:	74 52       	st.w [%a5],%d2
80005560:	00 90       	ret 
80005562:	77 89 00 34 	dextr %d3,%d9,%d8,8
80005566:	37 09 e1 49 	extr.u %d4,%d9,19,1
8000556a:	b7 03 85 3d 	insert %d3,%d3,0,27,5
8000556e:	8f 88 00 20 	sh %d2,%d8,8
80005572:	74 54       	st.w [%a5],%d4
80005574:	59 52 0c 00 	st.w [%a5]12,%d2
80005578:	59 53 10 00 	st.w [%a5]16,%d3
8000557c:	00 90       	ret 

8000557e <__pack_f>:
8000557e:	54 44       	ld.w %d4,[%a4]
80005580:	19 43 0c 00 	ld.w %d3,[%a4]12
80005584:	19 47 04 00 	ld.w %d7,[%a4]4
80005588:	bf 24 3f 80 	jlt.u %d4,2,80005606 <__pack_f+0x88>
8000558c:	7b 00 f8 57 	movh %d5,32640
80005590:	82 06       	mov %d6,0
80005592:	df 44 09 00 	jeq %d4,4,800055a4 <__pack_f+0x26>
80005596:	8b 03 00 22 	eq %d2,%d3,0
8000559a:	8b 24 e0 24 	or.eq %d2,%d4,2
8000559e:	82 05       	mov %d5,0
800055a0:	df 02 08 00 	jeq %d2,0,800055b0 <__pack_f+0x32>
800055a4:	8f f7 01 70 	sh %d7,%d7,31
800055a8:	0f 56 a0 20 	or %d2,%d6,%d5
800055ac:	a6 72       	or %d2,%d7
800055ae:	00 90       	ret 
800055b0:	19 42 08 00 	ld.w %d2,[%a4]8
800055b4:	8b 22 98 42 	ge %d4,%d2,-126
800055b8:	df 04 33 00 	jeq %d4,0,8000561e <__pack_f+0xa0>
800055bc:	8b 02 88 42 	ge %d4,%d2,128
800055c0:	7b 00 f8 57 	movh %d5,32640
800055c4:	df 04 f0 ff 	jne %d4,0,800055a4 <__pack_f+0x26>
800055c8:	8f f3 07 51 	and %d5,%d3,127
800055cc:	8f 03 08 41 	and %d4,%d3,128
800055d0:	8b 05 24 52 	ne %d5,%d5,64
800055d4:	ab 03 04 44 	cadd %d4,%d4,%d3,64
800055d8:	1b f3 03 30 	addi %d3,%d3,63
800055dc:	2b 43 40 35 	sel %d3,%d5,%d3,%d4
800055e0:	1b f2 07 50 	addi %d5,%d2,127
800055e4:	bf 03 0c 00 	jlt %d3,0,800055fc <__pack_f+0x7e>
800055e8:	37 03 f7 63 	extr.u %d6,%d3,7,23
800055ec:	8f 75 01 50 	sh %d5,%d5,23
800055f0:	8f f7 01 70 	sh %d7,%d7,31
800055f4:	0f 56 a0 20 	or %d2,%d6,%d5
800055f8:	a6 72       	or %d2,%d7
800055fa:	00 90       	ret 
800055fc:	06 f3       	sh %d3,-1
800055fe:	1b 02 08 50 	addi %d5,%d2,128
80005602:	1d ff f3 ff 	j 800055e8 <__pack_f+0x6a>
80005606:	37 03 f6 33 	extr.u %d3,%d3,7,22
8000560a:	7b 00 f8 57 	movh %d5,32640
8000560e:	b7 f3 01 6b 	insert %d6,%d3,15,22,1
80005612:	8f f7 01 70 	sh %d7,%d7,31
80005616:	0f 56 a0 20 	or %d2,%d6,%d5
8000561a:	a6 72       	or %d2,%d7
8000561c:	00 90       	ret 
8000561e:	8b 22 18 21 	rsub %d2,%d2,-126
80005622:	8b a2 81 42 	ge %d4,%d2,26
80005626:	df 04 bf ff 	jne %d4,0,800055a4 <__pack_f+0x26>
8000562a:	82 f5       	mov %d5,-1
8000562c:	8b 02 00 41 	rsub %d4,%d2,0
80005630:	0f 25 00 20 	sh %d2,%d5,%d2
80005634:	0f 43 00 40 	sh %d4,%d3,%d4
80005638:	0f 23 e0 30 	andn %d3,%d3,%d2
8000563c:	8b 03 00 45 	or.ne %d4,%d3,0
80005640:	8f f4 07 31 	and %d3,%d4,127
80005644:	8b 03 04 32 	eq %d3,%d3,64
80005648:	df 03 0e 80 	jne %d3,0,80005664 <__pack_f+0xe6>
8000564c:	1b f4 03 20 	addi %d2,%d4,63
80005650:	7b 00 00 34 	movh %d3,16384
80005654:	37 02 f7 63 	extr.u %d6,%d2,7,23
80005658:	0b 32 50 21 	ge.u %d2,%d2,%d3
8000565c:	8f 72 01 50 	sh %d5,%d2,23
80005660:	1d ff a2 ff 	j 800055a4 <__pack_f+0x26>
80005664:	1b 04 04 30 	addi %d3,%d4,64
80005668:	7b 00 00 24 	movh %d2,16384
8000566c:	37 03 f7 63 	extr.u %d6,%d3,7,23
80005670:	0b 23 50 31 	ge.u %d3,%d3,%d2
80005674:	8f 73 01 50 	sh %d5,%d3,23
80005678:	6f 74 96 ff 	jnz.t %d4,7,800055a4 <__pack_f+0x26>
8000567c:	0b 24 50 21 	ge.u %d2,%d4,%d2
80005680:	37 04 f7 63 	extr.u %d6,%d4,7,23
80005684:	8f 72 01 50 	sh %d5,%d2,23
80005688:	1d ff 8e ff 	j 800055a4 <__pack_f+0x26>

8000568c <__do_global_ctors_aux>:
8000568c:	91 00 00 28 	movh.a %a2,32768
80005690:	d9 22 50 b5 	lea %a2,[%a2]22224 <800056d0 <__CTOR_END__>>
80005694:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
80005698:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
8000569c:	df f2 0a 00 	jeq %d2,-1,800056b0 <__do_global_ctors_aux+0x24>
800056a0:	40 3c       	mov.aa %a12,%a3
800056a2:	60 22       	mov.a %a2,%d2
800056a4:	b0 cc       	add.a %a12,-4
800056a6:	2d 02 00 00 	calli %a2
800056aa:	54 c2       	ld.w %d2,[%a12]
800056ac:	df f2 fb ff 	jne %d2,-1,800056a2 <__do_global_ctors_aux+0x16>
800056b0:	00 90       	ret 
	...

Disassembly of section .init:

800056b4 <_init>:
800056b4:	6d ff e6 d7 	call 80000680 <frame_dummy>
800056b8:	6d ff ea ff 	call 8000568c <__do_global_ctors_aux>
800056bc:	00 90       	ret 
	...

Disassembly of section .fini:

800056c0 <_fini>:
800056c0:	6d ff ae d7 	call 8000061c <__do_global_dtors_aux>
800056c4:	00 90       	ret 
	...

Disassembly of section .traptab_tc2:

801f6100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6100:	0d 00 00 02 	svlcx 
801f6104:	02 f4       	mov %d4,%d15
801f6106:	91 00 00 28 	movh.a %a2,32768
801f610a:	d9 22 8c 83 	lea %a2,[%a2]14860 <80003a0c <IfxCpu_Trap_memoryManagementError>>
801f610e:	dc 02       	ji %a2
801f6110:	00 80       	rfe 
	...
801f611e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6120:	0d 00 00 02 	svlcx 
801f6124:	02 f4       	mov %d4,%d15
801f6126:	91 00 00 28 	movh.a %a2,32768
801f612a:	d9 22 ba 83 	lea %a2,[%a2]14906 <80003a3a <IfxCpu_Trap_internalProtectionError>>
801f612e:	dc 02       	ji %a2
801f6130:	00 80       	rfe 
	...
801f613e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6140:	0d 00 00 02 	svlcx 
801f6144:	02 f4       	mov %d4,%d15
801f6146:	91 00 00 28 	movh.a %a2,32768
801f614a:	d9 22 a8 93 	lea %a2,[%a2]14952 <80003a68 <IfxCpu_Trap_instructionError>>
801f614e:	dc 02       	ji %a2
801f6150:	00 80       	rfe 
	...
801f615e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6160:	02 f4       	mov %d4,%d15
801f6162:	91 00 00 28 	movh.a %a2,32768
801f6166:	d9 22 96 a3 	lea %a2,[%a2]14998 <80003a96 <IfxCpu_Trap_contextManagementError>>
801f616a:	dc 02       	ji %a2
801f616c:	00 80       	rfe 
	...
801f617e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6180:	0d 00 00 02 	svlcx 
801f6184:	02 f4       	mov %d4,%d15
801f6186:	91 00 00 28 	movh.a %a2,32768
801f618a:	d9 22 84 b3 	lea %a2,[%a2]15044 <80003ac4 <IfxCpu_Trap_busError>>
801f618e:	dc 02       	ji %a2
801f6190:	00 80       	rfe 
	...
801f619e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f61a0:	0d 00 00 02 	svlcx 
801f61a4:	02 f4       	mov %d4,%d15
801f61a6:	91 00 00 28 	movh.a %a2,32768
801f61aa:	d9 22 b2 b3 	lea %a2,[%a2]15090 <80003af2 <IfxCpu_Trap_assertion>>
801f61ae:	dc 02       	ji %a2
801f61b0:	00 80       	rfe 
	...
801f61be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
801f61c0:	0d 00 00 02 	svlcx 
801f61c4:	02 f4       	mov %d4,%d15
801f61c6:	91 00 00 28 	movh.a %a2,32768
801f61ca:	d9 22 be d3 	lea %a2,[%a2]15230 <80003b7e <IfxCpu_Trap_systemCall_Cpu2>>
801f61ce:	dc 02       	ji %a2
801f61d0:	00 80       	rfe 
	...
801f61de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f61e0:	0d 00 00 02 	svlcx 
801f61e4:	02 f4       	mov %d4,%d15
801f61e6:	91 00 00 28 	movh.a %a2,32768
801f61ea:	d9 22 aa e3 	lea %a2,[%a2]15274 <80003baa <IfxCpu_Trap_nonMaskableInterrupt>>
801f61ee:	dc 02       	ji %a2
801f61f0:	00 80       	rfe 
}
801f61f2:	00 90       	ret 

801f61f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc1:

801f6200 <IfxCpu_Trap_vectorTable1>:
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6200:	0d 00 00 02 	svlcx 
801f6204:	02 f4       	mov %d4,%d15
801f6206:	91 00 00 28 	movh.a %a2,32768
801f620a:	d9 22 8c 83 	lea %a2,[%a2]14860 <80003a0c <IfxCpu_Trap_memoryManagementError>>
801f620e:	dc 02       	ji %a2
801f6210:	00 80       	rfe 
	...
801f621e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6220:	0d 00 00 02 	svlcx 
801f6224:	02 f4       	mov %d4,%d15
801f6226:	91 00 00 28 	movh.a %a2,32768
801f622a:	d9 22 ba 83 	lea %a2,[%a2]14906 <80003a3a <IfxCpu_Trap_internalProtectionError>>
801f622e:	dc 02       	ji %a2
801f6230:	00 80       	rfe 
	...
801f623e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6240:	0d 00 00 02 	svlcx 
801f6244:	02 f4       	mov %d4,%d15
801f6246:	91 00 00 28 	movh.a %a2,32768
801f624a:	d9 22 a8 93 	lea %a2,[%a2]14952 <80003a68 <IfxCpu_Trap_instructionError>>
801f624e:	dc 02       	ji %a2
801f6250:	00 80       	rfe 
	...
801f625e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6260:	02 f4       	mov %d4,%d15
801f6262:	91 00 00 28 	movh.a %a2,32768
801f6266:	d9 22 96 a3 	lea %a2,[%a2]14998 <80003a96 <IfxCpu_Trap_contextManagementError>>
801f626a:	dc 02       	ji %a2
801f626c:	00 80       	rfe 
	...
801f627e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6280:	0d 00 00 02 	svlcx 
801f6284:	02 f4       	mov %d4,%d15
801f6286:	91 00 00 28 	movh.a %a2,32768
801f628a:	d9 22 84 b3 	lea %a2,[%a2]15044 <80003ac4 <IfxCpu_Trap_busError>>
801f628e:	dc 02       	ji %a2
801f6290:	00 80       	rfe 
	...
801f629e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f62a0:	0d 00 00 02 	svlcx 
801f62a4:	02 f4       	mov %d4,%d15
801f62a6:	91 00 00 28 	movh.a %a2,32768
801f62aa:	d9 22 b2 b3 	lea %a2,[%a2]15090 <80003af2 <IfxCpu_Trap_assertion>>
801f62ae:	dc 02       	ji %a2
801f62b0:	00 80       	rfe 
	...
801f62be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
801f62c0:	0d 00 00 02 	svlcx 
801f62c4:	02 f4       	mov %d4,%d15
801f62c6:	91 00 00 28 	movh.a %a2,32768
801f62ca:	d9 22 92 d3 	lea %a2,[%a2]15186 <80003b52 <IfxCpu_Trap_systemCall_Cpu1>>
801f62ce:	dc 02       	ji %a2
801f62d0:	00 80       	rfe 
	...
801f62de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f62e0:	0d 00 00 02 	svlcx 
801f62e4:	02 f4       	mov %d4,%d15
801f62e6:	91 00 00 28 	movh.a %a2,32768
801f62ea:	d9 22 aa e3 	lea %a2,[%a2]15274 <80003baa <IfxCpu_Trap_nonMaskableInterrupt>>
801f62ee:	dc 02       	ji %a2
801f62f0:	00 80       	rfe 
}
801f62f2:	00 90       	ret 

801f62f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .inttab_tc0_064:

801f4c80 <__intvec_tc0_100>:
801f4c80:	0d 00 00 02 	svlcx 
801f4c84:	91 00 00 e8 	movh.a %a14,32768
801f4c88:	d9 ee 6c d0 	lea %a14,[%a14]1900 <8000076c <ISR_STM>>
801f4c8c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_0C8:

801f5900 <__intvec_tc0_200>:
801f5900:	0d 00 00 02 	svlcx 
801f5904:	91 00 00 e8 	movh.a %a14,32768
801f5908:	d9 ee 84 00 	lea %a14,[%a14]2052 <80000804 <ISR_PWM_GTM>>
801f590c:	dc 0e       	ji %a14
