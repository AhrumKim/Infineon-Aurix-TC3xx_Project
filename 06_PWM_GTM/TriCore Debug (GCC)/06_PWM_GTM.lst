
06_PWM_GTM.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bmhd_0       00000020  80000000  80000000  00000274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .bmhd_1       00000020  80020000  80020000  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .startup      00000010  80000020  80000020  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .interface_const 00000000  80000040  80000040  000056bc  2**0
                  CONTENTS
  4 .traptab_tc0  00000100  80000100  80000100  000002c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .rodata       000003b8  80000200  80000200  000003c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .CPU2.zbss    00000000  50000000  50000000  000056bc  2**0
                  CONTENTS
  7 .CPU2.bss     00000000  50000000  50000000  000056bc  2**0
                  CONTENTS
  8 .CPU1.zbss    00000000  60000000  60000000  000056bc  2**0
                  CONTENTS
  9 .CPU1.bss     00000000  6000119c  6000119c  000056bc  2**0
                  CONTENTS
 10 .CPU0.zbss    00000000  70000000  70000000  000056bc  2**0
                  CONTENTS
 11 .CPU0.bss     00000000  70000000  70000000  000056bc  2**0
                  CONTENTS
 12 .zbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC
 13 .sbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC, SMALL_DATA
 14 .bss          0000017c  60000020  801f631c  000056c0  2**3
                  ALLOC
 15 .CPU2.zdata   00000000  50000000  50000000  000056bc  2**0
                  CONTENTS
 16 .CPU2.data    00000000  50000000  50000000  000056bc  2**0
                  CONTENTS
 17 .CPU1.zdata   00000000  60000000  60000000  000056bc  2**0
                  CONTENTS
 18 .CPU1.data    00000000  6000119c  6000119c  000056bc  2**0
                  CONTENTS
 19 .CPU0.zdata   00000000  70000000  70000000  000056bc  2**0
                  CONTENTS
 20 .CPU0.data    00000000  70000000  70000000  000056bc  2**0
                  CONTENTS
 21 .zdata        00000000  60000000  801f631c  000056bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .sdata        00000000  60000000  801f631c  000056bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
 23 .data         0000001c  60000000  801f6300  000056a0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .lmu_zdata    00000000  90000000  90000000  000056bc  2**0
                  CONTENTS
 25 .lmu_sdata    00000000  90000000  90000000  000056bc  2**0
                  CONTENTS
 26 .lmu_data     00000000  90000000  90000000  000056bc  2**0
                  CONTENTS
 27 .CPU0.psram_text 00000000  70100000  70100000  000056bc  2**0
                  CONTENTS
 28 .CPU1.psram_text 00000000  60100000  60100000  000056bc  2**0
                  CONTENTS
 29 .CPU2.psram_text 00000000  50100000  50100000  000056bc  2**0
                  CONTENTS
 30 .text         00004ca8  800005b8  800005b8  00000778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .init         00000010  80005260  80005260  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .fini         00000008  80005270  80005270  00005430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .eh_frame     00000000  80005278  80005278  000056bc  2**0
                  CONTENTS
 34 .gcc_except_table 00000000  80005278  80005278  000056bc  2**0
                  CONTENTS
 35 .ctors        00000010  80005278  80005278  00005438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 36 .dtors        00000010  80005288  80005288  00005448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 37 .traptab_tc2  00000100  801f6100  801f6100  000054a0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 38 .traptab_tc1  00000100  801f6200  801f6200  000055a0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 39 .heap         00001000  6000019c  801f631c  000056bc  2**0
                  ALLOC
 40 .CPU2.ustack  00000800  5001ae00  5001ae00  00000274  2**0
                  ALLOC
 41 .CPU2.istack  00000400  5001b700  5001b700  00000274  2**0
                  ALLOC
 42 .CPU2.csa     00002000  5001bc00  5001bc00  00000274  2**0
                  ALLOC
 43 .CPU1.ustack  00000800  6001ae00  6001ae00  00000274  2**0
                  ALLOC
 44 .CPU1.istack  00000400  6001b700  6001b700  00000274  2**0
                  ALLOC
 45 .CPU1.csa     00002000  6001bc00  6001bc00  00000274  2**0
                  ALLOC
 46 .CPU0.ustack  00000800  70018e00  70018e00  00000274  2**0
                  ALLOC
 47 .CPU0.istack  00000400  70019700  70019700  00000274  2**0
                  ALLOC
 48 .CPU0.csa     00002000  70019c00  70019c00  00000274  2**0
                  ALLOC
 49 .inttab_tc0_000 00000000  801f4000  801f4000  000056bc  2**0
                  CONTENTS
 50 .inttab_tc0_001 00000000  801f4020  801f4020  000056bc  2**0
                  CONTENTS
 51 .inttab_tc0_002 00000000  801f4040  801f4040  000056bc  2**0
                  CONTENTS
 52 .inttab_tc0_003 00000000  801f4060  801f4060  000056bc  2**0
                  CONTENTS
 53 .inttab_tc0_004 00000000  801f4080  801f4080  000056bc  2**0
                  CONTENTS
 54 .inttab_tc0_005 00000000  801f40a0  801f40a0  000056bc  2**0
                  CONTENTS
 55 .inttab_tc0_006 00000000  801f40c0  801f40c0  000056bc  2**0
                  CONTENTS
 56 .inttab_tc0_007 00000000  801f40e0  801f40e0  000056bc  2**0
                  CONTENTS
 57 .inttab_tc0_008 00000000  801f4100  801f4100  000056bc  2**0
                  CONTENTS
 58 .inttab_tc0_009 00000000  801f4120  801f4120  000056bc  2**0
                  CONTENTS
 59 .inttab_tc0_00A 00000000  801f4140  801f4140  000056bc  2**0
                  CONTENTS
 60 .inttab_tc0_00B 00000000  801f4160  801f4160  000056bc  2**0
                  CONTENTS
 61 .inttab_tc0_00C 00000000  801f4180  801f4180  000056bc  2**0
                  CONTENTS
 62 .inttab_tc0_00D 00000000  801f41a0  801f41a0  000056bc  2**0
                  CONTENTS
 63 .inttab_tc0_00E 00000000  801f41c0  801f41c0  000056bc  2**0
                  CONTENTS
 64 .inttab_tc0_00F 00000000  801f41e0  801f41e0  000056bc  2**0
                  CONTENTS
 65 .inttab_tc0_010 00000000  801f4200  801f4200  000056bc  2**0
                  CONTENTS
 66 .inttab_tc0_011 00000000  801f4220  801f4220  000056bc  2**0
                  CONTENTS
 67 .inttab_tc0_012 00000000  801f4240  801f4240  000056bc  2**0
                  CONTENTS
 68 .inttab_tc0_013 00000000  801f4260  801f4260  000056bc  2**0
                  CONTENTS
 69 .inttab_tc0_014 00000000  801f4280  801f4280  000056bc  2**0
                  CONTENTS
 70 .inttab_tc0_015 00000000  801f42a0  801f42a0  000056bc  2**0
                  CONTENTS
 71 .inttab_tc0_016 00000000  801f42c0  801f42c0  000056bc  2**0
                  CONTENTS
 72 .inttab_tc0_017 00000000  801f42e0  801f42e0  000056bc  2**0
                  CONTENTS
 73 .inttab_tc0_018 00000000  801f4300  801f4300  000056bc  2**0
                  CONTENTS
 74 .inttab_tc0_019 00000000  801f4320  801f4320  000056bc  2**0
                  CONTENTS
 75 .inttab_tc0_01A 00000000  801f4340  801f4340  000056bc  2**0
                  CONTENTS
 76 .inttab_tc0_01B 00000000  801f4360  801f4360  000056bc  2**0
                  CONTENTS
 77 .inttab_tc0_01C 00000000  801f4380  801f4380  000056bc  2**0
                  CONTENTS
 78 .inttab_tc0_01D 00000000  801f43a0  801f43a0  000056bc  2**0
                  CONTENTS
 79 .inttab_tc0_01E 00000000  801f43c0  801f43c0  000056bc  2**0
                  CONTENTS
 80 .inttab_tc0_01F 00000000  801f43e0  801f43e0  000056bc  2**0
                  CONTENTS
 81 .inttab_tc0_020 00000000  801f4400  801f4400  000056bc  2**0
                  CONTENTS
 82 .inttab_tc0_021 00000000  801f4420  801f4420  000056bc  2**0
                  CONTENTS
 83 .inttab_tc0_022 00000000  801f4440  801f4440  000056bc  2**0
                  CONTENTS
 84 .inttab_tc0_023 00000000  801f4460  801f4460  000056bc  2**0
                  CONTENTS
 85 .inttab_tc0_024 00000000  801f4480  801f4480  000056bc  2**0
                  CONTENTS
 86 .inttab_tc0_025 00000000  801f44a0  801f44a0  000056bc  2**0
                  CONTENTS
 87 .inttab_tc0_026 00000000  801f44c0  801f44c0  000056bc  2**0
                  CONTENTS
 88 .inttab_tc0_027 00000000  801f44e0  801f44e0  000056bc  2**0
                  CONTENTS
 89 .inttab_tc0_028 00000000  801f4500  801f4500  000056bc  2**0
                  CONTENTS
 90 .inttab_tc0_029 00000000  801f4520  801f4520  000056bc  2**0
                  CONTENTS
 91 .inttab_tc0_02A 00000000  801f4540  801f4540  000056bc  2**0
                  CONTENTS
 92 .inttab_tc0_02B 00000000  801f4560  801f4560  000056bc  2**0
                  CONTENTS
 93 .inttab_tc0_02C 00000000  801f4580  801f4580  000056bc  2**0
                  CONTENTS
 94 .inttab_tc0_02D 00000000  801f45a0  801f45a0  000056bc  2**0
                  CONTENTS
 95 .inttab_tc0_02E 00000000  801f45c0  801f45c0  000056bc  2**0
                  CONTENTS
 96 .inttab_tc0_02F 00000000  801f45e0  801f45e0  000056bc  2**0
                  CONTENTS
 97 .inttab_tc0_030 00000000  801f4600  801f4600  000056bc  2**0
                  CONTENTS
 98 .inttab_tc0_031 00000000  801f4620  801f4620  000056bc  2**0
                  CONTENTS
 99 .inttab_tc0_032 00000000  801f4640  801f4640  000056bc  2**0
                  CONTENTS
100 .inttab_tc0_033 00000000  801f4660  801f4660  000056bc  2**0
                  CONTENTS
101 .inttab_tc0_034 00000000  801f4680  801f4680  000056bc  2**0
                  CONTENTS
102 .inttab_tc0_035 00000000  801f46a0  801f46a0  000056bc  2**0
                  CONTENTS
103 .inttab_tc0_036 00000000  801f46c0  801f46c0  000056bc  2**0
                  CONTENTS
104 .inttab_tc0_037 00000000  801f46e0  801f46e0  000056bc  2**0
                  CONTENTS
105 .inttab_tc0_038 00000000  801f4700  801f4700  000056bc  2**0
                  CONTENTS
106 .inttab_tc0_039 00000000  801f4720  801f4720  000056bc  2**0
                  CONTENTS
107 .inttab_tc0_03A 00000000  801f4740  801f4740  000056bc  2**0
                  CONTENTS
108 .inttab_tc0_03B 00000000  801f4760  801f4760  000056bc  2**0
                  CONTENTS
109 .inttab_tc0_03C 00000000  801f4780  801f4780  000056bc  2**0
                  CONTENTS
110 .inttab_tc0_03D 00000000  801f47a0  801f47a0  000056bc  2**0
                  CONTENTS
111 .inttab_tc0_03E 00000000  801f47c0  801f47c0  000056bc  2**0
                  CONTENTS
112 .inttab_tc0_03F 00000000  801f47e0  801f47e0  000056bc  2**0
                  CONTENTS
113 .inttab_tc0_040 00000000  801f4800  801f4800  000056bc  2**0
                  CONTENTS
114 .inttab_tc0_041 00000000  801f4820  801f4820  000056bc  2**0
                  CONTENTS
115 .inttab_tc0_042 00000000  801f4840  801f4840  000056bc  2**0
                  CONTENTS
116 .inttab_tc0_043 00000000  801f4860  801f4860  000056bc  2**0
                  CONTENTS
117 .inttab_tc0_044 00000000  801f4880  801f4880  000056bc  2**0
                  CONTENTS
118 .inttab_tc0_045 00000000  801f48a0  801f48a0  000056bc  2**0
                  CONTENTS
119 .inttab_tc0_046 00000000  801f48c0  801f48c0  000056bc  2**0
                  CONTENTS
120 .inttab_tc0_047 00000000  801f48e0  801f48e0  000056bc  2**0
                  CONTENTS
121 .inttab_tc0_048 00000000  801f4900  801f4900  000056bc  2**0
                  CONTENTS
122 .inttab_tc0_049 00000000  801f4920  801f4920  000056bc  2**0
                  CONTENTS
123 .inttab_tc0_04A 00000000  801f4940  801f4940  000056bc  2**0
                  CONTENTS
124 .inttab_tc0_04B 00000000  801f4960  801f4960  000056bc  2**0
                  CONTENTS
125 .inttab_tc0_04C 00000000  801f4980  801f4980  000056bc  2**0
                  CONTENTS
126 .inttab_tc0_04D 00000000  801f49a0  801f49a0  000056bc  2**0
                  CONTENTS
127 .inttab_tc0_04E 00000000  801f49c0  801f49c0  000056bc  2**0
                  CONTENTS
128 .inttab_tc0_04F 00000000  801f49e0  801f49e0  000056bc  2**0
                  CONTENTS
129 .inttab_tc0_050 00000000  801f4a00  801f4a00  000056bc  2**0
                  CONTENTS
130 .inttab_tc0_051 00000000  801f4a20  801f4a20  000056bc  2**0
                  CONTENTS
131 .inttab_tc0_052 00000000  801f4a40  801f4a40  000056bc  2**0
                  CONTENTS
132 .inttab_tc0_053 00000000  801f4a60  801f4a60  000056bc  2**0
                  CONTENTS
133 .inttab_tc0_054 00000000  801f4a80  801f4a80  000056bc  2**0
                  CONTENTS
134 .inttab_tc0_055 00000000  801f4aa0  801f4aa0  000056bc  2**0
                  CONTENTS
135 .inttab_tc0_056 00000000  801f4ac0  801f4ac0  000056bc  2**0
                  CONTENTS
136 .inttab_tc0_057 00000000  801f4ae0  801f4ae0  000056bc  2**0
                  CONTENTS
137 .inttab_tc0_058 00000000  801f4b00  801f4b00  000056bc  2**0
                  CONTENTS
138 .inttab_tc0_059 00000000  801f4b20  801f4b20  000056bc  2**0
                  CONTENTS
139 .inttab_tc0_05A 00000000  801f4b40  801f4b40  000056bc  2**0
                  CONTENTS
140 .inttab_tc0_05B 00000000  801f4b60  801f4b60  000056bc  2**0
                  CONTENTS
141 .inttab_tc0_05C 00000000  801f4b80  801f4b80  000056bc  2**0
                  CONTENTS
142 .inttab_tc0_05D 00000000  801f4ba0  801f4ba0  000056bc  2**0
                  CONTENTS
143 .inttab_tc0_05E 00000000  801f4bc0  801f4bc0  000056bc  2**0
                  CONTENTS
144 .inttab_tc0_05F 00000000  801f4be0  801f4be0  000056bc  2**0
                  CONTENTS
145 .inttab_tc0_060 00000000  801f4c00  801f4c00  000056bc  2**0
                  CONTENTS
146 .inttab_tc0_061 00000000  801f4c20  801f4c20  000056bc  2**0
                  CONTENTS
147 .inttab_tc0_062 00000000  801f4c40  801f4c40  000056bc  2**0
                  CONTENTS
148 .inttab_tc0_063 00000000  801f4c60  801f4c60  000056bc  2**0
                  CONTENTS
149 .inttab_tc0_064 0000000e  801f4c80  801f4c80  00005478  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .inttab_tc0_065 00000000  801f4ca0  801f4ca0  000056bc  2**0
                  CONTENTS
151 .inttab_tc0_066 00000000  801f4cc0  801f4cc0  000056bc  2**0
                  CONTENTS
152 .inttab_tc0_067 00000000  801f4ce0  801f4ce0  000056bc  2**0
                  CONTENTS
153 .inttab_tc0_068 00000000  801f4d00  801f4d00  000056bc  2**0
                  CONTENTS
154 .inttab_tc0_069 00000000  801f4d20  801f4d20  000056bc  2**0
                  CONTENTS
155 .inttab_tc0_06A 00000000  801f4d40  801f4d40  000056bc  2**0
                  CONTENTS
156 .inttab_tc0_06B 00000000  801f4d60  801f4d60  000056bc  2**0
                  CONTENTS
157 .inttab_tc0_06C 00000000  801f4d80  801f4d80  000056bc  2**0
                  CONTENTS
158 .inttab_tc0_06D 00000000  801f4da0  801f4da0  000056bc  2**0
                  CONTENTS
159 .inttab_tc0_06E 00000000  801f4dc0  801f4dc0  000056bc  2**0
                  CONTENTS
160 .inttab_tc0_06F 00000000  801f4de0  801f4de0  000056bc  2**0
                  CONTENTS
161 .inttab_tc0_070 00000000  801f4e00  801f4e00  000056bc  2**0
                  CONTENTS
162 .inttab_tc0_071 00000000  801f4e20  801f4e20  000056bc  2**0
                  CONTENTS
163 .inttab_tc0_072 00000000  801f4e40  801f4e40  000056bc  2**0
                  CONTENTS
164 .inttab_tc0_073 00000000  801f4e60  801f4e60  000056bc  2**0
                  CONTENTS
165 .inttab_tc0_074 00000000  801f4e80  801f4e80  000056bc  2**0
                  CONTENTS
166 .inttab_tc0_075 00000000  801f4ea0  801f4ea0  000056bc  2**0
                  CONTENTS
167 .inttab_tc0_076 00000000  801f4ec0  801f4ec0  000056bc  2**0
                  CONTENTS
168 .inttab_tc0_077 00000000  801f4ee0  801f4ee0  000056bc  2**0
                  CONTENTS
169 .inttab_tc0_078 00000000  801f4f00  801f4f00  000056bc  2**0
                  CONTENTS
170 .inttab_tc0_079 00000000  801f4f20  801f4f20  000056bc  2**0
                  CONTENTS
171 .inttab_tc0_07A 00000000  801f4f40  801f4f40  000056bc  2**0
                  CONTENTS
172 .inttab_tc0_07B 00000000  801f4f60  801f4f60  000056bc  2**0
                  CONTENTS
173 .inttab_tc0_07C 00000000  801f4f80  801f4f80  000056bc  2**0
                  CONTENTS
174 .inttab_tc0_07D 00000000  801f4fa0  801f4fa0  000056bc  2**0
                  CONTENTS
175 .inttab_tc0_07E 00000000  801f4fc0  801f4fc0  000056bc  2**0
                  CONTENTS
176 .inttab_tc0_07F 00000000  801f4fe0  801f4fe0  000056bc  2**0
                  CONTENTS
177 .inttab_tc0_080 00000000  801f5000  801f5000  000056bc  2**0
                  CONTENTS
178 .inttab_tc0_081 00000000  801f5020  801f5020  000056bc  2**0
                  CONTENTS
179 .inttab_tc0_082 00000000  801f5040  801f5040  000056bc  2**0
                  CONTENTS
180 .inttab_tc0_083 00000000  801f5060  801f5060  000056bc  2**0
                  CONTENTS
181 .inttab_tc0_084 00000000  801f5080  801f5080  000056bc  2**0
                  CONTENTS
182 .inttab_tc0_085 00000000  801f50a0  801f50a0  000056bc  2**0
                  CONTENTS
183 .inttab_tc0_086 00000000  801f50c0  801f50c0  000056bc  2**0
                  CONTENTS
184 .inttab_tc0_087 00000000  801f50e0  801f50e0  000056bc  2**0
                  CONTENTS
185 .inttab_tc0_088 00000000  801f5100  801f5100  000056bc  2**0
                  CONTENTS
186 .inttab_tc0_089 00000000  801f5120  801f5120  000056bc  2**0
                  CONTENTS
187 .inttab_tc0_08A 00000000  801f5140  801f5140  000056bc  2**0
                  CONTENTS
188 .inttab_tc0_08B 00000000  801f5160  801f5160  000056bc  2**0
                  CONTENTS
189 .inttab_tc0_08C 00000000  801f5180  801f5180  000056bc  2**0
                  CONTENTS
190 .inttab_tc0_08D 00000000  801f51a0  801f51a0  000056bc  2**0
                  CONTENTS
191 .inttab_tc0_08E 00000000  801f51c0  801f51c0  000056bc  2**0
                  CONTENTS
192 .inttab_tc0_08F 00000000  801f51e0  801f51e0  000056bc  2**0
                  CONTENTS
193 .inttab_tc0_090 00000000  801f5200  801f5200  000056bc  2**0
                  CONTENTS
194 .inttab_tc0_091 00000000  801f5220  801f5220  000056bc  2**0
                  CONTENTS
195 .inttab_tc0_092 00000000  801f5240  801f5240  000056bc  2**0
                  CONTENTS
196 .inttab_tc0_093 00000000  801f5260  801f5260  000056bc  2**0
                  CONTENTS
197 .inttab_tc0_094 00000000  801f5280  801f5280  000056bc  2**0
                  CONTENTS
198 .inttab_tc0_095 00000000  801f52a0  801f52a0  000056bc  2**0
                  CONTENTS
199 .inttab_tc0_096 00000000  801f52c0  801f52c0  000056bc  2**0
                  CONTENTS
200 .inttab_tc0_097 00000000  801f52e0  801f52e0  000056bc  2**0
                  CONTENTS
201 .inttab_tc0_098 00000000  801f5300  801f5300  000056bc  2**0
                  CONTENTS
202 .inttab_tc0_099 00000000  801f5320  801f5320  000056bc  2**0
                  CONTENTS
203 .inttab_tc0_09A 00000000  801f5340  801f5340  000056bc  2**0
                  CONTENTS
204 .inttab_tc0_09B 00000000  801f5360  801f5360  000056bc  2**0
                  CONTENTS
205 .inttab_tc0_09C 00000000  801f5380  801f5380  000056bc  2**0
                  CONTENTS
206 .inttab_tc0_09D 00000000  801f53a0  801f53a0  000056bc  2**0
                  CONTENTS
207 .inttab_tc0_09E 00000000  801f53c0  801f53c0  000056bc  2**0
                  CONTENTS
208 .inttab_tc0_09F 00000000  801f53e0  801f53e0  000056bc  2**0
                  CONTENTS
209 .inttab_tc0_0A0 00000000  801f5400  801f5400  000056bc  2**0
                  CONTENTS
210 .inttab_tc0_0A1 00000000  801f5420  801f5420  000056bc  2**0
                  CONTENTS
211 .inttab_tc0_0A2 00000000  801f5440  801f5440  000056bc  2**0
                  CONTENTS
212 .inttab_tc0_0A3 00000000  801f5460  801f5460  000056bc  2**0
                  CONTENTS
213 .inttab_tc0_0A4 00000000  801f5480  801f5480  000056bc  2**0
                  CONTENTS
214 .inttab_tc0_0A5 00000000  801f54a0  801f54a0  000056bc  2**0
                  CONTENTS
215 .inttab_tc0_0A6 00000000  801f54c0  801f54c0  000056bc  2**0
                  CONTENTS
216 .inttab_tc0_0A7 00000000  801f54e0  801f54e0  000056bc  2**0
                  CONTENTS
217 .inttab_tc0_0A8 00000000  801f5500  801f5500  000056bc  2**0
                  CONTENTS
218 .inttab_tc0_0A9 00000000  801f5520  801f5520  000056bc  2**0
                  CONTENTS
219 .inttab_tc0_0AA 00000000  801f5540  801f5540  000056bc  2**0
                  CONTENTS
220 .inttab_tc0_0AB 00000000  801f5560  801f5560  000056bc  2**0
                  CONTENTS
221 .inttab_tc0_0AC 00000000  801f5580  801f5580  000056bc  2**0
                  CONTENTS
222 .inttab_tc0_0AD 00000000  801f55a0  801f55a0  000056bc  2**0
                  CONTENTS
223 .inttab_tc0_0AE 00000000  801f55c0  801f55c0  000056bc  2**0
                  CONTENTS
224 .inttab_tc0_0AF 00000000  801f55e0  801f55e0  000056bc  2**0
                  CONTENTS
225 .inttab_tc0_0B0 00000000  801f5600  801f5600  000056bc  2**0
                  CONTENTS
226 .inttab_tc0_0B1 00000000  801f5620  801f5620  000056bc  2**0
                  CONTENTS
227 .inttab_tc0_0B2 00000000  801f5640  801f5640  000056bc  2**0
                  CONTENTS
228 .inttab_tc0_0B3 00000000  801f5660  801f5660  000056bc  2**0
                  CONTENTS
229 .inttab_tc0_0B4 00000000  801f5680  801f5680  000056bc  2**0
                  CONTENTS
230 .inttab_tc0_0B5 00000000  801f56a0  801f56a0  000056bc  2**0
                  CONTENTS
231 .inttab_tc0_0B6 00000000  801f56c0  801f56c0  000056bc  2**0
                  CONTENTS
232 .inttab_tc0_0B7 00000000  801f56e0  801f56e0  000056bc  2**0
                  CONTENTS
233 .inttab_tc0_0B8 00000000  801f5700  801f5700  000056bc  2**0
                  CONTENTS
234 .inttab_tc0_0B9 00000000  801f5720  801f5720  000056bc  2**0
                  CONTENTS
235 .inttab_tc0_0BA 00000000  801f5740  801f5740  000056bc  2**0
                  CONTENTS
236 .inttab_tc0_0BB 00000000  801f5760  801f5760  000056bc  2**0
                  CONTENTS
237 .inttab_tc0_0BC 00000000  801f5780  801f5780  000056bc  2**0
                  CONTENTS
238 .inttab_tc0_0BD 00000000  801f57a0  801f57a0  000056bc  2**0
                  CONTENTS
239 .inttab_tc0_0BE 00000000  801f57c0  801f57c0  000056bc  2**0
                  CONTENTS
240 .inttab_tc0_0BF 00000000  801f57e0  801f57e0  000056bc  2**0
                  CONTENTS
241 .inttab_tc0_0C0 00000000  801f5800  801f5800  000056bc  2**0
                  CONTENTS
242 .inttab_tc0_0C1 00000000  801f5820  801f5820  000056bc  2**0
                  CONTENTS
243 .inttab_tc0_0C2 00000000  801f5840  801f5840  000056bc  2**0
                  CONTENTS
244 .inttab_tc0_0C3 00000000  801f5860  801f5860  000056bc  2**0
                  CONTENTS
245 .inttab_tc0_0C4 00000000  801f5880  801f5880  000056bc  2**0
                  CONTENTS
246 .inttab_tc0_0C5 00000000  801f58a0  801f58a0  000056bc  2**0
                  CONTENTS
247 .inttab_tc0_0C6 00000000  801f58c0  801f58c0  000056bc  2**0
                  CONTENTS
248 .inttab_tc0_0C7 00000000  801f58e0  801f58e0  000056bc  2**0
                  CONTENTS
249 .inttab_tc0_0C8 0000000e  801f5900  801f5900  00005486  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .inttab_tc0_0C9 00000000  801f5920  801f5920  000056bc  2**0
                  CONTENTS
251 .inttab_tc0_0CA 00000000  801f5940  801f5940  000056bc  2**0
                  CONTENTS
252 .inttab_tc0_0CB 00000000  801f5960  801f5960  000056bc  2**0
                  CONTENTS
253 .inttab_tc0_0CC 00000000  801f5980  801f5980  000056bc  2**0
                  CONTENTS
254 .inttab_tc0_0CD 00000000  801f59a0  801f59a0  000056bc  2**0
                  CONTENTS
255 .inttab_tc0_0CE 00000000  801f59c0  801f59c0  000056bc  2**0
                  CONTENTS
256 .inttab_tc0_0CF 00000000  801f59e0  801f59e0  000056bc  2**0
                  CONTENTS
257 .inttab_tc0_0D0 00000000  801f5a00  801f5a00  000056bc  2**0
                  CONTENTS
258 .inttab_tc0_0D1 00000000  801f5a20  801f5a20  000056bc  2**0
                  CONTENTS
259 .inttab_tc0_0D2 00000000  801f5a40  801f5a40  000056bc  2**0
                  CONTENTS
260 .inttab_tc0_0D3 00000000  801f5a60  801f5a60  000056bc  2**0
                  CONTENTS
261 .inttab_tc0_0D4 00000000  801f5a80  801f5a80  000056bc  2**0
                  CONTENTS
262 .inttab_tc0_0D5 00000000  801f5aa0  801f5aa0  000056bc  2**0
                  CONTENTS
263 .inttab_tc0_0D6 00000000  801f5ac0  801f5ac0  000056bc  2**0
                  CONTENTS
264 .inttab_tc0_0D7 00000000  801f5ae0  801f5ae0  000056bc  2**0
                  CONTENTS
265 .inttab_tc0_0D8 00000000  801f5b00  801f5b00  000056bc  2**0
                  CONTENTS
266 .inttab_tc0_0D9 00000000  801f5b20  801f5b20  000056bc  2**0
                  CONTENTS
267 .inttab_tc0_0DA 00000000  801f5b40  801f5b40  000056bc  2**0
                  CONTENTS
268 .inttab_tc0_0DB 00000000  801f5b60  801f5b60  000056bc  2**0
                  CONTENTS
269 .inttab_tc0_0DC 00000000  801f5b80  801f5b80  000056bc  2**0
                  CONTENTS
270 .inttab_tc0_0DD 00000000  801f5ba0  801f5ba0  000056bc  2**0
                  CONTENTS
271 .inttab_tc0_0DE 00000000  801f5bc0  801f5bc0  000056bc  2**0
                  CONTENTS
272 .inttab_tc0_0DF 00000000  801f5be0  801f5be0  000056bc  2**0
                  CONTENTS
273 .inttab_tc0_0E0 00000000  801f5c00  801f5c00  000056bc  2**0
                  CONTENTS
274 .inttab_tc0_0E1 00000000  801f5c20  801f5c20  000056bc  2**0
                  CONTENTS
275 .inttab_tc0_0E2 00000000  801f5c40  801f5c40  000056bc  2**0
                  CONTENTS
276 .inttab_tc0_0E3 00000000  801f5c60  801f5c60  000056bc  2**0
                  CONTENTS
277 .inttab_tc0_0E4 00000000  801f5c80  801f5c80  000056bc  2**0
                  CONTENTS
278 .inttab_tc0_0E5 00000000  801f5ca0  801f5ca0  000056bc  2**0
                  CONTENTS
279 .inttab_tc0_0E6 00000000  801f5cc0  801f5cc0  000056bc  2**0
                  CONTENTS
280 .inttab_tc0_0E7 00000000  801f5ce0  801f5ce0  000056bc  2**0
                  CONTENTS
281 .inttab_tc0_0E8 00000000  801f5d00  801f5d00  000056bc  2**0
                  CONTENTS
282 .inttab_tc0_0E9 00000000  801f5d20  801f5d20  000056bc  2**0
                  CONTENTS
283 .inttab_tc0_0EA 00000000  801f5d40  801f5d40  000056bc  2**0
                  CONTENTS
284 .inttab_tc0_0EB 00000000  801f5d60  801f5d60  000056bc  2**0
                  CONTENTS
285 .inttab_tc0_0EC 00000000  801f5d80  801f5d80  000056bc  2**0
                  CONTENTS
286 .inttab_tc0_0ED 00000000  801f5da0  801f5da0  000056bc  2**0
                  CONTENTS
287 .inttab_tc0_0EE 00000000  801f5dc0  801f5dc0  000056bc  2**0
                  CONTENTS
288 .inttab_tc0_0EF 00000000  801f5de0  801f5de0  000056bc  2**0
                  CONTENTS
289 .inttab_tc0_0F0 00000000  801f5e00  801f5e00  000056bc  2**0
                  CONTENTS
290 .inttab_tc0_0F1 00000000  801f5e20  801f5e20  000056bc  2**0
                  CONTENTS
291 .inttab_tc0_0F2 00000000  801f5e40  801f5e40  000056bc  2**0
                  CONTENTS
292 .inttab_tc0_0F3 00000000  801f5e60  801f5e60  000056bc  2**0
                  CONTENTS
293 .inttab_tc0_0F4 00000000  801f5e80  801f5e80  000056bc  2**0
                  CONTENTS
294 .inttab_tc0_0F5 00000000  801f5ea0  801f5ea0  000056bc  2**0
                  CONTENTS
295 .inttab_tc0_0F6 00000000  801f5ec0  801f5ec0  000056bc  2**0
                  CONTENTS
296 .inttab_tc0_0F7 00000000  801f5ee0  801f5ee0  000056bc  2**0
                  CONTENTS
297 .inttab_tc0_0F8 00000000  801f5f00  801f5f00  000056bc  2**0
                  CONTENTS
298 .inttab_tc0_0F9 00000000  801f5f20  801f5f20  000056bc  2**0
                  CONTENTS
299 .inttab_tc0_0FA 00000000  801f5f40  801f5f40  000056bc  2**0
                  CONTENTS
300 .inttab_tc0_0FB 00000000  801f5f60  801f5f60  000056bc  2**0
                  CONTENTS
301 .inttab_tc0_0FC 00000000  801f5f80  801f5f80  000056bc  2**0
                  CONTENTS
302 .inttab_tc0_0FD 00000000  801f5fa0  801f5fa0  000056bc  2**0
                  CONTENTS
303 .inttab_tc0_0FE 00000000  801f5fc0  801f5fc0  000056bc  2**0
                  CONTENTS
304 .inttab_tc0_0FF 00000000  801f5fe0  801f5fe0  000056bc  2**0
                  CONTENTS
305 .comment      0000001b  00000000  00000000  000056bc  2**0
                  CONTENTS, READONLY
306 .debug_aranges 00000c78  00000000  00000000  000056d8  2**3
                  CONTENTS, READONLY, DEBUGGING
307 .debug_info   0017f826  00000000  00000000  00006350  2**0
                  CONTENTS, READONLY, DEBUGGING
308 .debug_abbrev 00006e19  00000000  00000000  00185b76  2**0
                  CONTENTS, READONLY, DEBUGGING
309 .debug_line   0001aff3  00000000  00000000  0018c98f  2**0
                  CONTENTS, READONLY, DEBUGGING
310 .debug_frame  00001ac8  00000000  00000000  001a7984  2**2
                  CONTENTS, READONLY, DEBUGGING
311 .debug_str    00005b8c  00000000  00000000  001a944c  2**0
                  CONTENTS, READONLY, DEBUGGING
312 .debug_loc    0000b7ab  00000000  00000000  001aefd8  2**0
                  CONTENTS, READONLY, DEBUGGING
313 .debug_ranges 00001210  00000000  00000000  001ba788  2**3
                  CONTENTS, READONLY, DEBUGGING
314 .debug_macro  000ed688  00000000  00000000  001bb998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startup:

80000020 <_START>:
#elif defined(__DCC__)
#pragma section CODE ".start" X
#endif

void _START(void)
{
80000020:	40 ae       	mov.aa %a14,%sp
    __non_return_call(_Core0_start);
80000022:	91 00 00 28 	movh.a %a2,32768
80000026:	d9 22 ee 63 	lea %a2,[%a2]15790 <80003dae <_Core0_start>>
8000002a:	dc 02       	ji %a2
}
8000002c:	00 90       	ret 

8000002e <_START_end>:
8000002e:	08 00       	ld.bu %d0,[%a15]0

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 b0 53 	lea %a2,[%a2]14704 <80003970 <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 9e 63 	lea %a2,[%a2]14750 <8000399e <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 8c 73 	lea %a2,[%a2]14796 <800039cc <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 ba 73 	lea %a2,[%a2]14842 <800039fa <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 a8 83 	lea %a2,[%a2]14888 <80003a28 <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 96 93 	lea %a2,[%a2]14934 <80003a56 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 8a a3 	lea %a2,[%a2]14986 <80003a8a <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 8e c3 	lea %a2,[%a2]15118 <80003b0e <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .text:

800005b8 <deregister_tm_clones>:
800005b8:	7b 00 00 26 	movh %d2,24576
800005bc:	1b c2 01 20 	addi %d2,%d2,28
800005c0:	91 00 00 46 	movh.a %a4,24576
800005c4:	60 22       	mov.a %a2,%d2
800005c6:	d9 44 1c 00 	lea %a4,[%a4]28 <6000001c <__TMC_END__>>
800005ca:	7d 42 0a 00 	jeq.a %a2,%a4,800005de <deregister_tm_clones+0x26>
800005ce:	91 00 00 20 	movh.a %a2,0
800005d2:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
800005d6:	bd 02 04 00 	jz.a %a2,800005de <deregister_tm_clones+0x26>
800005da:	2d 02 00 00 	calli %a2
800005de:	00 90       	ret 

800005e0 <register_tm_clones>:
800005e0:	7b 00 00 26 	movh %d2,24576
800005e4:	1b c2 01 20 	addi %d2,%d2,28
800005e8:	91 00 00 46 	movh.a %a4,24576
800005ec:	60 22       	mov.a %a2,%d2
800005ee:	d9 44 1c 00 	lea %a4,[%a4]28 <6000001c <__TMC_END__>>
800005f2:	01 42 20 20 	sub.a %a2,%a2,%a4
800005f6:	80 22       	mov.d %d2,%a2
800005f8:	8f e2 3f 30 	sha %d3,%d2,-2
800005fc:	8f 12 1e 20 	sh %d2,%d2,-31
80000600:	42 32       	add %d2,%d3
80000602:	8f f2 3f 40 	sha %d4,%d2,-1
80000606:	df 04 0a 00 	jeq %d4,0,8000061a <register_tm_clones+0x3a>
8000060a:	91 00 00 20 	movh.a %a2,0
8000060e:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
80000612:	bd 02 04 00 	jz.a %a2,8000061a <register_tm_clones+0x3a>
80000616:	2d 02 00 00 	calli %a2
8000061a:	00 90       	ret 

8000061c <__do_global_dtors_aux>:
8000061c:	91 00 00 e6 	movh.a %a14,24576
80000620:	39 e2 20 00 	ld.bu %d2,[%a14]32 <60000020 <completed.1>>
80000624:	df 02 2d 80 	jne %d2,0,8000067e <__do_global_dtors_aux+0x62>
80000628:	91 00 00 38 	movh.a %a3,32768
8000062c:	91 00 00 28 	movh.a %a2,32768
80000630:	d9 33 18 a5 	lea %a3,[%a3]21144 <80005298 <__DTOR_END__>>
80000634:	d9 22 0c a5 	lea %a2,[%a2]21132 <8000528c <__DTOR_LIST__>>
80000638:	01 23 20 20 	sub.a %a2,%a3,%a2
8000063c:	80 22       	mov.d %d2,%a2
8000063e:	86 e2       	sha %d2,-2
80000640:	1b f2 ff 8f 	addi %d8,%d2,-1
80000644:	91 00 00 c6 	movh.a %a12,24576
80000648:	7b 00 00 28 	movh %d2,32768
8000064c:	1b c2 28 25 	addi %d2,%d2,21132
80000650:	60 2d       	mov.a %a13,%d2
80000652:	19 c2 24 00 	ld.w %d2,[%a12]36 <60000024 <dtor_idx.0>>
80000656:	7f 82 0f 80 	jge.u %d2,%d8,80000674 <__do_global_dtors_aux+0x58>
8000065a:	d9 cc 24 00 	lea %a12,[%a12]36 <60000024 <dtor_idx.0>>
8000065e:	c2 12       	add %d2,1
80000660:	74 c2       	st.w [%a12],%d2
80000662:	06 22       	sh %d2,2
80000664:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000668:	d4 22       	ld.a %a2,[%a2]
8000066a:	2d 02 00 00 	calli %a2
8000066e:	54 c2       	ld.w %d2,[%a12]
80000670:	3f 82 f7 ff 	jlt.u %d2,%d8,8000065e <__do_global_dtors_aux+0x42>
80000674:	6d ff a2 ff 	call 800005b8 <deregister_tm_clones>
80000678:	82 12       	mov %d2,1
8000067a:	e9 e2 20 00 	st.b [%a14]32 <60000020 <completed.1>>,%d2
8000067e:	00 90       	ret 

80000680 <frame_dummy>:
80000680:	6d ff b0 ff 	call 800005e0 <register_tm_clones>
80000684:	00 90       	ret 

80000686 <Task1ms>:
         }
    }
}

void Task1ms(void)
{
80000686:	40 ae       	mov.aa %a14,%sp
    cnt1ms++;
80000688:	91 00 00 26 	movh.a %a2,24576
8000068c:	d9 23 3c 50 	lea %a3,[%a2]380 <6000017c <cnt1ms>>
80000690:	54 32       	ld.w %d2,[%a3]
80000692:	c2 12       	add %d2,1
80000694:	59 22 3c 50 	st.w [%a2]380 <6000017c <cnt1ms>>,%d2
    //IfxPort_togglePin(&MODULE_P10,1);// Red LED
}
80000698:	00 90       	ret 

8000069a <Task10ms>:

void Task10ms(void)
{
8000069a:	40 ae       	mov.aa %a14,%sp
    cnt10ms++;
8000069c:	91 00 00 26 	movh.a %a2,24576
800006a0:	d9 23 38 50 	lea %a3,[%a2]376 <60000178 <cnt10ms>>
800006a4:	54 32       	ld.w %d2,[%a3]
800006a6:	c2 12       	add %d2,1
800006a8:	59 22 38 50 	st.w [%a2]376 <60000178 <cnt10ms>>,%d2
    //IfxPort_togglePin(&MODULE_P10,5);// Green LED
}
800006ac:	00 90       	ret 

800006ae <Task100ms>:

void Task100ms(void)
{
800006ae:	40 ae       	mov.aa %a14,%sp
    cnt100ms++;
800006b0:	91 00 00 26 	movh.a %a2,24576
800006b4:	d9 23 34 50 	lea %a3,[%a2]372 <60000174 <cnt100ms>>
800006b8:	54 32       	ld.w %d2,[%a3]
800006ba:	c2 12       	add %d2,1
800006bc:	59 22 34 50 	st.w [%a2]372 <60000174 <cnt100ms>>,%d2

    //ADC_G4_GetData();
    PWM_dutyUpdate();
800006c0:	6d 00 a8 00 	call 80000810 <PWM_dutyUpdate>
    //IfxPort_togglePin(&MODULE_P10,2);// Blue LED
}
800006c4:	00 90       	ret 

800006c6 <AppScheduling>:
{
800006c6:	40 ae       	mov.aa %a14,%sp
    if(Scheduler1msFlag == 1)
800006c8:	91 00 00 26 	movh.a %a2,24576
800006cc:	19 22 30 00 	ld.w %d2,[%a2]48 <60000030 <Scheduler1msFlag>>
800006d0:	df 12 03 00 	jeq %d2,1,800006d6 <AppScheduling+0x10>
}
800006d4:	00 90       	ret 
        Scheduler1msFlag = 0;
800006d6:	82 02       	mov %d2,0
800006d8:	59 22 30 00 	st.w [%a2]48,%d2
        Task1ms();
800006dc:	6d ff d5 ff 	call 80000686 <Task1ms>
        if(Scheduler10msFlag == 1)
800006e0:	91 00 00 26 	movh.a %a2,24576
800006e4:	19 22 2c 00 	ld.w %d2,[%a2]44 <6000002c <Scheduler10msFlag>>
800006e8:	df 12 0f 00 	jeq %d2,1,80000706 <AppScheduling+0x40>
        if(Scheduler100msFlag == 1)
800006ec:	91 00 00 26 	movh.a %a2,24576
800006f0:	19 22 28 00 	ld.w %d2,[%a2]40 <60000028 <Scheduler100msFlag>>
800006f4:	df 12 f0 ff 	jne %d2,1,800006d4 <AppScheduling+0xe>
             Scheduler100msFlag = 0;
800006f8:	82 02       	mov %d2,0
800006fa:	59 22 28 00 	st.w [%a2]40 <60000028 <Scheduler100msFlag>>,%d2
             Task100ms();
800006fe:	6d ff d8 ff 	call 800006ae <Task100ms>
}
80000702:	1d ff e9 ff 	j 800006d4 <AppScheduling+0xe>
            Scheduler10msFlag = 0;
80000706:	82 02       	mov %d2,0
80000708:	59 22 2c 00 	st.w [%a2]44,%d2
            Task10ms();
8000070c:	6d ff c7 ff 	call 8000069a <Task10ms>
80000710:	1d ff ee ff 	j 800006ec <AppScheduling+0x26>

80000714 <init_STM>:
uint32 Scheduler100msFlag = 0;


//IfxStm_CompareConfig     stmConfig;
void init_STM(void)
{
80000714:	40 ae       	mov.aa %a14,%sp
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80000716:	4d c0 e2 8f 	mfcr %d8,$icr
    return reg.B.IE != 0;
8000071a:	37 08 e1 87 	extr.u %d8,%d8,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000071e:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80000722:	00 00       	nop 
    boolean ISR_State = IfxCpu_disableInterrupts();     // 진행 중인 인터럽트를 반환 및 인터럽트 중지

    IfxStm_enableOcdsSuspend(STM0);                     //OCDS: on chip debugging system [디버깅 시,cpu 중단하면 타이머도 같이 중단되도록 설정(시스템 상태분석 용이)]
80000724:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
80000728:	6d 00 8f 07 	call 80001646 <IfxStm_enableOcdsSuspend>
    IfxStm_initCompareConfig(&stmConfig);                // 비교기능 구조체 초기화 (초기값 정의)
8000072c:	91 00 00 c6 	movh.a %a12,24576
80000730:	d9 cc 00 60 	lea %a12,[%a12]384 <60000180 <stmConfig>>
80000734:	40 c4       	mov.aa %a4,%a12
80000736:	6d 00 65 08 	call 80001800 <IfxStm_initCompareConfig>

    stmConfig.ticks           = 100000000u;             // 주기 (비교 값) 설정 1초 뒤 시작
8000073a:	7b 60 5f 20 	movh %d2,1526
8000073e:	1b 02 10 2e 	addi %d2,%d2,-7936
80000742:	59 c2 10 00 	st.w [%a12]16 <60000010 <LCF_DSPR1_START+0x10>>,%d2
    stmConfig.triggerPriority = 100u;                   // STM 모듈에서 발생한 인터럽트 우선순위 설정 100번째 함수
80000746:	3b 40 06 20 	mov %d2,100
8000074a:	f9 c2 14 00 	st.h [%a12]20 <60000014 <LCF_DSPR1_START+0x14>>,%d2
    stmConfig.typeOfService   = IfxSrc_Tos_cpu0;        // STM에서 발생한 인터럽트를 cpu0에서 처리하도록 설정
8000074e:	82 02       	mov %d2,0
80000750:	59 c2 18 00 	st.w [%a12]24 <60000018 <IfxScuCcu_xtalFrequency>>,%d2

    IfxStm_initCompare(STM0, &stmConfig);               // STM0의 비교기 초기화 및 설정 값 적용 (stmConfig로 바꿈)
80000754:	40 c5       	mov.aa %a5,%a12
80000756:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000075a:	6d 00 aa 07 	call 800016ae <IfxStm_initCompare>
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000075e:	df 08 04 00 	jeq %d8,0,80000766 <init_STM+0x52>
    {
        __enable();
80000762:	0d 00 00 03 	enable 

    IfxCpu_restoreInterrupts(ISR_State);                // 진행 중이던 인터럽트 상태 복원
}
80000766:	00 90       	ret 

80000768 <ISR_STM>:


IFX_INTERRUPT(ISR_STM,0,100);

void ISR_STM(void)
{
80000768:	40 ae       	mov.aa %a14,%sp
    __enable();
8000076a:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxStm_clearCompareFlag(STM0, stmConfig.comparator);
8000076e:	91 00 00 c6 	movh.a %a12,24576
80000772:	19 c4 00 60 	ld.w %d4,[%a12]384 <60000180 <stmConfig>>
80000776:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000077a:	6d 00 38 07 	call 800015ea <IfxStm_clearCompareFlag>
    //1. 주기 1ms 설정 (1000000/100ㅡ = 0.001)
    IfxStm_increaseCompare(STM0, stmConfig.comparator, 100000000u*ADC_G4_RAWDATA[7]);     // 비교 값 업데이트 (10000000u를 바꾸면 주기가 바뀜)
8000077e:	19 c3 00 60 	ld.w %d3,[%a12]384 <60000180 <stmConfig>>
80000782:	91 00 00 26 	movh.a %a2,24576
80000786:	d9 22 34 30 	lea %a2,[%a2]244 <600000f4 <ADC_G4_RAWDATA>>
8000078a:	b9 22 0e 00 	ld.hu %d2,[%a2]14 <6000000e <LCF_DSPR1_START+0xe>>
}


IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
{
    stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
8000078e:	1b c3 00 30 	addi %d3,%d3,12
80000792:	06 23       	sh %d3,2
80000794:	60 32       	mov.a %a2,%d3
80000796:	11 02 00 2f 	addih.a %a2,%a2,61440
8000079a:	54 23       	ld.w %d3,[%a2]
8000079c:	7b 60 5f 40 	movh %d4,1526
800007a0:	1b 04 10 4e 	addi %d4,%d4,-7936
800007a4:	03 42 0a 23 	madd %d2,%d3,%d2,%d4
800007a8:	74 22       	st.w [%a2],%d2

    counter1ms++;
800007aa:	91 00 00 26 	movh.a %a2,24576
800007ae:	d9 23 34 00 	lea %a3,[%a2]52 <60000034 <counter1ms>>
800007b2:	54 32       	ld.w %d2,[%a3]
800007b4:	c2 12       	add %d2,1
800007b6:	59 22 34 00 	st.w [%a2]52 <60000034 <counter1ms>>,%d2

    if((counter1ms%1)==0){Scheduler1msFlag = 1;}
800007ba:	91 00 00 26 	movh.a %a2,24576
800007be:	82 13       	mov %d3,1
800007c0:	59 23 30 00 	st.w [%a2]48 <60000030 <Scheduler1msFlag>>,%d3
    if((counter1ms%2) == 0){Scheduler10msFlag =1;}
800007c4:	6f 02 06 80 	jnz.t %d2,0,800007d0 <ISR_STM+0x68>
800007c8:	91 00 00 26 	movh.a %a2,24576
800007cc:	59 23 2c 00 	st.w [%a2]44 <6000002c <Scheduler10msFlag>>,%d3
    if((counter1ms % 3) == 0){Scheduler100msFlag = 1;}
800007d0:	7b b0 aa 4a 	movh %d4,43691
800007d4:	1b b4 aa 4a 	addi %d4,%d4,-21845
800007d8:	73 42 68 40 	mul.u %e4,%d2,%d4
800007dc:	8f f5 1f 30 	sh %d3,%d5,-1
800007e0:	53 33 20 30 	mul %d3,%d3,3
800007e4:	5f 32 07 80 	jne %d2,%d3,800007f2 <ISR_STM+0x8a>
800007e8:	91 00 00 26 	movh.a %a2,24576
800007ec:	82 12       	mov %d2,1
800007ee:	59 22 28 00 	st.w [%a2]40 <60000028 <Scheduler100msFlag>>,%d2


    //IfxPort_togglePin(PORT_005);
}
800007f2:	0d 00 40 02 	rslcx 
800007f6:	00 80       	rfe 

800007f8 <ISR_PWM_GTM>:
}

IFX_INTERRUPT(ISR_PWM_GTM, 0, PRIORITY_GTM);

void ISR_PWM_GTM(void)
{
800007f8:	40 ae       	mov.aa %a14,%sp
800007fa:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxGtm_Tom_Timer_acknowledgeTimerIrq(&GtmPwmHl.timer);
800007fe:	91 00 00 46 	movh.a %a4,24576
80000802:	d9 44 00 10 	lea %a4,[%a4]64 <60000040 <GtmPwmHl>>
80000806:	6d 00 1d 0d 	call 80002240 <IfxGtm_Tom_Timer_acknowledgeTimerIrq>
}
8000080a:	0d 00 40 02 	rslcx 
8000080e:	00 80       	rfe 

80000810 <PWM_dutyUpdate>:
    IfxGtm_Tom_Timer_run(&GtmPwmHl.timer); /*타이머 및 PWM 시작*/

}

void PWM_dutyUpdate()
{
80000810:	40 ae       	mov.aa %a14,%sp
80000812:	20 08       	sub.a %sp,8
    IfxGtm_Tom_PwmHl *pwmHl = &GtmPwmHl.pwm;
    IfxGtm_Tom_Timer *timer =&GtmPwmHl.timer;

    Ifx_TimerValue timerPeriod = IfxGtm_Tom_Timer_getPeriod(timer); /*=타이머 한 주기 tic 수*/
80000814:	91 00 00 c6 	movh.a %a12,24576
80000818:	d9 cc 00 10 	lea %a12,[%a12]64 <60000040 <GtmPwmHl>>
8000081c:	40 c4       	mov.aa %a4,%a12
8000081e:	6d 00 44 0d 	call 800022a6 <IfxGtm_Tom_Timer_getPeriod>
    Ifx_TimerValue Duty2Tic[2];

    Duty2Tic[0] = (uint32)(GtmPwmHl.duty[0]*timerPeriod); /*듀티 값을 Tic 수로 환산*/
80000822:	19 c3 1c 20 	ld.w %d3,[%a12]156 <6000009c <GtmPwmHl+0x5c>>
80000826:	4b 02 61 21 	utof %d2,%d2
8000082a:	4b 23 41 30 	mul.f %d3,%d3,%d2
8000082e:	4b 03 71 31 	ftouz %d3,%d3
80000832:	59 e3 f8 ff 	st.w [%a14]-8,%d3
    Duty2Tic[1] = (uint32)(GtmPwmHl.duty[1]*timerPeriod); /*듀티 값을 Tic 수로 환산*/
80000836:	19 c3 20 20 	ld.w %d3,[%a12]160 <600000a0 <GtmPwmHl+0x60>>
8000083a:	4b 32 41 20 	mul.f %d2,%d2,%d3
8000083e:	4b 02 71 21 	ftouz %d2,%d2
80000842:	59 e2 fc ff 	st.w [%a14]-4,%d2

    IfxGtm_Tom_Timer_disableUpdate(timer);  /* 업데이트 비활성화 */
80000846:	40 c4       	mov.aa %a4,%a12
80000848:	6d 00 21 0d 	call 8000228a <IfxGtm_Tom_Timer_disableUpdate>
    IfxGtm_Tom_PwmHl_setOnTime(pwmHl, Duty2Tic); /* 듀티 값 변경 */
8000084c:	d9 e5 f8 ff 	lea %a5,[%a14]-8
80000850:	d9 c4 04 10 	lea %a4,[%a12]68 <60000044 <GtmPwmHl+0x4>>
80000854:	6d 00 3f 11 	call 80002ad2 <IfxGtm_Tom_PwmHl_setOnTime>
    IfxGtm_Tom_Timer_applyUpdate(timer); /* 듀티 변경 값 적용 */
80000858:	40 c4       	mov.aa %a4,%a12
8000085a:	6d 00 0a 0d 	call 8000226e <IfxGtm_Tom_Timer_applyUpdate>

}
8000085e:	00 90       	ret 

80000860 <init_PWM>:
{
80000860:	40 ae       	mov.aa %a14,%sp
80000862:	20 48       	sub.a %sp,72
80000864:	40 4d       	mov.aa %a13,%a4
    IfxGtm_Tom_PwmHl_initConfig(&pwmHlConfig); /*구조체 디폴트 값으로 초기화*/
80000866:	d9 e4 c8 ff 	lea %a4,[%a14]-56
8000086a:	6d 00 a1 16 	call 800035ac <IfxGtm_Tom_PwmHl_initConfig>
    ccx[0] = &IfxGtm_TOM0_4_TOUT22_P33_0_OUT; /*40*/ /*PWM 출력 핀 설정 Ch.1 ccx*/
8000086e:	91 00 00 28 	movh.a %a2,32768
80000872:	d9 22 30 80 	lea %a2,[%a2]560 <80000230 <IfxGtm_TOM0_4_TOUT22_P33_0_OUT>>
80000876:	b5 e2 c0 ff 	st.a [%a14]-64 <80000230 <IfxGtm_TOM0_4_TOUT22_P33_0_OUT>>,%a2
    coutx[0] = &IfxGtm_TOM0_3_TOUT105_P10_3_OUT; /*11*/ /*PWM 출력 핀 설정 Ch.1 coutx*/
8000087a:	91 00 00 28 	movh.a %a2,32768
8000087e:	d9 22 0c 90 	lea %a2,[%a2]588 <8000024c <IfxGtm_TOM0_3_TOUT105_P10_3_OUT>>
80000882:	b5 e2 f8 ef 	st.a [%a14]-72 <8000024c <IfxGtm_TOM0_3_TOUT105_P10_3_OUT>>,%a2
    ccx[1] = &IfxGtm_TOM0_5_TOUT23_P33_1_OUT; /*38*/ /*PWM 출력 핀 설정 Ch.2 ccx*/
80000886:	91 00 00 28 	movh.a %a2,32768
8000088a:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxGtm_TOM0_5_TOUT23_P33_1_OUT>>
8000088e:	b5 e2 c4 ff 	st.a [%a14]-60 <80000214 <IfxGtm_TOM0_5_TOUT23_P33_1_OUT>>,%a2
    coutx[0] = &IfxGtm_TOM0_2_TOUT107_P10_5_OUT; /*10*/ /*PWM 출력 핀 설정 Ch.2 coutx*/
80000892:	91 00 00 28 	movh.a %a2,32768
80000896:	d9 22 28 90 	lea %a2,[%a2]616 <80000268 <IfxGtm_TOM0_2_TOUT107_P10_5_OUT>>
8000089a:	b5 e2 f8 ef 	st.a [%a14]-72 <80000268 <IfxGtm_TOM0_2_TOUT107_P10_5_OUT>>,%a2
    pwmHlConfig.timer    = &GtmPwmHl.timer;  /*타이머 객체 설정*/
8000089e:	91 00 00 c6 	movh.a %a12,24576
800008a2:	d9 cc 00 10 	lea %a12,[%a12]64 <60000040 <GtmPwmHl>>
800008a6:	b5 ec ec ff 	st.a [%a14]-20 <60000040 <GtmPwmHl>>,%a12
    pwmHlConfig.tom      = timerConfig->tom; /*TOM 설정*/
800008aa:	19 d2 38 00 	ld.w %d2,[%a13]56 <60000040 <GtmPwmHl>>
800008ae:	59 e2 f0 ff 	st.w [%a14]-16 <60000040 <GtmPwmHl>>,%d2
    pwmHlConfig.base.deadtime = 2e-6;       /*데드타임 설정*/
800008b2:	7b 60 60 23 	movh %d2,13830
800008b6:	1b d2 7b 23 	addi %d2,%d2,14269
800008ba:	59 e2 c8 ff 	st.w [%a14]-56,%d2
    pwmHlConfig.base.minPulse = 1e-6; /*최소 펄스 시간 설정*/
800008be:	7b 60 58 23 	movh %d2,13702
800008c2:	1b d2 7b 23 	addi %d2,%d2,14269
800008c6:	59 e2 cc ff 	st.w [%a14]-52,%d2
    pwmHlConfig.base.channelCount  = 2;  /*pwm 채널 수 설정*/
800008ca:	82 22       	mov %d2,2
800008cc:	e9 e2 d0 ff 	st.b [%a14]-48,%d2
    pwmHlConfig.base.emergencyEnabled = FALSE; /*비상 기능 설정*/
800008d0:	82 02       	mov %d2,0
800008d2:	e9 e2 d1 ff 	st.b [%a14]-47,%d2
    pwmHlConfig.base.outputMode = IfxPort_OutputMode_none; /*출력 모드 설정*/
800008d6:	82 02       	mov %d2,0
800008d8:	59 e2 d4 ff 	st.w [%a14]-44,%d2
    pwmHlConfig.base.outputDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1; /*PWM 드라이버 타입 설정*/
800008dc:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    pwmHlConfig.base.ccxActiveState = Ifx_ActiveState_high; /*핀 활성 상태 설정(Low or High 일 때 활성 설정*/
800008e0:	82 12       	mov %d2,1
800008e2:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    pwmHlConfig.base.coutxActiveState = Ifx_ActiveState_high; /*핀 활성 상태 설정(Low or High 일 때 활성 설정)*/
800008e6:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    pwmHlConfig.ccx                   = ccx;  /*핀 적용(Compare capture x)*/
800008ea:	d9 e2 c0 ff 	lea %a2,[%a14]-64
800008ee:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    pwmHlConfig.coutx                   = coutx;  /*핀 적용(Compare capture x)*/
800008f2:	d9 e2 f8 ef 	lea %a2,[%a14]-72
800008f6:	b5 e2 f8 ff 	st.a [%a14]-8,%a2
    IfxGtm_Tom_PwmHl_init(&GtmPwmHl.pwm, &pwmHlConfig); /*pwm 생성 방식 설정 */
800008fa:	d9 e5 c8 ff 	lea %a5,[%a14]-56
800008fe:	d9 c4 04 10 	lea %a4,[%a12]68 <60000044 <GtmPwmHl+0x4>>
80000902:	6d 00 5a 14 	call 800031b6 <IfxGtm_Tom_PwmHl_init>
    GtmPwmHl.duty[0] = 0.15; /*Ch.1 듀티 설정*/
80000906:	7b a0 e1 23 	movh %d2,15898
8000090a:	1b a2 99 29 	addi %d2,%d2,-26214
8000090e:	59 c2 1c 20 	st.w [%a12]156 <6000009c <GtmPwmHl+0x5c>>,%d2
    GtmPwmHl.duty[1] = 0.5 ; /*Ch.2 듀티 설정*/
80000912:	7b 00 f0 23 	movh %d2,16128
80000916:	59 c2 20 20 	st.w [%a12]160 <600000a0 <GtmPwmHl+0x60>>,%d2
    PWM_dutyUpdate(); /*듀티 설정 */
8000091a:	6d ff 7b ff 	call 80000810 <PWM_dutyUpdate>
    IfxGtm_Tom_Timer_run(&GtmPwmHl.timer); /*타이머 및 PWM 시작*/
8000091e:	40 c4       	mov.aa %a4,%a12
80000920:	6d 00 09 0d 	call 80002332 <IfxGtm_Tom_Timer_run>
}
80000924:	00 90       	ret 

80000926 <init_Tom>:
{
80000926:	40 ae       	mov.aa %a14,%sp
80000928:	20 58       	sub.a %sp,88
    IfxGtm_Tom_Timer_initConfig(&timerConfig, &MODULE_GTM);
8000092a:	91 00 01 5f 	movh.a %a5,61456
8000092e:	d9 e4 ec ef 	lea %a4,[%a14]-84
80000932:	6d 00 ed 0f 	call 8000290c <IfxGtm_Tom_Timer_initConfig>
    timerConfig.base.frequency = 2000; /*PWM 주기*/
80000936:	7b a0 4f 24 	movh %d2,17658
8000093a:	59 e2 ec ef 	st.w [%a14]-84,%d2
    timerConfig.base.isrPriority =  PRIORITY_GTM; /*인터럽트 우선순위*/
8000093e:	3b 80 0c 20 	mov %d2,200
80000942:	f9 e2 f0 ef 	st.h [%a14]-80,%d2
    timerConfig.base.isrProvider = IfxSrc_Tos_cpu0; /*인터럽트 처리 cpu  설정*/
80000946:	82 03       	mov %d3,0
80000948:	59 e3 f4 ef 	st.w [%a14]-76,%d3
    timerConfig.base.minResolution = (1.0/timerConfig.base.frequency)/1000; /*최소 분해능 설정*/
8000094c:	7b 60 50 23 	movh %d2,13574
80000950:	1b d2 7b 23 	addi %d2,%d2,14269
80000954:	59 e2 f8 ef 	st.w [%a14]-72,%d2
    timerConfig.clock             = IfxGtm_Tom_Ch_ClkSrc_cmuFxclk0; /*Base Clock (100MHz)에서 몇을 나누어 사용할지*/
80000958:	59 e3 f0 ff 	st.w [%a14]-16,%d3
    timerConfig.base.countDir     = IfxStdIf_Timer_CountDir_upAndDown; /*비교파 모양 설정*/
8000095c:	82 12       	mov %d2,1
8000095e:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    timerConfig.tom               = IfxGtm_Tom_0; /*몇 번째 TOM 사용할지 설정*/
80000962:	59 e3 e4 ff 	st.w [%a14]-28,%d3
    timerConfig.timerChannel      = IfxGtm_Tom_Ch_0;   /* TOM 채널 설정 */
80000966:	59 e3 e8 ff 	st.w [%a14]-24,%d3
    timerConfig.triggerOut        =&IfxGtm_TOM0_0_TOUT77_P15_6_OUT;  /*trigger 출력 핀 설정 */
8000096a:	91 00 00 28 	movh.a %a2,32768
8000096e:	d9 22 04 a0 	lea %a2,[%a2]644 <80000284 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>
80000972:	b5 e2 ec ff 	st.a [%a14]-20 <80000284 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%a2
    timerConfig.base.trigger.enabled        = TRUE; /*trigger 활성화*/
80000976:	e9 e2 fc ef 	st.b [%a14]-68 <80000284 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%d2
    timerConfig.base.trigger.outputEnabled  = TRUE; /*trigger 출력 활성화 */
8000097a:	e9 e2 d5 ff 	st.b [%a14]-43 <80000284 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%d2
    timerConfig.base.trigger.triggerPoint   = 500; /*이벤트 발생(ex: 1) 후 몇 틱(tick) 후에 이벤트를 끝낼지(ex:0)*/
8000097e:	3b 40 1f 30 	mov %d3,500
80000982:	59 e3 c0 ff 	st.w [%a14]-64,%d3
    timerConfig.base.trigger.risingEdgeAtPeriod  = TRUE; /*디폴트를 0으로 할지 1로 할지(ex: TRUE --> 디폴트 0, 이벤트 발생 시 1)*/
80000986:	e9 e2 d4 ff 	st.b [%a14]-44,%d2
    IfxGtm_Tom_Timer_init(&GtmPwmHl.timer, &timerConfig); /*설정 값 반영*/
8000098a:	d9 e5 ec ef 	lea %a5,[%a14]-84
8000098e:	91 00 00 46 	movh.a %a4,24576
80000992:	d9 44 00 10 	lea %a4,[%a4]64 <60000040 <GtmPwmHl>>
80000996:	6d 00 77 0d 	call 80002484 <IfxGtm_Tom_Timer_init>
    init_PWM(&timerConfig); /*PWM 초기 설정*/
8000099a:	d9 e4 ec ef 	lea %a4,[%a14]-84
8000099e:	6d ff 61 ff 	call 80000860 <init_PWM>
}
800009a2:	00 90       	ret 

800009a4 <init_GTM>:

void init_GTM(void)
{
800009a4:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_ICR);
800009a6:	4d c0 e2 8f 	mfcr %d8,$icr
    return reg.B.IE != 0;
800009aa:	37 08 e1 87 	extr.u %d8,%d8,15,1
    __disable();
800009ae:	0d 00 40 03 	disable 
800009b2:	00 00       	nop 
    /*disable interrupts*/
    boolean interruptState = IfxCpu_disableInterrupts();

    /*GTm clocks*/
    Ifx_GTM *gtm = &MODULE_GTM;
    float32 gtmFreq = IfxGtm_Cmu_getGclkFrequency(gtm); /*GTM 모듈 클럭 주파수 가져오기 (100MHz)*/
800009b4:	91 00 01 4f 	movh.a %a4,61456
800009b8:	6d 00 39 16 	call 8000362a <IfxGtm_Cmu_getGclkFrequency>
800009bc:	02 29       	mov %d9,%d2
    IfxGtm_enable(gtm);
800009be:	91 00 01 4f 	movh.a %a4,61456
800009c2:	6d 00 06 16 	call 800035ce <IfxGtm_enable>

    IfxGtm_Cmu_setGclkFrequency(&MODULE_GTM, gtmFreq);  /*Global clock 주기 설정*/
800009c6:	02 94       	mov %d4,%d9
800009c8:	91 00 01 4f 	movh.a %a4,61456
800009cc:	6d 00 56 17 	call 80003878 <IfxGtm_Cmu_setGclkFrequency>

    float32 gtmGclkFreq = IfxGtm_Cmu_getGclkFrequency(gtm);
800009d0:	91 00 01 4f 	movh.a %a4,61456
800009d4:	6d 00 2b 16 	call 8000362a <IfxGtm_Cmu_getGclkFrequency>
    IfxGtm_Cmu_setClkFrequency(&MODULE_GTM, IfxGtm_Cmu_Clk_0, gtmGclkFreq);/*clk_0 클럭 주파수 설정*/
800009d8:	02 25       	mov %d5,%d2
800009da:	82 04       	mov %d4,0
800009dc:	91 00 01 4f 	movh.a %a4,61456
800009e0:	6d 00 06 17 	call 800037ec <IfxGtm_Cmu_setClkFrequency>

    init_Tom(); /*TOM 및 PWM 초기 설정*/
800009e4:	6d ff a1 ff 	call 80000926 <init_Tom>
    if (enabled != FALSE)
800009e8:	df 08 04 00 	jeq %d8,0,800009f0 <init_GTM+0x4c>
        __enable();
800009ec:	0d 00 00 03 	enable 

    IfxCpu_restoreInterrupts(interruptState); /*enacle interrupts again*/
    IfxGtm_Cmu_enableClocks(gtm,IFXGTM_CMU_CLKEN_FXCLK | IFXGTM_CMU_CLKEN_CLK0);
800009f0:	7b 00 08 40 	movh %d4,128
800009f4:	c2 24       	add %d4,2
800009f6:	91 00 01 4f 	movh.a %a4,61456
800009fa:	6d 00 10 16 	call 8000361a <IfxGtm_Cmu_enableClocks>

}
800009fe:	00 90       	ret 

80000a00 <IfxGtm_PinMap_setTomTout>:
    IfxPort_setPinModeOutput(config->pin.port, config->pin.pinIndex, outputMode, config->select);
    IfxPort_setPinPadDriver(config->pin.port, config->pin.pinIndex, padDriver);
}

void IfxGtm_PinMap_setTomTout(IfxGtm_Tom_ToutMap *config, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
80000a00:	40 ae       	mov.aa %a14,%sp
80000a02:	40 4c       	mov.aa %a12,%a4
80000a04:	02 58       	mov %d8,%d5
    uint32 outselReg = (config->toutn >> 4);
80000a06:	19 42 0c 00 	ld.w %d2,[%a4]12
80000a0a:	8f c2 1f 70 	sh %d7,%d2,-4
    uint32 shift = (config->toutn & 0xFU) * 2;
80000a0e:	8f f2 00 21 	and %d2,%d2,15
80000a12:	06 12       	sh %d2,1
    uint32 outsel = (uint32)config->toutSel << shift;
80000a14:	19 43 08 00 	ld.w %d3,[%a4]8
80000a18:	0f 23 00 60 	sh %d6,%d3,%d2
    uint32 mask = 0x3U << shift;
80000a1c:	82 33       	mov %d3,3
80000a1e:	0f 23 00 30 	sh %d3,%d3,%d2

    __ldmst_c(&(MODULE_GTM.INOUTSEL.T.OUTSEL[outselReg].U), mask, outsel);
80000a22:	8f 27 00 20 	sh %d2,%d7,2
80000a26:	7b a0 01 5f 	movh %d5,61466
80000a2a:	1b 05 d3 5f 	addi %d5,%d5,-720
80000a2e:	60 52       	mov.a %a2,%d5
80000a30:	01 22 00 26 	addsc.a %a2,%a2,%d2,0


/******************************************************************************/
IFX_INLINE void __ldmst_c(volatile void *address, unsigned mask, unsigned value)
{
    *(volatile uint32 *)address = (*(volatile uint32 *)address & ~(mask)) | (mask & value);
80000a34:	54 22       	ld.w %d2,[%a2]
80000a36:	c6 26       	xor %d6,%d2
80000a38:	26 63       	and %d3,%d6
80000a3a:	c6 32       	xor %d2,%d3
80000a3c:	74 22       	st.w [%a2],%d2
    IfxPort_setPinModeOutput(config->pin.port, config->pin.pinIndex, outputMode, config->select);
80000a3e:	19 45 18 00 	ld.w %d5,[%a4]24
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80000a42:	a6 45       	or %d5,%d4
80000a44:	39 44 14 00 	ld.bu %d4,[%a4]20
80000a48:	99 44 10 00 	ld.a %a4,[%a4]16
80000a4c:	6d 00 9e 0b 	call 80002188 <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(config->pin.port, config->pin.pinIndex, padDriver);
80000a50:	02 85       	mov %d5,%d8
80000a52:	39 c4 14 00 	ld.bu %d4,[%a12]20
80000a56:	99 c4 10 00 	ld.a %a4,[%a12]16
80000a5a:	6d 00 ce 0b 	call 800021f6 <IfxPort_setPinPadDriver>
}
80000a5e:	00 90       	ret 

80000a60 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80000a60:	40 ae       	mov.aa %a14,%sp
80000a62:	40 4c       	mov.aa %a12,%a4
80000a64:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80000a66:	6d 00 39 0b 	call 800020d8 <IfxScuWdt_getSafetyWatchdogPassword>
80000a6a:	02 29       	mov %d9,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80000a6c:	02 24       	mov %d4,%d2
80000a6e:	6d 00 df 09 	call 80001e2c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80000a72:	8b 08 a2 32 	ge.u %d3,%d8,32
80000a76:	df 03 0d 80 	jne %d3,0,80000a90 <IfxVadc_disableAccess+0x30>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
80000a7a:	d9 c2 08 20 	lea %a2,[%a12]136
80000a7e:	19 c2 08 20 	ld.w %d2,[%a12]136
80000a82:	d7 12 01 28 	insert %d2,%d2,1,%d8,1
80000a86:	74 22       	st.w [%a2],%d2
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80000a88:	02 94       	mov %d4,%d9
80000a8a:	6d 00 57 0b 	call 80002138 <IfxScuWdt_setSafetyEndinit>
}
80000a8e:	00 90       	ret 
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
80000a90:	d9 c2 0c 20 	lea %a2,[%a12]140
80000a94:	19 c3 0c 20 	ld.w %d3,[%a12]140
80000a98:	8f f8 01 21 	and %d2,%d8,31
80000a9c:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
80000aa0:	74 22       	st.w [%a2],%d2
80000aa2:	1d ff f3 ff 	j 80000a88 <IfxVadc_disableAccess+0x28>

80000aa6 <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80000aa6:	40 ae       	mov.aa %a14,%sp
80000aa8:	40 4c       	mov.aa %a12,%a4
80000aaa:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80000aac:	6d 00 16 0b 	call 800020d8 <IfxScuWdt_getSafetyWatchdogPassword>
80000ab0:	02 29       	mov %d9,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80000ab2:	02 24       	mov %d4,%d2
80000ab4:	6d 00 bc 09 	call 80001e2c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80000ab8:	8b 08 a2 32 	ge.u %d3,%d8,32
80000abc:	df 03 0d 80 	jne %d3,0,80000ad6 <IfxVadc_enableAccess+0x30>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
80000ac0:	d9 c2 08 20 	lea %a2,[%a12]136
80000ac4:	19 c2 08 20 	ld.w %d2,[%a12]136
80000ac8:	d7 02 01 28 	insert %d2,%d2,0,%d8,1
80000acc:	74 22       	st.w [%a2],%d2
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80000ace:	02 94       	mov %d4,%d9
80000ad0:	6d 00 34 0b 	call 80002138 <IfxScuWdt_setSafetyEndinit>
}
80000ad4:	00 90       	ret 
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
80000ad6:	d9 c2 0c 20 	lea %a2,[%a12]140
80000ada:	19 c3 0c 20 	ld.w %d3,[%a12]140
80000ade:	8f f8 01 21 	and %d2,%d8,31
80000ae2:	d7 03 01 22 	insert %d2,%d3,0,%d2,1
80000ae6:	74 22       	st.w [%a2],%d2
80000ae8:	1d ff f3 ff 	j 80000ace <IfxVadc_enableAccess+0x28>

80000aec <IfxVadc_disablePostCalibration>:
{
80000aec:	40 ae       	mov.aa %a14,%sp
80000aee:	40 4c       	mov.aa %a12,%a4
80000af0:	02 48       	mov %d8,%d4
80000af2:	8f f5 0f 91 	and %d9,%d5,255
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
80000af6:	bf 84 03 80 	jlt.u %d4,8,80000afc <IfxVadc_disablePostCalibration+0x10>
}
80000afa:	00 90       	ret 
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000afc:	3b f0 01 40 	mov %d4,31
80000b00:	6d ff d3 ff 	call 80000aa6 <IfxVadc_enableAccess>
        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80000b04:	1b 08 01 80 	addi %d8,%d8,16
80000b08:	82 12       	mov %d2,1
80000b0a:	0f 82 00 20 	sh %d2,%d2,%d8
        if (disable == TRUE)
80000b0e:	df 19 10 00 	jeq %d9,1,80000b2e <IfxVadc_disablePostCalibration+0x42>
            vadc->GLOBCFG.U &= ~mask;
80000b12:	d9 c2 00 20 	lea %a2,[%a12]128
80000b16:	19 c3 00 20 	ld.w %d3,[%a12]128
80000b1a:	0f 23 e0 20 	andn %d2,%d3,%d2
80000b1e:	74 22       	st.w [%a2],%d2
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000b20:	3b f0 01 40 	mov %d4,31
80000b24:	40 c4       	mov.aa %a4,%a12
80000b26:	6d ff 9d ff 	call 80000a60 <IfxVadc_disableAccess>
}
80000b2a:	1d ff e8 ff 	j 80000afa <IfxVadc_disablePostCalibration+0xe>
            vadc->GLOBCFG.U |= mask;
80000b2e:	d9 c2 00 20 	lea %a2,[%a12]128
80000b32:	19 c3 00 20 	ld.w %d3,[%a12]128
80000b36:	a6 32       	or %d2,%d3
80000b38:	74 22       	st.w [%a2],%d2
80000b3a:	1d ff f3 ff 	j 80000b20 <IfxVadc_disablePostCalibration+0x34>

80000b3e <IfxVadc_getAdcAnalogFrequency>:
    IfxScuWdt_setCpuEndinit(passwd);
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
80000b3e:	40 ae       	mov.aa %a14,%sp
80000b40:	40 4c       	mov.aa %a12,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
80000b42:	6d 00 67 07 	call 80001a10 <IfxScuCcu_getSpbFrequency>
80000b46:	19 c3 00 20 	ld.w %d3,[%a12]128
80000b4a:	8f f3 01 31 	and %d3,%d3,31
80000b4e:	c2 13       	add %d3,1
80000b50:	4b 03 61 31 	utof %d3,%d3
}
80000b54:	4b 32 51 20 	div.f %d2,%d2,%d3
80000b58:	00 90       	ret 

80000b5a <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80000b5a:	40 ae       	mov.aa %a14,%sp
80000b5c:	40 4c       	mov.aa %a12,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
80000b5e:	6d 00 59 07 	call 80001a10 <IfxScuCcu_getSpbFrequency>
80000b62:	19 c3 00 20 	ld.w %d3,[%a12]128
80000b66:	37 03 62 34 	extr.u %d3,%d3,8,2
80000b6a:	c2 13       	add %d3,1
80000b6c:	4b 03 61 31 	utof %d3,%d3
}
80000b70:	4b 32 51 20 	div.f %d2,%d2,%d3
80000b74:	00 90       	ret 

80000b76 <IfxVadc_getSrcAddress>:
    }
}


volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
80000b76:	40 ae       	mov.aa %a14,%sp
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
80000b78:	bf 45 07 80 	jlt.u %d5,4,80000b86 <IfxVadc_getSrcAddress+0x10>
    {
        index -= 4;
80000b7c:	c2 c5       	add %d5,-4

        if ((group & 0x1) != 0)
80000b7e:	6f 04 10 00 	jz.t %d4,0,80000b9e <IfxVadc_getSrcAddress+0x28>
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
80000b82:	3b 90 00 40 	mov %d4,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
80000b86:	8f 24 00 20 	sh %d2,%d4,2
80000b8a:	42 52       	add %d2,%d5
80000b8c:	06 22       	sh %d2,2
80000b8e:	91 00 00 28 	movh.a %a2,32768
80000b92:	d9 22 10 b0 	lea %a2,[%a2]720 <800002d0 <IfxVadc_cfg_srcAddresses>>
80000b96:	01 22 00 26 	addsc.a %a2,%a2,%d2,0

    return &(base[0]);
}
80000b9a:	d4 22       	ld.a %a2,[%a2]
80000b9c:	00 90       	ret 
            group = IfxVadc_GroupId_global0;    /* Shared interrupt common 0 is used */
80000b9e:	3b 80 00 40 	mov %d4,8
80000ba2:	1d ff f2 ff 	j 80000b86 <IfxVadc_getSrcAddress+0x10>

80000ba6 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
80000ba6:	40 ae       	mov.aa %a14,%sp
80000ba8:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80000baa:	19 42 00 20 	ld.w %d2,[%a4]128
80000bae:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
80000bb0:	37 48 02 84 	insert %d8,%d8,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
80000bb4:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000bb8:	3b f0 01 40 	mov %d4,31
80000bbc:	6d ff 75 ff 	call 80000aa6 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80000bc0:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000bc4:	3b f0 01 40 	mov %d4,31
80000bc8:	40 c4       	mov.aa %a4,%a12
80000bca:	6d ff 4b ff 	call 80000a60 <IfxVadc_disableAccess>
}
80000bce:	00 90       	ret 

80000bd0 <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
80000bd0:	40 ae       	mov.aa %a14,%sp
80000bd2:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80000bd4:	19 42 00 20 	ld.w %d2,[%a4]128
80000bd8:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.DIVA  = converterClockDivider;
80000bda:	37 48 05 80 	insert %d8,%d8,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
80000bde:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000be2:	3b f0 01 40 	mov %d4,31
80000be6:	6d ff 60 ff 	call 80000aa6 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80000bea:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000bee:	3b f0 01 40 	mov %d4,31
80000bf2:	40 c4       	mov.aa %a4,%a12
80000bf4:	6d ff 36 ff 	call 80000a60 <IfxVadc_disableAccess>
}
80000bf8:	00 90       	ret 

80000bfa <IfxVadc_initializeFAdcD>:


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
80000bfa:	40 ae       	mov.aa %a14,%sp
80000bfc:	80 4a       	mov.d %d10,%a4
80000bfe:	02 48       	mov %d8,%d4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80000c00:	6d 00 08 07 	call 80001a10 <IfxScuCcu_getSpbFrequency>
80000c04:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
80000c08:	4b 82 11 82 	div.u %e8,%d2,%d8
80000c0c:	1b f8 ff 3f 	addi %d3,%d8,-1
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80000c10:	82 34       	mov %d4,3
80000c12:	0b 43 90 41 	min.u %d4,%d3,%d4

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
80000c16:	1b 14 00 80 	addi %d8,%d4,1
80000c1a:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80000c1e:	60 a4       	mov.a %a4,%d10
80000c20:	6d ff c3 ff 	call 80000ba6 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
80000c24:	02 82       	mov %d2,%d8
80000c26:	00 90       	ret 

80000c28 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
80000c28:	40 ae       	mov.aa %a14,%sp
80000c2a:	80 49       	mov.d %d9,%a4
80000c2c:	02 48       	mov %d8,%d4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80000c2e:	6d 00 f1 06 	call 80001a10 <IfxScuCcu_getSpbFrequency>
80000c32:	4b 02 71 31 	ftouz %d3,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
80000c36:	8f 23 00 40 	sh %d4,%d3,2
80000c3a:	4b 84 11 42 	div.u %e4,%d4,%d8

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80000c3e:	1b 24 00 20 	addi %d2,%d4,2
80000c42:	06 e2       	sh %d2,-2
    divA   = __minu(divA - 1, 0x1Fu);
80000c44:	c2 f2       	add %d2,-1
80000c46:	3b f0 01 40 	mov %d4,31
80000c4a:	0b 42 90 41 	min.u %d4,%d2,%d4
    result = fadc / (divA + 1);
80000c4e:	1b 14 00 20 	addi %d2,%d4,1
80000c52:	4b 23 11 62 	div.u %e6,%d3,%d2
80000c56:	02 68       	mov %d8,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
80000c58:	7b 10 13 50 	movh %d5,305
80000c5c:	1b 05 d0 52 	addi %d5,%d5,11520
80000c60:	7f 65 0b 80 	jge.u %d5,%d6,80000c76 <IfxVadc_initializeFAdcI+0x4e>
80000c64:	3b f0 01 40 	mov %d4,31
80000c68:	0b 42 90 41 	min.u %d4,%d2,%d4
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80000c6c:	1b 14 00 20 	addi %d2,%d4,1
80000c70:	4b 23 11 22 	div.u %e2,%d3,%d2
80000c74:	02 28       	mov %d8,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80000c76:	7b 80 ff 2f 	movh %d2,65528
80000c7a:	1b 02 ee 25 	addi %d2,%d2,24288
80000c7e:	42 82       	add %d2,%d8
80000c80:	7b a0 12 30 	movh %d3,298
80000c84:	1b 03 be 38 	addi %d3,%d3,-29728
80000c88:	7f 23 05 80 	jge.u %d3,%d2,80000c92 <IfxVadc_initializeFAdcI+0x6a>
    {
        result = 0;             /* Min / Max FAdcI frequency */
80000c8c:	82 08       	mov %d8,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80000c8e:	02 82       	mov %d2,%d8
80000c90:	00 90       	ret 
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80000c92:	60 94       	mov.a %a4,%d9
80000c94:	6d ff 9e ff 	call 80000bd0 <IfxVadc_initialiseAdcConverterClock>
80000c98:	1d ff fb ff 	j 80000c8e <IfxVadc_initializeFAdcI+0x66>

80000c9c <IfxVadc_selectPowerSupplyVoltage>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80000c9c:	40 ae       	mov.aa %a14,%sp
80000c9e:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80000ca0:	19 42 00 20 	ld.w %d2,[%a4]128
80000ca4:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80000ca6:	67 48 0e 80 	ins.t %d8,%d8,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
80000caa:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000cae:	3b f0 01 40 	mov %d4,31
80000cb2:	6d ff fa fe 	call 80000aa6 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80000cb6:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000cba:	3b f0 01 40 	mov %d4,31
80000cbe:	40 c4       	mov.aa %a4,%a12
80000cc0:	6d ff d0 fe 	call 80000a60 <IfxVadc_disableAccess>
}
80000cc4:	00 90       	ret 

80000cc6 <IfxVadc_setArbiterPriority>:


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80000cc6:	40 ae       	mov.aa %a14,%sp
80000cc8:	02 50       	mov %d0,%d5
    if (slotEnable != FALSE)
80000cca:	df 04 2a 00 	jeq %d4,0,80000d1e <IfxVadc_setArbiterPriority+0x58>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80000cce:	d9 42 04 00 	lea %a2,[%a4]4
80000cd2:	19 43 04 00 	ld.w %d3,[%a4]4
80000cd6:	1b 87 01 20 	addi %d2,%d7,24
80000cda:	0f 24 00 20 	sh %d2,%d4,%d2
80000cde:	a6 32       	or %d2,%d3
80000ce0:	74 22       	st.w [%a2],%d2
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80000ce2:	54 23       	ld.w %d3,[%a2]
80000ce4:	06 27       	sh %d7,2
80000ce6:	82 32       	mov %d2,3
80000ce8:	0f 72 00 20 	sh %d2,%d2,%d7
80000cec:	0f 23 e0 20 	andn %d2,%d3,%d2
80000cf0:	74 22       	st.w [%a2],%d2
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80000cf2:	54 23       	ld.w %d3,[%a2]
80000cf4:	0f 70 00 20 	sh %d2,%d0,%d7
80000cf8:	a6 32       	or %d2,%d3
80000cfa:	74 22       	st.w [%a2],%d2

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80000cfc:	df 06 08 00 	jeq %d6,0,80000d0c <IfxVadc_setArbiterPriority+0x46>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80000d00:	54 22       	ld.w %d2,[%a2]
80000d02:	c2 37       	add %d7,3
80000d04:	d7 12 01 27 	insert %d2,%d2,1,%d7,1
80000d08:	74 22       	st.w [%a2],%d2
80000d0a:	00 90       	ret 
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80000d0c:	d9 42 04 00 	lea %a2,[%a4]4
80000d10:	19 42 04 00 	ld.w %d2,[%a4]4
80000d14:	c2 37       	add %d7,3
80000d16:	d7 02 01 27 	insert %d2,%d2,0,%d7,1
80000d1a:	74 22       	st.w [%a2],%d2
80000d1c:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80000d1e:	d9 42 04 00 	lea %a2,[%a4]4
80000d22:	19 43 04 00 	ld.w %d3,[%a4]4
80000d26:	1b 87 01 20 	addi %d2,%d7,24
80000d2a:	d7 03 01 22 	insert %d2,%d3,0,%d2,1
80000d2e:	74 22       	st.w [%a2],%d2
    }
}
80000d30:	00 90       	ret 

80000d32 <IfxVadc_setScan>:


void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
80000d32:	40 ae       	mov.aa %a14,%sp
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80000d34:	d9 42 28 20 	lea %a2,[%a4]168
80000d38:	19 42 28 20 	ld.w %d2,[%a4]168
80000d3c:	0f 42 c0 30 	xor %d3,%d2,%d4
80000d40:	26 53       	and %d3,%d5
80000d42:	c6 32       	xor %d2,%d3
80000d44:	74 22       	st.w [%a2],%d2
}
80000d46:	00 90       	ret 

80000d48 <IfxVadc_startupCalibration>:


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80000d48:	40 ae       	mov.aa %a14,%sp
80000d4a:	40 4c       	mov.aa %a12,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000d4c:	3b f0 01 40 	mov %d4,31
80000d50:	6d ff ab fe 	call 80000aa6 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80000d54:	d9 c2 00 20 	lea %a2,[%a12]128
80000d58:	19 c2 00 20 	ld.w %d2,[%a12]128
80000d5c:	b7 12 81 2f 	insert %d2,%d2,1,31,1
80000d60:	74 22       	st.w [%a2],%d2
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000d62:	3b f0 01 40 	mov %d4,31
80000d66:	40 c4       	mov.aa %a4,%a12
80000d68:	6d ff 7c fe 	call 80000a60 <IfxVadc_disableAccess>
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80000d6c:	82 02       	mov %d2,0
        calibrationRunning = FALSE;
80000d6e:	82 04       	mov %d4,0
        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80000d70:	1d 00 05 00 	j 80000d7a <IfxVadc_startupCalibration+0x32>
80000d74:	c2 12       	add %d2,1
80000d76:	8f f2 0f 21 	and %d2,%d2,255
80000d7a:	ff 82 0d 80 	jge.u %d2,8,80000d94 <IfxVadc_startupCalibration+0x4c>
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80000d7e:	8f a2 00 30 	sh %d3,%d2,10
80000d82:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80000d86:	19 23 40 20 	ld.w %d3,[%a2]1152
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
80000d8a:	ef c3 f5 7f 	jz.t %d3,28,80000d74 <IfxVadc_startupCalibration+0x2c>
            {
                calibrationRunning = TRUE;
80000d8e:	82 14       	mov %d4,1
80000d90:	1d ff f2 ff 	j 80000d74 <IfxVadc_startupCalibration+0x2c>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80000d94:	df 04 ec ff 	jne %d4,0,80000d6c <IfxVadc_startupCalibration+0x24>
}
80000d98:	00 90       	ret 

80000d9a <IfxVadc_Adc_initChannel>:
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80000d9a:	40 ae       	mov.aa %a14,%sp
80000d9c:	40 4f       	mov.aa %a15,%a4
80000d9e:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80000da0:	99 52 38 00 	ld.a %a2,[%a5]56
}


IFX_INLINE Ifx_VADC *IfxVadc_Adc_getVadcFromGroup(const IfxVadc_Adc_Group *group)
{
    return group->module.vadc;
80000da4:	54 28       	ld.w %d8,[%a2]
    return group->group;
80000da6:	99 2d 04 00 	ld.a %a13,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80000daa:	b5 42 08 00 	st.a [%a4]8,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
80000dae:	19 29 08 00 	ld.w %d9,[%a2]8
    IfxVadc_ChannelId channelIndex = config->channelId;
80000db2:	19 5a 18 00 	ld.w %d10,[%a5]24

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80000db6:	02 94       	mov %d4,%d9
80000db8:	60 84       	mov.a %a4,%d8
80000dba:	6d ff 76 fe 	call 80000aa6 <IfxVadc_enableAccess>

    /* Configure Channel */
    {
        IfxVadc_setReferenceInput(vadcG, channelIndex, config->reference);
80000dbe:	19 c3 20 00 	ld.w %d3,[%a12]32
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
80000dc2:	1b 0a 06 20 	addi %d2,%d10,96
80000dc6:	06 22       	sh %d2,2
80000dc8:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000dcc:	54 22       	ld.w %d2,[%a2]
80000dce:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
80000dd2:	74 22       	st.w [%a2],%d2
        IfxVadc_storeGroupResult(vadcG, channelIndex, config->resultRegister);
80000dd4:	19 c3 24 00 	ld.w %d3,[%a12]36
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
80000dd8:	54 22       	ld.w %d2,[%a2]
80000dda:	37 32 04 28 	insert %d2,%d2,%d3,16,4
80000dde:	74 22       	st.w [%a2],%d2
        IfxVadc_setLowerBoundary(vadcG, channelIndex, config->lowerBoundary);
80000de0:	19 c3 28 00 	ld.w %d3,[%a12]40
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80000de4:	54 22       	ld.w %d2,[%a2]
80000de6:	37 32 02 22 	insert %d2,%d2,%d3,4,2
80000dea:	74 22       	st.w [%a2],%d2
        IfxVadc_setUpperBoundary(vadcG, channelIndex, config->upperBoundary);
80000dec:	19 c3 2c 00 	ld.w %d3,[%a12]44
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
80000df0:	54 22       	ld.w %d2,[%a2]
80000df2:	37 32 02 23 	insert %d2,%d2,%d3,6,2
80000df6:	74 22       	st.w [%a2],%d2
        IfxVadc_setSyncRequest(vadcG, channelIndex, config->synchonize);
80000df8:	39 c3 01 00 	ld.bu %d3,[%a12]1
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
80000dfc:	54 22       	ld.w %d2,[%a2]
80000dfe:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80000e02:	74 22       	st.w [%a2],%d2
        IfxVadc_setChannelInputClass(vadcG, channelIndex, config->inputClass);
80000e04:	19 c3 1c 00 	ld.w %d3,[%a12]28
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
80000e08:	54 22       	ld.w %d2,[%a2]
80000e0a:	37 32 02 20 	insert %d2,%d2,%d3,0,2
80000e0e:	74 22       	st.w [%a2],%d2
        IfxVadc_setChannelLimitCheckMode(vadcG, channelIndex, config->limitCheck);
80000e10:	19 c3 34 00 	ld.w %d3,[%a12]52
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
80000e14:	54 22       	ld.w %d2,[%a2]
80000e16:	37 32 02 24 	insert %d2,%d2,%d3,8,2
80000e1a:	74 22       	st.w [%a2],%d2
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
80000e1c:	39 c3 03 00 	ld.bu %d3,[%a12]3
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
80000e20:	54 22       	ld.w %d2,[%a2]
80000e22:	67 32 15 20 	ins.t %d2,%d2,21,%d3,0
80000e26:	74 22       	st.w [%a2],%d2
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
80000e28:	14 c3       	ld.bu %d3,[%a12]
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
80000e2a:	54 22       	ld.w %d2,[%a2]
80000e2c:	67 32 14 20 	ins.t %d2,%d2,20,%d3,0
80000e30:	74 22       	st.w [%a2],%d2
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
80000e32:	19 c3 30 00 	ld.w %d3,[%a12]48
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
80000e36:	54 22       	ld.w %d2,[%a2]
80000e38:	37 32 04 26 	insert %d2,%d2,%d3,12,4
80000e3c:	74 22       	st.w [%a2],%d2
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80000e3e:	1b 09 01 b0 	addi %d11,%d9,16
80000e42:	02 b4       	mov %d4,%d11
80000e44:	60 84       	mov.a %a4,%d8
80000e46:	6d ff 30 fe 	call 80000aa6 <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80000e4a:	39 c2 02 00 	ld.bu %d2,[%a12]2
80000e4e:	df 02 4c 80 	jne %d2,0,80000ee6 <IfxVadc_Adc_initChannel+0x14c>
    vadcG->CHASS.U |= (1 << channelIndex);
80000e52:	d9 d2 08 00 	lea %a2,[%a13]8
80000e56:	19 d2 08 00 	ld.w %d2,[%a13]8
80000e5a:	d7 12 01 2a 	insert %d2,%d2,1,%d10,1
80000e5e:	74 22       	st.w [%a2],%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80000e60:	02 b4       	mov %d4,%d11
80000e62:	60 84       	mov.a %a4,%d8
80000e64:	6d ff fe fd 	call 80000a60 <IfxVadc_disableAccess>

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80000e68:	19 c4 14 00 	ld.w %d4,[%a12]20
80000e6c:	48 02       	ld.w %d2,[%a15]0
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80000e6e:	d9 d2 20 40 	lea %a2,[%a13]288
80000e72:	19 d5 20 40 	ld.w %d5,[%a13]288
80000e76:	06 22       	sh %d2,2
80000e78:	3b f0 00 30 	mov %d3,15
80000e7c:	0f 23 00 30 	sh %d3,%d3,%d2
80000e80:	0f 35 e0 30 	andn %d3,%d5,%d3
80000e84:	74 23       	st.w [%a2],%d3
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80000e86:	54 23       	ld.w %d3,[%a2]
80000e88:	0f 24 00 20 	sh %d2,%d4,%d2
80000e8c:	a6 32       	or %d2,%d3
80000e8e:	74 22       	st.w [%a2],%d2

    if (config->channelPriority > 0)
80000e90:	b9 c2 06 00 	ld.hu %d2,[%a12]6
80000e94:	df 02 32 80 	jne %d2,0,80000ef8 <IfxVadc_Adc_initChannel+0x15e>
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80000e98:	19 c2 24 00 	ld.w %d2,[%a12]36
80000e9c:	ff 82 51 80 	jge.u %d2,8,80000f3e <IfxVadc_Adc_initChannel+0x1a4>
    {
        IfxVadc_setResultNodeEventPointer0(vadcG, config->resultSrcNr, config->resultRegister);
80000ea0:	19 c4 10 00 	ld.w %d4,[%a12]16
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80000ea4:	d9 d2 30 40 	lea %a2,[%a13]304
80000ea8:	19 d5 30 40 	ld.w %d5,[%a13]304
80000eac:	06 22       	sh %d2,2
80000eae:	3b f0 00 30 	mov %d3,15
80000eb2:	0f 23 00 30 	sh %d3,%d3,%d2
80000eb6:	0f 35 e0 30 	andn %d3,%d5,%d3
80000eba:	74 23       	st.w [%a2],%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80000ebc:	54 23       	ld.w %d3,[%a2]
80000ebe:	0f 24 00 20 	sh %d2,%d4,%d2
80000ec2:	a6 32       	or %d2,%d3
80000ec4:	74 22       	st.w [%a2],%d2
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80000ec6:	b9 c2 04 00 	ld.hu %d2,[%a12]4
80000eca:	df 02 50 80 	jne %d2,0,80000f6a <IfxVadc_Adc_initChannel+0x1d0>
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80000ece:	02 94       	mov %d4,%d9
80000ed0:	60 84       	mov.a %a4,%d8
80000ed2:	6d ff c7 fd 	call 80000a60 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80000ed6:	19 c2 24 00 	ld.w %d2,[%a12]36
80000eda:	68 12       	st.w [%a15]4,%d2
    channel->channel   = config->channelId;
80000edc:	19 c2 18 00 	ld.w %d2,[%a12]24
80000ee0:	68 02       	st.w [%a15]0,%d2

    return Status;
}
80000ee2:	82 02       	mov %d2,0
80000ee4:	00 90       	ret 
    vadcG->CHASS.U &= ~(1 << channelIndex);
80000ee6:	d9 d2 08 00 	lea %a2,[%a13]8
80000eea:	19 d2 08 00 	ld.w %d2,[%a13]8
80000eee:	d7 02 01 2a 	insert %d2,%d2,0,%d10,1
80000ef2:	74 22       	st.w [%a2],%d2
}
80000ef4:	1d ff b6 ff 	j 80000e60 <IfxVadc_Adc_initChannel+0xc6>
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80000ef8:	19 c5 14 00 	ld.w %d5,[%a12]20
80000efc:	02 94       	mov %d4,%d9
80000efe:	6d ff 3c fe 	call 80000b76 <IfxVadc_getSrcAddress>
        IfxVadc_clearChannelRequest(vadcG, config->channelId);
80000f02:	19 c4 18 00 	ld.w %d4,[%a12]24
    vadcG->CEFCLR.U = 1 << channelId;
80000f06:	82 13       	mov %d3,1
80000f08:	82 12       	mov %d2,1
80000f0a:	0f 42 00 20 	sh %d2,%d2,%d4
80000f0e:	59 d2 10 40 	st.w [%a13]272,%d2
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80000f12:	19 c5 0c 00 	ld.w %d5,[%a12]12
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80000f16:	39 c4 06 00 	ld.bu %d4,[%a12]6
80000f1a:	54 22       	ld.w %d2,[%a2]
80000f1c:	37 42 08 20 	insert %d2,%d2,%d4,0,8
80000f20:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80000f22:	54 22       	ld.w %d2,[%a2]
80000f24:	37 52 82 25 	insert %d2,%d2,%d5,11,2
80000f28:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80000f2a:	54 22       	ld.w %d2,[%a2]
80000f2c:	67 32 19 20 	ins.t %d2,%d2,25,%d3,0
80000f30:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80000f32:	54 22       	ld.w %d2,[%a2]
80000f34:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80000f38:	74 22       	st.w [%a2],%d2
}
80000f3a:	1d ff af ff 	j 80000e98 <IfxVadc_Adc_initChannel+0xfe>
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
80000f3e:	19 c4 10 00 	ld.w %d4,[%a12]16
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80000f42:	d9 d2 34 40 	lea %a2,[%a13]308
80000f46:	19 d5 34 40 	ld.w %d5,[%a13]308
80000f4a:	c2 82       	add %d2,-8
80000f4c:	06 22       	sh %d2,2
80000f4e:	3b f0 00 30 	mov %d3,15
80000f52:	0f 23 00 30 	sh %d3,%d3,%d2
80000f56:	0f 35 e0 30 	andn %d3,%d5,%d3
80000f5a:	74 23       	st.w [%a2],%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80000f5c:	54 23       	ld.w %d3,[%a2]
80000f5e:	0f 24 00 20 	sh %d2,%d4,%d2
80000f62:	a6 32       	or %d2,%d3
80000f64:	74 22       	st.w [%a2],%d2
}
80000f66:	1d ff b0 ff 	j 80000ec6 <IfxVadc_Adc_initChannel+0x12c>
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80000f6a:	19 c5 10 00 	ld.w %d5,[%a12]16
80000f6e:	02 94       	mov %d4,%d9
80000f70:	6d ff 03 fe 	call 80000b76 <IfxVadc_getSrcAddress>
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80000f74:	19 c2 24 00 	ld.w %d2,[%a12]36
80000f78:	1b 02 08 20 	addi %d2,%d2,128
80000f7c:	06 22       	sh %d2,2
80000f7e:	01 d2 00 36 	addsc.a %a3,%a13,%d2,0
80000f82:	54 32       	ld.w %d2,[%a3]
80000f84:	b7 12 81 2f 	insert %d2,%d2,1,31,1
80000f88:	74 32       	st.w [%a3],%d2
    vadcG->REFCLR.U = 0x0000FFFFu;
80000f8a:	bb f0 ff 2f 	mov.u %d2,65535
80000f8e:	59 d2 14 40 	st.w [%a13]276,%d2
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80000f92:	19 c4 08 00 	ld.w %d4,[%a12]8
    src->B.SRPN = priority;
80000f96:	39 c3 04 00 	ld.bu %d3,[%a12]4
80000f9a:	54 22       	ld.w %d2,[%a2]
80000f9c:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80000fa0:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80000fa2:	54 22       	ld.w %d2,[%a2]
80000fa4:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80000fa8:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80000faa:	54 22       	ld.w %d2,[%a2]
80000fac:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80000fb0:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80000fb2:	54 22       	ld.w %d2,[%a2]
80000fb4:	b7 12 01 25 	insert %d2,%d2,1,10,1
80000fb8:	74 22       	st.w [%a2],%d2
}
80000fba:	1d ff 8a ff 	j 80000ece <IfxVadc_Adc_initChannel+0x134>

80000fbe <IfxVadc_Adc_initChannelConfig>:


void IfxVadc_Adc_initChannelConfig(IfxVadc_Adc_ChannelConfig *config, const IfxVadc_Adc_Group *group)
{
80000fbe:	40 ae       	mov.aa %a14,%sp
80000fc0:	40 4c       	mov.aa %a12,%a4
80000fc2:	80 58       	mov.d %d8,%a5
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80000fc4:	3b c0 03 50 	mov %d5,60
80000fc8:	82 04       	mov %d4,0
80000fca:	6d 00 5a 1d 	call 80004a7e <memset>
    config->group = group;
80000fce:	59 c8 38 00 	st.w [%a12]56,%d8
}
80000fd2:	00 90       	ret 

80000fd4 <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80000fd4:	40 ae       	mov.aa %a14,%sp
80000fd6:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80000fd8:	d4 52       	ld.a %a2,[%a5]
80000fda:	d4 2d       	ld.a %a13,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80000fdc:	19 58 04 00 	ld.w %d8,[%a5]4
80000fe0:	8f a8 00 20 	sh %d2,%d8,10
80000fe4:	1b 02 48 20 	addi %d2,%d2,1152
80000fe8:	80 d3       	mov.d %d3,%a13
80000fea:	0b 23 00 90 	add %d9,%d3,%d2

    /* check for write access */
    group->group   = vadcG;
80000fee:	59 49 04 00 	st.w [%a4]4,%d9
    group->module  = *config->module;
80000ff2:	d4 52       	ld.a %a2,[%a5]
80000ff4:	54 22       	ld.w %d2,[%a2]
80000ff6:	74 42       	st.w [%a4],%d2
    IfxVadc_GroupId groupIndex      = config->groupId;
80000ff8:	19 5a 04 00 	ld.w %d10,[%a5]4
    group->groupId = groupIndex;
80000ffc:	59 4a 08 00 	st.w [%a4]8,%d10
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80001000:	40 d4       	mov.aa %a4,%a13
80001002:	6d ff 9e fd 	call 80000b3e <IfxVadc_getAdcAnalogFrequency>
80001006:	02 2c       	mov %d12,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80001008:	1b 0a 01 b0 	addi %d11,%d10,16
8000100c:	02 b4       	mov %d4,%d11
8000100e:	40 d4       	mov.aa %a4,%a13
80001010:	6d ff 4b fd 	call 80000aa6 <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80001014:	39 c4 38 10 	ld.bu %d4,[%a12]120
80001018:	df 14 7c 00 	jeq %d4,1,80001110 <IfxVadc_Adc_initGroup+0x13c>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
8000101c:	82 07       	mov %d7,0
8000101e:	82 06       	mov %d6,0
80001020:	82 05       	mov %d5,0
80001022:	82 04       	mov %d4,0
80001024:	60 94       	mov.a %a4,%d9
80001026:	6d ff 50 fe 	call 80000cc6 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
8000102a:	39 c4 39 10 	ld.bu %d4,[%a12]121
8000102e:	df 14 7b 00 	jeq %d4,1,80001124 <IfxVadc_Adc_initGroup+0x150>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80001032:	82 17       	mov %d7,1
80001034:	82 06       	mov %d6,0
80001036:	82 05       	mov %d5,0
80001038:	82 04       	mov %d4,0
8000103a:	60 94       	mov.a %a4,%d9
8000103c:	6d ff 45 fe 	call 80000cc6 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80001040:	39 c4 3a 10 	ld.bu %d4,[%a12]122
80001044:	df 14 7a 00 	jeq %d4,1,80001138 <IfxVadc_Adc_initGroup+0x164>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80001048:	82 27       	mov %d7,2
8000104a:	82 06       	mov %d6,0
8000104c:	82 05       	mov %d5,0
8000104e:	82 04       	mov %d4,0
80001050:	60 94       	mov.a %a4,%d9
80001052:	6d ff 3a fe 	call 80000cc6 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80001056:	19 c2 08 00 	ld.w %d2,[%a12]8
8000105a:	5f a2 22 00 	jeq %d2,%d10,8000109e <IfxVadc_Adc_initGroup+0xca>
    return IfxVadc_Adc_masterIndex[slave][master];
8000105e:	8f 3a 00 30 	sh %d3,%d10,3
80001062:	91 00 00 28 	movh.a %a2,32768
80001066:	d9 22 30 d0 	lea %a2,[%a2]880 <80000370 <IfxVadc_Adc_masterIndex>>
8000106a:	80 24       	mov.d %d4,%a2
8000106c:	42 34       	add %d4,%d3
8000106e:	60 42       	mov.a %a2,%d4
80001070:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001074:	14 22       	ld.bu %d2,[%a2]
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80001076:	8f a8 00 30 	sh %d3,%d8,10
8000107a:	01 d3 00 26 	addsc.a %a2,%a13,%d3,0
8000107e:	d9 23 40 30 	lea %a3,[%a2]1216
80001082:	19 23 40 30 	ld.w %d3,[%a2]1216
80001086:	37 23 02 30 	insert %d3,%d3,%d2,0,2
8000108a:	74 33       	st.w [%a3],%d3
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
8000108c:	54 33       	ld.w %d3,[%a3]
8000108e:	8f 32 00 21 	and %d2,%d2,3
80001092:	3b 80 00 40 	mov %d4,8
80001096:	0f 24 00 20 	sh %d2,%d4,%d2
8000109a:	a6 32       	or %d2,%d3
8000109c:	74 32       	st.w [%a3],%d2
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
8000109e:	8f a8 00 20 	sh %d2,%d8,10
800010a2:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800010a6:	d9 23 40 20 	lea %a3,[%a2]1152
800010aa:	19 23 40 20 	ld.w %d3,[%a2]1152
800010ae:	8f 33 c0 31 	andn %d3,%d3,3
800010b2:	74 33       	st.w [%a3],%d3

    /* Setup arbiter */
    /* turn off the group during initialization, see UM for sync mode */
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);
800010b4:	19 c2 34 10 	ld.w %d2,[%a12]116
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
800010b8:	d9 23 40 20 	lea %a3,[%a2]1152
800010bc:	19 23 40 20 	ld.w %d3,[%a2]1152
800010c0:	37 23 02 32 	insert %d3,%d3,%d2,4,2
800010c4:	74 33       	st.w [%a3],%d3

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
800010c6:	39 c2 38 10 	ld.bu %d2,[%a12]120
800010ca:	df 12 41 00 	jeq %d2,1,8000114c <IfxVadc_Adc_initGroup+0x178>
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
800010ce:	39 c2 39 10 	ld.bu %d2,[%a12]121
800010d2:	df 12 b0 00 	jeq %d2,1,80001232 <IfxVadc_Adc_initGroup+0x25e>
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
800010d6:	39 c2 3a 10 	ld.bu %d2,[%a12]122
800010da:	df 12 1f 01 	jeq %d2,1,80001318 <IfxVadc_Adc_initGroup+0x344>
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
800010de:	19 c2 08 00 	ld.w %d2,[%a12]8
800010e2:	5f a2 76 01 	jeq %d2,%d10,800013ce <IfxVadc_Adc_initGroup+0x3fa>
800010e6:	82 04       	mov %d4,0
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
800010e8:	8f a8 00 20 	sh %d2,%d8,10
800010ec:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800010f0:	d9 23 40 20 	lea %a3,[%a2]1152
800010f4:	19 23 40 20 	ld.w %d3,[%a2]1152
800010f8:	37 43 02 30 	insert %d3,%d3,%d4,0,2
800010fc:	74 33       	st.w [%a3],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
800010fe:	39 c5 30 10 	ld.bu %d5,[%a12]112
80001102:	02 a4       	mov %d4,%d10
80001104:	40 d4       	mov.aa %a4,%a13
80001106:	6d ff f3 fc 	call 80000aec <IfxVadc_disablePostCalibration>

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
8000110a:	82 03       	mov %d3,0
8000110c:	1d 00 77 01 	j 800013fa <IfxVadc_Adc_initGroup+0x426>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80001110:	82 07       	mov %d7,0
80001112:	19 c6 10 10 	ld.w %d6,[%a12]80
80001116:	19 c5 0c 10 	ld.w %d5,[%a12]76
8000111a:	60 94       	mov.a %a4,%d9
8000111c:	6d ff d5 fd 	call 80000cc6 <IfxVadc_setArbiterPriority>
80001120:	1d ff 85 ff 	j 8000102a <IfxVadc_Adc_initGroup+0x56>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80001124:	82 17       	mov %d7,1
80001126:	19 c6 34 00 	ld.w %d6,[%a12]52
8000112a:	19 c5 30 00 	ld.w %d5,[%a12]48
8000112e:	60 94       	mov.a %a4,%d9
80001130:	6d ff cb fd 	call 80000cc6 <IfxVadc_setArbiterPriority>
80001134:	1d ff 86 ff 	j 80001040 <IfxVadc_Adc_initGroup+0x6c>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80001138:	82 27       	mov %d7,2
8000113a:	19 c6 2c 10 	ld.w %d6,[%a12]108
8000113e:	19 c5 28 10 	ld.w %d5,[%a12]104
80001142:	60 94       	mov.a %a4,%d9
80001144:	6d ff c1 fd 	call 80000cc6 <IfxVadc_setArbiterPriority>
80001148:	1d ff 87 ff 	j 80001056 <IfxVadc_Adc_initGroup+0x82>
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
8000114c:	19 c2 08 10 	ld.w %d2,[%a12]72
80001150:	df 02 37 00 	jeq %d2,0,800011be <IfxVadc_Adc_initGroup+0x1ea>
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80001154:	8f a8 00 20 	sh %d2,%d8,10
80001158:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
8000115c:	d9 23 44 40 	lea %a3,[%a2]1284
80001160:	19 22 44 40 	ld.w %d2,[%a2]1284
80001164:	b7 12 01 21 	insert %d2,%d2,1,2,1
80001168:	74 32       	st.w [%a3],%d2
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
8000116a:	19 c5 08 10 	ld.w %d5,[%a12]72
8000116e:	19 c4 00 10 	ld.w %d4,[%a12]64
    qctrl0.U        = vadcG->QCTRL0.U;
80001172:	d9 23 40 40 	lea %a3,[%a2]1280
80001176:	19 22 40 40 	ld.w %d2,[%a2]1280
    qctrl0.B.XTWC   = 1;
8000117a:	b7 12 81 27 	insert %d2,%d2,1,15,1
    qctrl0.B.XTMODE = triggerMode;
8000117e:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    qctrl0.B.XTSEL  = triggerSource;
80001182:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80001186:	74 32       	st.w [%a3],%d2
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80001188:	19 c2 00 10 	ld.w %d2,[%a12]64
8000118c:	8b f2 20 22 	ne %d2,%d2,15
80001190:	df 02 22 80 	jne %d2,0,800011d4 <IfxVadc_Adc_initGroup+0x200>
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80001194:	19 c3 3c 00 	ld.w %d3,[%a12]60
    qctrl0.U           = vadcG->QCTRL0.U;
80001198:	8f a8 00 20 	sh %d2,%d8,10
8000119c:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800011a0:	54 32       	ld.w %d2,[%a3]
    qctrl0.B.GTWC      = 1;
800011a2:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
800011a6:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
800011aa:	74 32       	st.w [%a3],%d2
    vadcG->QMR0.B.ENGT = gatingMode;
800011ac:	d9 23 44 40 	lea %a3,[%a2]1284
800011b0:	19 22 44 40 	ld.w %d2,[%a2]1284
800011b4:	b7 12 02 20 	insert %d2,%d2,1,0,2
800011b8:	74 32       	st.w [%a3],%d2
}
800011ba:	1d 00 0d 00 	j 800011d4 <IfxVadc_Adc_initGroup+0x200>
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
800011be:	8f a8 00 20 	sh %d2,%d8,10
800011c2:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800011c6:	d9 23 44 40 	lea %a3,[%a2]1284
800011ca:	19 22 44 40 	ld.w %d2,[%a2]1284
800011ce:	8f 42 c0 21 	andn %d2,%d2,4
800011d2:	74 32       	st.w [%a3],%d2
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
800011d4:	19 c2 00 10 	ld.w %d2,[%a12]64
800011d8:	8b f2 00 22 	eq %d2,%d2,15
800011dc:	df 02 1a 80 	jne %d2,0,80001210 <IfxVadc_Adc_initGroup+0x23c>
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
800011e0:	19 c5 3c 00 	ld.w %d5,[%a12]60
800011e4:	19 c4 04 10 	ld.w %d4,[%a12]68
    qctrl0.U           = vadcG->QCTRL0.U;
800011e8:	8f a8 00 20 	sh %d2,%d8,10
800011ec:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800011f0:	d9 23 40 40 	lea %a3,[%a2]1280
800011f4:	19 22 40 40 	ld.w %d2,[%a2]1280
    qctrl0.B.GTWC      = 1;
800011f8:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
800011fc:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80001200:	74 32       	st.w [%a3],%d2
    vadcG->QMR0.B.ENGT = gatingMode;
80001202:	d9 23 44 40 	lea %a3,[%a2]1284
80001206:	19 22 44 40 	ld.w %d2,[%a2]1284
8000120a:	37 42 02 20 	insert %d2,%d2,%d4,0,2
8000120e:	74 32       	st.w [%a3],%d2
        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80001210:	39 c3 38 00 	ld.bu %d3,[%a12]56
80001214:	8b 03 20 32 	ne %d3,%d3,0
    vadcG->QMR0.B.FLUSH = flushQueue;
80001218:	8f a8 00 20 	sh %d2,%d8,10
8000121c:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001220:	d9 23 44 40 	lea %a3,[%a2]1284
80001224:	19 22 44 40 	ld.w %d2,[%a2]1284
80001228:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
8000122c:	74 32       	st.w [%a3],%d2
}
8000122e:	1d ff 50 ff 	j 800010ce <IfxVadc_Adc_initGroup+0xfa>
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80001232:	19 c2 2c 00 	ld.w %d2,[%a12]44
80001236:	df 02 37 00 	jeq %d2,0,800012a4 <IfxVadc_Adc_initGroup+0x2d0>
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
8000123a:	8f a8 00 20 	sh %d2,%d8,10
8000123e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001242:	d9 23 64 40 	lea %a3,[%a2]1316
80001246:	19 22 64 40 	ld.w %d2,[%a2]1316
8000124a:	b7 12 01 21 	insert %d2,%d2,1,2,1
8000124e:	74 32       	st.w [%a3],%d2
            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80001250:	19 c5 2c 00 	ld.w %d5,[%a12]44
80001254:	19 c4 24 00 	ld.w %d4,[%a12]36
    asctrl.U        = vadcG->ASCTRL.U;
80001258:	d9 23 60 40 	lea %a3,[%a2]1312
8000125c:	19 22 60 40 	ld.w %d2,[%a2]1312
    asctrl.B.XTWC   = 1;
80001260:	b7 12 81 27 	insert %d2,%d2,1,15,1
    asctrl.B.XTMODE = triggerMode;
80001264:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    asctrl.B.XTSEL  = triggerSource;
80001268:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadcG->ASCTRL.U = asctrl.U;
8000126c:	74 32       	st.w [%a3],%d2
            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
8000126e:	19 c2 24 00 	ld.w %d2,[%a12]36
80001272:	8b f2 20 22 	ne %d2,%d2,15
80001276:	df 02 22 80 	jne %d2,0,800012ba <IfxVadc_Adc_initGroup+0x2e6>
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
8000127a:	19 c3 20 00 	ld.w %d3,[%a12]32
    asctrl.U           = vadcG->ASCTRL.U;
8000127e:	8f a8 00 20 	sh %d2,%d8,10
80001282:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001286:	54 32       	ld.w %d2,[%a3]
    asctrl.B.GTWC      = 1;
80001288:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    asctrl.B.GTSEL     = gatingSource;
8000128c:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80001290:	74 32       	st.w [%a3],%d2
    vadcG->ASMR.B.ENGT = gatingMode;
80001292:	d9 23 64 40 	lea %a3,[%a2]1316
80001296:	19 22 64 40 	ld.w %d2,[%a2]1316
8000129a:	b7 12 02 20 	insert %d2,%d2,1,0,2
8000129e:	74 32       	st.w [%a3],%d2
}
800012a0:	1d 00 0d 00 	j 800012ba <IfxVadc_Adc_initGroup+0x2e6>
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
800012a4:	8f a8 00 20 	sh %d2,%d8,10
800012a8:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800012ac:	d9 23 64 40 	lea %a3,[%a2]1316
800012b0:	19 22 64 40 	ld.w %d2,[%a2]1316
800012b4:	8f 42 c0 21 	andn %d2,%d2,4
800012b8:	74 32       	st.w [%a3],%d2
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
800012ba:	19 c2 24 00 	ld.w %d2,[%a12]36
800012be:	8b f2 00 22 	eq %d2,%d2,15
800012c2:	df 02 1a 80 	jne %d2,0,800012f6 <IfxVadc_Adc_initGroup+0x322>
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
800012c6:	19 c5 20 00 	ld.w %d5,[%a12]32
800012ca:	19 c4 28 00 	ld.w %d4,[%a12]40
    asctrl.U           = vadcG->ASCTRL.U;
800012ce:	8f a8 00 20 	sh %d2,%d8,10
800012d2:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800012d6:	d9 23 60 40 	lea %a3,[%a2]1312
800012da:	19 22 60 40 	ld.w %d2,[%a2]1312
    asctrl.B.GTWC      = 1;
800012de:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    asctrl.B.GTSEL     = gatingSource;
800012e2:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadcG->ASCTRL.U    = asctrl.U;
800012e6:	74 32       	st.w [%a3],%d2
    vadcG->ASMR.B.ENGT = gatingMode;
800012e8:	d9 23 64 40 	lea %a3,[%a2]1316
800012ec:	19 22 64 40 	ld.w %d2,[%a2]1316
800012f0:	37 42 02 20 	insert %d2,%d2,%d4,0,2
800012f4:	74 32       	st.w [%a3],%d2
        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
800012f6:	39 c3 1c 00 	ld.bu %d3,[%a12]28
800012fa:	8b 03 20 32 	ne %d3,%d3,0
    vadcG->ASMR.B.SCAN = autoscanEnable;
800012fe:	8f a8 00 20 	sh %d2,%d8,10
80001302:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001306:	d9 23 64 40 	lea %a3,[%a2]1316
8000130a:	19 22 64 40 	ld.w %d2,[%a2]1316
8000130e:	67 32 04 20 	ins.t %d2,%d2,4,%d3,0
80001312:	74 32       	st.w [%a3],%d2
}
80001314:	1d ff e1 fe 	j 800010d6 <IfxVadc_Adc_initGroup+0x102>
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80001318:	19 c2 24 10 	ld.w %d2,[%a12]100
8000131c:	df 02 1e 00 	jeq %d2,0,80001358 <IfxVadc_Adc_initGroup+0x384>
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80001320:	d9 d2 04 80 	lea %a2,[%a13]516
80001324:	19 d2 04 80 	ld.w %d2,[%a13]516
80001328:	b7 12 01 21 	insert %d2,%d2,1,2,1
8000132c:	74 22       	st.w [%a2],%d2
            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
8000132e:	19 c5 24 10 	ld.w %d5,[%a12]100
80001332:	19 c4 1c 10 	ld.w %d4,[%a12]92
    brsctrl.U        = vadc->BRSCTRL.U;
80001336:	d9 d2 00 80 	lea %a2,[%a13]512
8000133a:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.XTWC   = 1;
8000133e:	b7 12 81 27 	insert %d2,%d2,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80001342:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    brsctrl.B.XTSEL  = triggerSource;
80001346:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
8000134a:	74 22       	st.w [%a2],%d2
            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
8000134c:	19 c2 1c 10 	ld.w %d2,[%a12]92
80001350:	8b f2 20 22 	ne %d2,%d2,15
80001354:	df 02 29 00 	jeq %d2,0,800013a6 <IfxVadc_Adc_initGroup+0x3d2>
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80001358:	19 c2 1c 10 	ld.w %d2,[%a12]92
8000135c:	8b f2 00 22 	eq %d2,%d2,15
80001360:	df 02 16 80 	jne %d2,0,8000138c <IfxVadc_Adc_initGroup+0x3b8>
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80001364:	19 c5 18 10 	ld.w %d5,[%a12]88
80001368:	19 c4 20 10 	ld.w %d4,[%a12]96
    brsctrl.U          = vadc->BRSCTRL.U;
8000136c:	d9 d2 00 80 	lea %a2,[%a13]512
80001370:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.GTWC     = 1;
80001374:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80001378:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
8000137c:	74 22       	st.w [%a2],%d2
    vadc->BRSMR.B.ENGT = gatingMode;
8000137e:	d9 d2 04 80 	lea %a2,[%a13]516
80001382:	19 d2 04 80 	ld.w %d2,[%a13]516
80001386:	37 42 02 20 	insert %d2,%d2,%d4,0,2
8000138a:	74 22       	st.w [%a2],%d2
        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
8000138c:	39 c3 14 10 	ld.bu %d3,[%a12]84
80001390:	8b 03 20 32 	ne %d3,%d3,0
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80001394:	d9 d2 04 80 	lea %a2,[%a13]516
80001398:	19 d2 04 80 	ld.w %d2,[%a13]516
8000139c:	67 32 04 20 	ins.t %d2,%d2,4,%d3,0
800013a0:	74 22       	st.w [%a2],%d2
}
800013a2:	1d ff 9e fe 	j 800010de <IfxVadc_Adc_initGroup+0x10a>
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
800013a6:	19 c3 18 10 	ld.w %d3,[%a12]88
    brsctrl.U          = vadc->BRSCTRL.U;
800013aa:	d9 d2 00 80 	lea %a2,[%a13]512
800013ae:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.GTWC     = 1;
800013b2:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
800013b6:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
800013ba:	74 22       	st.w [%a2],%d2
    vadc->BRSMR.B.ENGT = gatingMode;
800013bc:	d9 d2 04 80 	lea %a2,[%a13]516
800013c0:	19 d2 04 80 	ld.w %d2,[%a13]516
800013c4:	b7 12 02 20 	insert %d2,%d2,1,0,2
800013c8:	74 22       	st.w [%a2],%d2
}
800013ca:	1d ff c7 ff 	j 80001358 <IfxVadc_Adc_initGroup+0x384>
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
800013ce:	82 34       	mov %d4,3
800013d0:	1d ff 8c fe 	j 800010e8 <IfxVadc_Adc_initGroup+0x114>
800013d4:	3b f0 0f 50 	mov %d5,255
800013d8:	0b 54 90 51 	min.u %d5,%d4,%d5
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
800013dc:	8f 88 00 20 	sh %d2,%d8,8
800013e0:	42 62       	add %d2,%d6
800013e2:	1b 82 12 40 	addi %d4,%d2,296
800013e6:	06 24       	sh %d4,2
800013e8:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
800013ec:	54 24       	ld.w %d4,[%a2]
800013ee:	37 54 05 40 	insert %d4,%d4,%d5,0,5
800013f2:	74 24       	st.w [%a2],%d4
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
800013f4:	c2 13       	add %d3,1
800013f6:	8f f3 0f 31 	and %d3,%d3,255
800013fa:	ff 23 29 80 	jge.u %d3,2,8000144c <IfxVadc_Adc_initGroup+0x478>
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
800013fe:	02 36       	mov %d6,%d3
80001400:	1b 23 00 40 	addi %d4,%d3,2
80001404:	06 34       	sh %d4,3
80001406:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
8000140a:	54 25       	ld.w %d5,[%a2]
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
8000140c:	8f 88 00 20 	sh %d2,%d8,8
80001410:	42 32       	add %d2,%d3
80001412:	1b 82 12 40 	addi %d4,%d2,296
80001416:	06 24       	sh %d4,2
80001418:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
8000141c:	54 24       	ld.w %d4,[%a2]
8000141e:	37 54 03 44 	insert %d4,%d4,%d5,8,3
80001422:	74 24       	st.w [%a2],%d4
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80001424:	8f 33 00 40 	sh %d4,%d3,3
80001428:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
8000142c:	19 24 0c 00 	ld.w %d4,[%a2]12
    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80001430:	4b c4 41 40 	mul.f %d4,%d4,%d12
80001434:	4b 04 71 41 	ftouz %d4,%d4
80001438:	c2 e4       	add %d4,-2
    if (ticks > 31)
8000143a:	8b 04 62 52 	lt.u %d5,%d4,32
8000143e:	df 05 cb ff 	jne %d5,0,800013d4 <IfxVadc_Adc_initGroup+0x400>
        ticks = (ticks / 16) + 15;
80001442:	06 c4       	sh %d4,-4
80001444:	1b f4 00 40 	addi %d4,%d4,15
80001448:	1d ff c6 ff 	j 800013d4 <IfxVadc_Adc_initGroup+0x400>
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
8000144c:	02 b4       	mov %d4,%d11
8000144e:	40 d4       	mov.aa %a4,%a13
80001450:	6d ff 08 fb 	call 80000a60 <IfxVadc_disableAccess>

    return status;
}
80001454:	82 02       	mov %d2,0
80001456:	00 90       	ret 

80001458 <IfxVadc_Adc_initGroupConfig>:


void IfxVadc_Adc_initGroupConfig(IfxVadc_Adc_GroupConfig *config, IfxVadc_Adc *vadc)
{
80001458:	40 ae       	mov.aa %a14,%sp
8000145a:	40 4c       	mov.aa %a12,%a4
8000145c:	80 58       	mov.d %d8,%a5
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
8000145e:	3b c0 07 50 	mov %d5,124
80001462:	82 04       	mov %d4,0
80001464:	6d 00 0d 1b 	call 80004a7e <memset>
80001468:	7b 60 58 23 	movh %d2,13702
8000146c:	1b d2 7b 23 	addi %d2,%d2,14269
80001470:	59 c2 0c 00 	st.w [%a12]12,%d2
80001474:	59 c2 14 00 	st.w [%a12]20,%d2
80001478:	82 12       	mov %d2,1
8000147a:	59 c2 30 00 	st.w [%a12]48,%d2
8000147e:	e9 c2 38 00 	st.b [%a12]56,%d2
80001482:	59 c2 0c 10 	st.w [%a12]76,%d2
80001486:	59 c2 28 10 	st.w [%a12]104,%d2
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
8000148a:	74 c8       	st.w [%a12],%d8
    config->master                 = config->groupId;
    config->disablePostCalibration = FALSE;
}
8000148c:	00 90       	ret 

8000148e <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
8000148e:	40 ae       	mov.aa %a14,%sp
80001490:	40 5d       	mov.aa %a13,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80001492:	d4 5c       	ld.a %a12,[%a5]
    vadc->vadc = vadcSFR;
80001494:	f4 4c       	st.a [%a4],%a12
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001496:	6d 00 0f 06 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
8000149a:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
8000149c:	02 24       	mov %d4,%d2
8000149e:	6d 00 a2 04 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
800014a2:	82 02       	mov %d2,0
800014a4:	74 c2       	st.w [%a12],%d2
    IfxScuWdt_setCpuEndinit(passwd);
800014a6:	02 84       	mov %d4,%d8
800014a8:	6d 00 23 06 	call 800020ee <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
800014ac:	19 d4 24 00 	ld.w %d4,[%a13]36
800014b0:	40 c4       	mov.aa %a4,%a12
800014b2:	6d ff f5 fb 	call 80000c9c <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
800014b6:	19 d4 18 00 	ld.w %d4,[%a13]24
800014ba:	4b 04 71 41 	ftouz %d4,%d4
800014be:	40 c4       	mov.aa %a4,%a12
800014c0:	6d ff b4 fb 	call 80000c28 <IfxVadc_initializeFAdcI>
800014c4:	df 02 04 80 	jne %d2,0,800014cc <IfxVadc_Adc_initModule+0x3e>
    {
        return IfxVadc_Status_notInitialised;
800014c8:	82 12       	mov %d2,1
        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
}
800014ca:	00 90       	ret 
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
800014cc:	19 d4 14 00 	ld.w %d4,[%a13]20
800014d0:	4b 04 71 41 	ftouz %d4,%d4
800014d4:	40 c4       	mov.aa %a4,%a12
800014d6:	6d ff 92 fb 	call 80000bfa <IfxVadc_initializeFAdcD>
    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
800014da:	40 c4       	mov.aa %a4,%a12
800014dc:	6d ff 31 fb 	call 80000b3e <IfxVadc_getAdcAnalogFrequency>
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
800014e0:	82 03       	mov %d3,0
800014e2:	1d 00 12 00 	j 80001506 <IfxVadc_Adc_initModule+0x78>
800014e6:	3b f0 0f 50 	mov %d5,255
800014ea:	0b 54 90 51 	min.u %d5,%d4,%d5
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
800014ee:	1b 86 02 40 	addi %d4,%d6,40
800014f2:	06 24       	sh %d4,2
800014f4:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
800014f8:	54 24       	ld.w %d4,[%a2]
800014fa:	37 54 05 40 	insert %d4,%d4,%d5,0,5
800014fe:	74 24       	st.w [%a2],%d4
80001500:	c2 13       	add %d3,1
80001502:	8f f3 0f 31 	and %d3,%d3,255
80001506:	ff 23 26 80 	jge.u %d3,2,80001552 <IfxVadc_Adc_initModule+0xc4>
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
8000150a:	02 36       	mov %d6,%d3
8000150c:	1b 13 00 40 	addi %d4,%d3,1
80001510:	06 34       	sh %d4,3
80001512:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80001516:	54 25       	ld.w %d5,[%a2]
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80001518:	1b 83 02 40 	addi %d4,%d3,40
8000151c:	06 24       	sh %d4,2
8000151e:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
80001522:	54 24       	ld.w %d4,[%a2]
80001524:	37 54 03 44 	insert %d4,%d4,%d5,8,3
80001528:	74 24       	st.w [%a2],%d4
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
8000152a:	8f 33 00 40 	sh %d4,%d3,3
8000152e:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80001532:	19 24 04 00 	ld.w %d4,[%a2]4
    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80001536:	4b 24 41 40 	mul.f %d4,%d4,%d2
8000153a:	4b 04 71 41 	ftouz %d4,%d4
8000153e:	c2 e4       	add %d4,-2
    if (ticks > 31)
80001540:	8b 04 62 52 	lt.u %d5,%d4,32
80001544:	df 05 d1 ff 	jne %d5,0,800014e6 <IfxVadc_Adc_initModule+0x58>
        ticks = (ticks / 16) + 15;
80001548:	06 c4       	sh %d4,-4
8000154a:	1b f4 00 40 	addi %d4,%d4,15
8000154e:	1d ff cc ff 	j 800014e6 <IfxVadc_Adc_initModule+0x58>
    if (config->startupCalibration == TRUE)
80001552:	39 d2 20 00 	ld.bu %d2,[%a13]32
80001556:	df 12 23 00 	jeq %d2,1,8000159c <IfxVadc_Adc_initModule+0x10e>
    return status;
8000155a:	82 02       	mov %d2,0
8000155c:	00 90       	ret 
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
8000155e:	1b 08 01 90 	addi %d9,%d8,16
80001562:	02 94       	mov %d4,%d9
80001564:	40 c4       	mov.aa %a4,%a12
80001566:	6d ff a0 fa 	call 80000aa6 <IfxVadc_enableAccess>
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
8000156a:	8f a8 00 20 	sh %d2,%d8,10
8000156e:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80001572:	d9 23 40 20 	lea %a3,[%a2]1152
80001576:	19 22 40 20 	ld.w %d2,[%a2]1152
8000157a:	b7 32 02 20 	insert %d2,%d2,3,0,2
8000157e:	74 32       	st.w [%a3],%d2
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80001580:	02 94       	mov %d4,%d9
80001582:	40 c4       	mov.aa %a4,%a12
80001584:	6d ff 6e fa 	call 80000a60 <IfxVadc_disableAccess>
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80001588:	c2 18       	add %d8,1
8000158a:	8f f8 0f 81 	and %d8,%d8,255
8000158e:	bf 88 e8 ff 	jlt.u %d8,8,8000155e <IfxVadc_Adc_initModule+0xd0>
        IfxVadc_startupCalibration(vadcSFR);
80001592:	40 c4       	mov.aa %a4,%a12
80001594:	6d ff da fb 	call 80000d48 <IfxVadc_startupCalibration>
    return status;
80001598:	82 02       	mov %d2,0
8000159a:	00 90       	ret 
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
8000159c:	82 08       	mov %d8,0
8000159e:	1d ff f8 ff 	j 8000158e <IfxVadc_Adc_initModule+0x100>

800015a2 <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
800015a2:	40 ae       	mov.aa %a14,%sp
800015a4:	40 4c       	mov.aa %a12,%a4
800015a6:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
800015a8:	f4 c5       	st.a [%a12],%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
800015aa:	7b 90 b9 24 	movh %d2,19353
800015ae:	1b 02 68 29 	addi %d2,%d2,-27008
800015b2:	59 c2 18 00 	st.w [%a12]24,%d2

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
800015b6:	6d ff d2 fa 	call 80000b5a <IfxVadc_getAdcDigitalFrequency>
800015ba:	59 c2 14 00 	st.w [%a12]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
800015be:	6d 00 29 02 	call 80001a10 <IfxScuCcu_getSpbFrequency>
800015c2:	59 c2 1c 00 	st.w [%a12]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
800015c6:	82 02       	mov %d2,0
800015c8:	59 c2 08 00 	st.w [%a12]8,%d2
    config->globalInputClass[0].sampleTime = 1.0e-6;
800015cc:	7b 60 58 33 	movh %d3,13702
800015d0:	1b d3 7b 33 	addi %d3,%d3,14269
800015d4:	59 c3 04 00 	st.w [%a12]4,%d3
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
800015d8:	59 c2 10 00 	st.w [%a12]16,%d2
    config->globalInputClass[1].sampleTime = 1.0e-6;
800015dc:	59 c3 0c 00 	st.w [%a12]12,%d3
    config->startupCalibration             = FALSE;
800015e0:	e9 c2 20 00 	st.b [%a12]32,%d2
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
800015e4:	59 c2 24 00 	st.w [%a12]36,%d2
}
800015e8:	00 90       	ret 

800015ea <IfxStm_clearCompareFlag>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator)
{
800015ea:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
800015ec:	df 04 0a 80 	jne %d4,0,80001600 <IfxStm_clearCompareFlag+0x16>
    {
        stm->ISCR.B.CMP0IRR = 1U;
800015f0:	d9 42 00 10 	lea %a2,[%a4]64
800015f4:	19 42 00 10 	ld.w %d2,[%a4]64
800015f8:	b7 12 01 20 	insert %d2,%d2,1,0,1
800015fc:	74 22       	st.w [%a2],%d2
800015fe:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
80001600:	df 14 03 00 	jeq %d4,1,80001606 <IfxStm_clearCompareFlag+0x1c>
    {
        stm->ISCR.B.CMP1IRR = 1U;
    }
}
80001604:	00 90       	ret 
        stm->ISCR.B.CMP1IRR = 1U;
80001606:	d9 42 00 10 	lea %a2,[%a4]64
8000160a:	19 42 00 10 	ld.w %d2,[%a4]64
8000160e:	b7 12 01 21 	insert %d2,%d2,1,2,1
80001612:	74 22       	st.w [%a2],%d2
}
80001614:	1d ff f8 ff 	j 80001604 <IfxStm_clearCompareFlag+0x1a>

80001618 <IfxStm_enableComparatorInterrupt>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator)
{
80001618:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
8000161a:	df 04 0a 80 	jne %d4,0,8000162e <IfxStm_enableComparatorInterrupt+0x16>
    {
        stm->ICR.B.CMP0EN = 1U;
8000161e:	d9 42 3c 00 	lea %a2,[%a4]60
80001622:	19 42 3c 00 	ld.w %d2,[%a4]60
80001626:	b7 12 01 20 	insert %d2,%d2,1,0,1
8000162a:	74 22       	st.w [%a2],%d2
8000162c:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
8000162e:	df 14 03 00 	jeq %d4,1,80001634 <IfxStm_enableComparatorInterrupt+0x1c>
    {
        stm->ICR.B.CMP1EN = 1U;
    }
}
80001632:	00 90       	ret 
        stm->ICR.B.CMP1EN = 1U;
80001634:	d9 42 3c 00 	lea %a2,[%a4]60
80001638:	19 42 3c 00 	ld.w %d2,[%a4]60
8000163c:	b7 12 01 22 	insert %d2,%d2,1,4,1
80001640:	74 22       	st.w [%a2],%d2
}
80001642:	1d ff f8 ff 	j 80001632 <IfxStm_enableComparatorInterrupt+0x1a>

80001646 <IfxStm_enableOcdsSuspend>:


void IfxStm_enableOcdsSuspend(Ifx_STM *stm)
{
80001646:	40 ae       	mov.aa %a14,%sp
    Ifx_STM_OCS ocs = stm->OCS;
80001648:	d9 42 28 30 	lea %a2,[%a4]232
8000164c:	19 42 28 30 	ld.w %d2,[%a4]232

    /* Only if OCDS is enabled write into the OCS register */
    if (MODULE_CBS.OSTATE.B.OEN == 1U)
80001650:	85 f3 40 20 	ld.w %d3,f0000480 <_SMALL_DATA4_+0x5fff8480>
80001654:	6f 03 03 80 	jnz.t %d3,0,8000165a <IfxStm_enableOcdsSuspend+0x14>
        ocs.B.SUS_P      = 1;
        ocs.B.SUS        = 2;
        stm->OCS         = ocs;
        stm->OCS.B.SUS_P = 0;
    }
}
80001658:	00 90       	ret 
        ocs.B.SUS_P      = 1;
8000165a:	b7 12 01 2e 	insert %d2,%d2,1,28,1
        ocs.B.SUS        = 2;
8000165e:	b7 22 04 2c 	insert %d2,%d2,2,24,4
        stm->OCS         = ocs;
80001662:	74 22       	st.w [%a2],%d2
        stm->OCS.B.SUS_P = 0;
80001664:	54 22       	ld.w %d2,[%a2]
80001666:	b7 02 01 2e 	insert %d2,%d2,0,28,1
8000166a:	74 22       	st.w [%a2],%d2
}
8000166c:	1d ff f6 ff 	j 80001658 <IfxStm_enableOcdsSuspend+0x12>

80001670 <IfxStm_getIndex>:
    return module;
}


IfxStm_Index IfxStm_getIndex(Ifx_STM *stm)
{
80001670:	40 ae       	mov.aa %a14,%sp
    uint32       index;
    IfxStm_Index result;

    result = IfxStm_Index_none;

    for (index = 0; index < IFXSTM_NUM_MODULES; index++)
80001672:	82 02       	mov %d2,0
80001674:	1d 00 03 00 	j 8000167a <IfxStm_getIndex+0xa>
80001678:	c2 12       	add %d2,1
8000167a:	ff 32 18 80 	jge.u %d2,3,800016aa <IfxStm_getIndex+0x3a>
    {
        if (IfxStm_cfg_indexMap[index].module == stm)
8000167e:	8f 32 00 30 	sh %d3,%d2,3
80001682:	91 00 00 28 	movh.a %a2,32768
80001686:	d9 22 38 a0 	lea %a2,[%a2]696 <800002b8 <IfxStm_cfg_indexMap>>
8000168a:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000168e:	54 23       	ld.w %d3,[%a2]
80001690:	80 44       	mov.d %d4,%a4
80001692:	5f 43 f3 ff 	jne %d3,%d4,80001678 <IfxStm_getIndex+0x8>
        {
            result = (IfxStm_Index)IfxStm_cfg_indexMap[index].index;
80001696:	06 32       	sh %d2,3
80001698:	91 00 00 28 	movh.a %a2,32768
8000169c:	d9 22 38 a0 	lea %a2,[%a2]696 <800002b8 <IfxStm_cfg_indexMap>>
800016a0:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800016a4:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
800016a8:	00 90       	ret 
    result = IfxStm_Index_none;
800016aa:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
800016ac:	00 90       	ret 

800016ae <IfxStm_initCompare>:
    return comparator == IfxStm_Comparator_0 ? &MODULE_SRC.STM.STM[index].SR0 : &MODULE_SRC.STM.STM[index].SR1;
}


boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config)
{
800016ae:	40 ae       	mov.aa %a14,%sp
800016b0:	40 4d       	mov.aa %a13,%a4
800016b2:	40 5c       	mov.aa %a12,%a5
    sint32        index;
    boolean       result;
    Ifx_STM_CMCON comcon = stm->CMCON;
800016b4:	19 42 38 00 	ld.w %d2,[%a4]56
    Ifx_STM_ICR   icr    = stm->ICR;
800016b8:	19 43 3c 00 	ld.w %d3,[%a4]60

    if (config->comparator == 0)
800016bc:	54 54       	ld.w %d4,[%a5]
800016be:	df 04 82 80 	jne %d4,0,800017c2 <IfxStm_initCompare+0x114>
    {
        comcon.B.MSIZE0  = config->compareSize;
800016c2:	19 54 0c 00 	ld.w %d4,[%a5]12
800016c6:	37 42 05 20 	insert %d2,%d2,%d4,0,5
        comcon.B.MSTART0 = config->compareOffset;
800016ca:	19 54 08 00 	ld.w %d4,[%a5]8
800016ce:	37 42 05 24 	insert %d2,%d2,%d4,8,5
        icr.B.CMP0OS     = config->comparatorInterrupt;
800016d2:	19 54 04 00 	ld.w %d4,[%a5]4
800016d6:	67 43 02 30 	ins.t %d3,%d3,2,%d4,0
        result           = TRUE;
800016da:	82 18       	mov %d8,1
    {
        /*Invalid value */
        result = FALSE;
    }

    stm->ICR.U   = icr.U;
800016dc:	59 d3 3c 00 	st.w [%a13]60,%d3
    stm->CMCON.U = comcon.U;
800016e0:	59 d2 38 00 	st.w [%a13]56,%d2

    /* configure interrupt */
    index = IfxStm_getIndex(stm);
800016e4:	40 d4       	mov.aa %a4,%a13
800016e6:	6d ff c5 ff 	call 80001670 <IfxStm_getIndex>

    if (config->triggerPriority > 0)
800016ea:	b9 c3 14 00 	ld.hu %d3,[%a12]20
800016ee:	df 03 20 00 	jeq %d3,0,8000172e <IfxStm_initCompare+0x80>
    {
        volatile Ifx_SRC_SRCR *srcr;

        if (config->comparatorInterrupt == IfxStm_ComparatorInterrupt_ir0)
800016f2:	19 c4 04 00 	ld.w %d4,[%a12]4
800016f6:	df 04 7a 80 	jne %d4,0,800017ea <IfxStm_initCompare+0x13c>
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR0);
800016fa:	06 32       	sh %d2,3
800016fc:	7b 40 00 4f 	movh %d4,61444
80001700:	1b 04 49 48 	addi %d4,%d4,-31600
80001704:	60 42       	mov.a %a2,%d4
80001706:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
        else
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
        }

        IfxSrc_init(srcr, config->typeOfService, config->triggerPriority);
8000170a:	19 c4 18 00 	ld.w %d4,[%a12]24
    src->B.SRPN = priority;
8000170e:	54 22       	ld.w %d2,[%a2]
80001710:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80001714:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80001716:	54 22       	ld.w %d2,[%a2]
80001718:	37 42 82 25 	insert %d2,%d2,%d4,11,2
8000171c:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
8000171e:	54 22       	ld.w %d2,[%a2]
80001720:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80001724:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80001726:	54 22       	ld.w %d2,[%a2]
80001728:	b7 12 01 25 	insert %d2,%d2,1,10,1
8000172c:	74 22       	st.w [%a2],%d2
        IfxSrc_enable(srcr);
    }

    /*Configure the comparator ticks to current value to avoid any wrong triggering*/
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset);
8000172e:	39 c5 08 00 	ld.bu %d5,[%a12]8

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80001732:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
80001736:	19 d2 2c 00 	ld.w %d2,[%a13]44
8000173a:	8f 06 40 41 	or %d4,%d6,0
8000173e:	02 23       	mov %d3,%d2
{
    uint64 now;

    now = IfxStm_get(stm);

    return (uint32)(now >> offset);
80001740:	8b 05 82 22 	ge %d2,%d5,32
80001744:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
80001748:	ab 03 a0 32 	seln %d3,%d2,%d3,0
8000174c:	8f f5 01 21 	and %d2,%d5,31
80001750:	8b 02 02 51 	rsub %d5,%d2,32
80001754:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
80001758:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
8000175c:	54 c2       	ld.w %d2,[%a12]
8000175e:	1b c2 00 20 	addi %d2,%d2,12
80001762:	06 22       	sh %d2,2
80001764:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001768:	74 23       	st.w [%a2],%d3

    /* clear the interrupt flag of the selected comparator before enabling the interrupt */
    /* this is to avaoid the unneccesary interrupt for the compare match of reset values of the registers */
    IfxStm_clearCompareFlag(stm, config->comparator);
8000176a:	54 c4       	ld.w %d4,[%a12]
8000176c:	40 d4       	mov.aa %a4,%a13
8000176e:	6d ff 3e ff 	call 800015ea <IfxStm_clearCompareFlag>
    /* enable the interrupt for the selected comparator */
    IfxStm_enableComparatorInterrupt(stm, config->comparator);
80001772:	54 c4       	ld.w %d4,[%a12]
80001774:	40 d4       	mov.aa %a4,%a13
80001776:	6d ff 51 ff 	call 80001618 <IfxStm_enableComparatorInterrupt>

    /*Configure the comparator ticks */
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset) + config->ticks;
8000177a:	39 c5 08 00 	ld.bu %d5,[%a12]8
    result  = stm->TIM0.U;
8000177e:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
80001782:	19 d2 2c 00 	ld.w %d2,[%a13]44
80001786:	8f 06 40 41 	or %d4,%d6,0
8000178a:	02 23       	mov %d3,%d2
    return (uint32)(now >> offset);
8000178c:	8b 05 82 22 	ge %d2,%d5,32
80001790:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
80001794:	ab 03 a0 32 	seln %d3,%d2,%d3,0
80001798:	8f f5 01 21 	and %d2,%d5,31
8000179c:	8b 02 02 51 	rsub %d5,%d2,32
800017a0:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
800017a4:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
800017a8:	02 34       	mov %d4,%d3
800017aa:	19 c3 10 00 	ld.w %d3,[%a12]16
800017ae:	54 c2       	ld.w %d2,[%a12]
800017b0:	42 43       	add %d3,%d4
800017b2:	1b c2 00 20 	addi %d2,%d2,12
800017b6:	06 22       	sh %d2,2
800017b8:	01 d2 00 d6 	addsc.a %a13,%a13,%d2,0
800017bc:	74 d3       	st.w [%a13],%d3

    return result;
}
800017be:	02 82       	mov %d2,%d8
800017c0:	00 90       	ret 
    else if (config->comparator == 1)
800017c2:	df 14 05 00 	jeq %d4,1,800017cc <IfxStm_initCompare+0x11e>
        result = FALSE;
800017c6:	82 08       	mov %d8,0
800017c8:	1d ff 8a ff 	j 800016dc <IfxStm_initCompare+0x2e>
        comcon.B.MSIZE1  = config->compareSize;
800017cc:	19 54 0c 00 	ld.w %d4,[%a5]12
800017d0:	37 42 05 28 	insert %d2,%d2,%d4,16,5
        comcon.B.MSTART1 = config->compareOffset;
800017d4:	19 54 08 00 	ld.w %d4,[%a5]8
800017d8:	37 42 05 2c 	insert %d2,%d2,%d4,24,5
        icr.B.CMP1OS     = config->comparatorInterrupt;
800017dc:	19 54 04 00 	ld.w %d4,[%a5]4
800017e0:	67 43 06 30 	ins.t %d3,%d3,6,%d4,0
        result           = TRUE;
800017e4:	82 18       	mov %d8,1
800017e6:	1d ff 7b ff 	j 800016dc <IfxStm_initCompare+0x2e>
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
800017ea:	06 32       	sh %d2,3
800017ec:	c2 42       	add %d2,4
800017ee:	7b 40 00 4f 	movh %d4,61444
800017f2:	1b 04 49 48 	addi %d4,%d4,-31600
800017f6:	60 42       	mov.a %a2,%d4
800017f8:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800017fc:	1d ff 87 ff 	j 8000170a <IfxStm_initCompare+0x5c>

80001800 <IfxStm_initCompareConfig>:


void IfxStm_initCompareConfig(IfxStm_CompareConfig *config)
{
80001800:	40 ae       	mov.aa %a14,%sp
    config->comparator          = IfxStm_Comparator_0;
80001802:	82 02       	mov %d2,0
80001804:	74 42       	st.w [%a4],%d2
    config->compareOffset       = IfxStm_ComparatorOffset_0;
80001806:	59 42 08 00 	st.w [%a4]8,%d2
    config->compareSize         = IfxStm_ComparatorSize_32Bits;
8000180a:	3b f0 01 30 	mov %d3,31
8000180e:	59 43 0c 00 	st.w [%a4]12,%d3
    config->comparatorInterrupt = IfxStm_ComparatorInterrupt_ir0;     /*User must select the interrupt output */
80001812:	59 42 04 00 	st.w [%a4]4,%d2
    config->ticks               = 0xFFFFFFFF;
80001816:	82 f3       	mov %d3,-1
80001818:	59 43 10 00 	st.w [%a4]16,%d3
    config->triggerPriority     = 0;
8000181c:	f9 42 14 00 	st.h [%a4]20,%d2
    config->typeOfService       = IfxSrc_Tos_cpu0;
80001820:	59 42 18 00 	st.w [%a4]24,%d2
}
80001824:	00 90       	ret 

80001826 <IfxScuCcu_isOscillatorStable>:
    *cfg = IfxScuCcu_defaultErayPllConfig;
}


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
80001826:	40 ae       	mov.aa %a14,%sp
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
80001828:	6d 00 46 04 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
8000182c:	02 28       	mov %d8,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
8000182e:	91 30 00 2f 	movh.a %a2,61443
80001832:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
80001836:	54 23       	ld.w %d3,[%a2]
80001838:	8f 03 c6 31 	andn %d3,%d3,96
8000183c:	74 23       	st.w [%a2],%d3

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
8000183e:	91 00 00 36 	movh.a %a3,24576
80001842:	19 33 18 00 	ld.w %d3,[%a3]24 <60000018 <IfxScuCcu_xtalFrequency>>
80001846:	7b 00 b6 26 	movh %d2,27488
8000184a:	1b b2 a6 2c 	addi %d2,%d2,-13717
8000184e:	73 23 68 20 	mul.u %e2,%d3,%d2
80001852:	8f c3 1e 20 	sh %d2,%d3,-20
80001856:	c2 f2       	add %d2,-1
80001858:	54 23       	ld.w %d3,[%a2]
8000185a:	37 23 05 38 	insert %d3,%d3,%d2,16,5
8000185e:	74 23       	st.w [%a2],%d3

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80001860:	54 23       	ld.w %d3,[%a2]
80001862:	b7 13 01 31 	insert %d3,%d3,1,2,1
80001866:	74 23       	st.w [%a2],%d3
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
80001868:	3b 00 28 30 	mov %d3,640

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000186c:	1d 00 05 00 	j 80001876 <IfxScuCcu_isOscillatorStable+0x50>
    {
        TimeoutCtr--;
80001870:	c2 f3       	add %d3,-1

        if (TimeoutCtr == 0)
80001872:	df 03 25 00 	jeq %d3,0,800018bc <IfxScuCcu_isOscillatorStable+0x96>
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80001876:	91 30 00 2f 	movh.a %a2,61443
8000187a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
8000187e:	54 25       	ld.w %d5,[%a2]
80001880:	6f 15 f8 7f 	jz.t %d5,1,80001870 <IfxScuCcu_isOscillatorStable+0x4a>
80001884:	54 25       	ld.w %d5,[%a2]
80001886:	6f 85 f5 7f 	jz.t %d5,8,80001870 <IfxScuCcu_isOscillatorStable+0x4a>
    boolean status     = 0;
8000188a:	82 09       	mov %d9,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
8000188c:	02 84       	mov %d4,%d8
8000188e:	6d 00 aa 02 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80001892:	91 30 00 2f 	movh.a %a2,61443
80001896:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
8000189a:	54 23       	ld.w %d3,[%a2]
8000189c:	b7 13 81 31 	insert %d3,%d3,1,3,1
800018a0:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
800018a2:	91 30 00 2f 	movh.a %a2,61443
800018a6:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
800018aa:	54 23       	ld.w %d3,[%a2]
800018ac:	b7 13 81 31 	insert %d3,%d3,1,3,1
800018b0:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinitPw);
800018b2:	02 84       	mov %d4,%d8
800018b4:	6d 00 1d 04 	call 800020ee <IfxScuWdt_setCpuEndinit>
    }

    return status;
}
800018b8:	02 92       	mov %d2,%d9
800018ba:	00 90       	ret 
            status = 1;
800018bc:	82 19       	mov %d9,1
800018be:	1d ff e7 ff 	j 8000188c <IfxScuCcu_isOscillatorStable+0x66>

800018c2 <IfxScuCcu_getOscFrequency>:
{
800018c2:	40 ae       	mov.aa %a14,%sp
    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
800018c4:	91 30 00 2f 	movh.a %a2,61443
800018c8:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800018cc:	54 22       	ld.w %d2,[%a2]
800018ce:	37 02 62 2e 	extr.u %d2,%d2,28,2
800018d2:	df 02 10 00 	jeq %d2,0,800018f2 <IfxScuCcu_getOscFrequency+0x30>
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
800018d6:	54 22       	ld.w %d2,[%a2]
800018d8:	37 02 62 2e 	extr.u %d2,%d2,28,2
800018dc:	df 12 04 00 	jeq %d2,1,800018e4 <IfxScuCcu_getOscFrequency+0x22>
        freq = 0.0f;
800018e0:	82 02       	mov %d2,0
}
800018e2:	00 90       	ret 
        freq = (float32)IfxScuCcu_xtalFrequency;
800018e4:	91 00 00 26 	movh.a %a2,24576
800018e8:	19 22 18 00 	ld.w %d2,[%a2]24 <60000018 <IfxScuCcu_xtalFrequency>>
800018ec:	4b 02 61 21 	utof %d2,%d2
800018f0:	00 90       	ret 
        freq = IFXSCU_EVR_OSC_FREQUENCY;
800018f2:	7b f0 cb 24 	movh %d2,19647
800018f6:	1b 02 c2 2b 	addi %d2,%d2,-17376
800018fa:	00 90       	ret 

800018fc <IfxScuCcu_getPllFrequency>:
{
800018fc:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
800018fe:	6d ff e2 ff 	call 800018c2 <IfxScuCcu_getOscFrequency>
80001902:	02 24       	mov %d4,%d2
    if (scu->PLLSTAT.B.VCOBYST == 1)
80001904:	91 30 00 2f 	movh.a %a2,61443
80001908:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
8000190c:	19 23 14 00 	ld.w %d3,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
80001910:	6f 03 27 80 	jnz.t %d3,0,8000195e <IfxScuCcu_getPllFrequency+0x62>
    else if (scu->PLLSTAT.B.FINDIS == 1)
80001914:	91 30 00 2f 	movh.a %a2,61443
80001918:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
8000191c:	19 22 14 00 	ld.w %d2,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
80001920:	6f 32 2d 80 	jnz.t %d2,3,8000197a <IfxScuCcu_getPllFrequency+0x7e>
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80001924:	91 30 00 2f 	movh.a %a2,61443
80001928:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
8000192c:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
80001930:	37 02 e7 24 	extr.u %d2,%d2,9,7
80001934:	c2 12       	add %d2,1
80001936:	4b 02 41 21 	itof %d2,%d2
8000193a:	4b 42 41 30 	mul.f %d3,%d2,%d4
8000193e:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001942:	8f f4 07 41 	and %d4,%d4,127
80001946:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
8000194a:	37 02 64 2c 	extr.u %d2,%d2,24,4
8000194e:	c2 12       	add %d2,1
80001950:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80001954:	4b 02 41 21 	itof %d2,%d2
80001958:	4b 23 51 20 	div.f %d2,%d3,%d2
}
8000195c:	00 90       	ret 
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
8000195e:	91 30 00 2f 	movh.a %a2,61443
80001962:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001966:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
8000196a:	37 02 67 28 	extr.u %d2,%d2,16,7
8000196e:	c2 12       	add %d2,1
80001970:	4b 02 41 21 	itof %d2,%d2
80001974:	4b 24 51 20 	div.f %d2,%d4,%d2
80001978:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
8000197a:	91 30 00 2f 	movh.a %a2,61443
8000197e:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001982:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001986:	8f f4 07 41 	and %d4,%d4,127
8000198a:	c2 14       	add %d4,1
8000198c:	6d 00 3c 1a 	call 80004e04 <__floatsidf>
80001990:	0b 23 10 68 	mov %e6,%d3,%d2
80001994:	82 04       	mov %d4,0
80001996:	7b 80 19 54 	movh %d5,16792
8000199a:	1b 45 78 5d 	addi %d5,%d5,-10364
8000199e:	6d 00 8b 19 	call 80004cb4 <__divdf3>
800019a2:	0b 23 10 48 	mov %e4,%d3,%d2
800019a6:	6d 00 6a 1a 	call 80004e7a <__truncdfsf2>
800019aa:	00 90       	ret 

800019ac <IfxScuCcu_getSourceFrequency>:
{
800019ac:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON0.B.CLKSEL)
800019ae:	91 30 00 2f 	movh.a %a2,61443
800019b2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800019b6:	54 22       	ld.w %d2,[%a2]
800019b8:	37 02 62 2e 	extr.u %d2,%d2,28,2
800019bc:	df 02 07 00 	jeq %d2,0,800019ca <IfxScuCcu_getSourceFrequency+0x1e>
800019c0:	df 12 0a 80 	jne %d2,1,800019d4 <IfxScuCcu_getSourceFrequency+0x28>
        sourcefreq = IfxScuCcu_getPllFrequency();
800019c4:	6d ff 9c ff 	call 800018fc <IfxScuCcu_getPllFrequency>
        break;
800019c8:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
800019ca:	7b f0 cb 24 	movh %d2,19647
800019ce:	1b 02 c2 2b 	addi %d2,%d2,-17376
800019d2:	00 90       	ret 
        sourcefreq = 0;
800019d4:	82 02       	mov %d2,0
}
800019d6:	00 90       	ret 

800019d8 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
800019d8:	40 ae       	mov.aa %a14,%sp
800019da:	02 48       	mov %d8,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
800019dc:	6d ff e8 ff 	call 800019ac <IfxScuCcu_getSourceFrequency>
800019e0:	91 30 00 2f 	movh.a %a2,61443
800019e4:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800019e8:	54 23       	ld.w %d3,[%a2]
800019ea:	37 03 64 34 	extr.u %d3,%d3,8,4
800019ee:	4b 03 41 31 	itof %d3,%d3
800019f2:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
800019f6:	4b 28 41 40 	mul.f %d4,%d8,%d2
800019fa:	4b 04 71 41 	ftouz %d4,%d4
    uint32 stmCountBegin = STM0_TIM0.U;
800019fe:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80001a02:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80001a06:	a2 32       	sub %d2,%d3
80001a08:	3f 42 fd ff 	jlt.u %d2,%d4,80001a02 <IfxScuCcu_wait+0x2a>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80001a0c:	00 90       	ret 
	...

80001a10 <IfxScuCcu_getSpbFrequency>:
{
80001a10:	40 ae       	mov.aa %a14,%sp
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80001a12:	6d ff cd ff 	call 800019ac <IfxScuCcu_getSourceFrequency>
    switch (SCU_CCUCON0.B.LPDIV)
80001a16:	91 30 00 2f 	movh.a %a2,61443
80001a1a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001a1e:	54 23       	ld.w %d3,[%a2]
80001a20:	37 03 64 36 	extr.u %d3,%d3,12,4
80001a24:	ff 53 39 80 	jge.u %d3,5,80001a96 <IfxScuCcu_getSpbFrequency+0x86>
80001a28:	91 00 00 28 	movh.a %a2,32768
80001a2c:	d9 22 b8 81 	lea %a2,[%a2]6712 <80001a38 <IfxScuCcu_getSpbFrequency+0x28>>
80001a30:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
80001a34:	dc 02       	ji %a2
80001a36:	00 00       	nop 
80001a38:	1d 00 0a 00 	j 80001a4c <IfxScuCcu_getSpbFrequency+0x3c>
80001a3c:	1d 00 19 00 	j 80001a6e <IfxScuCcu_getSpbFrequency+0x5e>
80001a40:	1d 00 1c 00 	j 80001a78 <IfxScuCcu_getSpbFrequency+0x68>
80001a44:	1d 00 1f 00 	j 80001a82 <IfxScuCcu_getSpbFrequency+0x72>
80001a48:	1d 00 22 00 	j 80001a8c <IfxScuCcu_getSpbFrequency+0x7c>
        if (SCU_CCUCON0.B.SPBDIV == 0)
80001a4c:	91 30 00 2f 	movh.a %a2,61443
80001a50:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001a54:	54 23       	ld.w %d3,[%a2]
80001a56:	37 03 64 38 	extr.u %d3,%d3,16,4
80001a5a:	df 03 20 00 	jeq %d3,0,80001a9a <IfxScuCcu_getSpbFrequency+0x8a>
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
80001a5e:	54 23       	ld.w %d3,[%a2]
80001a60:	37 03 64 38 	extr.u %d3,%d3,16,4
80001a64:	4b 03 41 31 	itof %d3,%d3
80001a68:	4b 32 51 20 	div.f %d2,%d2,%d3
80001a6c:	00 90       	ret 
        spbFrequency = sourceFrequency / 30;
80001a6e:	7b 00 1f 34 	movh %d3,16880
80001a72:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001a76:	00 90       	ret 
        spbFrequency = sourceFrequency / 60;
80001a78:	7b 00 27 34 	movh %d3,17008
80001a7c:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001a80:	00 90       	ret 
        spbFrequency = sourceFrequency / 120;
80001a82:	7b 00 2f 34 	movh %d3,17136
80001a86:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001a8a:	00 90       	ret 
        spbFrequency = sourceFrequency / 240;
80001a8c:	7b 00 37 34 	movh %d3,17264
80001a90:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001a94:	00 90       	ret 
    switch (SCU_CCUCON0.B.LPDIV)
80001a96:	82 02       	mov %d2,0
80001a98:	00 90       	ret 
            spbFrequency = 0.0f;
80001a9a:	82 02       	mov %d2,0
}
80001a9c:	00 90       	ret 

80001a9e <IfxScuCcu_getSpbFrequency_end>:
	...

80001aa0 <IfxScuCcu_init>:
{
80001aa0:	40 ae       	mov.aa %a14,%sp
80001aa2:	40 4c       	mov.aa %a12,%a4
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80001aa4:	19 42 10 10 	ld.w %d2,[%a4]80
80001aa8:	91 00 00 26 	movh.a %a2,24576
80001aac:	59 22 18 00 	st.w [%a2]24 <60000018 <IfxScuCcu_xtalFrequency>>,%d2
    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80001ab0:	6d 00 02 03 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
80001ab4:	02 2a       	mov %d10,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
80001ab6:	6d 00 11 03 	call 800020d8 <IfxScuWdt_getSafetyWatchdogPassword>
80001aba:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80001abc:	02 a4       	mov %d4,%d10
80001abe:	6d 00 92 01 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80001ac2:	91 30 00 2f 	movh.a %a2,61443
80001ac6:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001aca:	54 2d       	ld.w %d13,[%a2]
80001acc:	37 0d e1 d1 	extr.u %d13,%d13,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
80001ad0:	54 22       	ld.w %d2,[%a2]
80001ad2:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001ad6:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80001ad8:	02 a4       	mov %d4,%d10
80001ada:	6d 00 0a 03 	call 800020ee <IfxScuWdt_setCpuEndinit>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001ade:	02 84       	mov %d4,%d8
80001ae0:	6d 00 a6 01 	call 80001e2c <IfxScuWdt_clearSafetyEndinit>
        while (SCU_CCUCON0.B.LCK != 0U)
80001ae4:	91 30 00 2f 	movh.a %a2,61443
80001ae8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001aec:	54 23       	ld.w %d3,[%a2]
80001aee:	bf 03 fb 7f 	jlt %d3,0,80001ae4 <IfxScuCcu_init+0x44>
        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80001af2:	54 22       	ld.w %d2,[%a2]
80001af4:	b7 02 02 2e 	insert %d2,%d2,0,28,2
80001af8:	74 22       	st.w [%a2],%d2
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80001afa:	54 22       	ld.w %d2,[%a2]
80001afc:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80001b00:	74 22       	st.w [%a2],%d2
        SCU_PLLCON0.B.SETFINDIS = 1;
80001b02:	91 30 00 2f 	movh.a %a2,61443
80001b06:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001b0a:	54 22       	ld.w %d2,[%a2]
80001b0c:	b7 12 01 22 	insert %d2,%d2,1,4,1
80001b10:	74 22       	st.w [%a2],%d2
        while (SCU_CCUCON1.B.LCK != 0U)
80001b12:	91 30 00 2f 	movh.a %a2,61443
80001b16:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001b1a:	54 23       	ld.w %d3,[%a2]
80001b1c:	bf 03 fb 7f 	jlt %d3,0,80001b12 <IfxScuCcu_init+0x72>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80001b20:	54 22       	ld.w %d2,[%a2]
80001b22:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80001b26:	74 22       	st.w [%a2],%d2
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80001b28:	54 22       	ld.w %d2,[%a2]
80001b2a:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80001b2e:	74 22       	st.w [%a2],%d2
        status             |= IfxScuCcu_isOscillatorStable();
80001b30:	6d ff 7b fe 	call 80001826 <IfxScuCcu_isOscillatorStable>
80001b34:	02 2c       	mov %d12,%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001b36:	02 84       	mov %d4,%d8
80001b38:	6d 00 00 03 	call 80002138 <IfxScuWdt_setSafetyEndinit>
    if (status == 0)
80001b3c:	df 0c 28 00 	jeq %d12,0,80001b8c <IfxScuCcu_init+0xec>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001b40:	02 84       	mov %d4,%d8
80001b42:	6d 00 75 01 	call 80001e2c <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80001b46:	91 30 00 2f 	movh.a %a2,61443
80001b4a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001b4e:	54 23       	ld.w %d3,[%a2]
80001b50:	8f 03 c4 31 	andn %d3,%d3,64
80001b54:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001b56:	02 84       	mov %d4,%d8
80001b58:	6d 00 f0 02 	call 80002138 <IfxScuWdt_setSafetyEndinit>
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80001b5c:	02 a4       	mov %d4,%d10
80001b5e:	6d 00 42 01 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80001b62:	91 30 00 2f 	movh.a %a2,61443
80001b66:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80001b6a:	54 23       	ld.w %d3,[%a2]
80001b6c:	b7 13 81 31 	insert %d3,%d3,1,3,1
80001b70:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80001b72:	91 30 00 2f 	movh.a %a2,61443
80001b76:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001b7a:	54 23       	ld.w %d3,[%a2]
80001b7c:	67 d3 03 30 	ins.t %d3,%d3,3,%d13,0
80001b80:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinit_pw);
80001b82:	02 a4       	mov %d4,%d10
80001b84:	6d 00 b5 02 	call 800020ee <IfxScuWdt_setCpuEndinit>
}
80001b88:	02 c2       	mov %d2,%d12
80001b8a:	00 90       	ret 
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001b8c:	02 84       	mov %d4,%d8
80001b8e:	6d 00 4f 01 	call 80001e2c <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80001b92:	91 30 00 2f 	movh.a %a2,61443
80001b96:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001b9a:	54 23       	ld.w %d3,[%a2]
80001b9c:	6f 53 fb 7f 	jz.t %d3,5,80001b92 <IfxScuCcu_init+0xf2>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80001ba0:	39 c3 0a 00 	ld.bu %d3,[%a12]10
80001ba4:	91 30 00 2f 	movh.a %a2,61443
80001ba8:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80001bac:	54 22       	ld.w %d2,[%a2]
80001bae:	37 32 07 20 	insert %d2,%d2,%d3,0,7
80001bb2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80001bb4:	39 c3 08 00 	ld.bu %d3,[%a12]8
80001bb8:	91 30 00 2f 	movh.a %a2,61443
80001bbc:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001bc0:	54 22       	ld.w %d2,[%a2]
80001bc2:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
80001bc6:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
80001bc8:	39 c3 09 00 	ld.bu %d3,[%a12]9
80001bcc:	54 22       	ld.w %d2,[%a2]
80001bce:	37 32 87 24 	insert %d2,%d2,%d3,9,7
80001bd2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80001bd4:	54 22       	ld.w %d2,[%a2]
80001bd6:	b7 12 01 23 	insert %d2,%d2,1,6,1
80001bda:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
80001bdc:	54 22       	ld.w %d2,[%a2]
80001bde:	b7 02 01 28 	insert %d2,%d2,0,16,1
80001be2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80001be4:	54 22       	ld.w %d2,[%a2]
80001be6:	b7 12 81 22 	insert %d2,%d2,1,5,1
80001bea:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80001bec:	54 22       	ld.w %d2,[%a2]
80001bee:	b7 12 01 28 	insert %d2,%d2,1,16,1
80001bf2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.RESLD = 1;
80001bf4:	54 22       	ld.w %d2,[%a2]
80001bf6:	b7 12 01 29 	insert %d2,%d2,1,18,1
80001bfa:	74 22       	st.w [%a2],%d2
                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80001bfc:	7b 20 85 43 	movh %d4,14418
80001c00:	1b 74 71 4b 	addi %d4,%d4,-18665
80001c04:	6d ff ea fe 	call 800019d8 <IfxScuCcu_wait>
                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
80001c08:	91 30 00 2f 	movh.a %a2,61443
80001c0c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001c10:	54 23       	ld.w %d3,[%a2]
80001c12:	6f 23 fb 7f 	jz.t %d3,2,80001c08 <IfxScuCcu_init+0x168>
                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80001c16:	91 30 00 2f 	movh.a %a2,61443
80001c1a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001c1e:	54 22       	ld.w %d2,[%a2]
80001c20:	8f 12 c0 21 	andn %d2,%d2,1
80001c24:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80001c26:	91 30 00 2f 	movh.a %a2,61443
80001c2a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001c2e:	54 23       	ld.w %d3,[%a2]
80001c30:	bf 03 fb 7f 	jlt %d3,0,80001c26 <IfxScuCcu_init+0x186>
                    SCU_CCUCON0.B.CLKSEL = 0x01;
80001c34:	54 22       	ld.w %d2,[%a2]
80001c36:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80001c3a:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80001c3c:	91 30 00 2f 	movh.a %a2,61443
80001c40:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001c44:	54 23       	ld.w %d3,[%a2]
80001c46:	bf 03 fb 7f 	jlt %d3,0,80001c3c <IfxScuCcu_init+0x19c>
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80001c4a:	19 c4 0c 00 	ld.w %d4,[%a12]12
80001c4e:	6d ff c5 fe 	call 800019d8 <IfxScuCcu_wait>
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80001c52:	91 30 00 2f 	movh.a %a2,61443
80001c56:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001c5a:	54 23       	ld.w %d3,[%a2]
80001c5c:	19 c4 14 00 	ld.w %d4,[%a12]20 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001c60:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80001c64:	19 c2 10 00 	ld.w %d2,[%a12]16
80001c68:	26 42       	and %d2,%d4
80001c6a:	a6 23       	or %d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80001c6c:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon0.B.UP     = 1;
80001c70:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80001c74:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON1.B.LCK != 0U)
80001c76:	91 30 00 2f 	movh.a %a2,61443
80001c7a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001c7e:	54 23       	ld.w %d3,[%a2]
80001c80:	bf 03 fb 7f 	jlt %d3,0,80001c76 <IfxScuCcu_init+0x1d6>
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80001c84:	54 23       	ld.w %d3,[%a2]
80001c86:	19 c4 1c 00 	ld.w %d4,[%a12]28
80001c8a:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80001c8e:	19 c2 18 00 	ld.w %d2,[%a12]24
80001c92:	26 42       	and %d2,%d4
80001c94:	a6 23       	or %d3,%d2
                        ccucon1.B.INSEL = 1;
80001c96:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon1.B.UP    = 1;
80001c9a:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON1     = ccucon1;
80001c9e:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON2.B.LCK != 0U)
80001ca0:	91 30 00 2f 	movh.a %a2,61443
80001ca4:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x6002e040>>
80001ca8:	54 23       	ld.w %d3,[%a2]
80001caa:	bf 03 fb 7f 	jlt %d3,0,80001ca0 <IfxScuCcu_init+0x200>
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80001cae:	54 23       	ld.w %d3,[%a2]
80001cb0:	19 c4 24 00 	ld.w %d4,[%a12]36
80001cb4:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80001cb8:	19 c2 20 00 	ld.w %d2,[%a12]32
80001cbc:	26 42       	and %d2,%d4
80001cbe:	a6 32       	or %d2,%d3
                        ccucon2.B.UP = 1;
80001cc0:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON2  = ccucon2;
80001cc4:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON5.B.LCK != 0U)
80001cc6:	91 30 00 2f 	movh.a %a2,61443
80001cca:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
80001cce:	54 23       	ld.w %d3,[%a2]
80001cd0:	bf 03 fb 7f 	jlt %d3,0,80001cc6 <IfxScuCcu_init+0x226>
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80001cd4:	54 23       	ld.w %d3,[%a2]
80001cd6:	19 c4 2c 00 	ld.w %d4,[%a12]44
80001cda:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80001cde:	19 c2 28 00 	ld.w %d2,[%a12]40
80001ce2:	26 42       	and %d2,%d4
80001ce4:	a6 32       	or %d2,%d3
                        ccucon5.B.UP = 1;
80001ce6:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON5  = ccucon5;
80001cea:	74 22       	st.w [%a2],%d2
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80001cec:	91 30 00 2f 	movh.a %a2,61443
80001cf0:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x6002e080>>
80001cf4:	54 23       	ld.w %d3,[%a2]
80001cf6:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036080 <_SMALL_DATA4_+0x6002e080>>
80001cfa:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80001cfe:	19 c2 30 00 	ld.w %d2,[%a12]48
80001d02:	26 42       	and %d2,%d4
80001d04:	a6 32       	or %d2,%d3
                        SCU_CCUCON6 = ccucon6;
80001d06:	74 22       	st.w [%a2],%d2
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80001d08:	91 30 00 2f 	movh.a %a2,61443
80001d0c:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x6002e084>>
80001d10:	54 23       	ld.w %d3,[%a2]
80001d12:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f0036084 <_SMALL_DATA4_+0x6002e084>>
80001d16:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80001d1a:	19 c2 38 00 	ld.w %d2,[%a12]56
80001d1e:	26 42       	and %d2,%d4
80001d20:	a6 32       	or %d2,%d3
                        SCU_CCUCON7 = ccucon7;
80001d22:	74 22       	st.w [%a2],%d2
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80001d24:	91 30 00 2f 	movh.a %a2,61443
80001d28:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80001d2c:	54 23       	ld.w %d3,[%a2]
80001d2e:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80001d32:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80001d36:	19 c2 00 10 	ld.w %d2,[%a12]64
80001d3a:	26 42       	and %d2,%d4
80001d3c:	a6 32       	or %d2,%d3
                        SCU_CCUCON8 = ccucon8;
80001d3e:	74 22       	st.w [%a2],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001d40:	02 84       	mov %d4,%d8
80001d42:	6d 00 fb 01 	call 80002138 <IfxScuWdt_setSafetyEndinit>
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80001d46:	91 00 80 df 	movh.a %a13,63488
80001d4a:	d9 dd 14 02 	lea %a13,[%a13]8212 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80001d4e:	54 d9       	ld.w %d9,[%a13]
80001d50:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80001d54:	0f 49 e0 90 	andn %d9,%d9,%d4
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80001d58:	19 c2 08 10 	ld.w %d2,[%a12]72
80001d5c:	26 42       	and %d2,%d4
80001d5e:	a6 29       	or %d9,%d2
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80001d60:	02 a4       	mov %d4,%d10
80001d62:	6d 00 40 00 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80001d66:	74 d9       	st.w [%a13],%d9
                IfxScuWdt_setCpuEndinit(endinit_pw);
80001d68:	02 a4       	mov %d4,%d10
80001d6a:	6d 00 c2 01 	call 800020ee <IfxScuWdt_setCpuEndinit>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80001d6e:	02 c9       	mov %d9,%d12
80001d70:	1d 00 0d 00 	j 80001d8a <IfxScuCcu_init+0x2ea>
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80001d74:	99 c2 04 00 	ld.a %a2,[%a12]4
80001d78:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001d7c:	19 24 04 00 	ld.w %d4,[%a2]4
80001d80:	6d ff 2c fe 	call 800019d8 <IfxScuCcu_wait>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80001d84:	c2 19       	add %d9,1
80001d86:	8f f9 0f 91 	and %d9,%d9,255
80001d8a:	14 c3       	ld.bu %d3,[%a12]
80001d8c:	7f 39 da fe 	jge.u %d9,%d3,80001b40 <IfxScuCcu_init+0xa0>
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001d90:	02 84       	mov %d4,%d8
80001d92:	6d 00 4d 00 	call 80001e2c <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80001d96:	91 30 00 2f 	movh.a %a2,61443
80001d9a:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001d9e:	54 23       	ld.w %d3,[%a2]
80001da0:	6f 53 fb 7f 	jz.t %d3,5,80001d96 <IfxScuCcu_init+0x2f6>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80001da4:	53 c9 20 b0 	mul %d11,%d9,12
80001da8:	99 c2 04 00 	ld.a %a2,[%a12]4
80001dac:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001db0:	14 24       	ld.bu %d4,[%a2]
80001db2:	91 30 00 2f 	movh.a %a2,61443
80001db6:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80001dba:	54 23       	ld.w %d3,[%a2]
80001dbc:	37 43 07 30 	insert %d3,%d3,%d4,0,7
80001dc0:	74 23       	st.w [%a2],%d3
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001dc2:	02 84       	mov %d4,%d8
80001dc4:	6d 00 ba 01 	call 80002138 <IfxScuWdt_setSafetyEndinit>
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
80001dc8:	99 c2 04 00 	ld.a %a2,[%a12]4
80001dcc:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001dd0:	d9 22 08 00 	lea %a2,[%a2]8
80001dd4:	d4 22       	ld.a %a2,[%a2]
80001dd6:	bd 02 cf 7f 	jz.a %a2,80001d74 <IfxScuCcu_init+0x2d4>
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
80001dda:	2d 02 00 00 	calli %a2
80001dde:	1d ff cb ff 	j 80001d74 <IfxScuCcu_init+0x2d4>

80001de2 <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
80001de2:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001de4:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001de8:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80001dec:	7b 30 00 3f 	movh %d3,61443
80001df0:	1b 03 10 36 	addi %d3,%d3,24832
80001df4:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001df8:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001dfa:	54 22       	ld.w %d2,[%a2]
80001dfc:	6f 12 0b 00 	jz.t %d2,1,80001e12 <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e00:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001e04:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001e08:	54 22       	ld.w %d2,[%a2]
80001e0a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e0e:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001e10:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e12:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001e16:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001e1a:	54 22       	ld.w %d2,[%a2]
80001e1c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e20:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001e22:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80001e24:	54 22       	ld.w %d2,[%a2]
80001e26:	6f 02 ff ff 	jnz.t %d2,0,80001e24 <IfxScuWdt_clearCpuEndinit+0x42>
}
80001e2a:	00 90       	ret 

80001e2c <IfxScuWdt_clearSafetyEndinit>:


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
80001e2c:	40 ae       	mov.aa %a14,%sp
80001e2e:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001e32:	91 30 00 2f 	movh.a %a2,61443
80001e36:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001e3a:	54 22       	ld.w %d2,[%a2]
80001e3c:	6f 12 0b 00 	jz.t %d2,1,80001e52 <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001e40:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001e44:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001e48:	54 22       	ld.w %d2,[%a2]
80001e4a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001e4e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001e50:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001e52:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001e56:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001e5a:	91 30 00 2f 	movh.a %a2,61443
80001e5e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001e62:	54 22       	ld.w %d2,[%a2]
80001e64:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001e68:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001e6a:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001e6c:	91 30 00 2f 	movh.a %a2,61443
80001e70:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001e74:	54 22       	ld.w %d2,[%a2]
80001e76:	6f 02 fb ff 	jnz.t %d2,0,80001e6c <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80001e7a:	00 90       	ret 

80001e7c <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80001e7c:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001e7e:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001e82:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80001e86:	7b 30 00 3f 	movh %d3,61443
80001e8a:	1b 03 10 36 	addi %d3,%d3,24832
80001e8e:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001e92:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001e94:	54 22       	ld.w %d2,[%a2]
80001e96:	6f 12 0b 00 	jz.t %d2,1,80001eac <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e9a:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001e9e:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001ea2:	54 22       	ld.w %d2,[%a2]
80001ea4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ea8:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001eaa:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001eac:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001eae:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001eb2:	54 22       	ld.w %d2,[%a2]
80001eb4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001eb8:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001eba:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001ebc:	54 22       	ld.w %d2,[%a2]
80001ebe:	6f 02 ff ff 	jnz.t %d2,0,80001ebc <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80001ec2:	d9 23 04 00 	lea %a3,[%a2]4
80001ec6:	19 22 04 00 	ld.w %d2,[%a2]4
80001eca:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001ece:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001ed0:	54 22       	ld.w %d2,[%a2]
80001ed2:	6f 12 09 00 	jz.t %d2,1,80001ee4 <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001ed6:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001eda:	54 22       	ld.w %d2,[%a2]
80001edc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ee0:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ee2:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001ee4:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001ee8:	54 22       	ld.w %d2,[%a2]
80001eea:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001eee:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ef0:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80001ef2:	54 22       	ld.w %d2,[%a2]
80001ef4:	6f 02 ff 7f 	jz.t %d2,0,80001ef2 <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80001ef8:	00 90       	ret 

80001efa <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
80001efa:	40 ae       	mov.aa %a14,%sp
80001efc:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001f00:	91 30 00 2f 	movh.a %a2,61443
80001f04:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001f08:	54 22       	ld.w %d2,[%a2]
80001f0a:	6f 12 0b 00 	jz.t %d2,1,80001f20 <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001f0e:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001f12:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001f16:	54 22       	ld.w %d2,[%a2]
80001f18:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001f1c:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001f1e:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001f20:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001f22:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001f26:	91 30 00 2f 	movh.a %a2,61443
80001f2a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001f2e:	54 22       	ld.w %d2,[%a2]
80001f30:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001f34:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001f36:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001f38:	91 30 00 2f 	movh.a %a2,61443
80001f3c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001f40:	54 22       	ld.w %d2,[%a2]
80001f42:	6f 02 fb ff 	jnz.t %d2,0,80001f38 <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80001f46:	91 30 00 2f 	movh.a %a2,61443
80001f4a:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80001f4e:	54 22       	ld.w %d2,[%a2]
80001f50:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001f54:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001f56:	91 30 00 2f 	movh.a %a2,61443
80001f5a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001f5e:	54 22       	ld.w %d2,[%a2]
80001f60:	6f 12 09 00 	jz.t %d2,1,80001f72 <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001f64:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001f68:	54 22       	ld.w %d2,[%a2]
80001f6a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001f6e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001f70:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001f72:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001f76:	91 30 00 2f 	movh.a %a2,61443
80001f7a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001f7e:	54 22       	ld.w %d2,[%a2]
80001f80:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001f84:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001f86:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001f88:	91 30 00 2f 	movh.a %a2,61443
80001f8c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001f90:	54 22       	ld.w %d2,[%a2]
80001f92:	6f 02 fb 7f 	jz.t %d2,0,80001f88 <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80001f96:	00 90       	ret 

80001f98 <IfxScuWdt_enableCpuWatchdog>:


void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
80001f98:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001f9a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001f9e:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80001fa2:	7b 30 00 3f 	movh %d3,61443
80001fa6:	1b 03 10 36 	addi %d3,%d3,24832
80001faa:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001fae:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001fb0:	54 22       	ld.w %d2,[%a2]
80001fb2:	6f 12 0b 00 	jz.t %d2,1,80001fc8 <IfxScuWdt_enableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001fb6:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001fba:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001fbe:	54 22       	ld.w %d2,[%a2]
80001fc0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001fc4:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001fc6:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001fc8:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001fca:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001fce:	54 22       	ld.w %d2,[%a2]
80001fd0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001fd4:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001fd6:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001fd8:	54 22       	ld.w %d2,[%a2]
80001fda:	6f 02 ff ff 	jnz.t %d2,0,80001fd8 <IfxScuWdt_enableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
80001fde:	d9 23 04 00 	lea %a3,[%a2]4
80001fe2:	19 22 04 00 	ld.w %d2,[%a2]4
80001fe6:	8f 82 c0 21 	andn %d2,%d2,8
80001fea:	74 32       	st.w [%a3],%d2
    if (watchdog->CON0.B.LCK)
80001fec:	54 22       	ld.w %d2,[%a2]
80001fee:	6f 12 09 00 	jz.t %d2,1,80002000 <IfxScuWdt_enableCpuWatchdog+0x68>
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001ff2:	8f 14 40 31 	or %d3,%d4,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001ff6:	54 22       	ld.w %d2,[%a2]
80001ff8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ffc:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ffe:	74 22       	st.w [%a2],%d2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002000:	8f 34 40 41 	or %d4,%d4,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002004:	54 22       	ld.w %d2,[%a2]
80002006:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000200a:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000200c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8000200e:	54 22       	ld.w %d2,[%a2]
80002010:	6f 02 ff 7f 	jz.t %d2,0,8000200e <IfxScuWdt_enableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80002014:	00 90       	ret 

80002016 <IfxScuWdt_enableSafetyWatchdog>:


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
80002016:	40 ae       	mov.aa %a14,%sp
80002018:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
8000201c:	91 30 00 2f 	movh.a %a2,61443
80002020:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002024:	54 22       	ld.w %d2,[%a2]
80002026:	6f 12 0b 00 	jz.t %d2,1,8000203c <IfxScuWdt_enableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000202a:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000202e:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002032:	54 22       	ld.w %d2,[%a2]
80002034:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002038:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000203a:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000203c:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000203e:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002042:	91 30 00 2f 	movh.a %a2,61443
80002046:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000204a:	54 22       	ld.w %d2,[%a2]
8000204c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002050:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002052:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002054:	91 30 00 2f 	movh.a %a2,61443
80002058:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000205c:	54 22       	ld.w %d2,[%a2]
8000205e:	6f 02 fb ff 	jnz.t %d2,0,80002054 <IfxScuWdt_enableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
80002062:	91 30 00 2f 	movh.a %a2,61443
80002066:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
8000206a:	54 22       	ld.w %d2,[%a2]
8000206c:	8f 82 c0 21 	andn %d2,%d2,8
80002070:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
80002072:	91 30 00 2f 	movh.a %a2,61443
80002076:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000207a:	54 22       	ld.w %d2,[%a2]
8000207c:	6f 12 09 00 	jz.t %d2,1,8000208e <IfxScuWdt_enableSafetyWatchdog+0x78>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002080:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002084:	54 22       	ld.w %d2,[%a2]
80002086:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000208a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000208c:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000208e:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002092:	91 30 00 2f 	movh.a %a2,61443
80002096:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000209a:	54 22       	ld.w %d2,[%a2]
8000209c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800020a0:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800020a2:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800020a4:	91 30 00 2f 	movh.a %a2,61443
800020a8:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800020ac:	54 22       	ld.w %d2,[%a2]
800020ae:	6f 02 fb 7f 	jz.t %d2,0,800020a4 <IfxScuWdt_enableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
800020b2:	00 90       	ret 

800020b4 <IfxScuWdt_getCpuWatchdogPassword>:


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
800020b4:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800020b6:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800020ba:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800020be:	7b 30 00 3f 	movh %d3,61443
800020c2:	1b 03 10 36 	addi %d3,%d3,24832
800020c6:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
800020ca:	60 22       	mov.a %a2,%d2
800020cc:	54 22       	ld.w %d2,[%a2]
800020ce:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
800020d2:	8f f2 83 21 	xor %d2,%d2,63
800020d6:	00 90       	ret 

800020d8 <IfxScuWdt_getSafetyWatchdogPassword>:
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
800020d8:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
800020da:	91 30 00 2f 	movh.a %a2,61443
800020de:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800020e2:	54 22       	ld.w %d2,[%a2]
800020e4:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
800020e8:	8f f2 83 21 	xor %d2,%d2,63
800020ec:	00 90       	ret 

800020ee <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
800020ee:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800020f0:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800020f4:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800020f8:	7b 30 00 3f 	movh %d3,61443
800020fc:	1b 03 10 36 	addi %d3,%d3,24832
80002100:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002104:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80002106:	54 22       	ld.w %d2,[%a2]
80002108:	6f 12 0b 00 	jz.t %d2,1,8000211e <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000210c:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002110:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002114:	54 22       	ld.w %d2,[%a2]
80002116:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000211a:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000211c:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000211e:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002122:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002126:	54 22       	ld.w %d2,[%a2]
80002128:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000212c:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000212e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80002130:	54 22       	ld.w %d2,[%a2]
80002132:	6f 02 ff 7f 	jz.t %d2,0,80002130 <IfxScuWdt_setCpuEndinit+0x42>
}
80002136:	00 90       	ret 

80002138 <IfxScuWdt_setSafetyEndinit>:


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
80002138:	40 ae       	mov.aa %a14,%sp
8000213a:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
8000213e:	91 30 00 2f 	movh.a %a2,61443
80002142:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002146:	54 22       	ld.w %d2,[%a2]
80002148:	6f 12 0b 00 	jz.t %d2,1,8000215e <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000214c:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002150:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002154:	54 22       	ld.w %d2,[%a2]
80002156:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000215a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000215c:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000215e:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002162:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002166:	91 30 00 2f 	movh.a %a2,61443
8000216a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000216e:	54 22       	ld.w %d2,[%a2]
80002170:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002174:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002176:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002178:	91 30 00 2f 	movh.a %a2,61443
8000217c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002180:	54 22       	ld.w %d2,[%a2]
80002182:	6f 02 fb 7f 	jz.t %d2,0,80002178 <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80002186:	00 90       	ret 

80002188 <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80002188:	40 ae       	mov.aa %a14,%sp
8000218a:	40 4c       	mov.aa %a12,%a4
8000218c:	02 5a       	mov %d10,%d5
8000218e:	8f f4 0f c1 	and %d12,%d4,255
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80002192:	80 42       	mov.d %d2,%a4
80002194:	1b 02 01 b0 	addi %d11,%d2,16
    uint8                 iocrIndex = (pinIndex / 4);
80002198:	37 04 66 91 	extr.u %d9,%d4,2,6
    uint8                 shift     = (pinIndex & 0x3U) * 8;
8000219c:	8f 34 00 41 	and %d4,%d4,3
800021a0:	8f 34 00 80 	sh %d8,%d4,3

    if (port == &MODULE_P40)
800021a4:	7b 40 00 2f 	movh %d2,61444
800021a8:	1b 02 00 2e 	addi %d2,%d2,-8192
800021ac:	80 43       	mov.d %d3,%a4
800021ae:	5f 23 12 00 	jeq %d3,%d2,800021d2 <IfxPort_setPinMode+0x4a>
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
        IfxScuWdt_setCpuEndinit(passwd);
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
800021b2:	8f 29 00 20 	sh %d2,%d9,2
800021b6:	60 b2       	mov.a %a2,%d11
800021b8:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800021bc:	3b f0 0f 40 	mov %d4,255
800021c0:	0f 84 00 40 	sh %d4,%d4,%d8
800021c4:	0f 8a 00 20 	sh %d2,%d10,%d8
                     ::"a"(address), "d"(mask), "d"((long long)value));
800021c8:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
800021ca:	02 43       	mov %d3,%d4
800021cc:	49 22 40 08 	ldmst [%a2]0,%e2
}
800021d0:	00 90       	ret 
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800021d2:	6d ff 71 ff 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
800021d6:	02 2d       	mov %d13,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
800021d8:	02 24       	mov %d4,%d2
800021da:	6d ff 04 fe 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
800021de:	d9 c2 20 10 	lea %a2,[%a12]96
800021e2:	19 c2 20 10 	ld.w %d2,[%a12]96
800021e6:	d7 02 01 2c 	insert %d2,%d2,0,%d12,1
800021ea:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(passwd);
800021ec:	02 d4       	mov %d4,%d13
800021ee:	6d ff 80 ff 	call 800020ee <IfxScuWdt_setCpuEndinit>
800021f2:	1d ff e0 ff 	j 800021b2 <IfxPort_setPinMode+0x2a>

800021f6 <IfxPort_setPinPadDriver>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
800021f6:	40 ae       	mov.aa %a14,%sp
800021f8:	80 4b       	mov.d %d11,%a4
800021fa:	02 5a       	mov %d10,%d5
800021fc:	8f f4 0f 81 	and %d8,%d4,255
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80002200:	6d ff 5a ff 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
80002204:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80002206:	02 24       	mov %d4,%d2
80002208:	6d ff ed fd 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
8000220c:	1b 0b 04 40 	addi %d4,%d11,64
        uint8            pdrIndex = (pinIndex / 8);
80002210:	8f d8 1f 20 	sh %d2,%d8,-3
        uint8            shift    = (pinIndex & 0x7U) * 4;
80002214:	8f 78 00 31 	and %d3,%d8,7
80002218:	06 23       	sh %d3,2
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
8000221a:	06 22       	sh %d2,2
8000221c:	60 42       	mov.a %a2,%d4
8000221e:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
80002222:	3b f0 00 20 	mov %d2,15
80002226:	0f 32 00 20 	sh %d2,%d2,%d3
8000222a:	0f 3a 00 30 	sh %d3,%d10,%d3
                     ::"a"(address), "d"(mask), "d"((long long)value));
8000222e:	53 13 40 60 	mul.u %e6,%d3,1
    __asm__ volatile("mov %H2,%1 \n\
80002232:	02 27       	mov %d7,%d2
80002234:	49 46 40 08 	ldmst [%a4]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80002238:	02 94       	mov %d4,%d9
8000223a:	6d ff 5a ff 	call 800020ee <IfxScuWdt_setCpuEndinit>
}
8000223e:	00 90       	ret 

80002240 <IfxGtm_Tom_Timer_acknowledgeTimerIrq>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxGtm_Tom_Timer_acknowledgeTimerIrq(IfxGtm_Tom_Timer *driver)
{
80002240:	40 ae       	mov.aa %a14,%sp
    boolean event;

    event = IfxGtm_Tom_Ch_isZeroNotification(driver->tom, driver->timerChannel);
80002242:	19 43 14 00 	ld.w %d3,[%a4]20
80002246:	19 42 24 00 	ld.w %d2,[%a4]36
}


IFX_INLINE Ifx_GTM_TOM_CH *IfxGtm_Tom_Ch_getChannelPointer(Ifx_GTM_TOM *tom, IfxGtm_Tom_Ch channel)
{
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000224a:	06 62       	sh %d2,6
8000224c:	60 32       	mov.a %a2,%d3
8000224e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0

IFX_INLINE boolean IfxGtm_Tom_Ch_isZeroNotification(Ifx_GTM_TOM *tom, IfxGtm_Tom_Ch channel)
{
    boolean         notify;
    Ifx_GTM_TOM_CH *tomCh = IfxGtm_Tom_Ch_getChannelPointer(tom, channel);
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
80002252:	d9 23 1c 00 	lea %a3,[%a2]28
80002256:	19 22 1c 00 	ld.w %d2,[%a2]28
8000225a:	6f 02 08 00 	jz.t %d2,0,8000226a <IfxGtm_Tom_Timer_acknowledgeTimerIrq+0x2a>
    tomCh->IRQ_NOTIFY.B.CCU0TC = 1;
8000225e:	54 32       	ld.w %d2,[%a3]
80002260:	b7 12 01 20 	insert %d2,%d2,1,0,1
80002264:	74 32       	st.w [%a3],%d2
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
80002266:	82 12       	mov %d2,1
}
80002268:	00 90       	ret 
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
8000226a:	82 02       	mov %d2,0
    }
    else
    {}

    return event;
}
8000226c:	00 90       	ret 

8000226e <IfxGtm_Tom_Timer_applyUpdate>:
    }
}


void IfxGtm_Tom_Timer_applyUpdate(IfxGtm_Tom_Timer *driver)
{
8000226e:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[0], driver->tgcGlobalControlApplyUpdate[0]);
80002270:	99 42 18 00 	ld.a %a2,[%a4]24
}


IFX_INLINE void IfxGtm_Tom_Tgc_writeGlobalControl(Ifx_GTM_TOM_TGC *tgc, uint32 control)
{
    tgc->GLB_CTRL.U = control;
80002274:	19 42 3c 00 	ld.w %d2,[%a4]60
80002278:	74 22       	st.w [%a2],%d2

    if (driver->tgc[1])
8000227a:	99 42 1c 00 	ld.a %a2,[%a4]28
8000227e:	bd 02 05 00 	jz.a %a2,80002288 <IfxGtm_Tom_Timer_applyUpdate+0x1a>
    {
        IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[1], driver->tgcGlobalControlApplyUpdate[1]);  /* Note: Write of 0 value has no effect */
80002282:	19 42 00 10 	ld.w %d2,[%a4]64
80002286:	74 22       	st.w [%a2],%d2
    }
}
80002288:	00 90       	ret 

8000228a <IfxGtm_Tom_Timer_disableUpdate>:


void IfxGtm_Tom_Timer_disableUpdate(IfxGtm_Tom_Timer *driver)
{
8000228a:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[0], driver->tgcGlobalControlDisableUpdate[0]);
8000228c:	99 42 18 00 	ld.a %a2,[%a4]24
80002290:	19 42 34 00 	ld.w %d2,[%a4]52
80002294:	74 22       	st.w [%a2],%d2

    if (driver->tgc[1])
80002296:	99 42 1c 00 	ld.a %a2,[%a4]28
8000229a:	bd 02 05 00 	jz.a %a2,800022a4 <IfxGtm_Tom_Timer_disableUpdate+0x1a>
    {
        IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[1], driver->tgcGlobalControlDisableUpdate[1]); /* Note: Write of 0 value has no effect */
8000229e:	19 42 38 00 	ld.w %d2,[%a4]56
800022a2:	74 22       	st.w [%a2],%d2
    }
}
800022a4:	00 90       	ret 

800022a6 <IfxGtm_Tom_Timer_getPeriod>:
    return driver->offset;
}


Ifx_TimerValue IfxGtm_Tom_Timer_getPeriod(IfxGtm_Tom_Timer *driver)
{
800022a6:	40 ae       	mov.aa %a14,%sp
    return driver->base.period;
}
800022a8:	54 42       	ld.w %d2,[%a4]
800022aa:	00 90       	ret 

800022ac <IfxGtm_Tom_Timer_setPeriod>:
    return status;
}


boolean IfxGtm_Tom_Timer_setPeriod(IfxGtm_Tom_Timer *driver, Ifx_TimerValue period)
{
800022ac:	40 ae       	mov.aa %a14,%sp
    driver->base.period = period;
800022ae:	74 44       	st.w [%a4],%d4
    IfxGtm_Tom_Ch_setCompareZeroShadow(driver->tom, driver->timerChannel, (uint16)period);
800022b0:	19 43 24 00 	ld.w %d3,[%a4]36
800022b4:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800022b8:	06 63       	sh %d3,6
800022ba:	99 42 14 00 	ld.a %a2,[%a4]20
800022be:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->SR0.U = shadowZero;
800022c2:	59 24 04 00 	st.w [%a2]4,%d4

    if (driver->triggerChannel != driver->timerChannel)
800022c6:	19 42 28 00 	ld.w %d2,[%a4]40
800022ca:	19 43 24 00 	ld.w %d3,[%a4]36
800022ce:	5f 32 0a 00 	jeq %d2,%d3,800022e2 <IfxGtm_Tom_Timer_setPeriod+0x36>
    {
        IfxGtm_Tom_Ch_setCompareZeroShadow(driver->tom, driver->triggerChannel, (uint16)period);
800022d2:	19 43 14 00 	ld.w %d3,[%a4]20
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800022d6:	06 62       	sh %d2,6
800022d8:	60 32       	mov.a %a2,%d3
800022da:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->SR0.U = shadowZero;
800022de:	59 24 04 00 	st.w [%a2]4,%d4
    }

    return TRUE;
}
800022e2:	82 12       	mov %d2,1
800022e4:	00 90       	ret 

800022e6 <IfxGtm_Tom_Timer_setFrequency>:
{
800022e6:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue period = IfxStdIf_Timer_sToTick(driver->base.clockFreq, 1.0f / frequency);
800022e8:	19 43 08 00 	ld.w %d3,[%a4]8
800022ec:	7b 00 f8 23 	movh %d2,16256
800022f0:	4b 42 51 20 	div.f %d2,%d2,%d4
 * \param  seconds time value in seconds to be converted
 * \return Return the converted time in timer ticks
 */
IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)
{
    return seconds * clockFreq;
800022f4:	4b 23 41 20 	mul.f %d2,%d3,%d2
800022f8:	4b 02 71 41 	ftouz %d4,%d2
    if ((period & (0xFFFF << 16)) != 0)
800022fc:	b7 04 10 20 	insert %d2,%d4,0,0,16
80002300:	df 02 04 00 	jeq %d2,0,80002308 <IfxGtm_Tom_Timer_setFrequency+0x22>
        status = FALSE;
80002304:	82 02       	mov %d2,0
}
80002306:	00 90       	ret 
        IfxGtm_Tom_Timer_setPeriod(driver, period);
80002308:	6d ff d2 ff 	call 800022ac <IfxGtm_Tom_Timer_setPeriod>
    boolean        status = TRUE;
8000230c:	82 12       	mov %d2,1
8000230e:	00 90       	ret 

80002310 <IfxGtm_Tom_Timer_setTrigger>:
    IfxGtm_Tom_Ch_setOneShotMode(driver->tom, driver->timerChannel, enabled);
}


void IfxGtm_Tom_Timer_setTrigger(IfxGtm_Tom_Timer *driver, Ifx_TimerValue triggerPoint)
{
80002310:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Ch_setCompareOneShadow(driver->tom, driver->triggerChannel, (uint16)triggerPoint + 1);
80002312:	19 43 14 00 	ld.w %d3,[%a4]20
80002316:	19 42 28 00 	ld.w %d2,[%a4]40
8000231a:	37 04 70 40 	extr.u %d4,%d4,0,16
8000231e:	c2 14       	add %d4,1
80002320:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002324:	06 62       	sh %d2,6
80002326:	60 32       	mov.a %a2,%d3
80002328:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->SR1.U = shadowOne;
8000232c:	59 24 08 00 	st.w [%a2]8,%d4
}
80002330:	00 90       	ret 

80002332 <IfxGtm_Tom_Timer_run>:
{
80002332:	40 ae       	mov.aa %a14,%sp
80002334:	40 4c       	mov.aa %a12,%a4
    IfxGtm_Tom_Tgc_enableChannels(driver->tgc[0], driver->channelsMask[0], 0, TRUE);
80002336:	99 4d 18 00 	ld.a %a13,[%a4]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
8000233a:	82 06       	mov %d6,0
8000233c:	82 05       	mov %d5,0
8000233e:	b9 44 2c 00 	ld.hu %d4,[%a4]44
80002342:	6d 00 f3 0a 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80002346:	59 d2 00 10 	st.w [%a13]64,%d2
        tgc->ENDIS_STAT.U = value;
8000234a:	59 d2 04 10 	st.w [%a13]68,%d2
    if (driver->tgc[1])
8000234e:	99 cd 1c 00 	ld.a %a13,[%a12]28
80002352:	bd 0d 0c 00 	jz.a %a13,8000236a <IfxGtm_Tom_Timer_run+0x38>
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80002356:	82 06       	mov %d6,0
80002358:	82 05       	mov %d5,0
8000235a:	b9 c4 2e 00 	ld.hu %d4,[%a12]46
8000235e:	6d 00 e5 0a 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80002362:	59 d2 00 10 	st.w [%a13]64,%d2
        tgc->ENDIS_STAT.U = value;
80002366:	59 d2 04 10 	st.w [%a13]68,%d2
}
8000236a:	00 90       	ret 

8000236c <IfxGtm_Tom_Timer_updateInputFrequency>:
    }
}


void IfxGtm_Tom_Timer_updateInputFrequency(IfxGtm_Tom_Timer *driver)
{
8000236c:	40 ae       	mov.aa %a14,%sp
8000236e:	20 18       	sub.a %sp,24
80002370:	40 4c       	mov.aa %a12,%a4
    driver->base.clockFreq = IfxGtm_Tom_Ch_getClockFrequency(driver->gtm, driver->tom, driver->timerChannel);
80002372:	99 44 10 00 	ld.a %a4,[%a4]16
80002376:	19 c2 24 00 	ld.w %d2,[%a12]36
    IfxGtm_Cmu_Fxclk     clkIndex[5] = {
8000237a:	91 00 00 26 	movh.a %a2,24576
8000237e:	d9 22 00 00 	lea %a2,[%a2]0 <60000000 <LCF_DSPR1_START>>
80002382:	d9 e3 ec ff 	lea %a3,[%a14]-20 <60000000 <LCF_DSPR1_START>>
80002386:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
8000238a:	89 34 48 01 	st.d [%a3+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
8000238e:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
80002392:	89 34 48 01 	st.d [%a3+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80002396:	44 24       	ld.w %d4,[%a2+]
80002398:	64 34       	st.w [%a3+],%d4
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000239a:	06 62       	sh %d2,6
8000239c:	99 c2 14 00 	ld.a %a2,[%a12]20
800023a0:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    clk = (IfxGtm_Tom_Ch_ClkSrc)tomCh->CTRL.B.CLK_SRC_SR;
800023a4:	54 22       	ld.w %d2,[%a2]
800023a6:	37 02 63 26 	extr.u %d2,%d2,12,3
    if (clk == IfxGtm_Tom_Ch_ClkSrc_noClock)
800023aa:	df 52 06 80 	jne %d2,5,800023b6 <IfxGtm_Tom_Timer_updateInputFrequency+0x4a>
        return (float32)0.0f;
800023ae:	82 02       	mov %d2,0
800023b0:	59 c2 08 00 	st.w [%a12]8,%d2
}
800023b4:	00 90       	ret 
        return IfxGtm_Cmu_getFxClkFrequency(gtm, clkIndex[clk], TRUE);
800023b6:	06 22       	sh %d2,2
800023b8:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
800023bc:	82 15       	mov %d5,1
800023be:	19 24 ec ff 	ld.w %d4,[%a2]-20
800023c2:	6d 00 b1 09 	call 80003724 <IfxGtm_Cmu_getFxClkFrequency>
800023c6:	1d ff f5 ff 	j 800023b0 <IfxGtm_Tom_Timer_updateInputFrequency+0x44>

800023ca <IfxGtm_Tom_Timer_addToChannelMask>:
{
800023ca:	40 ae       	mov.aa %a14,%sp
800023cc:	40 4c       	mov.aa %a12,%a4
    if (driver->timerChannel <= IfxGtm_Tom_Ch_7)
800023ce:	19 42 24 00 	ld.w %d2,[%a4]36
800023d2:	8b 82 80 22 	ge %d2,%d2,8
800023d6:	df 02 39 80 	jne %d2,0,80002448 <IfxGtm_Tom_Timer_addToChannelMask+0x7e>
        if (channel <= IfxGtm_Tom_Ch_7)
800023da:	8b 84 80 22 	ge %d2,%d4,8
800023de:	df 02 1b 80 	jne %d2,0,80002414 <IfxGtm_Tom_Timer_addToChannelMask+0x4a>
            driver->channelsMask[0]                 |= 1 << channel;
800023e2:	c9 42 2c 00 	ld.h %d2,[%a4]44
800023e6:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
800023ea:	37 02 70 50 	extr.u %d5,%d2,0,16
800023ee:	f9 45 2c 00 	st.h [%a4]44,%d5
            driver->tgcGlobalControlDisableUpdate[0] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[0], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
800023f2:	3b 00 01 60 	mov %d6,16
800023f6:	82 04       	mov %d4,0
800023f8:	6d 00 98 0a 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
800023fc:	59 c2 34 00 	st.w [%a12]52,%d2
            driver->tgcGlobalControlApplyUpdate[0]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[0], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002400:	3b 00 01 60 	mov %d6,16
80002404:	82 05       	mov %d5,0
80002406:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
8000240a:	6d 00 8f 0a 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
8000240e:	59 c2 3c 00 	st.w [%a12]60,%d2
80002412:	00 90       	ret 
            driver->channelsMask[1]                 |= 1 << (channel - IfxGtm_Tom_Ch_8);
80002414:	c2 84       	add %d4,-8
80002416:	c9 42 2e 00 	ld.h %d2,[%a4]46
8000241a:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
8000241e:	37 02 70 50 	extr.u %d5,%d2,0,16
80002422:	f9 45 2e 00 	st.h [%a4]46,%d5
            driver->tgcGlobalControlDisableUpdate[1] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[1], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002426:	3b 00 01 60 	mov %d6,16
8000242a:	82 04       	mov %d4,0
8000242c:	6d 00 7e 0a 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
80002430:	59 c2 38 00 	st.w [%a12]56,%d2
            driver->tgcGlobalControlApplyUpdate[1]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[1], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002434:	3b 00 01 60 	mov %d6,16
80002438:	82 05       	mov %d5,0
8000243a:	b9 c4 2e 00 	ld.hu %d4,[%a12]46
8000243e:	6d 00 75 0a 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
80002442:	59 c2 00 10 	st.w [%a12]64,%d2
80002446:	00 90       	ret 
        driver->channelsMask[0]                 |= 1 << (channel - IfxGtm_Tom_Ch_8);
80002448:	c2 84       	add %d4,-8
8000244a:	c9 42 2c 00 	ld.h %d2,[%a4]44
8000244e:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
80002452:	37 02 70 50 	extr.u %d5,%d2,0,16
80002456:	f9 45 2c 00 	st.h [%a4]44,%d5
        driver->tgcGlobalControlDisableUpdate[0] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[0], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
8000245a:	3b 00 01 60 	mov %d6,16
8000245e:	82 04       	mov %d4,0
80002460:	6d 00 64 0a 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
80002464:	59 c2 34 00 	st.w [%a12]52,%d2
        driver->tgcGlobalControlApplyUpdate[0]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[0], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002468:	3b 00 01 60 	mov %d6,16
8000246c:	82 05       	mov %d5,0
8000246e:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
80002472:	6d 00 5b 0a 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
80002476:	59 c2 3c 00 	st.w [%a12]60,%d2
}
8000247a:	00 90       	ret 

8000247c <IfxGtm_Tom_Timer_getOffset>:
{
8000247c:	40 ae       	mov.aa %a14,%sp
}
8000247e:	19 42 30 00 	ld.w %d2,[%a4]48
80002482:	00 90       	ret 

80002484 <IfxGtm_Tom_Timer_init>:
{
80002484:	40 ae       	mov.aa %a14,%sp
80002486:	40 4c       	mov.aa %a12,%a4
80002488:	40 5d       	mov.aa %a13,%a5
    driver->gtm          = config->gtm;
8000248a:	d9 53 34 00 	lea %a3,[%a5]52
8000248e:	19 52 34 00 	ld.w %d2,[%a5]52
80002492:	59 42 10 00 	st.w [%a4]16,%d2
    driver->tomIndex     = config->tom;
80002496:	19 52 38 00 	ld.w %d2,[%a5]56
8000249a:	59 42 20 00 	st.w [%a4]32,%d2
    driver->tom          = &config->gtm->TOM[config->tom];
8000249e:	1b 02 01 20 	addi %d2,%d2,16
800024a2:	8f b2 00 20 	sh %d2,%d2,11
800024a6:	54 33       	ld.w %d3,[%a3]
800024a8:	0b 23 00 50 	add %d5,%d3,%d2
800024ac:	59 45 14 00 	st.w [%a4]20,%d5
    driver->timerChannel = config->timerChannel;
800024b0:	19 54 3c 00 	ld.w %d4,[%a5]60
800024b4:	59 44 24 00 	st.w [%a4]36,%d4
    base->triggerEnabled = config->base.trigger.enabled;
800024b8:	39 52 10 00 	ld.bu %d2,[%a5]16
800024bc:	e9 42 04 00 	st.b [%a4]4,%d2
    if (base->triggerEnabled)
800024c0:	df 02 0d 00 	jeq %d2,0,800024da <IfxGtm_Tom_Timer_init+0x56>
        if (config->triggerOut != NULL_PTR)
800024c4:	99 52 00 10 	ld.a %a2,[%a5]64
800024c8:	bd 02 5b 00 	jz.a %a2,8000257e <IfxGtm_Tom_Timer_init+0xfa>
            driver->triggerChannel = config->triggerOut->channel;
800024cc:	19 22 04 00 	ld.w %d2,[%a2]4
800024d0:	59 42 28 00 	st.w [%a4]40,%d2
    boolean                result = TRUE;
800024d4:	82 18       	mov %d8,1
800024d6:	1d 00 05 00 	j 800024e0 <IfxGtm_Tom_Timer_init+0x5c>
        driver->triggerChannel = driver->timerChannel; // Set to timer channel to disable its use
800024da:	59 44 28 00 	st.w [%a4]40,%d4
    boolean                result = TRUE;
800024de:	82 18       	mov %d8,1
    if (config->timerChannel <= 7)
800024e0:	19 d2 3c 00 	ld.w %d2,[%a13]60
800024e4:	8b 82 80 22 	ge %d2,%d2,8
800024e8:	df 02 4e 80 	jne %d2,0,80002584 <IfxGtm_Tom_Timer_init+0x100>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC0_GLB_CTRL;
800024ec:	1b 05 03 20 	addi %d2,%d5,48
        driver->tgc[0] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 0);
800024f0:	59 c2 18 00 	st.w [%a12]24,%d2
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
800024f4:	1b 05 23 20 	addi %d2,%d5,560
        driver->tgc[1] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
800024f8:	59 c2 1c 00 	st.w [%a12]28,%d2
    driver->channelsMask[0]                  = 0;
800024fc:	82 02       	mov %d2,0
800024fe:	f9 c2 2c 00 	st.h [%a12]44,%d2
    driver->tgcGlobalControlApplyUpdate[0]   = 0;
80002502:	82 03       	mov %d3,0
80002504:	59 c3 3c 00 	st.w [%a12]60,%d3
    driver->tgcGlobalControlDisableUpdate[0] = 0;
80002508:	59 c3 34 00 	st.w [%a12]52,%d3
    driver->channelsMask[1]                  = 0;
8000250c:	f9 c3 2e 00 	st.h [%a12]46,%d3
    driver->tgcGlobalControlApplyUpdate[1]   = 0;
80002510:	59 c3 00 10 	st.w [%a12]64,%d3
    driver->tgcGlobalControlDisableUpdate[1] = 0;
80002514:	59 c3 38 00 	st.w [%a12]56,%d3
    IfxGtm_Tom_Ch_setClockSource(driver->tom, driver->timerChannel, config->clock);
80002518:	19 d6 04 10 	ld.w %d6,[%a13]68
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000251c:	06 64       	sh %d4,6
8000251e:	60 52       	mov.a %a2,%d5
80002520:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
80002524:	54 23       	ld.w %d3,[%a2]
80002526:	37 63 03 36 	insert %d3,%d3,%d6,12,3
8000252a:	74 23       	st.w [%a2],%d3
    IfxGtm_Tom_Ch_setTriggerOutput(driver->tom, driver->timerChannel, IfxGtm_Tom_Ch_OutputTrigger_generate);
8000252c:	19 c2 24 00 	ld.w %d2,[%a12]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002530:	06 62       	sh %d2,6
80002532:	99 c2 14 00 	ld.a %a2,[%a12]20
80002536:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
8000253a:	54 23       	ld.w %d3,[%a2]
8000253c:	b7 13 01 3c 	insert %d3,%d3,1,24,1
80002540:	74 23       	st.w [%a2],%d3
    IfxGtm_Tom_Timer_updateInputFrequency(driver);
80002542:	40 c4       	mov.aa %a4,%a12
80002544:	6d ff 14 ff 	call 8000236c <IfxGtm_Tom_Timer_updateInputFrequency>
    if ((config->base.minResolution > 0) && ((1.0f / base->clockFreq) > config->base.minResolution))
80002548:	19 d2 0c 00 	ld.w %d2,[%a13]12
8000254c:	82 03       	mov %d3,0
8000254e:	4b 32 01 30 	cmp.f %d3,%d2,%d3
80002552:	6f 23 0d 00 	jz.t %d3,2,8000256c <IfxGtm_Tom_Timer_init+0xe8>
80002556:	19 c4 08 00 	ld.w %d4,[%a12]8
8000255a:	7b 00 f8 33 	movh %d3,16256
8000255e:	4b 43 51 30 	div.f %d3,%d3,%d4
80002562:	4b 32 01 20 	cmp.f %d2,%d2,%d3
80002566:	6f 02 03 00 	jz.t %d2,0,8000256c <IfxGtm_Tom_Timer_init+0xe8>
        result = FALSE;
8000256a:	82 08       	mov %d8,0
    result &= IfxGtm_Tom_Timer_setFrequency(driver, config->base.frequency);
8000256c:	54 d4       	ld.w %d4,[%a13]
8000256e:	40 c4       	mov.aa %a4,%a12
80002570:	6d ff bb fe 	call 800022e6 <IfxGtm_Tom_Timer_setFrequency>
80002574:	26 28       	and %d8,%d2
    if (result == TRUE)
80002576:	df 08 10 80 	jne %d8,0,80002596 <IfxGtm_Tom_Timer_init+0x112>
}
8000257a:	02 82       	mov %d2,%d8
8000257c:	00 90       	ret 
            result = FALSE;
8000257e:	82 08       	mov %d8,0
80002580:	1d ff b0 ff 	j 800024e0 <IfxGtm_Tom_Timer_init+0x5c>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
80002584:	1b 05 23 20 	addi %d2,%d5,560
        driver->tgc[0] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
80002588:	59 c2 18 00 	st.w [%a12]24,%d2
        driver->tgc[1] = NULL_PTR; /* NOTE currently no concatenation between TOMs */
8000258c:	82 02       	mov %d2,0
8000258e:	59 c2 1c 00 	st.w [%a12]28,%d2
80002592:	1d ff b5 ff 	j 800024fc <IfxGtm_Tom_Timer_init+0x78>
        driver->offset = IfxStdIf_Timer_sToTick(driver->base.clockFreq, 1.0f / config->base.frequency * config->base.startOffset);
80002596:	19 c3 08 00 	ld.w %d3,[%a12]8
8000259a:	54 d4       	ld.w %d4,[%a13]
8000259c:	7b 00 f8 23 	movh %d2,16256
800025a0:	4b 42 51 20 	div.f %d2,%d2,%d4
800025a4:	19 d4 30 00 	ld.w %d4,[%a13]48
800025a8:	4b 42 41 20 	mul.f %d2,%d2,%d4
800025ac:	4b 23 41 20 	mul.f %d2,%d3,%d2
800025b0:	4b 02 71 21 	ftouz %d2,%d2
800025b4:	59 c2 30 00 	st.w [%a12]48,%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, driver->timerChannel, driver->offset);
800025b8:	19 c3 24 00 	ld.w %d3,[%a12]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800025bc:	06 63       	sh %d3,6
800025be:	99 c2 14 00 	ld.a %a2,[%a12]20
800025c2:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CN0.U = value;
800025c6:	59 22 14 00 	st.w [%a2]20,%d2
        maskShift = (config->timerChannel <= 7) ? 0 : 8;
800025ca:	19 d2 3c 00 	ld.w %d2,[%a13]60
800025ce:	8b 82 80 22 	ge %d2,%d2,8
800025d2:	df 02 53 80 	jne %d2,0,80002678 <IfxGtm_Tom_Timer_init+0x1f4>
800025d6:	82 09       	mov %d9,0
        IfxGtm_Tom_Timer_addToChannelMask(driver, driver->timerChannel);
800025d8:	19 c4 24 00 	ld.w %d4,[%a12]36
800025dc:	40 c4       	mov.aa %a4,%a12
800025de:	6d ff f6 fe 	call 800023ca <IfxGtm_Tom_Timer_addToChannelMask>
        if (base->triggerEnabled)
800025e2:	39 c2 04 00 	ld.bu %d2,[%a12]4
800025e6:	df 02 3a 00 	jeq %d2,0,8000265a <IfxGtm_Tom_Timer_init+0x1d6>
            IfxGtm_Tom_Ch triggerChannel     = driver->triggerChannel;
800025ea:	19 c3 28 00 	ld.w %d3,[%a12]40
            uint16        triggerChannelMask = 1 << (triggerChannel - maskShift);
800025ee:	0b 93 80 20 	sub %d2,%d3,%d9
800025f2:	82 19       	mov %d9,1
800025f4:	0f 29 00 90 	sh %d9,%d9,%d2
            IfxGtm_Tom_Ch_setSignalLevel(driver->tom, triggerChannel, config->base.trigger.risingEdgeAtPeriod ? Ifx_ActiveState_high : Ifx_ActiveState_low);
800025f8:	39 d2 28 00 	ld.bu %d2,[%a13]40
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800025fc:	8f 63 00 40 	sh %d4,%d3,6
80002600:	99 c2 14 00 	ld.a %a2,[%a12]20
80002604:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002608:	df 02 3c 80 	jne %d2,0,80002680 <IfxGtm_Tom_Timer_init+0x1fc>
8000260c:	82 05       	mov %d5,0
8000260e:	54 22       	ld.w %d2,[%a2]
80002610:	67 52 0b 20 	ins.t %d2,%d2,11,%d5,0
80002614:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002616:	99 c2 14 00 	ld.a %a2,[%a12]20
8000261a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CN0.U = value;
8000261e:	19 c2 30 00 	ld.w %d2,[%a12]48
80002622:	59 22 14 00 	st.w [%a2]20,%d2
            if (triggerChannel != driver->timerChannel)
80002626:	19 c2 24 00 	ld.w %d2,[%a12]36
8000262a:	5f 32 2e 80 	jne %d2,%d3,80002686 <IfxGtm_Tom_Timer_init+0x202>
            IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc[0], triggerChannelMask, 0, FALSE);
8000262e:	cc c6       	ld.a %a15,[%a12]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
80002630:	82 06       	mov %d6,0
80002632:	82 05       	mov %d5,0
80002634:	37 09 70 40 	extr.u %d4,%d9,0,16
80002638:	6d 00 78 09 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
8000263c:	59 f2 08 10 	st.w [%a15]72,%d2
            if ((config->base.trigger.outputEnabled) && (config->initPins == TRUE))
80002640:	39 d2 29 00 	ld.bu %d2,[%a13]41
80002644:	df 02 06 00 	jeq %d2,0,80002650 <IfxGtm_Tom_Timer_init+0x1cc>
80002648:	39 d2 10 10 	ld.bu %d2,[%a13]80
8000264c:	df 12 47 00 	jeq %d2,1,800026da <IfxGtm_Tom_Timer_init+0x256>
            IfxGtm_Tom_Timer_setTrigger(driver, config->base.trigger.triggerPoint);
80002650:	19 d4 14 00 	ld.w %d4,[%a13]20
80002654:	40 c4       	mov.aa %a4,%a12
80002656:	6d ff 5d fe 	call 80002310 <IfxGtm_Tom_Timer_setTrigger>
            boolean                timerHasIrq   = config->base.isrPriority > 0;
8000265a:	b9 d2 04 00 	ld.hu %d2,[%a13]4
8000265e:	8b 02 20 62 	ne %d6,%d2,0
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
80002662:	b9 d3 18 00 	ld.hu %d3,[%a13]24
80002666:	df 03 44 00 	jeq %d3,0,800026ee <IfxGtm_Tom_Timer_init+0x26a>
8000266a:	39 c3 04 00 	ld.bu %d3,[%a12]4
8000266e:	df 03 ce 80 	jne %d3,0,8000280a <IfxGtm_Tom_Timer_init+0x386>
80002672:	82 05       	mov %d5,0
80002674:	1d 00 3e 00 	j 800026f0 <IfxGtm_Tom_Timer_init+0x26c>
        maskShift = (config->timerChannel <= 7) ? 0 : 8;
80002678:	3b 80 00 90 	mov %d9,8
8000267c:	1d ff ae ff 	j 800025d8 <IfxGtm_Tom_Timer_init+0x154>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002680:	82 15       	mov %d5,1
80002682:	1d ff c6 ff 	j 8000260e <IfxGtm_Tom_Timer_init+0x18a>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002686:	99 c2 14 00 	ld.a %a2,[%a12]20
8000268a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
8000268e:	54 22       	ld.w %d2,[%a2]
80002690:	b7 12 01 2a 	insert %d2,%d2,1,20,1
80002694:	74 22       	st.w [%a2],%d2
                IfxGtm_Tom_Ch_setClockSource(driver->tom, triggerChannel, config->clock);
80002696:	19 d3 04 10 	ld.w %d3,[%a13]68
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000269a:	99 c2 14 00 	ld.a %a2,[%a12]20
8000269e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
800026a2:	54 22       	ld.w %d2,[%a2]
800026a4:	37 32 03 26 	insert %d2,%d2,%d3,12,3
800026a8:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800026aa:	99 c2 14 00 	ld.a %a2,[%a12]20
800026ae:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
800026b2:	54 22       	ld.w %d2,[%a2]
800026b4:	b7 02 01 2c 	insert %d2,%d2,0,24,1
800026b8:	74 22       	st.w [%a2],%d2
                IfxGtm_Tom_Tgc_enableChannels(driver->tgc[0], triggerChannelMask, 0, FALSE);
800026ba:	cc c6       	ld.a %a15,[%a12]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
800026bc:	82 06       	mov %d6,0
800026be:	82 05       	mov %d5,0
800026c0:	37 09 70 40 	extr.u %d4,%d9,0,16
800026c4:	6d 00 32 09 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
800026c8:	59 f2 00 10 	st.w [%a15]64,%d2
                IfxGtm_Tom_Timer_addToChannelMask(driver, driver->triggerChannel);
800026cc:	19 c4 28 00 	ld.w %d4,[%a12]40
800026d0:	40 c4       	mov.aa %a4,%a12
800026d2:	6d ff 7c fe 	call 800023ca <IfxGtm_Tom_Timer_addToChannelMask>
800026d6:	1d ff ac ff 	j 8000262e <IfxGtm_Tom_Timer_init+0x1aa>
                IfxGtm_PinMap_setTomTout(config->triggerOut, config->base.trigger.outputMode, config->base.trigger.outputDriver);
800026da:	19 d5 24 00 	ld.w %d5,[%a13]36
800026de:	19 d4 20 00 	ld.w %d4,[%a13]32
800026e2:	99 d4 00 10 	ld.a %a4,[%a13]64
800026e6:	6d ff 8d f1 	call 80000a00 <IfxGtm_PinMap_setTomTout>
800026ea:	1d ff b3 ff 	j 80002650 <IfxGtm_Tom_Timer_init+0x1cc>
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
800026ee:	82 05       	mov %d5,0
800026f0:	8f f5 0f 51 	and %d5,%d5,255
            if (driver->triggerChannel == driver->timerChannel)
800026f4:	19 c4 28 00 	ld.w %d4,[%a12]40
800026f8:	19 c3 24 00 	ld.w %d3,[%a12]36
800026fc:	5f 34 8a 00 	jeq %d4,%d3,80002810 <IfxGtm_Tom_Timer_init+0x38c>
                if (timerHasIrq)
80002700:	df 02 41 00 	jeq %d2,0,80002782 <IfxGtm_Tom_Timer_init+0x2fe>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002704:	06 63       	sh %d3,6
80002706:	99 c2 14 00 	ld.a %a2,[%a12]20
8000270a:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    en.U = tomCh->IRQ_EN.U;
8000270e:	d9 23 20 00 	lea %a3,[%a2]32
80002712:	19 24 20 00 	ld.w %d4,[%a2]32
80002716:	02 42       	mov %d2,%d4
    tomCh->IRQ_EN.U            = IFX_ZEROS;
80002718:	82 03       	mov %d3,0
8000271a:	74 33       	st.w [%a3],%d3
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
8000271c:	d9 23 28 00 	lea %a3,[%a2]40
80002720:	19 23 28 00 	ld.w %d3,[%a2]40
80002724:	b7 23 02 30 	insert %d3,%d3,2,0,2
80002728:	74 33       	st.w [%a3],%d3
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
8000272a:	d9 23 20 00 	lea %a3,[%a2]32
8000272e:	59 24 20 00 	st.w [%a2]32,%d4
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
80002732:	b7 12 01 20 	insert %d2,%d2,1,0,1
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
80002736:	8f 22 c0 21 	andn %d2,%d2,2
    tomCh->IRQ_EN.U            = en.U;
8000273a:	74 32       	st.w [%a3],%d2
                    src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->timerChannel);
8000273c:	19 d3 38 00 	ld.w %d3,[%a13]56
80002740:	19 c2 24 00 	ld.w %d2,[%a12]36
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
80002744:	86 f2       	sha %d2,-1
80002746:	06 33       	sh %d3,3
80002748:	42 32       	add %d2,%d3
8000274a:	06 22       	sh %d2,2
8000274c:	7b 40 00 3f 	movh %d3,61444
80002750:	1b 03 b8 39 	addi %d3,%d3,-25728
80002754:	60 32       	mov.a %a2,%d3
80002756:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
                    IfxSrc_init(src, config->base.isrProvider, config->base.isrPriority);
8000275a:	19 d4 08 00 	ld.w %d4,[%a13]8
    src->B.SRPN = priority;
8000275e:	39 d3 04 00 	ld.bu %d3,[%a13]4
80002762:	54 22       	ld.w %d2,[%a2]
80002764:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80002768:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
8000276a:	54 22       	ld.w %d2,[%a2]
8000276c:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80002770:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80002772:	54 22       	ld.w %d2,[%a2]
80002774:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80002778:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
8000277a:	54 22       	ld.w %d2,[%a2]
8000277c:	b7 12 01 25 	insert %d2,%d2,1,10,1
80002780:	74 22       	st.w [%a2],%d2
                if (triggerHasIrq)
80002782:	df 05 8f 00 	jeq %d5,0,800028a0 <IfxGtm_Tom_Timer_init+0x41c>
                    IfxGtm_Tom_Ch_setNotification(driver->tom, driver->triggerChannel, irqMode, FALSE, TRUE);
80002786:	19 c2 28 00 	ld.w %d2,[%a12]40
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000278a:	06 62       	sh %d2,6
8000278c:	99 c2 14 00 	ld.a %a2,[%a12]20
80002790:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    en.U = tomCh->IRQ_EN.U;
80002794:	d9 23 20 00 	lea %a3,[%a2]32
80002798:	19 23 20 00 	ld.w %d3,[%a2]32
    tomCh->IRQ_EN.U            = IFX_ZEROS;
8000279c:	82 02       	mov %d2,0
8000279e:	74 32       	st.w [%a3],%d2
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
800027a0:	d9 23 28 00 	lea %a3,[%a2]40
800027a4:	19 22 28 00 	ld.w %d2,[%a2]40
800027a8:	b7 22 02 20 	insert %d2,%d2,2,0,2
800027ac:	74 32       	st.w [%a3],%d2
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
800027ae:	d9 23 20 00 	lea %a3,[%a2]32
800027b2:	59 23 20 00 	st.w [%a2]32,%d3
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
800027b6:	8f 13 c0 31 	andn %d3,%d3,1
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
800027ba:	b7 13 81 30 	insert %d3,%d3,1,1,1
    tomCh->IRQ_EN.U            = en.U;
800027be:	74 33       	st.w [%a3],%d3
                    src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->triggerChannel);
800027c0:	19 d3 38 00 	ld.w %d3,[%a13]56
800027c4:	19 c2 28 00 	ld.w %d2,[%a12]40
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
800027c8:	86 f2       	sha %d2,-1
800027ca:	06 33       	sh %d3,3
800027cc:	42 32       	add %d2,%d3
800027ce:	06 22       	sh %d2,2
800027d0:	7b 40 00 3f 	movh %d3,61444
800027d4:	1b 03 b8 39 	addi %d3,%d3,-25728
800027d8:	60 32       	mov.a %a2,%d3
800027da:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
                    IfxSrc_init(src, config->base.trigger.isrProvider, config->base.trigger.isrPriority);
800027de:	19 d4 1c 00 	ld.w %d4,[%a13]28
    src->B.SRPN = priority;
800027e2:	39 d3 18 00 	ld.bu %d3,[%a13]24
800027e6:	54 22       	ld.w %d2,[%a2]
800027e8:	37 32 08 20 	insert %d2,%d2,%d3,0,8
800027ec:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800027ee:	54 22       	ld.w %d2,[%a2]
800027f0:	37 42 82 25 	insert %d2,%d2,%d4,11,2
800027f4:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
800027f6:	54 22       	ld.w %d2,[%a2]
800027f8:	b7 12 81 2c 	insert %d2,%d2,1,25,1
800027fc:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
800027fe:	54 22       	ld.w %d2,[%a2]
80002800:	b7 12 01 25 	insert %d2,%d2,1,10,1
80002804:	74 22       	st.w [%a2],%d2
}
80002806:	1d 00 4d 00 	j 800028a0 <IfxGtm_Tom_Timer_init+0x41c>
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
8000280a:	82 15       	mov %d5,1
8000280c:	1d ff 72 ff 	j 800026f0 <IfxGtm_Tom_Timer_init+0x26c>
                IfxGtm_Tom_Ch_setNotification(driver->tom, driver->timerChannel, timerHasIrq ? config->irqModeTimer : config->irqModeTrigger, timerHasIrq, triggerHasIrq);
80002810:	19 c4 14 00 	ld.w %d4,[%a12]20
80002814:	df 02 70 00 	jeq %d2,0,800028f4 <IfxGtm_Tom_Timer_init+0x470>
80002818:	19 d7 08 10 	ld.w %d7,[%a13]72
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000281c:	06 63       	sh %d3,6
8000281e:	60 42       	mov.a %a2,%d4
80002820:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    en.U = tomCh->IRQ_EN.U;
80002824:	d9 23 20 00 	lea %a3,[%a2]32
80002828:	19 20 20 00 	ld.w %d0,[%a2]32
8000282c:	02 03       	mov %d3,%d0
    tomCh->IRQ_EN.U            = IFX_ZEROS;
8000282e:	82 04       	mov %d4,0
80002830:	74 34       	st.w [%a3],%d4
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
80002832:	d9 23 28 00 	lea %a3,[%a2]40
80002836:	19 24 28 00 	ld.w %d4,[%a2]40
8000283a:	37 74 02 40 	insert %d4,%d4,%d7,0,2
8000283e:	74 34       	st.w [%a3],%d4
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
80002840:	d9 23 20 00 	lea %a3,[%a2]32
80002844:	59 20 20 00 	st.w [%a2]32,%d0
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
80002848:	67 63 00 30 	ins.t %d3,%d3,0,%d6,0
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
8000284c:	67 53 01 30 	ins.t %d3,%d3,1,%d5,0
    tomCh->IRQ_EN.U            = en.U;
80002850:	74 33       	st.w [%a3],%d3
                src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->timerChannel);
80002852:	19 d4 38 00 	ld.w %d4,[%a13]56
80002856:	19 c3 24 00 	ld.w %d3,[%a12]36
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
8000285a:	86 f3       	sha %d3,-1
8000285c:	06 34       	sh %d4,3
8000285e:	42 43       	add %d3,%d4
80002860:	06 23       	sh %d3,2
80002862:	7b 40 00 4f 	movh %d4,61444
80002866:	1b 04 b8 49 	addi %d4,%d4,-25728
8000286a:	60 42       	mov.a %a2,%d4
8000286c:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
                IfxSrc_init(src, timerHasIrq ? config->base.isrProvider : config->base.trigger.isrProvider, timerHasIrq ? config->base.isrPriority : config->base.trigger.isrPriority);
80002870:	df 02 46 00 	jeq %d2,0,800028fc <IfxGtm_Tom_Timer_init+0x478>
80002874:	19 d4 08 00 	ld.w %d4,[%a13]8
80002878:	df 02 46 00 	jeq %d2,0,80002904 <IfxGtm_Tom_Timer_init+0x480>
8000287c:	b9 d3 04 00 	ld.hu %d3,[%a13]4
    src->B.SRPN = priority;
80002880:	54 22       	ld.w %d2,[%a2]
80002882:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80002886:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80002888:	54 22       	ld.w %d2,[%a2]
8000288a:	37 42 82 25 	insert %d2,%d2,%d4,11,2
8000288e:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80002890:	54 22       	ld.w %d2,[%a2]
80002892:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80002896:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80002898:	54 22       	ld.w %d2,[%a2]
8000289a:	b7 12 01 25 	insert %d2,%d2,1,10,1
8000289e:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc[0], driver->channelsMask[0], 0, 0, 0);
800028a0:	99 cd 18 00 	ld.a %a13,[%a12]24
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
800028a4:	82 06       	mov %d6,0
800028a6:	82 05       	mov %d5,0
800028a8:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
800028ac:	6d 00 3e 08 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
800028b0:	02 29       	mov %d9,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
800028b2:	3b 00 01 60 	mov %d6,16
800028b6:	82 05       	mov %d5,0
800028b8:	82 04       	mov %d4,0
800028ba:	6d 00 37 08 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
800028be:	a6 92       	or %d2,%d9
800028c0:	59 d2 08 00 	st.w [%a13]8,%d2
        IfxGtm_Tom_Tgc_trigger(driver->tgc[0]);
800028c4:	99 c2 18 00 	ld.a %a2,[%a12]24
    tgc->GLB_CTRL.U = 1 << IFX_GTM_TOM_TGC0_GLB_CTRL_HOST_TRIG_OFF;
800028c8:	82 12       	mov %d2,1
800028ca:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc[0], 0, driver->channelsMask[0], 0, 0);
800028cc:	99 cd 18 00 	ld.a %a13,[%a12]24
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
800028d0:	82 06       	mov %d6,0
800028d2:	b9 c5 2c 00 	ld.hu %d5,[%a12]44
800028d6:	82 04       	mov %d4,0
800028d8:	6d 00 28 08 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
800028dc:	02 29       	mov %d9,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
800028de:	3b 00 01 60 	mov %d6,16
800028e2:	82 05       	mov %d5,0
800028e4:	82 04       	mov %d4,0
800028e6:	6d 00 21 08 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
800028ea:	a6 92       	or %d2,%d9
800028ec:	59 d2 08 00 	st.w [%a13]8,%d2
}
800028f0:	1d ff 45 fe 	j 8000257a <IfxGtm_Tom_Timer_init+0xf6>
                IfxGtm_Tom_Ch_setNotification(driver->tom, driver->timerChannel, timerHasIrq ? config->irqModeTimer : config->irqModeTrigger, timerHasIrq, triggerHasIrq);
800028f4:	19 d7 0c 10 	ld.w %d7,[%a13]76
800028f8:	1d ff 92 ff 	j 8000281c <IfxGtm_Tom_Timer_init+0x398>
                IfxSrc_init(src, timerHasIrq ? config->base.isrProvider : config->base.trigger.isrProvider, timerHasIrq ? config->base.isrPriority : config->base.trigger.isrPriority);
800028fc:	19 d4 1c 00 	ld.w %d4,[%a13]28
80002900:	1d ff bc ff 	j 80002878 <IfxGtm_Tom_Timer_init+0x3f4>
80002904:	b9 d3 18 00 	ld.hu %d3,[%a13]24
80002908:	1d ff bc ff 	j 80002880 <IfxGtm_Tom_Timer_init+0x3fc>

8000290c <IfxGtm_Tom_Timer_initConfig>:
{
8000290c:	40 ae       	mov.aa %a14,%sp
8000290e:	40 4c       	mov.aa %a12,%a4
80002910:	80 58       	mov.d %d8,%a5
    IfxStdIf_Timer_initConfig(&config->base);
80002912:	6d 00 7d 0e 	call 8000460c <IfxStdIf_Timer_initConfig>
    config->gtm            = gtm;
80002916:	59 c8 34 00 	st.w [%a12]52,%d8
    config->tom            = IfxGtm_Tom_0;
8000291a:	82 02       	mov %d2,0
8000291c:	59 c2 38 00 	st.w [%a12]56,%d2
    config->timerChannel   = IfxGtm_Tom_Ch_0;
80002920:	59 c2 3c 00 	st.w [%a12]60,%d2
    config->triggerOut     = NULL_PTR;
80002924:	59 c2 00 10 	st.w [%a12]64,%d2
    config->clock          = IfxGtm_Tom_Ch_ClkSrc_cmuFxclk0;
80002928:	59 c2 04 10 	st.w [%a12]68,%d2
    config->base.countDir  = IfxStdIf_Timer_CountDir_up;
8000292c:	59 c2 2c 00 	st.w [%a12]44,%d2
    config->irqModeTimer   = IfxGtm_IrqMode_level;
80002930:	59 c2 08 10 	st.w [%a12]72,%d2
    config->irqModeTrigger = IfxGtm_IrqMode_level;
80002934:	59 c2 0c 10 	st.w [%a12]76,%d2
    config->initPins       = TRUE;
80002938:	82 12       	mov %d2,1
8000293a:	e9 c2 10 10 	st.b [%a12]80,%d2
}
8000293e:	00 90       	ret 

80002940 <IfxGtm_Tom_PwmHl_setDeadtime>:
    config->initPins = TRUE;
}


boolean IfxGtm_Tom_PwmHl_setDeadtime(IfxGtm_Tom_PwmHl *driver, float32 deadtime)
{
80002940:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue value = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, deadtime);
80002942:	99 42 20 00 	ld.a %a2,[%a4]32
80002946:	19 22 08 00 	ld.w %d2,[%a2]8
8000294a:	4b 42 41 20 	mul.f %d2,%d2,%d4
8000294e:	4b 02 71 21 	ftouz %d2,%d2
    driver->base.deadtime = value;
80002952:	74 42       	st.w [%a4],%d2

    return TRUE;
}
80002954:	82 12       	mov %d2,1
80002956:	00 90       	ret 

80002958 <IfxGtm_Tom_PwmHl_setMinPulse>:


boolean IfxGtm_Tom_PwmHl_setMinPulse(IfxGtm_Tom_PwmHl *driver, float32 minPulse)
{
80002958:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue value = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, minPulse);
8000295a:	99 42 20 00 	ld.a %a2,[%a4]32
8000295e:	19 22 08 00 	ld.w %d2,[%a2]8
80002962:	4b 42 41 20 	mul.f %d2,%d2,%d4
80002966:	4b 02 71 21 	ftouz %d2,%d2

    driver->base.minPulse = value + driver->base.deadtime;
8000296a:	54 43       	ld.w %d3,[%a4]
8000296c:	42 32       	add %d2,%d3
8000296e:	59 42 04 00 	st.w [%a4]4,%d2
    driver->base.maxPulse = driver->timer->base.period - driver->base.minPulse;
80002972:	54 23       	ld.w %d3,[%a2]
80002974:	0b 23 80 20 	sub %d2,%d3,%d2
80002978:	59 42 08 00 	st.w [%a4]8,%d2

    return TRUE;
}
8000297c:	82 12       	mov %d2,1
8000297e:	00 90       	ret 

80002980 <IfxGtm_Tom_PwmHl_setMode>:


boolean IfxGtm_Tom_PwmHl_setMode(IfxGtm_Tom_PwmHl *driver, Ifx_Pwm_Mode mode)
{
80002980:	40 ae       	mov.aa %a14,%sp
    boolean                result = TRUE;
    IfxGtm_Tom_PwmHl_Base *base   = &driver->base;

    if (base->mode != mode)
80002982:	19 42 0c 00 	ld.w %d2,[%a4]12
80002986:	5f 42 a4 00 	jeq %d2,%d4,80002ace <IfxGtm_Tom_PwmHl_setMode+0x14e>
    {
        if ((mode > Ifx_Pwm_Mode_off) || (IfxGtm_Tom_PwmHl_modes[mode].update == NULL_PTR))
8000298a:	ff 54 11 80 	jge.u %d4,5,800029ac <IfxGtm_Tom_PwmHl_setMode+0x2c>
8000298e:	91 00 00 28 	movh.a %a2,32768
80002992:	80 22       	mov.d %d2,%a2
80002994:	1b 82 42 20 	addi %d2,%d2,1064
80002998:	13 44 21 22 	madd %d2,%d2,%d4,20
8000299c:	60 22       	mov.a %a2,%d2
8000299e:	19 22 08 00 	ld.w %d2,[%a2]8
800029a2:	df 02 3c 00 	jeq %d2,0,80002a1a <IfxGtm_Tom_PwmHl_setMode+0x9a>
    boolean                result = TRUE;
800029a6:	82 12       	mov %d2,1
800029a8:	1d 00 04 00 	j 800029b0 <IfxGtm_Tom_PwmHl_setMode+0x30>
        {
            mode   = Ifx_Pwm_Mode_off;
            result = FALSE;
800029ac:	82 02       	mov %d2,0
            mode   = Ifx_Pwm_Mode_off;
800029ae:	82 44       	mov %d4,4
        }

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mode == IfxGtm_Tom_PwmHl_modes[mode].mode);

        base->mode             = mode;
800029b0:	59 44 0c 00 	st.w [%a4]12,%d4
        driver->update         = IfxGtm_Tom_PwmHl_modes[mode].update;
800029b4:	91 00 00 28 	movh.a %a2,32768
800029b8:	80 23       	mov.d %d3,%a2
800029ba:	1b 83 42 30 	addi %d3,%d3,1064
800029be:	13 44 21 33 	madd %d3,%d3,%d4,20
800029c2:	60 32       	mov.a %a2,%d3
800029c4:	19 23 08 00 	ld.w %d3,[%a2]8
800029c8:	59 43 24 00 	st.w [%a4]36,%d3
        driver->updateAndShift = IfxGtm_Tom_PwmHl_modes[mode].updateAndShift;
800029cc:	19 23 0c 00 	ld.w %d3,[%a2]12
800029d0:	59 43 28 00 	st.w [%a4]40,%d3
        driver->updatePulse    = IfxGtm_Tom_PwmHl_modes[mode].updatePulse;
800029d4:	19 23 10 00 	ld.w %d3,[%a2]16
800029d8:	59 43 2c 00 	st.w [%a4]44,%d3

        if (base->mode != Ifx_Pwm_Mode_off)
800029dc:	df 44 0e 00 	jeq %d4,4,800029f8 <IfxGtm_Tom_PwmHl_setMode+0x78>
        {
            base->inverted = IfxGtm_Tom_PwmHl_modes[mode].inverted;
800029e0:	91 00 00 28 	movh.a %a2,32768
800029e4:	80 23       	mov.d %d3,%a2
800029e6:	1b 83 42 30 	addi %d3,%d3,1064
800029ea:	13 44 21 33 	madd %d3,%d3,%d4,20
800029ee:	60 32       	mov.a %a2,%d3
800029f0:	39 23 04 00 	ld.bu %d3,[%a2]4
800029f4:	e9 43 1c 00 	st.b [%a4]28,%d3
        }
        else
        {                       /* Keep previous inverted for off mode */
        }

        if (base->inverted)
800029f8:	39 43 1c 00 	ld.bu %d3,[%a4]28
800029fc:	df 03 13 00 	jeq %d3,0,80002a22 <IfxGtm_Tom_PwmHl_setMode+0xa2>
        {
            driver->ccxTemp   = driver->coutx;
80002a00:	80 43       	mov.d %d3,%a4
80002a02:	1b 43 04 30 	addi %d3,%d3,68
80002a06:	59 43 10 10 	st.w [%a4]80,%d3
            driver->coutxTemp = driver->ccx;
80002a0a:	80 43       	mov.d %d3,%a4
80002a0c:	1b 83 03 30 	addi %d3,%d3,56
80002a10:	59 43 14 10 	st.w [%a4]84,%d3
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002a14:	82 04       	mov %d4,0
80002a16:	1d 00 3d 00 	j 80002a90 <IfxGtm_Tom_PwmHl_setMode+0x110>
            result = FALSE;
80002a1a:	82 02       	mov %d2,0
            mode   = Ifx_Pwm_Mode_off;
80002a1c:	82 44       	mov %d4,4
80002a1e:	1d ff c9 ff 	j 800029b0 <IfxGtm_Tom_PwmHl_setMode+0x30>
        }
        else
        {
            driver->ccxTemp   = driver->ccx;
80002a22:	80 43       	mov.d %d3,%a4
80002a24:	1b 83 03 30 	addi %d3,%d3,56
80002a28:	59 43 10 10 	st.w [%a4]80,%d3
            driver->coutxTemp = driver->coutx;
80002a2c:	80 43       	mov.d %d3,%a4
80002a2e:	1b 43 04 30 	addi %d3,%d3,68
80002a32:	59 43 14 10 	st.w [%a4]84,%d3
80002a36:	1d ff ef ff 	j 80002a14 <IfxGtm_Tom_PwmHl_setMode+0x94>
                IfxGtm_Tom_Ch channel;

                channel = driver->ccx[channelIndex];
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
                    ? base->ccxActiveState
                    : IfxGtm_Tom_PwmHl_invertActiveState(driver->base.ccxActiveState));
80002a3a:	19 43 14 00 	ld.w %d3,[%a4]20
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80002a3e:	8b 03 00 32 	eq %d3,%d3,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002a42:	06 65       	sh %d5,6
80002a44:	60 62       	mov.a %a2,%d6
80002a46:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002a4a:	df 13 37 00 	jeq %d3,1,80002ab8 <IfxGtm_Tom_PwmHl_setMode+0x138>
80002a4e:	82 05       	mov %d5,0
80002a50:	54 23       	ld.w %d3,[%a2]
80002a52:	67 53 0b 30 	ins.t %d3,%d3,11,%d5,0
80002a56:	74 23       	st.w [%a2],%d3

                channel = driver->coutx[channelIndex];
80002a58:	1b 14 01 30 	addi %d3,%d4,17
80002a5c:	06 23       	sh %d3,2
80002a5e:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80002a62:	54 25       	ld.w %d5,[%a2]
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80002a64:	19 46 30 00 	ld.w %d6,[%a4]48
80002a68:	39 43 1c 00 	ld.bu %d3,[%a4]28
80002a6c:	df 03 29 00 	jeq %d3,0,80002abe <IfxGtm_Tom_PwmHl_setMode+0x13e>
                    ? IfxGtm_Tom_PwmHl_invertActiveState(driver->base.coutxActiveState)
80002a70:	19 43 18 00 	ld.w %d3,[%a4]24
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80002a74:	8b 03 00 32 	eq %d3,%d3,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002a78:	06 65       	sh %d5,6
80002a7a:	60 62       	mov.a %a2,%d6
80002a7c:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002a80:	df 13 23 00 	jeq %d3,1,80002ac6 <IfxGtm_Tom_PwmHl_setMode+0x146>
80002a84:	82 05       	mov %d5,0
80002a86:	54 23       	ld.w %d3,[%a2]
80002a88:	67 53 0b 30 	ins.t %d3,%d3,11,%d5,0
80002a8c:	74 23       	st.w [%a2],%d3
            for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002a8e:	c2 14       	add %d4,1
80002a90:	39 43 1d 00 	ld.bu %d3,[%a4]29
80002a94:	7f 34 1c 80 	jge.u %d4,%d3,80002acc <IfxGtm_Tom_PwmHl_setMode+0x14c>
                channel = driver->ccx[channelIndex];
80002a98:	1b e4 00 30 	addi %d3,%d4,14
80002a9c:	06 23       	sh %d3,2
80002a9e:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80002aa2:	54 25       	ld.w %d5,[%a2]
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80002aa4:	19 46 30 00 	ld.w %d6,[%a4]48
80002aa8:	39 43 1c 00 	ld.bu %d3,[%a4]28
80002aac:	df 03 c7 7f 	jeq %d3,0,80002a3a <IfxGtm_Tom_PwmHl_setMode+0xba>
80002ab0:	19 43 14 00 	ld.w %d3,[%a4]20
80002ab4:	1d ff c7 ff 	j 80002a42 <IfxGtm_Tom_PwmHl_setMode+0xc2>
80002ab8:	82 15       	mov %d5,1
80002aba:	1d ff cb ff 	j 80002a50 <IfxGtm_Tom_PwmHl_setMode+0xd0>
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80002abe:	19 43 18 00 	ld.w %d3,[%a4]24
80002ac2:	1d ff db ff 	j 80002a78 <IfxGtm_Tom_PwmHl_setMode+0xf8>
80002ac6:	82 15       	mov %d5,1
80002ac8:	1d ff df ff 	j 80002a86 <IfxGtm_Tom_PwmHl_setMode+0x106>
80002acc:	00 90       	ret 
    boolean                result = TRUE;
80002ace:	82 12       	mov %d2,1
            }
        }
    }

    return result;
}
80002ad0:	00 90       	ret 

80002ad2 <IfxGtm_Tom_PwmHl_setOnTime>:


void IfxGtm_Tom_PwmHl_setOnTime(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80002ad2:	40 ae       	mov.aa %a14,%sp
    driver->update(driver, tOn);
80002ad4:	99 42 24 00 	ld.a %a2,[%a4]36
80002ad8:	2d 02 00 00 	calli %a2
}
80002adc:	00 90       	ret 

80002ade <IfxGtm_Tom_PwmHl_updateCenterAligned>:
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
}


IFX_STATIC void IfxGtm_Tom_PwmHl_updateCenterAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80002ade:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
80002ae0:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
80002ae2:	99 42 20 00 	ld.a %a2,[%a4]32
80002ae6:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002ae8:	82 03       	mov %d3,0
80002aea:	1d 00 5e 00 	j 80002ba6 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc8>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {                       /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
80002aee:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80002af0:	5f 52 2e 00 	jeq %d2,%d5,80002b4c <IfxGtm_Tom_PwmHl_updateCenterAligned+0x6e>
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1) */);
        }
        else if (x == 0)
80002af4:	df 02 75 80 	jne %d2,0,80002bde <IfxGtm_Tom_PwmHl_updateCenterAligned+0x100>
        {
            cm0 = 1;
            cm1 = period + 2;
80002af8:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
80002afc:	99 42 10 10 	ld.a %a2,[%a4]80
80002b00:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002b04:	54 26       	ld.w %d6,[%a2]
80002b06:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002b0a:	06 66       	sh %d6,6
80002b0c:	99 42 30 00 	ld.a %a2,[%a4]48
80002b10:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002b14:	82 16       	mov %d6,1
80002b16:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
80002b1a:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80002b1e:	99 42 14 10 	ld.a %a2,[%a4]84
80002b22:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002b26:	54 26       	ld.w %d6,[%a2]
80002b28:	1b 17 00 40 	addi %d4,%d7,1
80002b2c:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002b30:	06 66       	sh %d6,6
80002b32:	99 42 30 00 	ld.a %a2,[%a4]48
80002b36:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002b3a:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80002b3e:	59 22 08 00 	st.w [%a2]8,%d2
}
80002b42:	1d 00 2f 00 	j 80002ba0 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc2>
            x = 0;
80002b46:	82 02       	mov %d2,0
80002b48:	1d ff d4 ff 	j 80002af0 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80002b4c:	99 42 10 10 	ld.a %a2,[%a4]80
80002b50:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002b54:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
80002b56:	37 05 70 20 	extr.u %d2,%d5,0,16
80002b5a:	1b 12 00 00 	addi %d0,%d2,1
80002b5e:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
80002b62:	1b 27 00 60 	addi %d6,%d7,2
80002b66:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002b6a:	06 61       	sh %d1,6
80002b6c:	99 42 30 00 	ld.a %a2,[%a4]48
80002b70:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80002b74:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
80002b78:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
80002b7c:	99 42 14 10 	ld.a %a2,[%a4]84
80002b80:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002b84:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
80002b86:	c2 22       	add %d2,2
80002b88:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002b8c:	06 64       	sh %d4,6
80002b8e:	99 42 30 00 	ld.a %a2,[%a4]48
80002b92:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80002b96:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002b9a:	82 22       	mov %d2,2
80002b9c:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002ba0:	c2 13       	add %d3,1
80002ba2:	8f f3 0f 31 	and %d3,%d3,255
80002ba6:	39 42 1d 00 	ld.bu %d2,[%a4]29
80002baa:	7f 23 4e 80 	jge.u %d3,%d2,80002c46 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x168>
        x = tOn[channelIndex];
80002bae:	8f 23 00 40 	sh %d4,%d3,2
80002bb2:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
80002bb6:	54 22       	ld.w %d2,[%a2]
        if (driver->base.inverted != FALSE)
80002bb8:	39 46 1c 00 	ld.bu %d6,[%a4]28
80002bbc:	df 06 04 00 	jeq %d6,0,80002bc4 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xe6>
            x = period - x;
80002bc0:	0b 25 80 20 	sub %d2,%d5,%d2
        if ((x < driver->base.minPulse) || (x <= deadtime))
80002bc4:	19 46 04 00 	ld.w %d6,[%a4]4
80002bc8:	3f 62 93 ff 	jlt.u %d2,%d6,80002aee <IfxGtm_Tom_PwmHl_updateCenterAligned+0x10>
80002bcc:	7f 27 bd ff 	jge.u %d7,%d2,80002b46 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x68>
        else if (x > driver->base.maxPulse)
80002bd0:	19 46 08 00 	ld.w %d6,[%a4]8
80002bd4:	7f 26 8e ff 	jge.u %d6,%d2,80002af0 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
            x = period;
80002bd8:	02 52       	mov %d2,%d5
80002bda:	1d ff 8b ff 	j 80002af0 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
        }
        else
        {                           /* x% duty cycle */
            cm1 = (period - x) / 2; // CM1
80002bde:	0b 25 80 60 	sub %d6,%d5,%d2
80002be2:	06 f6       	sh %d6,-1
            cm0 = (period + x) / 2; // CM0
80002be4:	42 52       	add %d2,%d5
80002be6:	8f f2 1f 80 	sh %d8,%d2,-1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
80002bea:	99 42 10 10 	ld.a %a2,[%a4]80
80002bee:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002bf2:	54 2a       	ld.w %d10,[%a2]
80002bf4:	37 02 f0 90 	extr.u %d9,%d2,1,16
80002bf8:	bb f0 ff 2f 	mov.u %d2,65535
80002bfc:	26 28       	and %d8,%d2
80002bfe:	37 07 70 00 	extr.u %d0,%d7,0,16
80002c02:	0b 60 00 10 	add %d1,%d0,%d6
80002c06:	37 01 70 10 	extr.u %d1,%d1,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002c0a:	06 6a       	sh %d10,6
80002c0c:	99 42 30 00 	ld.a %a2,[%a4]48
80002c10:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->SR0.U = shadowZero;
80002c14:	59 28 04 00 	st.w [%a2]4,%d8
    tomCh->SR1.U = shadowOne;
80002c18:	59 21 08 00 	st.w [%a2]8,%d1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80002c1c:	99 42 14 10 	ld.a %a2,[%a4]84
80002c20:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002c24:	54 21       	ld.w %d1,[%a2]
80002c26:	0b 09 00 40 	add %d4,%d9,%d0
80002c2a:	37 04 70 40 	extr.u %d4,%d4,0,16
80002c2e:	26 62       	and %d2,%d6
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002c30:	06 61       	sh %d1,6
80002c32:	99 42 30 00 	ld.a %a2,[%a4]48
80002c36:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80002c3a:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80002c3e:	59 22 08 00 	st.w [%a2]8,%d2
}
80002c42:	1d ff af ff 	j 80002ba0 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc2>
        }
    }
}
80002c46:	00 90       	ret 

80002c48 <IfxGtm_Tom_PwmHl_updateEdgeAligned>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateEdgeAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80002c48:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
80002c4a:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
80002c4c:	99 42 20 00 	ld.a %a2,[%a4]32
80002c50:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002c52:	82 03       	mov %d3,0
80002c54:	1d 00 5e 00 	j 80002d10 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc8>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {                       /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
80002c58:	82 00       	mov %d0,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80002c5a:	5f 50 2e 00 	jeq %d0,%d5,80002cb6 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x6e>
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1) */);
        }
        else if (x == 0)
80002c5e:	df 00 75 80 	jne %d0,0,80002d48 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x100>
        {
            cm0 = 1;
            cm1 = period + 2;
80002c62:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
80002c66:	99 42 10 10 	ld.a %a2,[%a4]80
80002c6a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002c6e:	54 26       	ld.w %d6,[%a2]
80002c70:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002c74:	06 66       	sh %d6,6
80002c76:	99 42 30 00 	ld.a %a2,[%a4]48
80002c7a:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002c7e:	82 16       	mov %d6,1
80002c80:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
80002c84:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80002c88:	99 42 14 10 	ld.a %a2,[%a4]84
80002c8c:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002c90:	54 26       	ld.w %d6,[%a2]
80002c92:	1b 17 00 40 	addi %d4,%d7,1
80002c96:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002c9a:	06 66       	sh %d6,6
80002c9c:	99 42 30 00 	ld.a %a2,[%a4]48
80002ca0:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002ca4:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80002ca8:	59 22 08 00 	st.w [%a2]8,%d2
}
80002cac:	1d 00 2f 00 	j 80002d0a <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc2>
            x = 0;
80002cb0:	82 00       	mov %d0,0
80002cb2:	1d ff d4 ff 	j 80002c5a <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80002cb6:	99 42 10 10 	ld.a %a2,[%a4]80
80002cba:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002cbe:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
80002cc0:	37 05 70 20 	extr.u %d2,%d5,0,16
80002cc4:	1b 12 00 00 	addi %d0,%d2,1
80002cc8:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
80002ccc:	1b 27 00 60 	addi %d6,%d7,2
80002cd0:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002cd4:	06 61       	sh %d1,6
80002cd6:	99 42 30 00 	ld.a %a2,[%a4]48
80002cda:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80002cde:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
80002ce2:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
80002ce6:	99 42 14 10 	ld.a %a2,[%a4]84
80002cea:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002cee:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
80002cf0:	c2 22       	add %d2,2
80002cf2:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002cf6:	06 64       	sh %d4,6
80002cf8:	99 42 30 00 	ld.a %a2,[%a4]48
80002cfc:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80002d00:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002d04:	82 22       	mov %d2,2
80002d06:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002d0a:	c2 13       	add %d3,1
80002d0c:	8f f3 0f 31 	and %d3,%d3,255
80002d10:	39 42 1d 00 	ld.bu %d2,[%a4]29
80002d14:	7f 23 44 80 	jge.u %d3,%d2,80002d9c <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x154>
        x = tOn[channelIndex];
80002d18:	8f 23 00 40 	sh %d4,%d3,2
80002d1c:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
80002d20:	54 20       	ld.w %d0,[%a2]
        if (driver->base.inverted != FALSE)
80002d22:	39 46 1c 00 	ld.bu %d6,[%a4]28
80002d26:	df 06 04 00 	jeq %d6,0,80002d2e <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xe6>
            x = period - x;
80002d2a:	0b 05 80 00 	sub %d0,%d5,%d0
        if ((x < driver->base.minPulse) || (x <= deadtime))
80002d2e:	19 46 04 00 	ld.w %d6,[%a4]4
80002d32:	3f 60 93 ff 	jlt.u %d0,%d6,80002c58 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x10>
80002d36:	7f 07 bd ff 	jge.u %d7,%d0,80002cb0 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x68>
        else if (x > driver->base.maxPulse)
80002d3a:	19 46 08 00 	ld.w %d6,[%a4]8
80002d3e:	7f 06 8e ff 	jge.u %d6,%d0,80002c5a <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
            x = period;
80002d42:	02 50       	mov %d0,%d5
80002d44:	1d ff 8b ff 	j 80002c5a <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
        }
        else
        {                       /* x% duty cycle */
            cm1 = 2;            // CM1, set to 2 due to a GTM issue. should be 1 according to spec
            cm0 = x;            // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
80002d48:	99 42 10 10 	ld.a %a2,[%a4]80
80002d4c:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002d50:	54 28       	ld.w %d8,[%a2]
80002d52:	37 00 70 10 	extr.u %d1,%d0,0,16
80002d56:	37 07 70 20 	extr.u %d2,%d7,0,16
80002d5a:	1b 22 00 60 	addi %d6,%d2,2
80002d5e:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002d62:	06 68       	sh %d8,6
80002d64:	99 42 30 00 	ld.a %a2,[%a4]48
80002d68:	01 28 00 26 	addsc.a %a2,%a2,%d8,0
    tomCh->SR0.U = shadowZero;
80002d6c:	59 21 04 00 	st.w [%a2]4,%d1
    tomCh->SR1.U = shadowOne;
80002d70:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80002d74:	99 42 14 10 	ld.a %a2,[%a4]84
80002d78:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002d7c:	54 24       	ld.w %d4,[%a2]
80002d7e:	42 12       	add %d2,%d1
80002d80:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002d84:	06 64       	sh %d4,6
80002d86:	99 42 30 00 	ld.a %a2,[%a4]48
80002d8a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80002d8e:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002d92:	82 22       	mov %d2,2
80002d94:	59 22 08 00 	st.w [%a2]8,%d2
}
80002d98:	1d ff b9 ff 	j 80002d0a <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc2>
        }
    }
}
80002d9c:	00 90       	ret 

80002d9e <IfxGtm_Tom_PwmHl_updateOff>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateOff(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80002d9e:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(tOn)
    uint8 channelIndex;
    Ifx_TimerValue period;

    period = driver->timer->base.period;
80002da0:	99 42 20 00 	ld.a %a2,[%a4]32
80002da4:	54 27       	ld.w %d7,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002da6:	82 02       	mov %d2,0
80002da8:	1d 00 2d 00 	j 80002e02 <IfxGtm_Tom_PwmHl_updateOff+0x64>
    {
        IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80002dac:	8f 22 00 40 	sh %d4,%d2,2
80002db0:	99 42 10 10 	ld.a %a2,[%a4]80
80002db4:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002db8:	54 26       	ld.w %d6,[%a2]
            2 /* 1 will keep the previous level */, period + 2);
80002dba:	37 07 70 30 	extr.u %d3,%d7,0,16
80002dbe:	1b 23 00 50 	addi %d5,%d3,2
80002dc2:	37 05 70 50 	extr.u %d5,%d5,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002dc6:	06 66       	sh %d6,6
80002dc8:	99 42 30 00 	ld.a %a2,[%a4]48
80002dcc:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002dd0:	82 26       	mov %d6,2
80002dd2:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
80002dd6:	59 25 08 00 	st.w [%a2]8,%d5
        IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], period + 1, 2);
80002dda:	99 42 14 10 	ld.a %a2,[%a4]84
80002dde:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002de2:	54 24       	ld.w %d4,[%a2]
80002de4:	c2 13       	add %d3,1
80002de6:	37 03 70 30 	extr.u %d3,%d3,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002dea:	06 64       	sh %d4,6
80002dec:	99 42 30 00 	ld.a %a2,[%a4]48
80002df0:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80002df4:	59 23 04 00 	st.w [%a2]4,%d3
    tomCh->SR1.U = shadowOne;
80002df8:	59 26 08 00 	st.w [%a2]8,%d6
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002dfc:	c2 12       	add %d2,1
80002dfe:	8f f2 0f 21 	and %d2,%d2,255
80002e02:	39 43 1d 00 	ld.bu %d3,[%a4]29
80002e06:	3f 32 d3 ff 	jlt.u %d2,%d3,80002dac <IfxGtm_Tom_PwmHl_updateOff+0xe>
    }
}
80002e0a:	00 90       	ret 

80002e0c <IfxGtm_Tom_PwmHl_updateAndShiftOff>:
{
80002e0c:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
80002e0e:	a0 05       	mov.a %a5,0
80002e10:	6d ff c7 ff 	call 80002d9e <IfxGtm_Tom_PwmHl_updateOff>
}
80002e14:	00 90       	ret 

80002e16 <IfxGtm_Tom_PwmHl_updatePulse>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updatePulse(IfxGtm_Tom_PwmHl *driver, float32 *tOn, float32 *offset)
{
80002e16:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;

    period = driver->timer->base.period;
80002e18:	99 42 20 00 	ld.a %a2,[%a4]32
80002e1c:	54 23       	ld.w %d3,[%a2]

    /* Top channels */
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002e1e:	82 04       	mov %d4,0
80002e20:	1d 00 38 00 	j 80002e90 <IfxGtm_Tom_PwmHl_updatePulse+0x7a>
        else
        {}

        if ((x < driver->base.minPulse) || (o > period))
        {
            x = 0;
80002e24:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80002e26:	5f 32 1f 00 	jeq %d2,%d3,80002e64 <IfxGtm_Tom_PwmHl_updatePulse+0x4e>
        {   /* 100% duty cycle */
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
                period + 1 /* No compare event */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
80002e2a:	df 02 62 80 	jne %d2,0,80002eee <IfxGtm_Tom_PwmHl_updatePulse+0xd8>
        {
            cm0 = 1;
            cm1 = period + 2;
80002e2e:	1b 23 00 20 	addi %d2,%d3,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
80002e32:	99 42 10 10 	ld.a %a2,[%a4]80
80002e36:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80002e3a:	54 25       	ld.w %d5,[%a2]
80002e3c:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002e40:	06 65       	sh %d5,6
80002e42:	99 42 30 00 	ld.a %a2,[%a4]48
80002e46:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80002e4a:	82 15       	mov %d5,1
80002e4c:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
80002e50:	59 22 08 00 	st.w [%a2]8,%d2
}
80002e54:	1d 00 1b 00 	j 80002e8a <IfxGtm_Tom_PwmHl_updatePulse+0x74>
            x = 0;
80002e58:	82 02       	mov %d2,0
80002e5a:	1d ff e6 ff 	j 80002e26 <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            x = period;
80002e5e:	02 32       	mov %d2,%d3
80002e60:	1d ff e3 ff 	j 80002e26 <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80002e64:	99 42 10 10 	ld.a %a2,[%a4]80
80002e68:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80002e6c:	54 25       	ld.w %d5,[%a2]
                period + 1 /* No compare event */,
80002e6e:	1b 13 00 20 	addi %d2,%d3,1
80002e72:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002e76:	06 65       	sh %d5,6
80002e78:	99 42 30 00 	ld.a %a2,[%a4]48
80002e7c:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80002e80:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002e84:	82 22       	mov %d2,2
80002e86:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002e8a:	c2 14       	add %d4,1
80002e8c:	8f f4 0f 41 	and %d4,%d4,255
80002e90:	39 42 1d 00 	ld.bu %d2,[%a4]29
80002e94:	7f 24 44 80 	jge.u %d4,%d2,80002f1c <IfxGtm_Tom_PwmHl_updatePulse+0x106>
        x = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, tOn[channelIndex]);
80002e98:	99 42 20 00 	ld.a %a2,[%a4]32
80002e9c:	19 25 08 00 	ld.w %d5,[%a2]8
80002ea0:	8f 24 00 60 	sh %d6,%d4,2
80002ea4:	01 56 00 26 	addsc.a %a2,%a5,%d6,0
80002ea8:	54 22       	ld.w %d2,[%a2]
80002eaa:	4b 25 41 20 	mul.f %d2,%d5,%d2
80002eae:	4b 02 71 21 	ftouz %d2,%d2
        o = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, offset[channelIndex]);
80002eb2:	01 66 00 26 	addsc.a %a2,%a6,%d6,0
80002eb6:	54 27       	ld.w %d7,[%a2]
80002eb8:	4b 75 41 50 	mul.f %d5,%d5,%d7
80002ebc:	4b 05 71 51 	ftouz %d5,%d5
        if (driver->base.inverted != FALSE)
80002ec0:	39 47 1c 00 	ld.bu %d7,[%a4]28
80002ec4:	df 07 04 00 	jeq %d7,0,80002ecc <IfxGtm_Tom_PwmHl_updatePulse+0xb6>
            x = period - x;
80002ec8:	0b 23 80 20 	sub %d2,%d3,%d2
        if ((x < driver->base.minPulse) || (o > period))
80002ecc:	19 47 04 00 	ld.w %d7,[%a4]4
80002ed0:	3f 72 aa ff 	jlt.u %d2,%d7,80002e24 <IfxGtm_Tom_PwmHl_updatePulse+0xe>
80002ed4:	3f 53 c2 ff 	jlt.u %d3,%d5,80002e58 <IfxGtm_Tom_PwmHl_updatePulse+0x42>
        else if ((x > driver->base.maxPulse) || (o + x > period))
80002ed8:	19 47 08 00 	ld.w %d7,[%a4]8
80002edc:	3f 27 c1 ff 	jlt.u %d7,%d2,80002e5e <IfxGtm_Tom_PwmHl_updatePulse+0x48>
80002ee0:	0b 52 00 70 	add %d7,%d2,%d5
80002ee4:	7f 73 a1 ff 	jge.u %d3,%d7,80002e26 <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            x = period;
80002ee8:	02 32       	mov %d2,%d3
80002eea:	1d ff 9e ff 	j 80002e26 <IfxGtm_Tom_PwmHl_updatePulse+0x10>
        }
        else
        {                /* x% duty cycle */
            cm1 = 2 + o; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
80002eee:	1b 25 00 70 	addi %d7,%d5,2
            cm0 = o + x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
80002ef2:	42 25       	add %d5,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
80002ef4:	99 42 10 10 	ld.a %a2,[%a4]80
80002ef8:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80002efc:	54 26       	ld.w %d6,[%a2]
80002efe:	bb f0 ff 2f 	mov.u %d2,65535
80002f02:	26 25       	and %d5,%d2
80002f04:	26 72       	and %d2,%d7
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002f06:	06 66       	sh %d6,6
80002f08:	99 42 30 00 	ld.a %a2,[%a4]48
80002f0c:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80002f10:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
80002f14:	59 22 08 00 	st.w [%a2]8,%d2
}
80002f18:	1d ff b9 ff 	j 80002e8a <IfxGtm_Tom_PwmHl_updatePulse+0x74>
        }
    }

    /* Bottom channels */
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002f1c:	82 04       	mov %d4,0
80002f1e:	1d 00 36 00 	j 80002f8a <IfxGtm_Tom_PwmHl_updatePulse+0x174>
        else
        {}

        if (x < driver->base.minPulse)
        {
            x = 0;
80002f22:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80002f24:	5f 32 1b 00 	jeq %d2,%d3,80002f5a <IfxGtm_Tom_PwmHl_updatePulse+0x144>
        {   /* 100% duty cycle */
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
80002f28:	df 02 5b 80 	jne %d2,0,80002fde <IfxGtm_Tom_PwmHl_updatePulse+0x1c8>
        {
            cm0 = 1;
            cm1 = period + 2;
80002f2c:	1b 23 00 60 	addi %d6,%d3,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0, cm1);
80002f30:	8f 24 00 20 	sh %d2,%d4,2
80002f34:	99 42 14 10 	ld.a %a2,[%a4]84
80002f38:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002f3c:	54 25       	ld.w %d5,[%a2]
80002f3e:	37 06 70 20 	extr.u %d2,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002f42:	06 65       	sh %d5,6
80002f44:	99 42 30 00 	ld.a %a2,[%a4]48
80002f48:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80002f4c:	82 15       	mov %d5,1
80002f4e:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
80002f52:	59 22 08 00 	st.w [%a2]8,%d2
}
80002f56:	1d 00 17 00 	j 80002f84 <IfxGtm_Tom_PwmHl_updatePulse+0x16e>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
80002f5a:	8f 24 00 20 	sh %d2,%d4,2
80002f5e:	99 42 14 10 	ld.a %a2,[%a4]84
80002f62:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002f66:	54 25       	ld.w %d5,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
80002f68:	1b 23 00 20 	addi %d2,%d3,2
80002f6c:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002f70:	06 65       	sh %d5,6
80002f72:	99 42 30 00 	ld.a %a2,[%a4]48
80002f76:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80002f7a:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80002f7e:	82 22       	mov %d2,2
80002f80:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80002f84:	c2 14       	add %d4,1
80002f86:	8f f4 0f 41 	and %d4,%d4,255
80002f8a:	39 42 1d 00 	ld.bu %d2,[%a4]29
80002f8e:	7f 24 42 80 	jge.u %d4,%d2,80003012 <IfxGtm_Tom_PwmHl_updatePulse+0x1fc>
        x = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, tOn[channelIndex + driver->base.channelCount]);
80002f92:	99 42 20 00 	ld.a %a2,[%a4]32
80002f96:	19 25 08 00 	ld.w %d5,[%a2]8
80002f9a:	42 42       	add %d2,%d4
80002f9c:	8f 22 00 60 	sh %d6,%d2,2
80002fa0:	01 56 00 26 	addsc.a %a2,%a5,%d6,0
80002fa4:	54 22       	ld.w %d2,[%a2]
80002fa6:	4b 25 41 20 	mul.f %d2,%d5,%d2
80002faa:	4b 02 71 21 	ftouz %d2,%d2
        o = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, offset[channelIndex + driver->base.channelCount]);
80002fae:	01 66 00 26 	addsc.a %a2,%a6,%d6,0
80002fb2:	54 26       	ld.w %d6,[%a2]
80002fb4:	4b 65 41 60 	mul.f %d6,%d5,%d6
80002fb8:	4b 06 71 61 	ftouz %d6,%d6
        if (driver->base.inverted != FALSE)
80002fbc:	39 45 1c 00 	ld.bu %d5,[%a4]28
80002fc0:	df 05 04 00 	jeq %d5,0,80002fc8 <IfxGtm_Tom_PwmHl_updatePulse+0x1b2>
            x = period - x;
80002fc4:	0b 23 80 20 	sub %d2,%d3,%d2
        if (x < driver->base.minPulse)
80002fc8:	19 45 04 00 	ld.w %d5,[%a4]4
80002fcc:	3f 52 ab ff 	jlt.u %d2,%d5,80002f22 <IfxGtm_Tom_PwmHl_updatePulse+0x10c>
        else if (x > driver->base.maxPulse)
80002fd0:	19 45 08 00 	ld.w %d5,[%a4]8
80002fd4:	7f 25 a8 ff 	jge.u %d5,%d2,80002f24 <IfxGtm_Tom_PwmHl_updatePulse+0x10e>
            x = period;
80002fd8:	02 32       	mov %d2,%d3
80002fda:	1d ff a5 ff 	j 80002f24 <IfxGtm_Tom_PwmHl_updatePulse+0x10e>
        }
        else
        {                /* x% duty cycle */
            cm1 = 2 + o; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
80002fde:	1b 26 00 70 	addi %d7,%d6,2
            cm0 = o + x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
80002fe2:	0b 62 00 50 	add %d5,%d2,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0, cm1);
80002fe6:	8f 24 00 20 	sh %d2,%d4,2
80002fea:	99 42 14 10 	ld.a %a2,[%a4]84
80002fee:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002ff2:	54 26       	ld.w %d6,[%a2]
80002ff4:	bb f0 ff 2f 	mov.u %d2,65535
80002ff8:	26 25       	and %d5,%d2
80002ffa:	26 72       	and %d2,%d7
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002ffc:	06 66       	sh %d6,6
80002ffe:	99 42 30 00 	ld.a %a2,[%a4]48
80003002:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80003006:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
8000300a:	59 22 08 00 	st.w [%a2]8,%d2
}
8000300e:	1d ff bb ff 	j 80002f84 <IfxGtm_Tom_PwmHl_updatePulse+0x16e>
        }
    }
}
80003012:	00 90       	ret 

80003014 <IfxGtm_Tom_PwmHl_updatePulseOff>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updatePulseOff(IfxGtm_Tom_PwmHl *driver, float32 *tOn, float32 *offset)
{
80003014:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(tOn)
    IFX_UNUSED_PARAMETER(offset)
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
80003016:	a0 05       	mov.a %a5,0
80003018:	6d ff c3 fe 	call 80002d9e <IfxGtm_Tom_PwmHl_updateOff>
}
8000301c:	00 90       	ret 

8000301e <IfxGtm_Tom_PwmHl_updateShiftCenterAligned>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateShiftCenterAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn, Ifx_TimerValue *shift)
{
8000301e:	40 ae       	mov.aa %a14,%sp
80003020:	80 6b       	mov.d %d11,%a6
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
80003022:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
80003024:	99 42 20 00 	ld.a %a2,[%a4]32
80003028:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
8000302a:	82 03       	mov %d3,0
8000302c:	1d 00 5e 00 	j 800030e8 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xca>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {   /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
80003030:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
80003032:	5f 52 2e 00 	jeq %d2,%d5,8000308e <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x70>
                2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
80003036:	df 02 75 80 	jne %d2,0,80003120 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x102>
        {
            cm0 = 1;
            cm1 = period + 2;
8000303a:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
8000303e:	99 42 10 10 	ld.a %a2,[%a4]80
80003042:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003046:	54 26       	ld.w %d6,[%a2]
80003048:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000304c:	06 66       	sh %d6,6
8000304e:	99 42 30 00 	ld.a %a2,[%a4]48
80003052:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80003056:	82 16       	mov %d6,1
80003058:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
8000305c:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80003060:	99 42 14 10 	ld.a %a2,[%a4]84
80003064:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003068:	54 26       	ld.w %d6,[%a2]
8000306a:	1b 17 00 40 	addi %d4,%d7,1
8000306e:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003072:	06 66       	sh %d6,6
80003074:	99 42 30 00 	ld.a %a2,[%a4]48
80003078:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
8000307c:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80003080:	59 22 08 00 	st.w [%a2]8,%d2
}
80003084:	1d 00 2f 00 	j 800030e2 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xc4>
            x = 0;
80003088:	82 02       	mov %d2,0
8000308a:	1d ff d4 ff 	j 80003032 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
8000308e:	99 42 10 10 	ld.a %a2,[%a4]80
80003092:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003096:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
80003098:	37 05 70 20 	extr.u %d2,%d5,0,16
8000309c:	1b 12 00 00 	addi %d0,%d2,1
800030a0:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
800030a4:	1b 27 00 60 	addi %d6,%d7,2
800030a8:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800030ac:	06 61       	sh %d1,6
800030ae:	99 42 30 00 	ld.a %a2,[%a4]48
800030b2:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
800030b6:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
800030ba:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
800030be:	99 42 14 10 	ld.a %a2,[%a4]84
800030c2:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800030c6:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
800030c8:	c2 22       	add %d2,2
800030ca:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800030ce:	06 64       	sh %d4,6
800030d0:	99 42 30 00 	ld.a %a2,[%a4]48
800030d4:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
800030d8:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
800030dc:	82 22       	mov %d2,2
800030de:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
800030e2:	c2 13       	add %d3,1
800030e4:	8f f3 0f 31 	and %d3,%d3,255
800030e8:	39 42 1d 00 	ld.bu %d2,[%a4]29
800030ec:	7f 23 64 80 	jge.u %d3,%d2,800031b4 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x196>
        x = tOn[channelIndex];
800030f0:	8f 23 00 40 	sh %d4,%d3,2
800030f4:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
800030f8:	54 22       	ld.w %d2,[%a2]
        if (driver->base.inverted != FALSE)
800030fa:	39 46 1c 00 	ld.bu %d6,[%a4]28
800030fe:	df 06 04 00 	jeq %d6,0,80003106 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xe8>
            x = period - x;
80003102:	0b 25 80 20 	sub %d2,%d5,%d2
        if ((x < driver->base.minPulse) || (x <= deadtime))
80003106:	19 46 04 00 	ld.w %d6,[%a4]4
8000310a:	3f 62 93 ff 	jlt.u %d2,%d6,80003030 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x12>
8000310e:	7f 27 bd ff 	jge.u %d7,%d2,80003088 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x6a>
        else if (x > driver->base.maxPulse)
80003112:	19 46 08 00 	ld.w %d6,[%a4]8
80003116:	7f 26 8e ff 	jge.u %d6,%d2,80003032 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
            x = period;
8000311a:	02 52       	mov %d2,%d5
8000311c:	1d ff 8b ff 	j 80003032 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
        }
        else
        {                           /* x% duty cycle */
            s = shift[channelIndex];
80003120:	60 b2       	mov.a %a2,%d11
80003122:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003126:	54 26       	ld.w %d6,[%a2]

            if (s > 0)
80003128:	df 06 3e 00 	jeq %d6,0,800031a4 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x186>
            {
                s = __minX(s, (period - x) / 2 - 1);
8000312c:	0b 25 80 00 	sub %d0,%d5,%d2
80003130:	06 f0       	sh %d0,-1
80003132:	c2 f0       	add %d0,-1
80003134:	0b 60 90 61 	min.u %d6,%d0,%d6
            else
            {
                s = __maxX(s, (x - period) / 2 + 1);
            }

            cm1 = s + (period - x) / 2; // CM1
80003138:	0b 25 80 00 	sub %d0,%d5,%d2
8000313c:	06 f0       	sh %d0,-1
8000313e:	42 60       	add %d0,%d6
            cm0 = s + (period + x) / 2; // CM0
80003140:	42 52       	add %d2,%d5
80003142:	06 f2       	sh %d2,-1
80003144:	42 26       	add %d6,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
80003146:	99 42 10 10 	ld.a %a2,[%a4]80
8000314a:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000314e:	54 2a       	ld.w %d10,[%a2]
80003150:	37 06 70 90 	extr.u %d9,%d6,0,16
80003154:	bb f0 ff 2f 	mov.u %d2,65535
80003158:	0f 26 80 80 	and %d8,%d6,%d2
8000315c:	37 07 70 60 	extr.u %d6,%d7,0,16
80003160:	0b 06 00 10 	add %d1,%d6,%d0
80003164:	37 01 70 10 	extr.u %d1,%d1,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003168:	06 6a       	sh %d10,6
8000316a:	99 42 30 00 	ld.a %a2,[%a4]48
8000316e:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->SR0.U = shadowZero;
80003172:	59 28 04 00 	st.w [%a2]4,%d8
    tomCh->SR1.U = shadowOne;
80003176:	59 21 08 00 	st.w [%a2]8,%d1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
8000317a:	99 42 14 10 	ld.a %a2,[%a4]84
8000317e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003182:	54 21       	ld.w %d1,[%a2]
80003184:	0b 69 00 40 	add %d4,%d9,%d6
80003188:	37 04 70 40 	extr.u %d4,%d4,0,16
8000318c:	26 02       	and %d2,%d0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000318e:	06 61       	sh %d1,6
80003190:	99 42 30 00 	ld.a %a2,[%a4]48
80003194:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80003198:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
8000319c:	59 22 08 00 	st.w [%a2]8,%d2
}
800031a0:	1d ff a1 ff 	j 800030e2 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xc4>
                s = __maxX(s, (x - period) / 2 + 1);
800031a4:	0b 52 80 00 	sub %d0,%d2,%d5
800031a8:	06 f0       	sh %d0,-1
800031aa:	c2 10       	add %d0,1
800031ac:	0b 60 b0 61 	max.u %d6,%d0,%d6
800031b0:	1d ff c4 ff 	j 80003138 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x11a>
        }
    }
}
800031b4:	00 90       	ret 

800031b6 <IfxGtm_Tom_PwmHl_init>:
{
800031b6:	40 ae       	mov.aa %a14,%sp
800031b8:	20 18       	sub.a %sp,24
800031ba:	40 4c       	mov.aa %a12,%a4
800031bc:	40 5d       	mov.aa %a13,%a5
    IfxGtm_Tom_Timer *timer        = config->timer;
800031be:	cc 59       	ld.a %a15,[%a5]36
    driver->base.mode             = Ifx_Pwm_Mode_init;
800031c0:	82 52       	mov %d2,5
800031c2:	59 42 0c 00 	st.w [%a4]12,%d2
    driver->timer                 = timer;
800031c6:	ec 48       	st.a [%a4]32,%a15
    driver->base.setMode          = 0;
800031c8:	82 02       	mov %d2,0
800031ca:	e9 42 10 00 	st.b [%a4]16,%d2
    driver->base.inverted         = FALSE;
800031ce:	e9 42 1c 00 	st.b [%a4]28,%d2
    driver->base.ccxActiveState   = config->base.ccxActiveState;
800031d2:	19 52 1c 00 	ld.w %d2,[%a5]28
800031d6:	59 42 14 00 	st.w [%a4]20,%d2
    driver->base.coutxActiveState = config->base.coutxActiveState;
800031da:	19 52 20 00 	ld.w %d2,[%a5]32
800031de:	59 42 18 00 	st.w [%a4]24,%d2
    driver->base.channelCount     = config->base.channelCount;
800031e2:	39 52 08 00 	ld.bu %d2,[%a5]8
800031e6:	e9 42 1d 00 	st.b [%a4]29,%d2
    IfxGtm_Tom_PwmHl_setDeadtime(driver, config->base.deadtime);
800031ea:	54 54       	ld.w %d4,[%a5]
800031ec:	6d ff aa fb 	call 80002940 <IfxGtm_Tom_PwmHl_setDeadtime>
    IfxGtm_Tom_PwmHl_setMinPulse(driver, config->base.minPulse);
800031f0:	19 d4 04 00 	ld.w %d4,[%a13]4
800031f4:	40 c4       	mov.aa %a4,%a12
800031f6:	6d ff b1 fb 	call 80002958 <IfxGtm_Tom_PwmHl_setMinPulse>
    driver->tom = &(timer->gtm->TOM[config->tom]);
800031fa:	19 d2 28 00 	ld.w %d2,[%a13]40
800031fe:	1b 02 01 20 	addi %d2,%d2,16
80003202:	8f b2 00 20 	sh %d2,%d2,11
80003206:	48 43       	ld.w %d3,[%a15]16
80003208:	42 23       	add %d3,%d2
8000320a:	59 c3 30 00 	st.w [%a12]48,%d3
    if (config->ccx[0]->channel <= 7)
8000320e:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003212:	d4 22       	ld.a %a2,[%a2]
80003214:	19 22 04 00 	ld.w %d2,[%a2]4
80003218:	8b 82 80 22 	ge %d2,%d2,8
8000321c:	df 02 1c 80 	jne %d2,0,80003254 <IfxGtm_Tom_PwmHl_init+0x9e>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC0_GLB_CTRL;
80003220:	1b 03 03 20 	addi %d2,%d3,48
        driver->tgc = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 0);
80003224:	59 c2 34 00 	st.w [%a12]52,%d2
    maskShift = (config->ccx[0]->channel <= 7) ? 0 : 8;
80003228:	99 d2 2c 00 	ld.a %a2,[%a13]44
8000322c:	d4 22       	ld.a %a2,[%a2]
8000322e:	19 22 04 00 	ld.w %d2,[%a2]4
80003232:	8b 82 80 22 	ge %d2,%d2,8
80003236:	df 02 15 80 	jne %d2,0,80003260 <IfxGtm_Tom_PwmHl_init+0xaa>
8000323a:	82 0f       	mov %d15,0
    IfxGtm_Tom_Ch_ClkSrc clock = IfxGtm_Tom_Ch_getClockSource(timer->tom, timer->timerChannel);
8000323c:	48 92       	ld.w %d2,[%a15]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000323e:	06 62       	sh %d2,6
80003240:	c8 52       	ld.a %a2,[%a15]20
80003242:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    clk = (IfxGtm_Tom_Ch_ClkSrc)tomCh->CTRL.B.CLK_SRC_SR;
80003246:	54 2e       	ld.w %d14,[%a2]
80003248:	37 0e 63 e6 	extr.u %d14,%d14,12,3
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
8000324c:	82 08       	mov %d8,0
    uint16            channelsMask = 0;
8000324e:	82 09       	mov %d9,0
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
80003250:	1d 00 af 00 	j 800033ae <IfxGtm_Tom_PwmHl_init+0x1f8>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
80003254:	1b 03 23 20 	addi %d2,%d3,560
        driver->tgc = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
80003258:	59 c2 34 00 	st.w [%a12]52,%d2
8000325c:	1d ff e6 ff 	j 80003228 <IfxGtm_Tom_PwmHl_init+0x72>
    maskShift = (config->ccx[0]->channel <= 7) ? 0 : 8;
80003260:	da 08       	mov %d15,8
80003262:	1d ff ed ff 	j 8000323c <IfxGtm_Tom_PwmHl_init+0x86>
            : IfxGtm_Tom_PwmHl_invertActiveState(config->base.ccxActiveState));
80003266:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
8000326a:	8b 02 00 22 	eq %d2,%d2,0
8000326e:	1d 00 cf 00 	j 8000340c <IfxGtm_Tom_PwmHl_init+0x256>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003272:	82 13       	mov %d3,1
80003274:	1d 00 d2 00 	j 80003418 <IfxGtm_Tom_PwmHl_init+0x262>
            : IfxGtm_Tom_PwmHl_invertActiveState(config->base.ccxActiveState));
80003278:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
8000327c:	8b 02 00 22 	eq %d2,%d2,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003280:	60 92       	mov.a %a2,%d9
80003282:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003286:	df 12 f1 00 	jeq %d2,1,80003468 <IfxGtm_Tom_PwmHl_init+0x2b2>
8000328a:	82 03       	mov %d3,0
8000328c:	54 22       	ld.w %d2,[%a2]
8000328e:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
80003292:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003294:	99 c2 30 00 	ld.a %a2,[%a12]48
80003298:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
8000329c:	54 22       	ld.w %d2,[%a2]
8000329e:	b7 12 01 2a 	insert %d2,%d2,1,20,1
800032a2:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800032a4:	99 c2 30 00 	ld.a %a2,[%a12]48
800032a8:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
800032ac:	54 22       	ld.w %d2,[%a2]
800032ae:	b7 02 01 2c 	insert %d2,%d2,0,24,1
800032b2:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, channel, IfxGtm_Tom_Timer_getOffset(driver->timer));
800032b4:	19 ca 30 00 	ld.w %d10,[%a12]48
800032b8:	99 c4 20 00 	ld.a %a4,[%a12]32
800032bc:	6d ff e0 f8 	call 8000247c <IfxGtm_Tom_Timer_getOffset>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800032c0:	60 92       	mov.a %a2,%d9
800032c2:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CN0.U = value;
800032c6:	59 22 14 00 	st.w [%a2]20,%d2
        if (config->initPins == TRUE)
800032ca:	39 d2 34 00 	ld.bu %d2,[%a13]52
800032ce:	df 12 d0 00 	jeq %d2,1,8000346e <IfxGtm_Tom_PwmHl_init+0x2b8>
        channel                     = config->coutx[channelIndex]->channel;
800032d2:	99 d2 30 00 	ld.a %a2,[%a13]48
800032d6:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
800032da:	d4 22       	ld.a %a2,[%a2]
800032dc:	19 2a 04 00 	ld.w %d10,[%a2]4
        driver->coutx[channelIndex] = channel;
800032e0:	1b 18 01 30 	addi %d3,%d8,17
800032e4:	06 23       	sh %d3,2
800032e6:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
800032ea:	74 2a       	st.w [%a2],%d10
        channelMask                 = 1 << (channel - maskShift);
800032ec:	19 e2 ec ff 	ld.w %d2,[%a14]-20
800032f0:	0b 2a 80 30 	sub %d3,%d10,%d2
800032f4:	82 1b       	mov %d11,1
800032f6:	0f 3b 00 b0 	sh %d11,%d11,%d3
800032fa:	37 0b 70 90 	extr.u %d9,%d11,0,16
        channelsMask               |= channelMask;
800032fe:	a6 d9       	or %d9,%d13
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003300:	06 6a       	sh %d10,6
80003302:	99 c2 30 00 	ld.a %a2,[%a12]48
80003306:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
8000330a:	54 22       	ld.w %d2,[%a2]
8000330c:	37 e2 03 26 	insert %d2,%d2,%d14,12,3
80003310:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
80003312:	19 c3 30 00 	ld.w %d3,[%a12]48
80003316:	39 c2 1c 00 	ld.bu %d2,[%a12]28
8000331a:	df 02 cd 00 	jeq %d2,0,800034b4 <IfxGtm_Tom_PwmHl_init+0x2fe>
            ? IfxGtm_Tom_PwmHl_invertActiveState(config->base.coutxActiveState)
8000331e:	19 d2 20 00 	ld.w %d2,[%a13]32
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80003322:	8b 02 00 22 	eq %d2,%d2,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003326:	60 a2       	mov.a %a2,%d10
80003328:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
8000332c:	df 12 c8 00 	jeq %d2,1,800034bc <IfxGtm_Tom_PwmHl_init+0x306>
80003330:	82 03       	mov %d3,0
80003332:	54 22       	ld.w %d2,[%a2]
80003334:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
80003338:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_enableChannels(driver->tgc, channelMask, 0, TRUE);
8000333a:	19 cd 34 00 	ld.w %d13,[%a12]52
8000333e:	37 0b 70 b0 	extr.u %d11,%d11,0,16
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80003342:	82 06       	mov %d6,0
80003344:	82 05       	mov %d5,0
80003346:	02 b4       	mov %d4,%d11
80003348:	6d 00 f0 02 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
8000334c:	60 d2       	mov.a %a2,%d13
8000334e:	59 22 00 10 	st.w [%a2]64,%d2
        tgc->ENDIS_STAT.U = value;
80003352:	59 22 04 10 	st.w [%a2]68,%d2
        IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc, channelMask, 0, TRUE);
80003356:	19 cd 34 00 	ld.w %d13,[%a12]52
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
8000335a:	82 06       	mov %d6,0
8000335c:	82 05       	mov %d5,0
8000335e:	02 b4       	mov %d4,%d11
80003360:	6d 00 e4 02 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
80003364:	60 d2       	mov.a %a2,%d13
80003366:	59 22 08 10 	st.w [%a2]72,%d2
        tgc->OUTEN_STAT.U = value;
8000336a:	59 22 0c 10 	st.w [%a2]76,%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000336e:	99 c2 30 00 	ld.a %a2,[%a12]48
80003372:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
80003376:	54 22       	ld.w %d2,[%a2]
80003378:	b7 12 01 2a 	insert %d2,%d2,1,20,1
8000337c:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000337e:	99 c2 30 00 	ld.a %a2,[%a12]48
80003382:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
80003386:	54 22       	ld.w %d2,[%a2]
80003388:	b7 02 01 2c 	insert %d2,%d2,0,24,1
8000338c:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, channel, IfxGtm_Tom_Timer_getOffset(driver->timer));
8000338e:	19 cb 30 00 	ld.w %d11,[%a12]48
80003392:	99 c4 20 00 	ld.a %a4,[%a12]32
80003396:	6d ff 73 f8 	call 8000247c <IfxGtm_Tom_Timer_getOffset>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000339a:	60 a2       	mov.a %a2,%d10
8000339c:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
    tomCh->CN0.U = value;
800033a0:	59 22 14 00 	st.w [%a2]20,%d2
        if (config->initPins == TRUE)
800033a4:	39 d2 34 00 	ld.bu %d2,[%a13]52
800033a8:	df 12 8d 00 	jeq %d2,1,800034c2 <IfxGtm_Tom_PwmHl_init+0x30c>
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
800033ac:	c2 18       	add %d8,1
800033ae:	39 d2 08 00 	ld.bu %d2,[%a13]8
800033b2:	7f 28 ab 80 	jge.u %d8,%d2,80003508 <IfxGtm_Tom_PwmHl_init+0x352>
        channel                   = config->ccx[channelIndex]->channel;
800033b6:	8f 28 00 c0 	sh %d12,%d8,2
800033ba:	99 d2 2c 00 	ld.a %a2,[%a13]44
800033be:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
800033c2:	d4 22       	ld.a %a2,[%a2]
800033c4:	19 22 04 00 	ld.w %d2,[%a2]4
        driver->ccx[channelIndex] = channel;
800033c8:	1b e8 00 30 	addi %d3,%d8,14
800033cc:	06 23       	sh %d3,2
800033ce:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
800033d2:	74 22       	st.w [%a2],%d2
        channelMask               = 1 << (channel - maskShift);
800033d4:	59 ef ec ff 	st.w [%a14]-20,%d15
800033d8:	0b f2 80 30 	sub %d3,%d2,%d15
800033dc:	82 1a       	mov %d10,1
800033de:	0f 3a 00 a0 	sh %d10,%d10,%d3
800033e2:	37 0a 70 d0 	extr.u %d13,%d10,0,16
        channelsMask             |= channelMask;
800033e6:	a6 9d       	or %d13,%d9
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800033e8:	8f 62 00 90 	sh %d9,%d2,6
800033ec:	99 c2 30 00 	ld.a %a2,[%a12]48
800033f0:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
800033f4:	54 22       	ld.w %d2,[%a2]
800033f6:	37 e2 03 26 	insert %d2,%d2,%d14,12,3
800033fa:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, !driver->base.inverted
800033fc:	19 c3 30 00 	ld.w %d3,[%a12]48
80003400:	39 c2 1c 00 	ld.bu %d2,[%a12]28
80003404:	df 02 31 ff 	jne %d2,0,80003266 <IfxGtm_Tom_PwmHl_init+0xb0>
80003408:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000340c:	60 92       	mov.a %a2,%d9
8000340e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003412:	df 12 30 7f 	jeq %d2,1,80003272 <IfxGtm_Tom_PwmHl_init+0xbc>
80003416:	82 03       	mov %d3,0
80003418:	54 22       	ld.w %d2,[%a2]
8000341a:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
8000341e:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_enableChannels(driver->tgc, channelMask, 0, TRUE); /* Write the SOUR outout with !SL */
80003420:	19 cb 34 00 	ld.w %d11,[%a12]52
80003424:	37 0a 70 a0 	extr.u %d10,%d10,0,16
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80003428:	82 06       	mov %d6,0
8000342a:	82 05       	mov %d5,0
8000342c:	02 a4       	mov %d4,%d10
8000342e:	6d 00 7d 02 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80003432:	60 b2       	mov.a %a2,%d11
80003434:	59 22 00 10 	st.w [%a2]64,%d2
        tgc->ENDIS_STAT.U = value;
80003438:	59 22 04 10 	st.w [%a2]68,%d2
        IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc, channelMask, 0, TRUE);
8000343c:	19 cb 34 00 	ld.w %d11,[%a12]52
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
80003440:	82 06       	mov %d6,0
80003442:	82 05       	mov %d5,0
80003444:	02 a4       	mov %d4,%d10
80003446:	6d 00 71 02 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
8000344a:	60 b2       	mov.a %a2,%d11
8000344c:	59 22 08 10 	st.w [%a2]72,%d2
        tgc->OUTEN_STAT.U = value;
80003450:	59 22 0c 10 	st.w [%a2]76,%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
80003454:	19 c3 30 00 	ld.w %d3,[%a12]48
80003458:	39 c2 1c 00 	ld.bu %d2,[%a12]28
8000345c:	df 02 0e 7f 	jeq %d2,0,80003278 <IfxGtm_Tom_PwmHl_init+0xc2>
80003460:	19 d2 1c 00 	ld.w %d2,[%a13]28
80003464:	1d ff 0e ff 	j 80003280 <IfxGtm_Tom_PwmHl_init+0xca>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003468:	82 13       	mov %d3,1
8000346a:	1d ff 11 ff 	j 8000328c <IfxGtm_Tom_PwmHl_init+0xd6>
            IfxGtm_PinMap_setTomTout(config->ccx[channelIndex],
8000346e:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003472:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003476:	19 d5 10 00 	ld.w %d5,[%a13]16
8000347a:	19 d4 0c 00 	ld.w %d4,[%a13]12
8000347e:	d4 24       	ld.a %a4,[%a2]
80003480:	6d ff c0 ea 	call 80000a00 <IfxGtm_PinMap_setTomTout>
            IfxPort_setPinState(config->ccx[channelIndex]->pin.port, config->ccx[channelIndex]->pin.pinIndex, config->base.ccxActiveState ? IfxPort_State_low : IfxPort_State_high);
80003484:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003488:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
8000348c:	d4 22       	ld.a %a2,[%a2]
8000348e:	99 23 10 00 	ld.a %a3,[%a2]16
80003492:	39 22 14 00 	ld.bu %d2,[%a2]20
80003496:	19 d3 1c 00 	ld.w %d3,[%a13]28
8000349a:	df 03 0a 00 	jeq %d3,0,800034ae <IfxGtm_Tom_PwmHl_init+0x2f8>
8000349e:	7b 10 00 30 	movh %d3,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
800034a2:	0f 23 00 20 	sh %d2,%d3,%d2
800034a6:	59 32 04 00 	st.w [%a3]4,%d2
}
800034aa:	1d ff 14 ff 	j 800032d2 <IfxGtm_Tom_PwmHl_init+0x11c>
800034ae:	82 13       	mov %d3,1
800034b0:	1d ff f9 ff 	j 800034a2 <IfxGtm_Tom_PwmHl_init+0x2ec>
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
800034b4:	19 d2 20 00 	ld.w %d2,[%a13]32
800034b8:	1d ff 37 ff 	j 80003326 <IfxGtm_Tom_PwmHl_init+0x170>
800034bc:	82 13       	mov %d3,1
800034be:	1d ff 3a ff 	j 80003332 <IfxGtm_Tom_PwmHl_init+0x17c>
            IfxGtm_PinMap_setTomTout(config->coutx[channelIndex],
800034c2:	99 d2 30 00 	ld.a %a2,[%a13]48
800034c6:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
800034ca:	19 d5 10 00 	ld.w %d5,[%a13]16
800034ce:	19 d4 0c 00 	ld.w %d4,[%a13]12
800034d2:	d4 24       	ld.a %a4,[%a2]
800034d4:	6d ff 96 ea 	call 80000a00 <IfxGtm_PinMap_setTomTout>
            IfxPort_setPinState(config->coutx[channelIndex]->pin.port, config->coutx[channelIndex]->pin.pinIndex, config->base.coutxActiveState ? IfxPort_State_low : IfxPort_State_high);
800034d8:	99 d2 30 00 	ld.a %a2,[%a13]48
800034dc:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
800034e0:	d4 22       	ld.a %a2,[%a2]
800034e2:	99 23 10 00 	ld.a %a3,[%a2]16
800034e6:	39 22 14 00 	ld.bu %d2,[%a2]20
800034ea:	19 d3 20 00 	ld.w %d3,[%a13]32
800034ee:	df 03 0a 00 	jeq %d3,0,80003502 <IfxGtm_Tom_PwmHl_init+0x34c>
800034f2:	7b 10 00 30 	movh %d3,1
    port->OMR.U = action << pinIndex;
800034f6:	0f 23 00 20 	sh %d2,%d3,%d2
800034fa:	59 32 04 00 	st.w [%a3]4,%d2
}
800034fe:	1d ff 57 ff 	j 800033ac <IfxGtm_Tom_PwmHl_init+0x1f6>
80003502:	82 13       	mov %d3,1
80003504:	1d ff f9 ff 	j 800034f6 <IfxGtm_Tom_PwmHl_init+0x340>
    IfxGtm_Tom_PwmHl_setMode(driver, Ifx_Pwm_Mode_off);
80003508:	82 44       	mov %d4,4
8000350a:	40 c4       	mov.aa %a4,%a12
8000350c:	6d ff 3a fa 	call 80002980 <IfxGtm_Tom_PwmHl_setMode>
    Ifx_TimerValue tOn[IFXGTM_TOM_PWMHL_MAX_NUM_CHANNELS] = {0};
80003510:	82 02       	mov %d2,0
80003512:	59 e2 f4 ff 	st.w [%a14]-12,%d2
80003516:	59 e2 f8 ff 	st.w [%a14]-8,%d2
8000351a:	59 e2 fc ff 	st.w [%a14]-4,%d2
    IfxGtm_Tom_PwmHl_updateOff(driver, tOn);     /* tOn do not need defined values */
8000351e:	d9 e5 f4 ff 	lea %a5,[%a14]-12
80003522:	40 c4       	mov.aa %a4,%a12
80003524:	6d ff 3d fc 	call 80002d9e <IfxGtm_Tom_PwmHl_updateOff>
    IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc, channelsMask, 0, 0, 0);
80003528:	99 cd 34 00 	ld.a %a13,[%a12]52
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
8000352c:	82 06       	mov %d6,0
8000352e:	82 05       	mov %d5,0
80003530:	02 94       	mov %d4,%d9
80003532:	6d 00 fb 01 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
80003536:	02 28       	mov %d8,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
80003538:	3b 00 01 60 	mov %d6,16
8000353c:	82 05       	mov %d5,0
8000353e:	82 04       	mov %d4,0
80003540:	6d 00 f4 01 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
80003544:	a6 82       	or %d2,%d8
80003546:	59 d2 08 00 	st.w [%a13]8,%d2
    IfxGtm_Tom_Tgc_trigger(driver->tgc);
8000354a:	99 c2 34 00 	ld.a %a2,[%a12]52
    tgc->GLB_CTRL.U = 1 << IFX_GTM_TOM_TGC0_GLB_CTRL_HOST_TRIG_OFF;
8000354e:	82 12       	mov %d2,1
80003550:	74 22       	st.w [%a2],%d2
    IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc, 0, channelsMask, 0, 0);
80003552:	99 cd 34 00 	ld.a %a13,[%a12]52
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
80003556:	82 06       	mov %d6,0
80003558:	02 95       	mov %d5,%d9
8000355a:	82 04       	mov %d4,0
8000355c:	6d 00 e6 01 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
80003560:	02 28       	mov %d8,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
80003562:	3b 00 01 60 	mov %d6,16
80003566:	82 05       	mov %d5,0
80003568:	82 04       	mov %d4,0
8000356a:	6d 00 df 01 	call 80003928 <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
8000356e:	a6 82       	or %d2,%d8
80003570:	59 d2 08 00 	st.w [%a13]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003574:	82 08       	mov %d8,0
80003576:	1d 00 15 00 	j 800035a0 <IfxGtm_Tom_PwmHl_init+0x3ea>
        IfxGtm_Tom_Timer_addToChannelMask(timer, driver->ccx[channelIndex]);
8000357a:	1b e8 00 20 	addi %d2,%d8,14
8000357e:	06 22       	sh %d2,2
80003580:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003584:	54 24       	ld.w %d4,[%a2]
80003586:	40 f4       	mov.aa %a4,%a15
80003588:	6d ff 21 f7 	call 800023ca <IfxGtm_Tom_Timer_addToChannelMask>
        IfxGtm_Tom_Timer_addToChannelMask(timer, driver->coutx[channelIndex]);
8000358c:	1b 18 01 20 	addi %d2,%d8,17
80003590:	06 22       	sh %d2,2
80003592:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003596:	54 24       	ld.w %d4,[%a2]
80003598:	40 f4       	mov.aa %a4,%a15
8000359a:	6d ff 18 f7 	call 800023ca <IfxGtm_Tom_Timer_addToChannelMask>
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
8000359e:	c2 18       	add %d8,1
800035a0:	39 c2 1d 00 	ld.bu %d2,[%a12]29
800035a4:	3f 28 eb ff 	jlt.u %d8,%d2,8000357a <IfxGtm_Tom_PwmHl_init+0x3c4>
}
800035a8:	82 12       	mov %d2,1
800035aa:	00 90       	ret 

800035ac <IfxGtm_Tom_PwmHl_initConfig>:
{
800035ac:	40 ae       	mov.aa %a14,%sp
800035ae:	40 4c       	mov.aa %a12,%a4
    IfxStdIf_PwmHl_initConfig(&config->base);
800035b0:	6d 00 17 08 	call 800045de <IfxStdIf_PwmHl_initConfig>
    config->timer    = NULL_PTR;
800035b4:	82 02       	mov %d2,0
800035b6:	59 c2 24 00 	st.w [%a12]36,%d2
    config->tom      = IfxGtm_Tom_0;
800035ba:	59 c2 28 00 	st.w [%a12]40,%d2
    config->ccx      = NULL_PTR;
800035be:	59 c2 2c 00 	st.w [%a12]44,%d2
    config->coutx    = NULL_PTR;
800035c2:	59 c2 30 00 	st.w [%a12]48,%d2
    config->initPins = TRUE;
800035c6:	82 12       	mov %d2,1
800035c8:	e9 c2 34 00 	st.b [%a12]52,%d2
}
800035cc:	00 90       	ret 

800035ce <IfxGtm_enable>:
    IfxScuWdt_setCpuEndinit(psw);
}


void IfxGtm_enable(Ifx_GTM *gtm)
{
800035ce:	40 ae       	mov.aa %a14,%sp
800035d0:	80 49       	mov.d %d9,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
800035d2:	6d ff 71 f5 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
800035d6:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(psw);
800035d8:	02 24       	mov %d4,%d2
800035da:	6d ff 04 f4 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
    gtm->CLC.B.DISR = 0;
800035de:	7b a0 00 20 	movh %d2,10
800035e2:	1b 02 d0 2f 	addi %d2,%d2,-768
800035e6:	60 92       	mov.a %a2,%d9
800035e8:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
800035ec:	54 43       	ld.w %d3,[%a4]
800035ee:	8f 13 c0 31 	andn %d3,%d3,1
800035f2:	74 43       	st.w [%a4],%d3
    IfxScuWdt_setCpuEndinit(psw);
800035f4:	02 84       	mov %d4,%d8
800035f6:	6d ff 7c f5 	call 800020ee <IfxScuWdt_setCpuEndinit>
}
800035fa:	00 90       	ret 

800035fc <IfxGtm_getSysClkFrequency>:


float32 IfxGtm_getSysClkFrequency(void)
{
800035fc:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
800035fe:	6d ff d7 f1 	call 800019ac <IfxScuCcu_getSourceFrequency>
80003602:	91 30 00 2f 	movh.a %a2,61443
80003606:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
8000360a:	54 23       	ld.w %d3,[%a2]
8000360c:	37 03 64 36 	extr.u %d3,%d3,12,4
80003610:	4b 03 41 31 	itof %d3,%d3
    return IfxScuCcu_getGtmFrequency();
}
80003614:	4b 32 51 20 	div.f %d2,%d2,%d3
80003618:	00 90       	ret 

8000361a <IfxGtm_Cmu_enableClocks>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxGtm_Cmu_enableClocks(Ifx_GTM *gtm, uint32 clkMask)
{
8000361a:	40 ae       	mov.aa %a14,%sp
    gtm->CMU.CLK_EN.U = clkMask;
8000361c:	59 44 00 c0 	st.w [%a4]768,%d4
}
80003620:	00 90       	ret 

80003622 <IfxGtm_Cmu_getModuleFrequency>:
    return IfxGtm_Cmu_getModuleFrequency(gtm) * multiplier;
}


float32 IfxGtm_Cmu_getModuleFrequency(Ifx_GTM *gtm)
{
80003622:	40 ae       	mov.aa %a14,%sp
    return IfxGtm_getSysClkFrequency();
80003624:	6d ff ec ff 	call 800035fc <IfxGtm_getSysClkFrequency>
}
80003628:	00 90       	ret 

8000362a <IfxGtm_Cmu_getGclkFrequency>:
{
8000362a:	40 ae       	mov.aa %a14,%sp
    float32 N          = gtm->CMU.GCLK_DEN.B.GCLK_DEN;
8000362c:	19 42 08 c0 	ld.w %d2,[%a4]776
80003630:	37 02 78 20 	extr.u %d2,%d2,0,24
80003634:	4b 02 61 81 	utof %d8,%d2
    float32 Z          = gtm->CMU.GCLK_NUM.B.GCLK_NUM;
80003638:	19 42 04 c0 	ld.w %d2,[%a4]772
8000363c:	37 02 78 20 	extr.u %d2,%d2,0,24
80003640:	4b 02 61 21 	utof %d2,%d2
    float32 multiplier = N / Z;
80003644:	4b 28 51 80 	div.f %d8,%d8,%d2
    return IfxGtm_Cmu_getModuleFrequency(gtm) * multiplier;
80003648:	6d ff ed ff 	call 80003622 <IfxGtm_Cmu_getModuleFrequency>
}
8000364c:	4b 82 41 20 	mul.f %d2,%d2,%d8
80003650:	00 90       	ret 

80003652 <IfxGtm_Cmu_isClkClockEnabled>:


boolean IfxGtm_Cmu_isClkClockEnabled(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex)
{
80003652:	40 ae       	mov.aa %a14,%sp
    return ((gtm->CMU.CLK_EN.U >> (2 * clkIndex)) & IFX_GTM_CMU_CLK_EN_EN_CLK0_MSK) == 0x3;
80003654:	19 43 00 c0 	ld.w %d3,[%a4]768
80003658:	8f 14 00 20 	sh %d2,%d4,1
8000365c:	57 03 62 22 	extr.u %d2,%d3,%d2,2
}
80003660:	8b 32 00 22 	eq %d2,%d2,3
80003664:	00 90       	ret 

80003666 <IfxGtm_Cmu_getClkFrequency>:
{
80003666:	40 ae       	mov.aa %a14,%sp
80003668:	40 4c       	mov.aa %a12,%a4
8000366a:	02 48       	mov %d8,%d4
8000366c:	8f f5 0f 91 	and %d9,%d5,255
    if ((IfxGtm_Cmu_isClkClockEnabled(gtm, clkIndex) != FALSE) || (assumeEnabled != FALSE))
80003670:	6d ff f1 ff 	call 80003652 <IfxGtm_Cmu_isClkClockEnabled>
80003674:	df 02 04 80 	jne %d2,0,8000367c <IfxGtm_Cmu_getClkFrequency+0x16>
80003678:	df 09 49 00 	jeq %d9,0,8000370a <IfxGtm_Cmu_getClkFrequency+0xa4>
        switch (clkIndex)
8000367c:	df 68 2c 00 	jeq %d8,6,800036d4 <IfxGtm_Cmu_getClkFrequency+0x6e>
80003680:	ff 78 15 80 	jge.u %d8,7,800036aa <IfxGtm_Cmu_getClkFrequency+0x44>
80003684:	ff 68 45 80 	jge.u %d8,6,8000370e <IfxGtm_Cmu_getClkFrequency+0xa8>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK0_5[clkIndex].CTRL.B.CLK_CNT + 1);
80003688:	40 c4       	mov.aa %a4,%a12
8000368a:	6d ff d0 ff 	call 8000362a <IfxGtm_Cmu_getGclkFrequency>
8000368e:	1b 38 0c 30 	addi %d3,%d8,195
80003692:	06 23       	sh %d3,2
80003694:	01 c3 00 c6 	addsc.a %a12,%a12,%d3,0
80003698:	54 c3       	ld.w %d3,[%a12]
8000369a:	37 03 78 30 	extr.u %d3,%d3,0,24
8000369e:	c2 13       	add %d3,1
800036a0:	4b 03 41 31 	itof %d3,%d3
800036a4:	4b 32 51 20 	div.f %d2,%d2,%d3
            break;
800036a8:	00 90       	ret 
        switch (clkIndex)
800036aa:	df 78 13 80 	jne %d8,7,800036d0 <IfxGtm_Cmu_getClkFrequency+0x6a>
            if (gtm->CMU.CLK_7.CTRL.B.CLK7_SEL == 0)
800036ae:	19 c2 28 c0 	ld.w %d2,[%a12]808
800036b2:	ef 82 27 80 	jnz.t %d2,24,80003700 <IfxGtm_Cmu_getClkFrequency+0x9a>
                frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK_7.CTRL.B.CLK_CNT + 1);
800036b6:	40 c4       	mov.aa %a4,%a12
800036b8:	6d ff b9 ff 	call 8000362a <IfxGtm_Cmu_getGclkFrequency>
800036bc:	19 c3 28 c0 	ld.w %d3,[%a12]808
800036c0:	37 03 78 30 	extr.u %d3,%d3,0,24
800036c4:	c2 13       	add %d3,1
800036c6:	4b 03 41 31 	itof %d3,%d3
800036ca:	4b 32 51 20 	div.f %d2,%d2,%d3
800036ce:	00 90       	ret 
        switch (clkIndex)
800036d0:	82 02       	mov %d2,0
800036d2:	00 90       	ret 
            if (gtm->CMU.CLK_6.CTRL.B.CLK6_SEL == 0)
800036d4:	19 c2 24 c0 	ld.w %d2,[%a12]804
800036d8:	ef 82 0f 80 	jnz.t %d2,24,800036f6 <IfxGtm_Cmu_getClkFrequency+0x90>
                frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK_6.CTRL.B.CLK_CNT + 1);
800036dc:	40 c4       	mov.aa %a4,%a12
800036de:	6d ff a6 ff 	call 8000362a <IfxGtm_Cmu_getGclkFrequency>
800036e2:	19 c3 24 c0 	ld.w %d3,[%a12]804
800036e6:	37 03 78 30 	extr.u %d3,%d3,0,24
800036ea:	c2 13       	add %d3,1
800036ec:	4b 03 41 31 	itof %d3,%d3
800036f0:	4b 32 51 20 	div.f %d2,%d2,%d3
800036f4:	00 90       	ret 
                frequency = IfxGtm_Dpll_getSubIncFrequency(gtm, IfxGtm_Dpll_SubInc_2);
800036f6:	82 14       	mov %d4,1
800036f8:	40 c4       	mov.aa %a4,%a12
800036fa:	6d 00 14 01 	call 80003922 <IfxGtm_Dpll_getSubIncFrequency>
800036fe:	00 90       	ret 
                frequency = IfxGtm_Dpll_getSubIncFrequency(gtm, IfxGtm_Dpll_SubInc_1);
80003700:	82 04       	mov %d4,0
80003702:	40 c4       	mov.aa %a4,%a12
80003704:	6d 00 0f 01 	call 80003922 <IfxGtm_Dpll_getSubIncFrequency>
80003708:	00 90       	ret 
        frequency = 0.0f;
8000370a:	82 02       	mov %d2,0
8000370c:	00 90       	ret 
        switch (clkIndex)
8000370e:	82 02       	mov %d2,0
}
80003710:	00 90       	ret 

80003712 <IfxGtm_Cmu_isFxClockEnabled>:
    return ((gtm->CMU.CLK_EN.U >> (2 * clkIndex + 16)) & IFX_GTM_CMU_CLK_EN_EN_CLK0_MSK) == 0x3;
}


boolean IfxGtm_Cmu_isFxClockEnabled(Ifx_GTM *gtm)
{
80003712:	40 ae       	mov.aa %a14,%sp
    return gtm->CMU.CLK_EN.B.EN_FXCLK == 0x3;
80003714:	19 42 00 c0 	ld.w %d2,[%a4]768
80003718:	37 02 62 2b 	extr.u %d2,%d2,22,2
}
8000371c:	8b 32 00 22 	eq %d2,%d2,3
80003720:	00 90       	ret 

80003722 <IfxGtm_Cmu_isFxClockEnabled_end>:
	...

80003724 <IfxGtm_Cmu_getFxClkFrequency>:
{
80003724:	40 ae       	mov.aa %a14,%sp
80003726:	40 4c       	mov.aa %a12,%a4
80003728:	02 49       	mov %d9,%d4
8000372a:	8f f5 0f 81 	and %d8,%d5,255
    if (IfxGtm_Cmu_isFxClockEnabled(gtm) || (assumeEnabled != FALSE))
8000372e:	6d ff f2 ff 	call 80003712 <IfxGtm_Cmu_isFxClockEnabled>
80003732:	df 02 04 80 	jne %d2,0,8000373a <IfxGtm_Cmu_getFxClkFrequency+0x16>
80003736:	df 08 57 00 	jeq %d8,0,800037e4 <IfxGtm_Cmu_getFxClkFrequency+0xc0>
        fxSelect = gtm->CMU.FXCLK.CTRL.B.FXCLK_SEL;
8000373a:	19 c2 04 d0 	ld.w %d2,[%a12]836
8000373e:	8f f2 00 21 	and %d2,%d2,15
80003742:	02 23       	mov %d3,%d2
        if (fxSelect == 0)
80003744:	df 02 0f 00 	jeq %d2,0,80003762 <IfxGtm_Cmu_getFxClkFrequency+0x3e>
        else if (fxSelect <= 6)
80003748:	bf 72 24 80 	jlt.u %d2,7,80003790 <IfxGtm_Cmu_getFxClkFrequency+0x6c>
        else if (fxSelect == 7)
8000374c:	df 72 2a 00 	jeq %d2,7,800037a0 <IfxGtm_Cmu_getFxClkFrequency+0x7c>
        else if (fxSelect == 8)
80003750:	3b 80 00 20 	mov %d2,8
80003754:	5f 23 2d 00 	jeq %d3,%d2,800037ae <IfxGtm_Cmu_getFxClkFrequency+0x8a>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm);
80003758:	40 c4       	mov.aa %a4,%a12
8000375a:	6d ff 68 ff 	call 8000362a <IfxGtm_Cmu_getGclkFrequency>
8000375e:	1d 00 05 00 	j 80003768 <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm);
80003762:	40 c4       	mov.aa %a4,%a12
80003764:	6d ff 63 ff 	call 8000362a <IfxGtm_Cmu_getGclkFrequency>
        switch (clkIndex)
80003768:	ff 59 40 80 	jge.u %d9,5,800037e8 <IfxGtm_Cmu_getFxClkFrequency+0xc4>
8000376c:	91 00 00 28 	movh.a %a2,32768
80003770:	d9 22 7c d3 	lea %a2,[%a2]14204 <8000377c <IfxGtm_Cmu_getFxClkFrequency+0x58>>
80003774:	01 29 02 26 	addsc.a %a2,%a2,%d9,2
80003778:	dc 02       	ji %a2
8000377a:	00 00       	nop 
8000377c:	1d 00 37 00 	j 800037ea <IfxGtm_Cmu_getFxClkFrequency+0xc6>
80003780:	1d 00 1e 00 	j 800037bc <IfxGtm_Cmu_getFxClkFrequency+0x98>
80003784:	1d 00 21 00 	j 800037c6 <IfxGtm_Cmu_getFxClkFrequency+0xa2>
80003788:	1d 00 24 00 	j 800037d0 <IfxGtm_Cmu_getFxClkFrequency+0xac>
8000378c:	1d 00 27 00 	j 800037da <IfxGtm_Cmu_getFxClkFrequency+0xb6>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, (IfxGtm_Cmu_Clk)(fxSelect - 1), assumeEnabled);
80003790:	02 85       	mov %d5,%d8
80003792:	1b f2 ff 4f 	addi %d4,%d2,-1
80003796:	40 c4       	mov.aa %a4,%a12
80003798:	6d ff 67 ff 	call 80003666 <IfxGtm_Cmu_getClkFrequency>
8000379c:	1d ff e6 ff 	j 80003768 <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, IfxGtm_Cmu_Clk_6, assumeEnabled);
800037a0:	02 85       	mov %d5,%d8
800037a2:	82 64       	mov %d4,6
800037a4:	40 c4       	mov.aa %a4,%a12
800037a6:	6d ff 60 ff 	call 80003666 <IfxGtm_Cmu_getClkFrequency>
800037aa:	1d ff df ff 	j 80003768 <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, IfxGtm_Cmu_Clk_7, assumeEnabled);
800037ae:	02 85       	mov %d5,%d8
800037b0:	82 74       	mov %d4,7
800037b2:	40 c4       	mov.aa %a4,%a12
800037b4:	6d ff 59 ff 	call 80003666 <IfxGtm_Cmu_getClkFrequency>
800037b8:	1d ff d8 ff 	j 80003768 <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = frequency / 16;
800037bc:	7b 00 d8 33 	movh %d3,15744
800037c0:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
800037c4:	00 90       	ret 
            frequency = frequency / 256;
800037c6:	7b 00 b8 33 	movh %d3,15232
800037ca:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
800037ce:	00 90       	ret 
            frequency = frequency / 4096;
800037d0:	7b 00 98 33 	movh %d3,14720
800037d4:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
800037d8:	00 90       	ret 
            frequency = frequency / 65536;
800037da:	7b 00 78 33 	movh %d3,14208
800037de:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
800037e2:	00 90       	ret 
        frequency = 0.0f;
800037e4:	82 02       	mov %d2,0
800037e6:	00 90       	ret 
            frequency = 0.0f;
800037e8:	82 02       	mov %d2,0
}
800037ea:	00 90       	ret 

800037ec <IfxGtm_Cmu_setClkFrequency>:
    }
}


void IfxGtm_Cmu_setClkFrequency(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex, float32 frequency)
{
800037ec:	40 ae       	mov.aa %a14,%sp
800037ee:	40 4c       	mov.aa %a12,%a4
800037f0:	02 48       	mov %d8,%d4
800037f2:	02 59       	mov %d9,%d5
    float32 t   = (IfxGtm_Cmu_getGclkFrequency(gtm) / frequency) - 1;
800037f4:	6d ff 1b ff 	call 8000362a <IfxGtm_Cmu_getGclkFrequency>
800037f8:	4b 92 51 50 	div.f %d5,%d2,%d9
800037fc:	7b 00 f8 23 	movh %d2,16256
80003800:	6b 02 31 55 	sub.f %d5,%d5,%d2
    uint32  cnt = (uint32)t;
80003804:	4b 05 71 91 	ftouz %d9,%d5

    if ((t - (float32)cnt) > 0.5f)
80003808:	4b 09 61 21 	utof %d2,%d9
8000380c:	6b 02 31 25 	sub.f %d2,%d5,%d2
80003810:	7b 00 f0 33 	movh %d3,16128
80003814:	4b 32 01 20 	cmp.f %d2,%d2,%d3
80003818:	6f 22 03 00 	jz.t %d2,2,8000381e <IfxGtm_Cmu_setClkFrequency+0x32>
    {                           /* Round to nearest */
        cnt++;
8000381c:	c2 19       	add %d9,1
    }

    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
8000381e:	6d ff 4b f4 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
80003822:	02 2a       	mov %d10,%d2
    IfxScuWdt_clearCpuEndinit(psw);
80003824:	02 24       	mov %d4,%d2
80003826:	6d ff de f2 	call 80001de2 <IfxScuWdt_clearCpuEndinit>

    switch (clkIndex)
8000382a:	df 68 1e 00 	jeq %d8,6,80003866 <IfxGtm_Cmu_setClkFrequency+0x7a>
8000382e:	ff 78 11 80 	jge.u %d8,7,80003850 <IfxGtm_Cmu_setClkFrequency+0x64>
80003832:	ff 68 0b 80 	jge.u %d8,6,80003848 <IfxGtm_Cmu_setClkFrequency+0x5c>
    case IfxGtm_Cmu_Clk_1:
    case IfxGtm_Cmu_Clk_2:
    case IfxGtm_Cmu_Clk_3:
    case IfxGtm_Cmu_Clk_4:
    case IfxGtm_Cmu_Clk_5:
        gtm->CMU.CLK0_5[clkIndex].CTRL.B.CLK_CNT = cnt;
80003836:	1b 38 0c 20 	addi %d2,%d8,195
8000383a:	06 22       	sh %d2,2
8000383c:	01 c2 00 c6 	addsc.a %a12,%a12,%d2,0
80003840:	54 c2       	ld.w %d2,[%a12]
80003842:	37 92 18 20 	insert %d2,%d2,%d9,0,24
80003846:	74 c2       	st.w [%a12],%d2
        break;
    default:
        break;
    }

    IfxScuWdt_setCpuEndinit(psw);
80003848:	02 a4       	mov %d4,%d10
8000384a:	6d ff 52 f4 	call 800020ee <IfxScuWdt_setCpuEndinit>
}
8000384e:	00 90       	ret 
    switch (clkIndex)
80003850:	df 78 fc ff 	jne %d8,7,80003848 <IfxGtm_Cmu_setClkFrequency+0x5c>
        gtm->CMU.CLK_7.CTRL.B.CLK_CNT = cnt;
80003854:	d9 c2 28 c0 	lea %a2,[%a12]808
80003858:	19 c2 28 c0 	ld.w %d2,[%a12]808
8000385c:	37 92 18 20 	insert %d2,%d2,%d9,0,24
80003860:	74 22       	st.w [%a2],%d2
        break;
80003862:	1d ff f3 ff 	j 80003848 <IfxGtm_Cmu_setClkFrequency+0x5c>
        gtm->CMU.CLK_6.CTRL.B.CLK_CNT = cnt;
80003866:	d9 c2 24 c0 	lea %a2,[%a12]804
8000386a:	19 c2 24 c0 	ld.w %d2,[%a12]804
8000386e:	37 92 18 20 	insert %d2,%d2,%d9,0,24
80003872:	74 22       	st.w [%a2],%d2
        break;
80003874:	1d ff ea ff 	j 80003848 <IfxGtm_Cmu_setClkFrequency+0x5c>

80003878 <IfxGtm_Cmu_setGclkFrequency>:
    IfxScuWdt_setCpuEndinit(psw);
}


void IfxGtm_Cmu_setGclkFrequency(Ifx_GTM *gtm, float32 frequency)
{
80003878:	40 ae       	mov.aa %a14,%sp
8000387a:	40 4c       	mov.aa %a12,%a4
8000387c:	02 48       	mov %d8,%d4
    float32 f;
    float32 bestDistance = frequency;

    float32 fIn          = IfxGtm_Cmu_getModuleFrequency(gtm);
8000387e:	6d ff d2 fe 	call 80003622 <IfxGtm_Cmu_getModuleFrequency>
    float32 bestDistance = frequency;
80003882:	02 85       	mov %d5,%d8
    uint32  z, n, nBest = 1, zBest = 1;
80003884:	82 19       	mov %d9,1
80003886:	02 9a       	mov %d10,%d9
    float32 t;

#if 1

    for (z = 1; z < 0xFFFFFF; z++)
80003888:	02 94       	mov %d4,%d9
8000388a:	1d 00 22 00 	j 800038ce <IfxGtm_Cmu_setGclkFrequency+0x56>
                bestDistance = distance;
                nBest        = n;
                zBest        = z;
            }

            if (bestDistance < 0.1f)
8000388e:	7b d0 dc 63 	movh %d6,15821
80003892:	1b d6 cc 6c 	addi %d6,%d6,-13107
80003896:	4b 65 01 60 	cmp.f %d6,%d5,%d6
8000389a:	6f 06 16 80 	jnz.t %d6,0,800038c6 <IfxGtm_Cmu_setGclkFrequency+0x4e>
        for (n = z; n > 0; n--)
8000389e:	c2 f3       	add %d3,-1
800038a0:	df 03 14 00 	jeq %d3,0,800038c8 <IfxGtm_Cmu_setGclkFrequency+0x50>
            f        = t * n;
800038a4:	4b 03 61 61 	utof %d6,%d3
800038a8:	4b 06 41 60 	mul.f %d6,%d6,%d0
            distance = fabsf(frequency - f);
800038ac:	6b 06 31 68 	sub.f %d6,%d8,%d6
800038b0:	b7 06 81 6f 	insert %d6,%d6,0,31,1
            if (distance < bestDistance)
800038b4:	4b 65 01 70 	cmp.f %d7,%d5,%d6
800038b8:	6f 27 eb 7f 	jz.t %d7,2,8000388e <IfxGtm_Cmu_setGclkFrequency+0x16>
                zBest        = z;
800038bc:	02 49       	mov %d9,%d4
                nBest        = n;
800038be:	02 3a       	mov %d10,%d3
                bestDistance = distance;
800038c0:	02 65       	mov %d5,%d6
800038c2:	1d ff e6 ff 	j 8000388e <IfxGtm_Cmu_setGclkFrequency+0x16>
            {
                endLoop = TRUE;
800038c6:	82 13       	mov %d3,1
                break;
            }
        }

        if (endLoop)
800038c8:	df 03 0f 80 	jne %d3,0,800038e6 <IfxGtm_Cmu_setGclkFrequency+0x6e>
    for (z = 1; z < 0xFFFFFF; z++)
800038cc:	c2 14       	add %d4,1
800038ce:	7b 00 10 30 	movh %d3,256
800038d2:	c2 e3       	add %d3,-2
800038d4:	3f 43 09 80 	jlt.u %d3,%d4,800038e6 <IfxGtm_Cmu_setGclkFrequency+0x6e>
        t = fIn / z;
800038d8:	4b 04 61 01 	utof %d0,%d4
800038dc:	4b 02 51 00 	div.f %d0,%d2,%d0
        for (n = z; n > 0; n--)
800038e0:	02 43       	mov %d3,%d4
800038e2:	1d ff df ff 	j 800038a0 <IfxGtm_Cmu_setGclkFrequency+0x28>
        }
    }

#endif

    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
800038e6:	6d ff e7 f3 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
800038ea:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(psw);
800038ec:	02 24       	mov %d4,%d2
800038ee:	6d ff 7a f2 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
    gtm->CMU.GCLK_NUM.B.GCLK_NUM = zBest;
800038f2:	b7 09 08 9c 	insert %d9,%d9,0,24,8
800038f6:	d9 c2 04 c0 	lea %a2,[%a12]772
800038fa:	19 c3 04 c0 	ld.w %d3,[%a12]772
800038fe:	37 93 18 30 	insert %d3,%d3,%d9,0,24
80003902:	74 23       	st.w [%a2],%d3
    gtm->CMU.GCLK_NUM.B.GCLK_NUM = zBest;   /* write twice to be sure */
80003904:	54 23       	ld.w %d3,[%a2]
80003906:	37 93 18 30 	insert %d3,%d3,%d9,0,24
8000390a:	74 23       	st.w [%a2],%d3
    gtm->CMU.GCLK_DEN.B.GCLK_DEN = nBest;
8000390c:	d9 c2 08 c0 	lea %a2,[%a12]776
80003910:	19 c3 08 c0 	ld.w %d3,[%a12]776
80003914:	37 a3 18 30 	insert %d3,%d3,%d10,0,24
80003918:	74 23       	st.w [%a2],%d3
    IfxScuWdt_setCpuEndinit(psw);
8000391a:	02 84       	mov %d4,%d8
8000391c:	6d ff e9 f3 	call 800020ee <IfxScuWdt_setCpuEndinit>
}
80003920:	00 90       	ret 

80003922 <IfxGtm_Dpll_getSubIncFrequency>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

float32 IfxGtm_Dpll_getSubIncFrequency(Ifx_GTM *gtm, IfxGtm_Dpll_SubInc index)
{
80003922:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(gtm)
    IFX_UNUSED_PARAMETER(index)
    return 0.0F;
}
80003924:	82 02       	mov %d2,0
80003926:	00 90       	ret 

80003928 <IfxGtm_Tom_Tgc_buildFeature>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint32 IfxGtm_Tom_Tgc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset)
{
80003928:	40 ae       	mov.aa %a14,%sp
    uint8  i;
    uint32 reg  = 0;
    uint32 mask = enableMask | (disableMask << 16);
8000392a:	8f 05 01 50 	sh %d5,%d5,16
8000392e:	a6 54       	or %d4,%d5
    uint32 reg  = 0;
80003930:	82 02       	mov %d2,0

    for (i = 0; i < IFXGTM_TOM_NUM_TGC_CHANNELS; i++)
80003932:	82 03       	mov %d3,0
80003934:	1d 00 06 00 	j 80003940 <IfxGtm_Tom_Tgc_buildFeature+0x18>
        if (mask & 0x10000)
        {
            reg |= IfxGtm_FeatureControl_disable << shift;
        }

        mask = mask >> 1;
80003938:	06 f4       	sh %d4,-1
    for (i = 0; i < IFXGTM_TOM_NUM_TGC_CHANNELS; i++)
8000393a:	c2 13       	add %d3,1
8000393c:	8f f3 0f 31 	and %d3,%d3,255
80003940:	ff 83 17 80 	jge.u %d3,8,8000396e <IfxGtm_Tom_Tgc_buildFeature+0x46>
        uint8 shift = (i * 2) + bitfieldOffset;
80003944:	8f 13 00 50 	sh %d5,%d3,1
80003948:	8f f5 0f 51 	and %d5,%d5,255
8000394c:	42 65       	add %d5,%d6
8000394e:	8f f5 0f 51 	and %d5,%d5,255
        if (mask & 0x1)
80003952:	6f 04 06 00 	jz.t %d4,0,8000395e <IfxGtm_Tom_Tgc_buildFeature+0x36>
            reg |= IfxGtm_FeatureControl_enable << shift;
80003956:	82 27       	mov %d7,2
80003958:	0f 57 00 70 	sh %d7,%d7,%d5
8000395c:	a6 72       	or %d2,%d7
        if (mask & 0x10000)
8000395e:	ef 04 ed 7f 	jz.t %d4,16,80003938 <IfxGtm_Tom_Tgc_buildFeature+0x10>
            reg |= IfxGtm_FeatureControl_disable << shift;
80003962:	82 17       	mov %d7,1
80003964:	0f 57 00 70 	sh %d7,%d7,%d5
80003968:	a6 72       	or %d2,%d7
8000396a:	1d ff e7 ff 	j 80003938 <IfxGtm_Tom_Tgc_buildFeature+0x10>
    }

    return reg;
}
8000396e:	00 90       	ret 

80003970 <IfxCpu_Trap_memoryManagementError>:
{
80003970:	40 ae       	mov.aa %a14,%sp
80003972:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003974:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003976:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
8000397a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000397e:	8f 72 00 21 	and %d2,%d2,7
80003982:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003986:	80 22       	mov.d %d2,%a2
80003988:	0f 54 a0 30 	or %d3,%d4,%d5
8000398c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80003990:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003994:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003996:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000399a:	00 80       	rfe 
}
8000399c:	00 90       	ret 

8000399e <IfxCpu_Trap_internalProtectionError>:
{
8000399e:	40 ae       	mov.aa %a14,%sp
800039a0:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800039a2:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800039a4:	b7 14 18 44 	insert %d4,%d4,1,8,24
800039a8:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800039ac:	8f 72 00 21 	and %d2,%d2,7
800039b0:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800039b4:	80 22       	mov.d %d2,%a2
800039b6:	0f 54 a0 30 	or %d3,%d4,%d5
800039ba:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
800039be:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800039c2:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800039c4:	0d 00 40 02 	rslcx 
    __asm("rfe");
800039c8:	00 80       	rfe 
}
800039ca:	00 90       	ret 

800039cc <IfxCpu_Trap_instructionError>:
{
800039cc:	40 ae       	mov.aa %a14,%sp
800039ce:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800039d0:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800039d2:	b7 24 18 44 	insert %d4,%d4,2,8,24
800039d6:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800039da:	8f 72 00 21 	and %d2,%d2,7
800039de:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800039e2:	80 22       	mov.d %d2,%a2
800039e4:	0f 54 a0 30 	or %d3,%d4,%d5
800039e8:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
800039ec:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800039f0:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800039f2:	0d 00 40 02 	rslcx 
    __asm("rfe");
800039f6:	00 80       	rfe 
}
800039f8:	00 90       	ret 

800039fa <IfxCpu_Trap_contextManagementError>:
{
800039fa:	40 ae       	mov.aa %a14,%sp
800039fc:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800039fe:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003a00:	b7 34 18 44 	insert %d4,%d4,3,8,24
80003a04:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003a08:	8f 72 00 21 	and %d2,%d2,7
80003a0c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003a10:	80 22       	mov.d %d2,%a2
80003a12:	0f 54 a0 30 	or %d3,%d4,%d5
80003a16:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80003a1a:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003a1e:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003a20:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003a24:	00 80       	rfe 
}
80003a26:	00 90       	ret 

80003a28 <IfxCpu_Trap_busError>:
{
80003a28:	40 ae       	mov.aa %a14,%sp
80003a2a:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003a2c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003a2e:	b7 44 18 44 	insert %d4,%d4,4,8,24
80003a32:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003a36:	8f 72 00 21 	and %d2,%d2,7
80003a3a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003a3e:	80 22       	mov.d %d2,%a2
80003a40:	0f 54 a0 30 	or %d3,%d4,%d5
80003a44:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
80003a48:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003a4c:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003a4e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003a52:	00 80       	rfe 
}
80003a54:	00 90       	ret 

80003a56 <IfxCpu_Trap_assertion>:
{
80003a56:	40 ae       	mov.aa %a14,%sp
80003a58:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003a5a:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003a5c:	8f f4 0f 41 	and %d4,%d4,255
80003a60:	3b 00 50 20 	mov %d2,1280
80003a64:	a6 24       	or %d4,%d2
80003a66:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003a6a:	8f 72 00 21 	and %d2,%d2,7
80003a6e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003a72:	80 22       	mov.d %d2,%a2
80003a74:	0f 54 a0 30 	or %d3,%d4,%d5
80003a78:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80003a7c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80003a80:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003a82:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003a86:	00 80       	rfe 
}
80003a88:	00 90       	ret 

80003a8a <IfxCpu_Trap_systemCall_Cpu0>:
{
80003a8a:	40 ae       	mov.aa %a14,%sp
80003a8c:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003a8e:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003a90:	b7 64 18 44 	insert %d4,%d4,6,8,24
80003a94:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003a98:	8f 72 00 21 	and %d2,%d2,7
80003a9c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003aa0:	80 22       	mov.d %d2,%a2
80003aa2:	0f 54 a0 30 	or %d3,%d4,%d5
80003aa6:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
80003aaa:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003aae:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003ab2:	00 80       	rfe 
}
80003ab4:	00 90       	ret 

80003ab6 <IfxCpu_Trap_systemCall_Cpu1>:
{
80003ab6:	40 ae       	mov.aa %a14,%sp
80003ab8:	20 08       	sub.a %sp,8
80003aba:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003abc:	b7 64 18 44 	insert %d4,%d4,6,8,24
80003ac0:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003ac4:	8f 72 00 21 	and %d2,%d2,7
80003ac8:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003acc:	80 22       	mov.d %d2,%a2
80003ace:	0f 54 a0 30 	or %d3,%d4,%d5
80003ad2:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80003ad6:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003ada:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003ade:	00 80       	rfe 
}
80003ae0:	00 90       	ret 

80003ae2 <IfxCpu_Trap_systemCall_Cpu2>:
{
80003ae2:	40 ae       	mov.aa %a14,%sp
80003ae4:	20 08       	sub.a %sp,8
80003ae6:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003ae8:	b7 64 18 44 	insert %d4,%d4,6,8,24
80003aec:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003af0:	8f 72 00 21 	and %d2,%d2,7
80003af4:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003af8:	80 22       	mov.d %d2,%a2
80003afa:	0f 54 a0 30 	or %d3,%d4,%d5
80003afe:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80003b02:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003b06:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003b0a:	00 80       	rfe 
}
80003b0c:	00 90       	ret 

80003b0e <IfxCpu_Trap_nonMaskableInterrupt>:
{
80003b0e:	40 ae       	mov.aa %a14,%sp
80003b10:	20 08       	sub.a %sp,8
80003b12:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80003b14:	b7 74 18 44 	insert %d4,%d4,7,8,24
80003b18:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003b1c:	8f 72 00 21 	and %d2,%d2,7
80003b20:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80003b24:	80 22       	mov.d %d2,%a2
80003b26:	0f 54 a0 30 	or %d3,%d4,%d5
80003b2a:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
80003b2e:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003b32:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003b36:	00 80       	rfe 
}
80003b38:	00 90       	ret 

80003b3a <IfxCpu_getIndex>:
    return cpuMode;
}


IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
{
80003b3a:	40 ae       	mov.aa %a14,%sp
    IfxCpu_ResourceCpu result;
    uint32             index;
    result = IfxCpu_ResourceCpu_none;

    for (index = 0; index < IFXCPU_NUM_MODULES; index++)
80003b3c:	82 02       	mov %d2,0
80003b3e:	1d 00 03 00 	j 80003b44 <IfxCpu_getIndex+0xa>
80003b42:	c2 12       	add %d2,1
80003b44:	ff 32 18 80 	jge.u %d2,3,80003b74 <IfxCpu_getIndex+0x3a>
    {
        if (IfxCpu_cfg_indexMap[index].module == cpu)
80003b48:	8f 32 00 30 	sh %d3,%d2,3
80003b4c:	91 00 00 28 	movh.a %a2,32768
80003b50:	d9 22 20 a0 	lea %a2,[%a2]672 <800002a0 <IfxCpu_cfg_indexMap>>
80003b54:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003b58:	54 23       	ld.w %d3,[%a2]
80003b5a:	80 44       	mov.d %d4,%a4
80003b5c:	5f 43 f3 ff 	jne %d3,%d4,80003b42 <IfxCpu_getIndex+0x8>
        {
            result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
80003b60:	06 32       	sh %d2,3
80003b62:	91 00 00 28 	movh.a %a2,32768
80003b66:	d9 22 20 a0 	lea %a2,[%a2]672 <800002a0 <IfxCpu_cfg_indexMap>>
80003b6a:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003b6e:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80003b72:	00 90       	ret 
    result = IfxCpu_ResourceCpu_none;
80003b74:	82 32       	mov %d2,3
        }
    }

    return result;
}
80003b76:	00 90       	ret 

80003b78 <IfxCpu_getCoreMode>:
{
80003b78:	40 ae       	mov.aa %a14,%sp
80003b7a:	80 48       	mov.d %d8,%a4
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
80003b7c:	6d ff df ff 	call 80003b3a <IfxCpu_getIndex>


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80003b80:	4d c0 e1 3f 	mfcr %d3,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003b84:	8f 73 00 31 	and %d3,%d3,7
    if (IfxCpu_getCoreIndex() != index)
80003b88:	5f 32 22 00 	jeq %d2,%d3,80003bcc <IfxCpu_getCoreMode+0x54>
        dbgsr = cpu->DBGSR;
80003b8c:	bb 00 d0 3f 	mov.u %d3,64768
80003b90:	60 82       	mov.a %a2,%d8
80003b92:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003b96:	54 23       	ld.w %d3,[%a2]
    if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
80003b98:	37 03 e2 40 	extr.u %d4,%d3,1,2
80003b9c:	df 14 1c 00 	jeq %d4,1,80003bd4 <IfxCpu_getCoreMode+0x5c>
        if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
80003ba0:	df 04 1c 80 	jne %d4,0,80003bd8 <IfxCpu_getCoreMode+0x60>
            pmcsr_val = &MODULE_SCU.PMCSR[index];
80003ba4:	06 22       	sh %d2,2
80003ba6:	7b 30 00 3f 	movh %d3,61443
80003baa:	1b 43 0d 36 	addi %d3,%d3,24788
80003bae:	60 32       	mov.a %a2,%d3
80003bb0:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
            if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
80003bb4:	54 22       	ld.w %d2,[%a2]
80003bb6:	37 02 63 24 	extr.u %d2,%d2,8,3
80003bba:	df 12 11 00 	jeq %d2,1,80003bdc <IfxCpu_getCoreMode+0x64>
                if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
80003bbe:	54 22       	ld.w %d2,[%a2]
80003bc0:	37 02 63 24 	extr.u %d2,%d2,8,3
80003bc4:	df 32 0e 00 	jeq %d2,3,80003be0 <IfxCpu_getCoreMode+0x68>
    cpuMode = IfxCpu_CoreMode_unknown;
80003bc8:	82 52       	mov %d2,5
80003bca:	00 90       	ret 
        dbgsr.U = __mfcr(CPU_DBGSR);
80003bcc:	4d 00 d0 3f 	mfcr %d3,$dbgsr
80003bd0:	1d ff e4 ff 	j 80003b98 <IfxCpu_getCoreMode+0x20>
        cpuMode = IfxCpu_CoreMode_halt;
80003bd4:	82 02       	mov %d2,0
80003bd6:	00 90       	ret 
            cpuMode = IfxCpu_CoreMode_unknown;
80003bd8:	82 52       	mov %d2,5
80003bda:	00 90       	ret 
                cpuMode = IfxCpu_CoreMode_run;
80003bdc:	82 12       	mov %d2,1
80003bde:	00 90       	ret 
                    cpuMode = IfxCpu_CoreMode_idle;
80003be0:	82 22       	mov %d2,2
}
80003be2:	00 90       	ret 

80003be4 <IfxCpu_setCoreMode>:
    *lock = 0;
}


boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
{
80003be4:	40 ae       	mov.aa %a14,%sp
80003be6:	80 4c       	mov.d %d12,%a4
80003be8:	02 48       	mov %d8,%d4
    uint8              reqslp;
    boolean            retValue;
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
80003bea:	6d ff a8 ff 	call 80003b3a <IfxCpu_getIndex>
80003bee:	02 2a       	mov %d10,%d2

    /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
80003bf0:	8b 08 20 42 	ne %d4,%d8,0
80003bf4:	8b 38 20 32 	ne %d3,%d8,3
80003bf8:	26 43       	and %d3,%d4
                || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
80003bfa:	df 03 0a 00 	jeq %d3,0,80003c0e <IfxCpu_setCoreMode+0x2a>
80003bfe:	df 48 05 00 	jeq %d8,4,80003c08 <IfxCpu_setCoreMode+0x24>
80003c02:	82 19       	mov %d9,1
80003c04:	1d 00 06 00 	j 80003c10 <IfxCpu_setCoreMode+0x2c>
80003c08:	82 09       	mov %d9,0
80003c0a:	1d 00 03 00 	j 80003c10 <IfxCpu_setCoreMode+0x2c>
80003c0e:	82 09       	mov %d9,0
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
80003c10:	8f f9 0f 91 	and %d9,%d9,255

    reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
80003c14:	8b 28 00 82 	eq %d8,%d8,2

    if (retValue == TRUE)
80003c18:	df 09 04 80 	jne %d9,0,80003c20 <IfxCpu_setCoreMode+0x3c>
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
        }
    }

    return retValue;
}
80003c1c:	02 92       	mov %d2,%d9
80003c1e:	00 90       	ret 
    reg.U = __mfcr(CPU_CORE_ID);
80003c20:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003c24:	8f 72 00 21 	and %d2,%d2,7
        if (IfxCpu_getCoreIndex() != index)
80003c28:	5f 2a 24 00 	jeq %d10,%d2,80003c70 <IfxCpu_setCoreMode+0x8c>
            uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
80003c2c:	6d ff 56 f2 	call 800020d8 <IfxScuWdt_getSafetyWatchdogPassword>
80003c30:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
80003c32:	02 24       	mov %d4,%d2
80003c34:	6d ff fc f0 	call 80001e2c <IfxScuWdt_clearSafetyEndinit>
            MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
80003c38:	1b 5a 03 20 	addi %d2,%d10,53
80003c3c:	06 22       	sh %d2,2
80003c3e:	7b 30 00 3f 	movh %d3,61443
80003c42:	1b 03 00 36 	addi %d3,%d3,24576
80003c46:	60 32       	mov.a %a2,%d3
80003c48:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003c4c:	54 23       	ld.w %d3,[%a2]
80003c4e:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80003c52:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setSafetyEndinit(safetyWdtPw);
80003c54:	02 b4       	mov %d4,%d11
80003c56:	6d ff 71 f2 	call 80002138 <IfxScuWdt_setSafetyEndinit>
            cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
80003c5a:	bb 00 d0 2f 	mov.u %d2,64768
80003c5e:	60 c2       	mov.a %a2,%d12
80003c60:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003c64:	54 22       	ld.w %d2,[%a2]
80003c66:	b7 22 82 20 	insert %d2,%d2,2,1,2
80003c6a:	74 22       	st.w [%a2],%d2
80003c6c:	1d ff d8 ff 	j 80003c1c <IfxCpu_setCoreMode+0x38>
            uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
80003c70:	6d ff 22 f2 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
80003c74:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearCpuEndinit(cpuWdtPw);
80003c76:	02 24       	mov %d4,%d2
80003c78:	6d ff b5 f0 	call 80001de2 <IfxScuWdt_clearCpuEndinit>
            MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
80003c7c:	1b 5a 03 20 	addi %d2,%d10,53
80003c80:	06 22       	sh %d2,2
80003c82:	7b 30 00 3f 	movh %d3,61443
80003c86:	1b 03 00 36 	addi %d3,%d3,24576
80003c8a:	60 32       	mov.a %a2,%d3
80003c8c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003c90:	54 23       	ld.w %d3,[%a2]
80003c92:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80003c96:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
80003c98:	02 b4       	mov %d4,%d11
80003c9a:	6d ff 2a f2 	call 800020ee <IfxScuWdt_setCpuEndinit>
80003c9e:	1d ff bf ff 	j 80003c1c <IfxCpu_setCoreMode+0x38>

80003ca2 <IfxCpu_setProgramCounter>:


boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
{
80003ca2:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80003ca4:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003ca8:	8f 72 00 21 	and %d2,%d2,7
    if (cpu < IfxCpu_ResourceCpu_none)
80003cac:	ff 32 17 80 	jge.u %d2,3,80003cda <IfxCpu_setProgramCounter+0x38>
        module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
80003cb0:	06 32       	sh %d2,3
80003cb2:	91 00 00 28 	movh.a %a2,32768
80003cb6:	d9 22 20 a0 	lea %a2,[%a2]672 <800002a0 <IfxCpu_cfg_indexMap>>
80003cba:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003cbe:	54 22       	ld.w %d2,[%a2]
    boolean retVal = TRUE;

    if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
80003cc0:	80 43       	mov.d %d3,%a4
80003cc2:	5f 23 0f 00 	jeq %d3,%d2,80003ce0 <IfxCpu_setProgramCounter+0x3e>
    {
        retVal = FALSE;
    }
    else
    {
        cpu->PC.B.PC = programCounter >> 1;
80003cc6:	bb 80 e0 2f 	mov.u %d2,65032
80003cca:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
80003cce:	54 42       	ld.w %d2,[%a4]
80003cd0:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80003cd4:	74 42       	st.w [%a4],%d2
    boolean retVal = TRUE;
80003cd6:	82 12       	mov %d2,1
80003cd8:	00 90       	ret 
        module = NULL_PTR;
80003cda:	82 02       	mov %d2,0
80003cdc:	1d ff f2 ff 	j 80003cc0 <IfxCpu_setProgramCounter+0x1e>
        retVal = FALSE;
80003ce0:	82 02       	mov %d2,0
    }

    return retVal;
}
80003ce2:	00 90       	ret 

80003ce4 <IfxCpu_startCore>:
    return retVal;
}


boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
{
80003ce4:	40 ae       	mov.aa %a14,%sp
80003ce6:	80 49       	mov.d %d9,%a4
    boolean retVal = TRUE;

    /* Set the PC for Core 1 */
    retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
80003ce8:	6d ff dd ff 	call 80003ca2 <IfxCpu_setProgramCounter>
80003cec:	8f 12 00 81 	and %d8,%d2,1
    /* Get the mode for Core 1 and set it to RUNNING */

    /* Core not running already */
    if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
80003cf0:	60 94       	mov.a %a4,%d9
80003cf2:	6d ff 43 ff 	call 80003b78 <IfxCpu_getCoreMode>
80003cf6:	df 02 04 00 	jeq %d2,0,80003cfe <IfxCpu_startCore+0x1a>
    {
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
    }

    return retVal;
}
80003cfa:	02 82       	mov %d2,%d8
80003cfc:	00 90       	ret 
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
80003cfe:	82 14       	mov %d4,1
80003d00:	60 94       	mov.a %a4,%d9
80003d02:	6d ff 71 ff 	call 80003be4 <IfxCpu_setCoreMode>
80003d06:	26 28       	and %d8,%d2
80003d08:	1d ff f9 ff 	j 80003cfa <IfxCpu_startCore+0x16>

80003d0c <IfxCpu_waitEvent>:


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
80003d0c:	40 ae       	mov.aa %a14,%sp
80003d0e:	40 4c       	mov.aa %a12,%a4
80003d10:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80003d12:	80 42       	mov.d %d2,%a4
80003d14:	b7 02 1c 20 	insert %d2,%d2,0,0,28
80003d18:	7b 00 00 3d 	movh %d3,53248
80003d1c:	5f 32 28 00 	jeq %d2,%d3,80003d6c <IfxCpu_waitEvent+0x60>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80003d20:	6d ff 46 ee 	call 800019ac <IfxScuCcu_getSourceFrequency>
80003d24:	91 30 00 2f 	movh.a %a2,61443
80003d28:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80003d2c:	54 23       	ld.w %d3,[%a2]
80003d2e:	37 03 64 34 	extr.u %d3,%d3,8,4
80003d32:	4b 03 41 31 	itof %d3,%d3
80003d36:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
80003d3a:	7b a0 47 34 	movh %d3,17530
80003d3e:	4b 32 51 20 	div.f %d2,%d2,%d3
80003d42:	4b 08 61 41 	utof %d4,%d8
80003d46:	4b 24 41 40 	mul.f %d4,%d4,%d2
80003d4a:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
80003d4e:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80003d52:	54 c2       	ld.w %d2,[%a12]
80003d54:	8f 72 00 21 	and %d2,%d2,7
80003d58:	df 72 18 00 	jeq %d2,7,80003d88 <IfxCpu_waitEvent+0x7c>
    __asm__ volatile ("nop" : : : "memory");
80003d5c:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80003d5e:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80003d62:	a2 42       	sub %d2,%d4
80003d64:	3f 32 f7 ff 	jlt.u %d2,%d3,80003d52 <IfxCpu_waitEvent+0x46>
        {
            errorcnt = 1;
80003d68:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
80003d6a:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80003d6c:	80 42       	mov.d %d2,%a4
80003d6e:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
80003d72:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
80003d76:	4d c0 e1 2f 	mfcr %d2,$core_id
80003d7a:	8f c2 01 20 	sh %d2,%d2,28
80003d7e:	0b 23 80 20 	sub %d2,%d3,%d2
80003d82:	60 2c       	mov.a %a12,%d2
80003d84:	1d ff ce ff 	j 80003d20 <IfxCpu_waitEvent+0x14>
    boolean          errorcnt      = 0U;
80003d88:	82 02       	mov %d2,0
80003d8a:	00 90       	ret 

80003d8c <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
80003d8c:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
80003d8e:	4d c0 e1 2f 	mfcr %d2,$core_id
80003d92:	82 13       	mov %d3,1
80003d94:	57 30 21 22 	imask %e2,%d3,%d2,1
80003d98:	49 42 40 08 	ldmst [%a4]0,%e2
}
80003d9c:	00 90       	ret 

80003d9e <Ifx_Cpp_Init>:
#pragma section
#elif defined(__DCC__)
#pragma section CONST
#endif
static void Ifx_Cpp_Init(void)
{
80003d9e:	40 ae       	mov.aa %a14,%sp
    Ifx_C_Init();           /*Initialization of C runtime variables */
80003da0:	6d 00 5a 04 	call 80004654 <Ifx_C_Init>
#elif defined (__HIGHTEC__)
extern void _init(void); /* cpp initialization */
    _init();
#elif defined (__GNUC__) && !defined(__HIGHTEC__)
    extern void _init(void); /* cpp initialization */
    _init();
80003da4:	6d 00 5e 0a 	call 80005260 <_init>
#endif
}
80003da8:	00 90       	ret 

80003daa <hardware_init_hook>:
{}
80003daa:	00 90       	ret 

80003dac <software_init_hook>:
{}
80003dac:	00 90       	ret 

80003dae <_Core0_start>:
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80003dae:	91 30 00 2f 	movh.a %a2,61443
80003db2:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
    __setareg(sp, __USTACK(0));
80003db6:	91 20 00 37 	movh.a %a3,28674
80003dba:	37 02 6e 21 	extr.u %d2,%d2,2,14
80003dbe:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003dc2:	8f f2 83 81 	xor %d8,%d2,63
80003dc6:	80 32       	mov.d %d2,%a3
80003dc8:	1b 02 60 29 	addi %d2,%d2,-27136
80003dcc:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80003dce:	0d 00 80 04 	dsync 
    __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
80003dd2:	3b 00 98 20 	mov %d2,2432
80003dd6:	cd 42 e0 0f 	mtcr $psw,%d2
    pcxi  = __mfcr(CPU_PCXI);
80003dda:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
80003dde:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80003de2:	cd 02 e0 0f 	mtcr $pcxi,%d2
    if (enable)
    {                           /* Step 3: Initiate invalidation of current cache contents if any */
        Ifx_CPU_PCON1 pcon1;
        pcon1.U       = 0;
        pcon1.B.PCINV = 1;
        __mtcr(CPU_PCON1, pcon1.U);
80003de6:	82 12       	mov %d2,1
80003de8:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80003dec:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003df0:	8f 72 00 21 	and %d2,%d2,7
    }

    uint32 coreIndex   = IfxCpu_getCoreIndex();
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80003df4:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
80003df8:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
80003dfc:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80003dfe:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80003e00:	37 02 6e 21 	extr.u %d2,%d2,2,14
    /*PCACHE enable steps */
    {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80003e04:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80003e08:	6f 13 41 81 	jnz.t %d3,1,8000408a <_Core0_start+0x2dc>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003e0c:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003e10:	54 22       	ld.w %d2,[%a2]
80003e12:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003e16:	a6 32       	or %d2,%d3
80003e18:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003e1c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80003e1e:	54 22       	ld.w %d2,[%a2]
80003e20:	6f 02 ff ff 	jnz.t %d2,0,80003e1e <_Core0_start+0x70>
        Ifx_CPU_PCON0 pcon0;
        pcon0.U       = 0;
        pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
        __mtcr(CPU_PCON0, pcon0.U);
80003e24:	82 02       	mov %d2,0
80003e26:	cd c2 20 09 	mtcr $pcon0,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80003e2a:	54 22       	ld.w %d2,[%a2]
80003e2c:	6f 12 09 00 	jz.t %d2,1,80003e3e <_Core0_start+0x90>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003e30:	54 22       	ld.w %d2,[%a2]
80003e32:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003e36:	a6 32       	or %d2,%d3
80003e38:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003e3c:	74 22       	st.w [%a2],%d2

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003e3e:	54 22       	ld.w %d2,[%a2]
80003e40:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003e44:	a6 32       	or %d2,%d3
80003e46:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003e4a:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80003e4c:	54 22       	ld.w %d2,[%a2]
80003e4e:	6f 02 ff 7f 	jz.t %d2,0,80003e4c <_Core0_start+0x9e>
    __asm__ volatile ("isync" : : : "memory");
80003e52:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80003e56:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80003e5a:	7b 30 00 3f 	movh %d3,61443
80003e5e:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80003e62:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80003e66:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003e6a:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80003e6c:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80003e6e:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80003e70:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80003e74:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80003e78:	6f 13 fd 80 	jnz.t %d3,1,80004072 <_Core0_start+0x2c4>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003e7c:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003e80:	54 22       	ld.w %d2,[%a2]
80003e82:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003e86:	a6 32       	or %d2,%d3
80003e88:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003e8c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80003e8e:	54 22       	ld.w %d2,[%a2]
80003e90:	6f 02 ff ff 	jnz.t %d2,0,80003e8e <_Core0_start+0xe0>
        __mtcr(CPU_DCON0, dcon0.U);
80003e94:	82 22       	mov %d2,2
80003e96:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80003e9a:	54 22       	ld.w %d2,[%a2]
80003e9c:	6f 12 09 00 	jz.t %d2,1,80003eae <_Core0_start+0x100>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003ea0:	54 22       	ld.w %d2,[%a2]
80003ea2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ea6:	a6 32       	or %d2,%d3
80003ea8:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003eac:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003eae:	54 22       	ld.w %d2,[%a2]
80003eb0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003eb4:	a6 32       	or %d2,%d3
80003eb6:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003eba:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80003ebc:	54 22       	ld.w %d2,[%a2]
80003ebe:	6f 02 ff 7f 	jz.t %d2,0,80003ebc <_Core0_start+0x10e>
80003ec2:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80003ec6:	91 30 00 2f 	movh.a %a2,61443
80003eca:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003ece:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ed2:	8f 28 00 30 	sh %d3,%d8,2
    if (watchdog->CON0.B.LCK)
80003ed6:	6f 12 09 00 	jz.t %d2,1,80003ee8 <_Core0_start+0x13a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003eda:	54 22       	ld.w %d2,[%a2]
80003edc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ee0:	a6 32       	or %d2,%d3
80003ee2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003ee6:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003ee8:	91 30 00 2f 	movh.a %a2,61443
80003eec:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003ef0:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003ef4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ef8:	a6 32       	or %d2,%d3
80003efa:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003efe:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80003f00:	54 22       	ld.w %d2,[%a2]
80003f02:	6f 02 ff ff 	jnz.t %d2,0,80003f00 <_Core0_start+0x152>
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
80003f06:	91 00 00 38 	movh.a %a3,32768
80003f0a:	80 32       	mov.d %d2,%a3
80003f0c:	1b 02 10 20 	addi %d2,%d2,256
80003f10:	cd 42 e2 0f 	mtcr $btv,%d2
    __mtcr(CPU_BIV, (uint32)__INTTAB(0));
80003f14:	91 f0 01 38 	movh.a %a3,32799
80003f18:	80 32       	mov.d %d2,%a3
80003f1a:	1b 02 00 24 	addi %d2,%d2,16384
80003f1e:	cd 02 e2 0f 	mtcr $biv,%d2
    __mtcr(CPU_ISP, (uint32)__ISTACK(0));
80003f22:	91 20 00 37 	movh.a %a3,28674
80003f26:	80 32       	mov.d %d2,%a3
80003f28:	1b 02 b0 29 	addi %d2,%d2,-25856
80003f2c:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80003f30:	54 22       	ld.w %d2,[%a2]
80003f32:	6f 12 09 00 	jz.t %d2,1,80003f44 <_Core0_start+0x196>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003f36:	54 22       	ld.w %d2,[%a2]
80003f38:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f3c:	a6 32       	or %d2,%d3
80003f3e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003f42:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003f44:	91 30 00 2f 	movh.a %a2,61443
80003f48:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003f4c:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80003f50:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003f54:	a6 32       	or %d2,%d3
80003f56:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003f5a:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80003f5c:	54 22       	ld.w %d2,[%a2]
80003f5e:	6f 02 ff 7f 	jz.t %d2,0,80003f5c <_Core0_start+0x1ae>
    __setareg(a0, __SDATA1(0));
80003f62:	91 10 00 26 	movh.a %a2,24577
80003f66:	80 22       	mov.d %d2,%a2
80003f68:	1b 02 00 28 	addi %d2,%d2,-32768
80003f6c:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(0));
80003f6e:	91 10 00 28 	movh.a %a2,32769
80003f72:	80 22       	mov.d %d2,%a2
80003f74:	1b 02 00 28 	addi %d2,%d2,-32768
80003f78:	60 21       	mov.a %a1,%d2
    __setareg(a8, __SDATA3(0));
80003f7a:	91 10 00 28 	movh.a %a2,32769
80003f7e:	80 22       	mov.d %d2,%a2
80003f80:	1b 02 00 28 	addi %d2,%d2,-32768
80003f84:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(0));
80003f86:	91 10 00 29 	movh.a %a2,36865
80003f8a:	80 22       	mov.d %d2,%a2
80003f8c:	1b 02 00 28 	addi %d2,%d2,-32768
80003f90:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80003f92:	91 20 00 37 	movh.a %a3,28674
80003f96:	91 20 00 27 	movh.a %a2,28674
80003f9a:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70019c00 <__CSA0>>
80003f9e:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7001bc00 <__CSA0_END>>
80003fa2:	01 32 20 20 	sub.a %a2,%a2,%a3
80003fa6:	80 22       	mov.d %d2,%a2
80003fa8:	8f a2 1f 70 	sh %d7,%d2,-6
    uint32 *prvCsa      = csaBegin;
80003fac:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80003fae:	1b d7 ff 0f 	addi %d0,%d7,-3
    for (k = 0U; k < numOfCsa; k++)
80003fb2:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80003fb4:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80003fb6:	7b f0 00 40 	movh %d4,15
    for (k = 0U; k < numOfCsa; k++)
80003fba:	df 07 27 00 	jeq %d7,0,80004008 <_Core0_start+0x25a>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80003fbe:	37 02 70 53 	extr.u %d5,%d2,6,16
80003fc2:	8f 42 1f 60 	sh %d6,%d2,-12
80003fc6:	26 46       	and %d6,%d4
80003fc8:	a6 65       	or %d5,%d6
        if (k == 0U)
80003fca:	df 03 16 00 	jeq %d3,0,80003ff6 <_Core0_start+0x248>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80003fce:	74 25       	st.w [%a2],%d5
        if (k == (numOfCsa - 3U))
80003fd0:	5f 03 04 80 	jne %d3,%d0,80003fd8 <_Core0_start+0x22a>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80003fd4:	cd c5 e3 0f 	mtcr $lcx,%d5
    for (k = 0U; k < numOfCsa; k++)
80003fd8:	c2 13       	add %d3,1
80003fda:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80003fdc:	1b 02 04 50 	addi %d5,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80003fe0:	5f 37 0f 00 	jeq %d7,%d3,80003ffe <_Core0_start+0x250>
        nxtCsa += 16U;           /* next CSA */
80003fe4:	02 52       	mov %d2,%d5
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80003fe6:	37 02 70 53 	extr.u %d5,%d2,6,16
80003fea:	8f 42 1f 60 	sh %d6,%d2,-12
80003fee:	26 46       	and %d6,%d4
80003ff0:	a6 65       	or %d5,%d6
        if (k == 0U)
80003ff2:	df 03 ee ff 	jne %d3,0,80003fce <_Core0_start+0x220>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80003ff6:	cd 85 e3 0f 	mtcr $fcx,%d5
80003ffa:	1d ff eb ff 	j 80003fd0 <_Core0_start+0x222>
80003ffe:	1b f7 ff 2f 	addi %d2,%d7,-1
80004002:	06 62       	sh %d2,6
80004004:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80004008:	82 02       	mov %d2,0
8000400a:	74 22       	st.w [%a2],%d2
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
8000400c:	6d ff 66 f0 	call 800020d8 <IfxScuWdt_getSafetyWatchdogPassword>
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
80004010:	02 84       	mov %d4,%d8
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
80004012:	02 29       	mov %d9,%d2
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
80004014:	6d ff 34 ef 	call 80001e7c <IfxScuWdt_disableCpuWatchdog>
        IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
80004018:	02 94       	mov %d4,%d9
8000401a:	6d ff 70 ef 	call 80001efa <IfxScuWdt_disableSafetyWatchdog>
       	hardware_init_hook();
8000401e:	6d ff c6 fe 	call 80003daa <hardware_init_hook>
        Ifx_Cpp_Init();
80004022:	6d ff be fe 	call 80003d9e <Ifx_Cpp_Init>
       	software_init_hook();
80004026:	6d ff c3 fe 	call 80003dac <software_init_hook>
        IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
8000402a:	02 84       	mov %d4,%d8
8000402c:	6d ff b6 ef 	call 80001f98 <IfxScuWdt_enableCpuWatchdog>
        IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
80004030:	02 94       	mov %d4,%d9
80004032:	6d ff f2 ef 	call 80002016 <IfxScuWdt_enableSafetyWatchdog>
    IFXCPU_CSTART_CCU_INIT_HOOK();
80004036:	91 00 00 48 	movh.a %a4,32768
8000403a:	d9 44 30 e0 	lea %a4,[%a4]944 <800003b0 <IfxScuCcu_defaultClockConfig>>
8000403e:	6d ff 31 ed 	call 80001aa0 <IfxScuCcu_init>
    (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
80004042:	91 00 00 28 	movh.a %a2,32768
80004046:	80 22       	mov.d %d2,%a2
80004048:	1b 22 0a 44 	addi %d4,%d2,16546
8000404c:	91 30 88 4f 	movh.a %a4,63619
80004050:	6d ff 4a fe 	call 80003ce4 <IfxCpu_startCore>
    (void)IfxCpu_startCore(&MODULE_CPU2, (uint32)&_Core2_start);       /*The status returned by function call is ignored */
80004054:	91 00 00 28 	movh.a %a2,32768
80004058:	80 22       	mov.d %d2,%a2
8000405a:	1b 02 34 44 	addi %d4,%d2,17216
8000405e:	91 50 88 4f 	movh.a %a4,63621
80004062:	6d ff 41 fe 	call 80003ce4 <IfxCpu_startCore>
    __non_return_call(core0_main);
80004066:	91 00 00 28 	movh.a %a2,32768
8000406a:	d9 22 8c 74 	lea %a2,[%a2]18892 <800049cc <core0_main>>
8000406e:	dc 02       	ji %a2
}
80004070:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004072:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004074:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004078:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000407c:	0f 34 a0 20 	or %d2,%d4,%d3
80004080:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004084:	74 22       	st.w [%a2],%d2
80004086:	1d ff fd fe 	j 80003e80 <_Core0_start+0xd2>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000408a:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000408c:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004090:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004094:	0f 34 a0 20 	or %d2,%d4,%d3
80004098:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000409c:	74 22       	st.w [%a2],%d2
8000409e:	1d ff b9 fe 	j 80003e10 <_Core0_start+0x62>

800040a2 <_Core1_start>:
    password  = watchdog->CON0.B.PW;
800040a2:	91 30 00 2f 	movh.a %a2,61443
800040a6:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800040aa:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800040ae:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[1]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(1);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(1));
800040b2:	91 20 00 26 	movh.a %a2,24578
800040b6:	8f f2 83 41 	xor %d4,%d2,63
800040ba:	80 22       	mov.d %d2,%a2
800040bc:	1b 02 60 2b 	addi %d2,%d2,-18944
800040c0:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
800040c2:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART1_PSW_DEFAULT);    /* 0x00000980 */
800040c6:	3b 00 98 20 	mov %d2,2432
800040ca:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
800040ce:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART1_PCX_O_S_DEFAULT; /*0xfff00000; */
800040d2:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
800040d6:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
800040da:	82 12       	mov %d2,1
800040dc:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800040e0:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800040e4:	7b 30 00 3f 	movh %d3,61443
800040e8:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800040ec:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800040f0:	13 c2 20 23 	madd %d2,%d3,%d2,12
800040f4:	60 22       	mov.a %a2,%d2
800040f6:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800040f8:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800040fa:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800040fe:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80004102:	6f 13 13 81 	jnz.t %d3,1,80004328 <_Core1_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004106:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000410a:	54 22       	ld.w %d2,[%a2]
8000410c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004110:	a6 32       	or %d2,%d3
80004112:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004116:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004118:	54 22       	ld.w %d2,[%a2]
8000411a:	6f 02 ff ff 	jnz.t %d2,0,80004118 <_Core1_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
8000411e:	82 02       	mov %d2,0
80004120:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
80004124:	54 22       	ld.w %d2,[%a2]
80004126:	6f 12 09 00 	jz.t %d2,1,80004138 <_Core1_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000412a:	54 22       	ld.w %d2,[%a2]
8000412c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004130:	a6 32       	or %d2,%d3
80004132:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004136:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004138:	54 22       	ld.w %d2,[%a2]
8000413a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000413e:	a6 32       	or %d2,%d3
80004140:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004144:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004146:	54 22       	ld.w %d2,[%a2]
80004148:	6f 02 ff 7f 	jz.t %d2,0,80004146 <_Core1_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
8000414c:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80004150:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004154:	7b 30 00 3f 	movh %d3,61443
80004158:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000415c:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004160:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004164:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80004166:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004168:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
8000416a:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000416e:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80004172:	6f 13 cf 80 	jnz.t %d3,1,80004310 <_Core1_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004176:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000417a:	54 22       	ld.w %d2,[%a2]
8000417c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004180:	a6 32       	or %d2,%d3
80004182:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004186:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004188:	54 22       	ld.w %d2,[%a2]
8000418a:	6f 02 ff ff 	jnz.t %d2,0,80004188 <_Core1_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
8000418e:	82 02       	mov %d2,0
80004190:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80004194:	54 22       	ld.w %d2,[%a2]
80004196:	6f 12 09 00 	jz.t %d2,1,800041a8 <_Core1_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000419a:	54 22       	ld.w %d2,[%a2]
8000419c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041a0:	a6 32       	or %d2,%d3
800041a2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800041a6:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800041a8:	54 22       	ld.w %d2,[%a2]
800041aa:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041ae:	a6 32       	or %d2,%d3
800041b0:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800041b4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800041b6:	54 22       	ld.w %d2,[%a2]
800041b8:	6f 02 ff 7f 	jz.t %d2,0,800041b6 <_Core1_start+0x114>
800041bc:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
800041c0:	91 30 00 2f 	movh.a %a2,61443
800041c4:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800041c8:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041cc:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
800041ce:	6f 12 09 00 	jz.t %d2,1,800041e0 <_Core1_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800041d2:	54 22       	ld.w %d2,[%a2]
800041d4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041d8:	a6 42       	or %d2,%d4
800041da:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800041de:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800041e0:	91 30 00 2f 	movh.a %a2,61443
800041e4:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800041e8:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800041ec:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800041f0:	a6 42       	or %d2,%d4
800041f2:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800041f6:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800041f8:	54 22       	ld.w %d2,[%a2]
800041fa:	6f 02 ff ff 	jnz.t %d2,0,800041f8 <_Core1_start+0x156>

    /* Clear the ENDINIT bit in the WDT_CON1 register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(1));
800041fe:	91 f0 01 38 	movh.a %a3,32799
80004202:	80 32       	mov.d %d2,%a3
80004204:	1b 02 20 26 	addi %d2,%d2,25088
80004208:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(1));
8000420c:	91 f0 01 38 	movh.a %a3,32799
80004210:	80 32       	mov.d %d2,%a3
80004212:	1b 02 00 24 	addi %d2,%d2,16384
80004216:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(1));
8000421a:	91 20 00 36 	movh.a %a3,24578
8000421e:	80 32       	mov.d %d2,%a3
80004220:	1b 02 b0 2b 	addi %d2,%d2,-17664
80004224:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80004228:	54 22       	ld.w %d2,[%a2]
8000422a:	6f 12 09 00 	jz.t %d2,1,8000423c <_Core1_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000422e:	54 22       	ld.w %d2,[%a2]
80004230:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004234:	a6 42       	or %d2,%d4
80004236:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000423a:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000423c:	91 30 00 2f 	movh.a %a2,61443
80004240:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004244:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004248:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000424c:	a6 42       	or %d2,%d4
8000424e:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004252:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004254:	54 22       	ld.w %d2,[%a2]
80004256:	6f 02 ff 7f 	jz.t %d2,0,80004254 <_Core1_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(1));
8000425a:	91 10 00 26 	movh.a %a2,24577
8000425e:	80 22       	mov.d %d2,%a2
80004260:	1b 02 00 28 	addi %d2,%d2,-32768
80004264:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(1));
80004266:	91 10 00 28 	movh.a %a2,32769
8000426a:	80 22       	mov.d %d2,%a2
8000426c:	1b 02 00 28 	addi %d2,%d2,-32768
80004270:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialised */
    __setareg(a8, __SDATA3(1));
80004272:	91 10 00 28 	movh.a %a2,32769
80004276:	80 22       	mov.d %d2,%a2
80004278:	1b 02 00 28 	addi %d2,%d2,-32768
8000427c:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(1));
8000427e:	91 10 00 29 	movh.a %a2,36865
80004282:	80 22       	mov.d %d2,%a2
80004284:	1b 02 00 28 	addi %d2,%d2,-32768
80004288:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
8000428a:	91 20 00 36 	movh.a %a3,24578
8000428e:	91 20 00 26 	movh.a %a2,24578
80004292:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <6001bc00 <__CSA1>>
80004296:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <6001dc00 <__CSA1_END>>
8000429a:	01 32 20 20 	sub.a %a2,%a2,%a3
8000429e:	80 22       	mov.d %d2,%a2
800042a0:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
800042a4:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
800042a6:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
800042aa:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
800042ac:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800042ae:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
800042b2:	df 06 27 00 	jeq %d6,0,80004300 <_Core1_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800042b6:	37 02 70 43 	extr.u %d4,%d2,6,16
800042ba:	8f 42 1f 50 	sh %d5,%d2,-12
800042be:	26 75       	and %d5,%d7
800042c0:	a6 54       	or %d4,%d5
        if (k == 0U)
800042c2:	df 03 16 00 	jeq %d3,0,800042ee <_Core1_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
800042c6:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
800042c8:	5f 03 04 80 	jne %d3,%d0,800042d0 <_Core1_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
800042cc:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
800042d0:	c2 13       	add %d3,1
800042d2:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
800042d4:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800042d8:	5f 36 0f 00 	jeq %d6,%d3,800042f6 <_Core1_start+0x254>
        nxtCsa += 16U;           /* next CSA */
800042dc:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800042de:	37 02 70 43 	extr.u %d4,%d2,6,16
800042e2:	8f 42 1f 50 	sh %d5,%d2,-12
800042e6:	26 75       	and %d5,%d7
800042e8:	a6 54       	or %d4,%d5
        if (k == 0U)
800042ea:	df 03 ee ff 	jne %d3,0,800042c6 <_Core1_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
800042ee:	cd 84 e3 0f 	mtcr $fcx,%d4
800042f2:	1d ff eb ff 	j 800042c8 <_Core1_start+0x226>
800042f6:	1b f6 ff 2f 	addi %d2,%d6,-1
800042fa:	06 62       	sh %d2,6
800042fc:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80004300:	82 02       	mov %d2,0
80004302:	74 22       	st.w [%a2],%d2

    IfxCpu_initCSA((uint32 *)__CSA(1), (uint32 *)__CSA_END(1));

    /*Call main function of Cpu0 */
    __non_return_call(core1_main);
80004304:	91 00 00 28 	movh.a %a2,32768
80004308:	d9 22 a6 84 	lea %a2,[%a2]18982 <80004a26 <core1_main>>
8000430c:	dc 02       	ji %a2
}
8000430e:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004310:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004312:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004316:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000431a:	0f 35 a0 20 	or %d2,%d5,%d3
8000431e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004322:	74 22       	st.w [%a2],%d2
80004324:	1d ff 2b ff 	j 8000417a <_Core1_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004328:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000432a:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000432e:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004332:	0f 35 a0 20 	or %d2,%d5,%d3
80004336:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000433a:	74 22       	st.w [%a2],%d2
8000433c:	1d ff e7 fe 	j 8000410a <_Core1_start+0x68>

80004340 <_Core2_start>:
    password  = watchdog->CON0.B.PW;
80004340:	91 30 00 2f 	movh.a %a2,61443
80004344:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004348:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
8000434c:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[2]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(2);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(2));
80004350:	91 20 00 25 	movh.a %a2,20482
80004354:	8f f2 83 41 	xor %d4,%d2,63
80004358:	80 22       	mov.d %d2,%a2
8000435a:	1b 02 60 2b 	addi %d2,%d2,-18944
8000435e:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80004360:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART2_PSW_DEFAULT);    /* 0x00000980 */
80004364:	3b 00 98 20 	mov %d2,2432
80004368:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
8000436c:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART2_PCX_O_S_DEFAULT; /*0xfff00000; */
80004370:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80004374:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
80004378:	82 12       	mov %d2,1
8000437a:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000437e:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004382:	7b 30 00 3f 	movh %d3,61443
80004386:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000438a:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000438e:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004392:	60 22       	mov.a %a2,%d2
80004394:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004396:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004398:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000439c:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800043a0:	6f 13 13 81 	jnz.t %d3,1,800045c6 <_Core2_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800043a4:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800043a8:	54 22       	ld.w %d2,[%a2]
800043aa:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800043ae:	a6 32       	or %d2,%d3
800043b0:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800043b4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800043b6:	54 22       	ld.w %d2,[%a2]
800043b8:	6f 02 ff ff 	jnz.t %d2,0,800043b6 <_Core2_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
800043bc:	82 02       	mov %d2,0
800043be:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
800043c2:	54 22       	ld.w %d2,[%a2]
800043c4:	6f 12 09 00 	jz.t %d2,1,800043d6 <_Core2_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800043c8:	54 22       	ld.w %d2,[%a2]
800043ca:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800043ce:	a6 32       	or %d2,%d3
800043d0:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800043d4:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800043d6:	54 22       	ld.w %d2,[%a2]
800043d8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800043dc:	a6 32       	or %d2,%d3
800043de:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800043e2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800043e4:	54 22       	ld.w %d2,[%a2]
800043e6:	6f 02 ff 7f 	jz.t %d2,0,800043e4 <_Core2_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
800043ea:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
800043ee:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800043f2:	7b 30 00 3f 	movh %d3,61443
800043f6:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800043fa:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800043fe:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004402:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80004404:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004406:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004408:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000440c:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80004410:	6f 13 cf 80 	jnz.t %d3,1,800045ae <_Core2_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004414:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004418:	54 22       	ld.w %d2,[%a2]
8000441a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000441e:	a6 32       	or %d2,%d3
80004420:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004424:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004426:	54 22       	ld.w %d2,[%a2]
80004428:	6f 02 ff ff 	jnz.t %d2,0,80004426 <_Core2_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
8000442c:	82 02       	mov %d2,0
8000442e:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80004432:	54 22       	ld.w %d2,[%a2]
80004434:	6f 12 09 00 	jz.t %d2,1,80004446 <_Core2_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004438:	54 22       	ld.w %d2,[%a2]
8000443a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000443e:	a6 32       	or %d2,%d3
80004440:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004444:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004446:	54 22       	ld.w %d2,[%a2]
80004448:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000444c:	a6 32       	or %d2,%d3
8000444e:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004452:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004454:	54 22       	ld.w %d2,[%a2]
80004456:	6f 02 ff 7f 	jz.t %d2,0,80004454 <_Core2_start+0x114>
8000445a:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
8000445e:	91 30 00 2f 	movh.a %a2,61443
80004462:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004466:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000446a:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
8000446c:	6f 12 09 00 	jz.t %d2,1,8000447e <_Core2_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004470:	54 22       	ld.w %d2,[%a2]
80004472:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004476:	a6 42       	or %d2,%d4
80004478:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000447c:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000447e:	91 30 00 2f 	movh.a %a2,61443
80004482:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004486:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
8000448a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000448e:	a6 42       	or %d2,%d4
80004490:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004494:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004496:	54 22       	ld.w %d2,[%a2]
80004498:	6f 02 ff ff 	jnz.t %d2,0,80004496 <_Core2_start+0x156>

    /* Clear the ENDINIT bit in the Password register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(2));
8000449c:	91 f0 01 38 	movh.a %a3,32799
800044a0:	80 32       	mov.d %d2,%a3
800044a2:	1b 02 10 26 	addi %d2,%d2,24832
800044a6:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(2));
800044aa:	91 f0 01 38 	movh.a %a3,32799
800044ae:	80 32       	mov.d %d2,%a3
800044b0:	1b 02 00 24 	addi %d2,%d2,16384
800044b4:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(2));
800044b8:	91 20 00 35 	movh.a %a3,20482
800044bc:	80 32       	mov.d %d2,%a3
800044be:	1b 02 b0 2b 	addi %d2,%d2,-17664
800044c2:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
800044c6:	54 22       	ld.w %d2,[%a2]
800044c8:	6f 12 09 00 	jz.t %d2,1,800044da <_Core2_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800044cc:	54 22       	ld.w %d2,[%a2]
800044ce:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800044d2:	a6 42       	or %d2,%d4
800044d4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800044d8:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800044da:	91 30 00 2f 	movh.a %a2,61443
800044de:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800044e2:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800044e6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800044ea:	a6 42       	or %d2,%d4
800044ec:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800044f0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800044f2:	54 22       	ld.w %d2,[%a2]
800044f4:	6f 02 ff 7f 	jz.t %d2,0,800044f2 <_Core2_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(2));
800044f8:	91 10 00 26 	movh.a %a2,24577
800044fc:	80 22       	mov.d %d2,%a2
800044fe:	1b 02 00 28 	addi %d2,%d2,-32768
80004502:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(2));
80004504:	91 10 00 28 	movh.a %a2,32769
80004508:	80 22       	mov.d %d2,%a2
8000450a:	1b 02 00 28 	addi %d2,%d2,-32768
8000450e:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialized */
    __setareg(a8, __SDATA3(2));
80004510:	91 10 00 28 	movh.a %a2,32769
80004514:	80 22       	mov.d %d2,%a2
80004516:	1b 02 00 28 	addi %d2,%d2,-32768
8000451a:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(2));
8000451c:	91 10 00 29 	movh.a %a2,36865
80004520:	80 22       	mov.d %d2,%a2
80004522:	1b 02 00 28 	addi %d2,%d2,-32768
80004526:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80004528:	91 20 00 35 	movh.a %a3,20482
8000452c:	91 20 00 25 	movh.a %a2,20482
80004530:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <5001bc00 <__CSA2>>
80004534:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <5001dc00 <__CSA2_END>>
80004538:	01 32 20 20 	sub.a %a2,%a2,%a3
8000453c:	80 22       	mov.d %d2,%a2
8000453e:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80004542:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80004544:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80004548:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
8000454a:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000454c:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80004550:	df 06 27 00 	jeq %d6,0,8000459e <_Core2_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004554:	37 02 70 43 	extr.u %d4,%d2,6,16
80004558:	8f 42 1f 50 	sh %d5,%d2,-12
8000455c:	26 75       	and %d5,%d7
8000455e:	a6 54       	or %d4,%d5
        if (k == 0U)
80004560:	df 03 16 00 	jeq %d3,0,8000458c <_Core2_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80004564:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80004566:	5f 03 04 80 	jne %d3,%d0,8000456e <_Core2_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8000456a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8000456e:	c2 13       	add %d3,1
80004570:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80004572:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80004576:	5f 36 0f 00 	jeq %d6,%d3,80004594 <_Core2_start+0x254>
        nxtCsa += 16U;           /* next CSA */
8000457a:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000457c:	37 02 70 43 	extr.u %d4,%d2,6,16
80004580:	8f 42 1f 50 	sh %d5,%d2,-12
80004584:	26 75       	and %d5,%d7
80004586:	a6 54       	or %d4,%d5
        if (k == 0U)
80004588:	df 03 ee ff 	jne %d3,0,80004564 <_Core2_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
8000458c:	cd 84 e3 0f 	mtcr $fcx,%d4
80004590:	1d ff eb ff 	j 80004566 <_Core2_start+0x226>
80004594:	1b f6 ff 2f 	addi %d2,%d6,-1
80004598:	06 62       	sh %d2,6
8000459a:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
8000459e:	82 02       	mov %d2,0
800045a0:	74 22       	st.w [%a2],%d2
    /* Setup the context save area linked list. */

    IfxCpu_initCSA((uint32 *)__CSA(2), (uint32 *)__CSA_END(2));

    /*Call main function of Cpu0 */
    __non_return_call(core2_main);
800045a2:	91 00 00 28 	movh.a %a2,32768
800045a6:	d9 22 94 94 	lea %a2,[%a2]19028 <80004a54 <core2_main>>
800045aa:	dc 02       	ji %a2
}
800045ac:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800045ae:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800045b0:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800045b4:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800045b8:	0f 35 a0 20 	or %d2,%d5,%d3
800045bc:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800045c0:	74 22       	st.w [%a2],%d2
800045c2:	1d ff 2b ff 	j 80004418 <_Core2_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800045c6:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800045c8:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800045cc:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800045d0:	0f 35 a0 20 	or %d2,%d5,%d3
800045d4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800045d8:	74 22       	st.w [%a2],%d2
800045da:	1d ff e7 fe 	j 800043a8 <_Core2_start+0x68>

800045de <IfxStdIf_PwmHl_initConfig>:
 */

#include "IfxStdIf_PwmHl.h"

void IfxStdIf_PwmHl_initConfig(IfxStdIf_PwmHl_Config *config)
{
800045de:	40 ae       	mov.aa %a14,%sp
    config->deadtime         = 0;
800045e0:	82 02       	mov %d2,0
800045e2:	74 42       	st.w [%a4],%d2
    config->minPulse         = 0;
800045e4:	59 42 04 00 	st.w [%a4]4,%d2
    config->channelCount     = 0;
800045e8:	82 02       	mov %d2,0
800045ea:	e9 42 08 00 	st.b [%a4]8,%d2
    config->emergencyEnabled = FALSE;
800045ee:	e9 42 09 00 	st.b [%a4]9,%d2
    config->outputMode       = IfxPort_OutputMode_pushPull;
800045f2:	3b 00 08 20 	mov %d2,128
800045f6:	59 42 0c 00 	st.w [%a4]12,%d2
    config->outputDriver     = IfxPort_PadDriver_cmosAutomotiveSpeed1;
800045fa:	82 02       	mov %d2,0
800045fc:	59 42 10 00 	st.w [%a4]16,%d2
    config->ccxActiveState   = Ifx_ActiveState_high;
80004600:	82 12       	mov %d2,1
80004602:	59 42 1c 00 	st.w [%a4]28,%d2
    config->coutxActiveState = Ifx_ActiveState_high;
80004606:	59 42 20 00 	st.w [%a4]32,%d2
}
8000460a:	00 90       	ret 

8000460c <IfxStdIf_Timer_initConfig>:
 */

#include "IfxStdIf_Timer.h"

void IfxStdIf_Timer_initConfig(IfxStdIf_Timer_Config *config)
{
8000460c:	40 ae       	mov.aa %a14,%sp
    config->frequency                  = 1000;
8000460e:	7b a0 47 24 	movh %d2,17530
80004612:	74 42       	st.w [%a4],%d2
    config->isrPriority                = 0;
80004614:	82 02       	mov %d2,0
80004616:	f9 42 04 00 	st.h [%a4]4,%d2
    config->isrProvider                = IfxSrc_Tos_cpu0;
8000461a:	82 03       	mov %d3,0
8000461c:	59 43 08 00 	st.w [%a4]8,%d3
    config->minResolution              = 0;
80004620:	82 04       	mov %d4,0
80004622:	59 44 0c 00 	st.w [%a4]12,%d4
    config->trigger.outputMode         = IfxPort_OutputMode_pushPull;
80004626:	3b 00 08 50 	mov %d5,128
8000462a:	59 45 20 00 	st.w [%a4]32,%d5
    config->trigger.outputDriver       = IfxPort_PadDriver_cmosAutomotiveSpeed1;
8000462e:	59 43 24 00 	st.w [%a4]36,%d3
    config->trigger.risingEdgeAtPeriod = FALSE;
80004632:	e9 42 28 00 	st.b [%a4]40,%d2
    config->trigger.outputEnabled      = FALSE;
80004636:	e9 42 29 00 	st.b [%a4]41,%d2
    config->trigger.enabled            = FALSE;
8000463a:	e9 42 10 00 	st.b [%a4]16,%d2
    config->trigger.triggerPoint       = 0;
8000463e:	59 43 14 00 	st.w [%a4]20,%d3
    config->trigger.isrPriority        = 0;
80004642:	f9 43 18 00 	st.h [%a4]24,%d3
    config->trigger.isrProvider        = IfxSrc_Tos_cpu0;
80004646:	59 43 1c 00 	st.w [%a4]28,%d3
    config->countDir                   = IfxStdIf_Timer_CountDir_up;
8000464a:	59 43 2c 00 	st.w [%a4]44,%d3
    config->startOffset 					   = 0.0;
8000464e:	59 44 30 00 	st.w [%a4]48,%d4
}
80004652:	00 90       	ret 

80004654 <Ifx_C_Init>:
 *
 * Parameters: Nil
 * Return: Nil
 */
void Ifx_C_Init(void)
{
80004654:	40 ae       	mov.aa %a14,%sp
80004656:	20 08       	sub.a %sp,8
    IfxStart_CTablePtr pBlockDest, pBlockSrc;
    uint32             uiLength, uiCnt;
    uint32            *pTable;
    /* clear table */
    pTable = (uint32 *)&__clear_table;
80004658:	91 00 00 28 	movh.a %a2,32768
8000465c:	d9 22 4c 20 	lea %a2,[%a2]1164 <8000048c <__clear_table>>

    while (pTable)
80004660:	1d 00 32 00 	j 800046c4 <Ifx_C_Init+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
80004664:	91 00 00 28 	movh.a %a2,32768
80004668:	d9 22 74 30 	lea %a2,[%a2]1268 <800004f4 <__copy_table>>
8000466c:	1d 00 7c 00 	j 80004764 <Ifx_C_Init+0x110>
            *pBlockDest.ullPtr++ = 0;
80004670:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80004674:	80 22       	mov.d %d2,%a2
80004676:	1b 82 00 20 	addi %d2,%d2,8
8000467a:	59 e2 fc ff 	st.w [%a14]-4,%d2
8000467e:	d2 02       	mov %e2,0
80004680:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80004684:	02 52       	mov %d2,%d5
80004686:	1b f2 ff 5f 	addi %d5,%d2,-1
8000468a:	df 02 f3 ff 	jne %d2,0,80004670 <Ifx_C_Init+0x1c>
        if (uiLength & 0x4)
8000468e:	6f 24 0a 00 	jz.t %d4,2,800046a2 <Ifx_C_Init+0x4e>
            *pBlockDest.uiPtr++ = 0;
80004692:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80004696:	80 22       	mov.d %d2,%a2
80004698:	c2 42       	add %d2,4
8000469a:	59 e2 fc ff 	st.w [%a14]-4,%d2
8000469e:	82 02       	mov %d2,0
800046a0:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
800046a2:	6f 14 0a 00 	jz.t %d4,1,800046b6 <Ifx_C_Init+0x62>
            *pBlockDest.usPtr++ = 0;
800046a6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800046aa:	80 22       	mov.d %d2,%a2
800046ac:	c2 22       	add %d2,2
800046ae:	59 e2 fc ff 	st.w [%a14]-4,%d2
800046b2:	82 02       	mov %d2,0
800046b4:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
800046b6:	6f 04 06 00 	jz.t %d4,0,800046c2 <Ifx_C_Init+0x6e>
            *pBlockDest.ucPtr = 0;
800046ba:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800046be:	82 02       	mov %d2,0
800046c0:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
800046c2:	40 32       	mov.aa %a2,%a3
    while (pTable)
800046c4:	bd 02 d0 7f 	jz.a %a2,80004664 <Ifx_C_Init+0x10>
        pBlockDest.uiPtr = (uint32 *)*pTable++;
800046c8:	d9 23 08 00 	lea %a3,[%a2]8
800046cc:	54 22       	ld.w %d2,[%a2]
800046ce:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
800046d2:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
800046d6:	df f4 c7 7f 	jeq %d4,-1,80004664 <Ifx_C_Init+0x10>
        uiCnt = uiLength / 8;
800046da:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
800046de:	1d ff d4 ff 	j 80004686 <Ifx_C_Init+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
800046e2:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
800046e6:	80 22       	mov.d %d2,%a2
800046e8:	1b 82 00 20 	addi %d2,%d2,8
800046ec:	59 e2 f8 ff 	st.w [%a14]-8,%d2
800046f0:	99 e3 fc ff 	ld.a %a3,[%a14]-4
800046f4:	80 32       	mov.d %d2,%a3
800046f6:	1b 82 00 20 	addi %d2,%d2,8
800046fa:	59 e2 fc ff 	st.w [%a14]-4,%d2
800046fe:	09 26 40 09 	ld.d %e6,[%a2]
80004702:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80004706:	02 42       	mov %d2,%d4
80004708:	1b f2 ff 4f 	addi %d4,%d2,-1
8000470c:	df 02 eb ff 	jne %d2,0,800046e2 <Ifx_C_Init+0x8e>
        }

        if (uiLength & 0x4)
80004710:	6f 23 10 00 	jz.t %d3,2,80004730 <Ifx_C_Init+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80004714:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80004718:	80 22       	mov.d %d2,%a2
8000471a:	c2 42       	add %d2,4
8000471c:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80004720:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80004724:	80 32       	mov.d %d2,%a3
80004726:	c2 42       	add %d2,4
80004728:	59 e2 fc ff 	st.w [%a14]-4,%d2
8000472c:	54 22       	ld.w %d2,[%a2]
8000472e:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
80004730:	6f 13 11 00 	jz.t %d3,1,80004752 <Ifx_C_Init+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80004734:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80004738:	80 32       	mov.d %d2,%a3
8000473a:	c2 22       	add %d2,2
8000473c:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80004740:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80004744:	80 22       	mov.d %d2,%a2
80004746:	c2 22       	add %d2,2
80004748:	59 e2 fc ff 	st.w [%a14]-4,%d2
8000474c:	b9 32 00 00 	ld.hu %d2,[%a3]0
80004750:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80004752:	6f 03 08 00 	jz.t %d3,0,80004762 <Ifx_C_Init+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80004756:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
8000475a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000475e:	14 32       	ld.bu %d2,[%a3]
80004760:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80004762:	60 52       	mov.a %a2,%d5
    while (pTable)
80004764:	bd 02 14 00 	jz.a %a2,8000478c <Ifx_C_Init+0x138>
        pBlockSrc.uiPtr  = (uint32 *)*pTable++;
80004768:	54 22       	ld.w %d2,[%a2]
8000476a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        pBlockDest.uiPtr = (uint32 *)*pTable++;
8000476e:	19 22 04 00 	ld.w %d2,[%a2]4
80004772:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80004776:	80 22       	mov.d %d2,%a2
80004778:	1b c2 00 50 	addi %d5,%d2,12
8000477c:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
80004780:	df f3 06 00 	jeq %d3,-1,8000478c <Ifx_C_Init+0x138>
        uiCnt = uiLength / 8;
80004784:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80004788:	1d ff c0 ff 	j 80004708 <Ifx_C_Init+0xb4>
        }
    }
}
8000478c:	00 90       	ret 

8000478e <init_GPIO>:


#include "GPIO.h"  //1. GPIO.h 추가

void init_GPIO(void)
{
8000478e:	40 ae       	mov.aa %a14,%sp
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80004790:	3b 00 08 50 	mov %d5,128
80004794:	82 24       	mov %d4,2
80004796:	91 40 00 4f 	movh.a %a4,61444
8000479a:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
8000479e:	6d ff f5 ec 	call 80002188 <IfxPort_setPinMode>
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
800047a2:	3b 80 00 50 	mov %d5,8
800047a6:	82 04       	mov %d4,0
800047a8:	91 40 00 4f 	movh.a %a4,61444
800047ac:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
800047b0:	6d ff ec ec 	call 80002188 <IfxPort_setPinMode>
800047b4:	3b 80 00 50 	mov %d5,8
800047b8:	82 14       	mov %d4,1
800047ba:	91 40 00 4f 	movh.a %a4,61444
800047be:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
800047c2:	6d ff e3 ec 	call 80002188 <IfxPort_setPinMode>

   /*---------in--------*/
   IfxPort_setPinModeInput(PORT_020,IfxPort_InputMode_pullDown); // Encoder A // @suppress("Symbol is not resolved")
   IfxPort_setPinModeInput(PORT_021,IfxPort_InputMode_pullDown); // Encoder B // @suppress("Symbol is not resolved")

}
800047c6:	00 90       	ret 

800047c8 <Encoder>:

#include "Encoder.h"
#include "GPIO.h"

void Encoder(void)
{
800047c8:	40 ae       	mov.aa %a14,%sp
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
800047ca:	91 40 00 2f 	movh.a %a2,61444
800047ce:	d9 22 00 8a 	lea %a2,[%a2]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
800047d2:	d9 23 24 00 	lea %a3,[%a2]36 <f0040024 <_SMALL_DATA4_+0x60038024>>
800047d6:	19 28 24 00 	ld.w %d8,[%a2]36 <f0040024 <_SMALL_DATA4_+0x60038024>>
800047da:	8f 18 00 51 	and %d5,%d8,1
800047de:	54 33       	ld.w %d3,[%a3]
800047e0:	37 03 e1 40 	extr.u %d4,%d3,1,1

    uint8 state = 0;

    /* A,B 상을 통해 현재 상태 계산*/

    if (A==0 && B ==0){state=0;}
800047e4:	87 83 21 80 	or.t %d8,%d3,1,%d8,0
800047e8:	df 08 14 00 	jeq %d8,0,80004810 <Encoder+0x48>
    else if(A==1 && B==0){state=1;}
800047ec:	02 53       	mov %d3,%d5
800047ee:	8f 14 80 21 	xor %d2,%d4,1
800047f2:	26 52       	and %d2,%d5
800047f4:	df 02 0d 80 	jne %d2,0,8000480e <Encoder+0x46>
    else if(A==1 && B==1){state=2;}
800047f8:	26 43       	and %d3,%d4
800047fa:	df 03 54 80 	jne %d3,0,800048a2 <Encoder+0xda>
    else if(A==0&&B==1){state=3;}
800047fe:	8f 15 80 21 	xor %d2,%d5,1
80004802:	26 42       	and %d2,%d4
80004804:	df 02 52 80 	jne %d2,0,800048a8 <Encoder+0xe0>
    uint8 state = 0;
80004808:	82 08       	mov %d8,0
8000480a:	1d 00 03 00 	j 80004810 <Encoder+0x48>
    else if(A==1 && B==0){state=1;}
8000480e:	82 18       	mov %d8,1


    /*현재와 이전 상태 차이를 통해 ㅓㄹ스 카운트 및 방향 계산*/

    if(state-state_old==1 || state-state_old==-3){encoderCNT++; encoderDir = 1;}
80004810:	91 00 00 26 	movh.a %a2,24576
80004814:	39 22 30 30 	ld.bu %d2,[%a2]240 <600000f0 <state_old>>
80004818:	0b 28 80 20 	sub %d2,%d8,%d2
8000481c:	8b 12 00 32 	eq %d3,%d2,1
80004820:	8b d2 ff 34 	or.eq %d3,%d2,-3
80004824:	df 03 45 00 	jeq %d3,0,800048ae <Encoder+0xe6>
80004828:	91 00 00 26 	movh.a %a2,24576
8000482c:	d9 23 2c 30 	lea %a3,[%a2]236 <600000ec <encoderCNT>>
80004830:	54 32       	ld.w %d2,[%a3]
80004832:	c2 12       	add %d2,1
80004834:	59 22 2c 30 	st.w [%a2]236 <600000ec <encoderCNT>>,%d2
80004838:	91 00 00 26 	movh.a %a2,24576
8000483c:	82 12       	mov %d2,1
8000483e:	59 22 28 30 	st.w [%a2]232 <600000e8 <encoderDir>>,%d2
    else if(state-state_old==-1 || state-state_old==3){encoderCNT--; encoderDir=-1;}

    theta = encoderCNT*0.01*0.25*360; /* 한바퀴 100펄스(0.01), 4채배(0.25)*/
80004842:	91 00 00 26 	movh.a %a2,24576
80004846:	19 24 2c 30 	ld.w %d4,[%a2]236 <600000ec <encoderCNT>>
8000484a:	6d 00 dd 02 	call 80004e04 <__floatsidf>
8000484e:	7b e0 7a 64 	movh %d6,18350
80004852:	1b b6 47 61 	addi %d6,%d6,5243
80004856:	7b 40 f8 73 	movh %d7,16260
8000485a:	1b 17 ae 77 	addi %d7,%d7,31457
8000485e:	0b 23 10 48 	mov %e4,%d3,%d2
80004862:	6d 00 17 01 	call 80004a90 <__muldf3>
80004866:	82 06       	mov %d6,0
80004868:	7b 00 fd 73 	movh %d7,16336
8000486c:	0b 23 10 48 	mov %e4,%d3,%d2
80004870:	6d 00 10 01 	call 80004a90 <__muldf3>
80004874:	82 06       	mov %d6,0
80004876:	7b 70 07 74 	movh %d7,16503
8000487a:	1b 07 00 78 	addi %d7,%d7,-32768
8000487e:	0b 23 10 48 	mov %e4,%d3,%d2
80004882:	6d 00 07 01 	call 80004a90 <__muldf3>
80004886:	0b 23 10 48 	mov %e4,%d3,%d2
8000488a:	6d 00 f8 02 	call 80004e7a <__truncdfsf2>
8000488e:	91 00 00 26 	movh.a %a2,24576
80004892:	d9 22 24 30 	lea %a2,[%a2]228 <600000e4 <theta>>
80004896:	74 22       	st.w [%a2],%d2

    state_old = state; //펄스 카운트 -> 각도 변환 * 각 모터에 맞게 값 변경 필요
80004898:	91 00 00 26 	movh.a %a2,24576
8000489c:	e9 28 30 30 	st.b [%a2]240 <600000f0 <state_old>>,%d8

}
800048a0:	00 90       	ret 
    else if(A==1 && B==1){state=2;}
800048a2:	82 28       	mov %d8,2
800048a4:	1d ff b6 ff 	j 80004810 <Encoder+0x48>
    else if(A==0&&B==1){state=3;}
800048a8:	82 38       	mov %d8,3
800048aa:	1d ff b3 ff 	j 80004810 <Encoder+0x48>
    else if(state-state_old==-1 || state-state_old==3){encoderCNT--; encoderDir=-1;}
800048ae:	8b f2 1f 32 	eq %d3,%d2,-1
800048b2:	8b 32 e0 34 	or.eq %d3,%d2,3
800048b6:	df 03 c6 7f 	jeq %d3,0,80004842 <Encoder+0x7a>
800048ba:	91 00 00 26 	movh.a %a2,24576
800048be:	d9 23 2c 30 	lea %a3,[%a2]236 <600000ec <encoderCNT>>
800048c2:	54 32       	ld.w %d2,[%a3]
800048c4:	c2 f2       	add %d2,-1
800048c6:	59 22 2c 30 	st.w [%a2]236 <600000ec <encoderCNT>>,%d2
800048ca:	91 00 00 26 	movh.a %a2,24576
800048ce:	82 f2       	mov %d2,-1
800048d0:	59 22 28 30 	st.w [%a2]232 <600000e8 <encoderDir>>,%d2
800048d4:	1d ff b7 ff 	j 80004842 <Encoder+0x7a>

800048d8 <init_ADC_Group>:

/*****1. init_ADC_Group ****/


void init_ADC_Group(void)
{
800048d8:	40 ae       	mov.aa %a14,%sp
800048da:	20 a8       	sub.a %sp,168
    IfxVadc_Adc_Config     adcConf; /* Define a configuration structure for the VADC module */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC); /* adcConf 값을 디폴트 값(MODULE_VADC)으로 초기화 */
800048dc:	91 20 00 5f 	movh.a %a5,61442
800048e0:	d9 e4 d8 ff 	lea %a4,[%a14]-40
800048e4:	6d ff 5f e6 	call 800015a2 <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&Vadc, &adcConf);    /* Vadc를 adcConf 값으로 초기화 */
800048e8:	91 00 00 c6 	movh.a %a12,24576
800048ec:	d9 cc 30 50 	lea %a12,[%a12]368 <60000170 <Vadc>>
800048f0:	d9 e5 d8 ff 	lea %a5,[%a14]-40 <60000170 <Vadc>>
800048f4:	40 c4       	mov.aa %a4,%a12
800048f6:	6d ff cc e5 	call 8000148e <IfxVadc_Adc_initModule>

    IfxVadc_Adc_GroupConfig  adcGroupConf;   /*Define a configuration structure for the VADC group */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &Vadc); /* adc 그룹 구조체 초기화 및 Vadc 값 반영 */
800048fa:	40 c5       	mov.aa %a5,%a12
800048fc:	d9 e4 dc df 	lea %a4,[%a14]-164
80004900:	6d ff ac e5 	call 80001458 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;     /* Select the group */
80004904:	82 42       	mov %d2,4
80004906:	59 e2 e0 df 	st.w [%a14]-160,%d2
    adcGroupConf.master = adcGroupConf.groupId;    /* Select the master group */
8000490a:	59 e2 e4 df 	st.w [%a14]-156,%d2

    adcGroupConf.arbiter.requestSlotScanEnabled = TRUE;   /* Enable scan source */
8000490e:	82 12       	mov %d2,1
80004910:	e9 e2 d5 ff 	st.b [%a14]-43,%d2
    adcGroupConf.scanRequest.autoscanEnabled = TRUE; /*Enable auto scan mode */
80004914:	e9 e2 f8 df 	st.b [%a14]-136,%d2

    adcGroupConf.scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always; /* 특정  트리거 조건 없이 항상 변환 수행 */
80004918:	82 12       	mov %d2,1
8000491a:	59 e2 c4 ef 	st.w [%a14]-124,%d2

    IfxVadc_Adc_initGroup(&adcGroup4, &adcGroupConf); /* adc 그룹 설정 값 반영 */
8000491e:	d9 e5 dc df 	lea %a5,[%a14]-164
80004922:	91 00 00 46 	movh.a %a4,24576
80004926:	d9 44 24 50 	lea %a4,[%a4]356 <60000164 <adcGroup4>>
8000492a:	6d ff 55 e3 	call 80000fd4 <IfxVadc_Adc_initGroup>
}
8000492e:	00 90       	ret 

80004930 <init_ADC_G4_SingleCh>:


/*****2. init_ADC_G4_SingleCh ****/
void init_ADC_G4_SingleCh(uint8 Channel)
{
80004930:	40 ae       	mov.aa %a14,%sp
80004932:	20 40       	sub.a %sp,64
80004934:	8f f4 0f 81 	and %d8,%d4,255
    IfxVadc_Adc_ChannelConfig adcChannelConfigInfo;
    uint32 ulTemp = ((uint32)1u <<Channel);
80004938:	82 19       	mov %d9,1
8000493a:	0f 89 00 90 	sh %d9,%d9,%d8

    IfxVadc_Adc_initChannelConfig(&adcChannelConfigInfo, &adcGroup4); /*Fill it with default values */
8000493e:	91 00 00 c6 	movh.a %a12,24576
80004942:	d9 cc 24 50 	lea %a12,[%a12]356 <60000164 <adcGroup4>>
80004946:	40 c5       	mov.aa %a5,%a12
80004948:	d9 e4 c4 ff 	lea %a4,[%a14]-60
8000494c:	6d ff 39 e3 	call 80000fbe <IfxVadc_Adc_initChannelConfig>

    adcChannelConfigInfo.channelId = (IfxVadc_ChannelId)Channel; /*Select the Channel ID */
80004950:	59 e8 dc ff 	st.w [%a14]-36,%d8
    adcChannelConfigInfo.resultRegister = (IfxVadc_ChannelResult)(Channel); /* Use dedicated result register */
80004954:	59 e8 e8 ff 	st.w [%a14]-24,%d8

    /* Initialize the channel */
    IfxVadc_Adc_initChannel(&adcG4Channel[Channel], &adcChannelConfigInfo); /* 채널 초기화 */
80004958:	d9 e5 c4 ff 	lea %a5,[%a14]-60
8000495c:	91 00 00 46 	movh.a %a4,24576
80004960:	d9 44 04 40 	lea %a4,[%a4]260 <60000104 <adcG4Channel>>
80004964:	01 48 03 46 	addsc.a %a4,%a4,%d8,3
80004968:	01 48 02 46 	addsc.a %a4,%a4,%d8,2
8000496c:	6d ff 17 e2 	call 80000d9a <IfxVadc_Adc_initChannel>
}


IFX_INLINE void IfxVadc_Adc_setScan(IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setScan(group->group, channels, mask);
80004970:	02 95       	mov %d5,%d9
80004972:	02 94       	mov %d4,%d9
80004974:	99 c4 04 00 	ld.a %a4,[%a12]4 <60000004 <LCF_DSPR1_START+0x4>>
80004978:	6d ff dd e1 	call 80000d32 <IfxVadc_setScan>

    /*Add the channel to the scan sequence */
    IfxVadc_Adc_setScan(&adcGroup4, ulTemp, ulTemp);  /* the background scan sequence. */

}
8000497c:	00 90       	ret 

8000497e <init_ADC_G4_Channel>:

/*****3. init_ADC_G4_Channel ****/
void init_ADC_G4_Channel(void)
{
8000497e:	40 ae       	mov.aa %a14,%sp
    init_ADC_G4_SingleCh(ADC_G4_CH0); /* 각 채널 초기화 */
80004980:	82 04       	mov %d4,0
80004982:	6d ff d7 ff 	call 80004930 <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH1);
80004986:	82 14       	mov %d4,1
80004988:	6d ff d4 ff 	call 80004930 <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH2);
8000498c:	82 24       	mov %d4,2
8000498e:	6d ff d1 ff 	call 80004930 <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH3);
80004992:	82 34       	mov %d4,3
80004994:	6d ff ce ff 	call 80004930 <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH4);
80004998:	82 44       	mov %d4,4
8000499a:	6d ff cb ff 	call 80004930 <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH5);
8000499e:	82 54       	mov %d4,5
800049a0:	6d ff c8 ff 	call 80004930 <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH6);
800049a4:	82 64       	mov %d4,6
800049a6:	6d ff c5 ff 	call 80004930 <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH7);
800049aa:	82 74       	mov %d4,7
800049ac:	6d ff c2 ff 	call 80004930 <init_ADC_G4_SingleCh>
}


IFX_INLINE void IfxVadc_Adc_startScan(IfxVadc_Adc_Group *group)
{
    IfxVadc_startScan(group->group);
800049b0:	91 00 00 26 	movh.a %a2,24576
800049b4:	d9 22 24 50 	lea %a2,[%a2]356 <60000164 <adcGroup4>>
800049b8:	b0 42       	add.a %a2,4
800049ba:	d4 22       	ld.a %a2,[%a2]
    group->ASMR.B.LDEV = 1;     /* set Load event. Channels stored in ASSEL will be copied into pending register and conversion will start */
800049bc:	d9 23 24 20 	lea %a3,[%a2]164
800049c0:	19 22 24 20 	ld.w %d2,[%a2]164
800049c4:	b7 12 81 24 	insert %d2,%d2,1,9,1
800049c8:	74 32       	st.w [%a3],%d2

    IfxVadc_Adc_startScan(&adcGroup4);
}
800049ca:	00 90       	ret 

800049cc <core0_main>:

float a = 0;


void core0_main(void)
{
800049cc:	40 ae       	mov.aa %a14,%sp
    __enable();
800049ce:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
800049d2:	6d ff 71 eb 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
800049d6:	02 24       	mov %d4,%d2
800049d8:	6d ff 52 ea 	call 80001e7c <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
800049dc:	6d ff 7e eb 	call 800020d8 <IfxScuWdt_getSafetyWatchdogPassword>
800049e0:	02 24       	mov %d4,%d2
800049e2:	6d ff 8c ea 	call 80001efa <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
800049e6:	91 00 00 c6 	movh.a %a12,24576
800049ea:	d9 cc 3c 00 	lea %a12,[%a12]60 <6000003c <g_cpuSyncEvent>>
800049ee:	40 c4       	mov.aa %a4,%a12
800049f0:	6d ff ce f9 	call 80003d8c <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
800049f4:	82 14       	mov %d4,1
800049f6:	40 c4       	mov.aa %a4,%a12
800049f8:	6d ff 8a f9 	call 80003d0c <IfxCpu_waitEvent>

    init_GPIO();
800049fc:	6d ff c9 fe 	call 8000478e <init_GPIO>
    init_STM();
80004a00:	6d ff 8a de 	call 80000714 <init_STM>
    init_ADC_Group();
80004a04:	6d ff 6a ff 	call 800048d8 <init_ADC_Group>
    init_ADC_G4_Channel();
80004a08:	6d ff bb ff 	call 8000497e <init_ADC_G4_Channel>
    init_GTM();
80004a0c:	6d ff cc df 	call 800009a4 <init_GTM>

    a =1;
80004a10:	91 00 00 26 	movh.a %a2,24576
80004a14:	7b 00 f8 23 	movh %d2,16256
80004a18:	d9 22 38 00 	lea %a2,[%a2]56 <60000038 <a>>
80004a1c:	74 22       	st.w [%a2],%d2

    while(1)
    {
        AppScheduling();
80004a1e:	6d ff 54 de 	call 800006c6 <AppScheduling>
    while(1)
80004a22:	1d ff fe ff 	j 80004a1e <core0_main+0x52>

80004a26 <core1_main>:
#include "Header_USER.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
80004a26:	40 ae       	mov.aa %a14,%sp
80004a28:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80004a2c:	6d ff 44 eb 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
80004a30:	02 24       	mov %d4,%d2
80004a32:	6d ff 25 ea 	call 80001e7c <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80004a36:	91 00 00 c6 	movh.a %a12,24576
80004a3a:	d9 cc 3c 00 	lea %a12,[%a12]60 <6000003c <g_cpuSyncEvent>>
80004a3e:	40 c4       	mov.aa %a4,%a12
80004a40:	6d ff a6 f9 	call 80003d8c <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80004a44:	82 14       	mov %d4,1
80004a46:	40 c4       	mov.aa %a4,%a12
80004a48:	6d ff 62 f9 	call 80003d0c <IfxCpu_waitEvent>
    
    while(1)
    {
        Encoder();
80004a4c:	6d ff be fe 	call 800047c8 <Encoder>
    while(1)
80004a50:	1d ff fe ff 	j 80004a4c <core1_main+0x26>

80004a54 <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
80004a54:	40 ae       	mov.aa %a14,%sp
80004a56:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80004a5a:	6d ff 2d eb 	call 800020b4 <IfxScuWdt_getCpuWatchdogPassword>
80004a5e:	02 24       	mov %d4,%d2
80004a60:	6d ff 0e ea 	call 80001e7c <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80004a64:	91 00 00 c6 	movh.a %a12,24576
80004a68:	d9 cc 3c 00 	lea %a12,[%a12]60 <6000003c <g_cpuSyncEvent>>
80004a6c:	40 c4       	mov.aa %a4,%a12
80004a6e:	6d ff 8f f9 	call 80003d8c <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80004a72:	82 14       	mov %d4,1
80004a74:	40 c4       	mov.aa %a4,%a12
80004a76:	6d ff 4b f9 	call 80003d0c <IfxCpu_waitEvent>
    
    while(1)
80004a7a:	1d 00 00 00 	j 80004a7a <core2_main+0x26>

80004a7e <memset>:
80004a7e:	40 42       	mov.aa %a2,%a4
80004a80:	df 05 07 00 	jeq %d5,0,80004a8e <memset+0x10>
80004a84:	60 53       	mov.a %a3,%d5
80004a86:	b0 f3       	add.a %a3,-1
80004a88:	24 44       	st.b [%a4+],%d4
80004a8a:	fd 30 ff 7f 	loop %a3,80004a88 <memset+0xa>
80004a8e:	00 90       	ret 

80004a90 <__muldf3>:
80004a90:	20 50       	sub.a %sp,80
80004a92:	d9 a5 14 00 	lea %a5,[%sp]20
80004a96:	d9 a4 04 00 	lea %a4,[%sp]4
80004a9a:	89 a4 44 09 	st.d [%sp]4,%e4
80004a9e:	89 a6 4c 09 	st.d [%sp]12,%e6
80004aa2:	6d 00 e6 02 	call 8000506e <__unpack_d>
80004aa6:	d9 a5 28 00 	lea %a5,[%sp]40
80004aaa:	d9 a4 0c 00 	lea %a4,[%sp]12
80004aae:	6d 00 e0 02 	call 8000506e <__unpack_d>
80004ab2:	19 a2 14 00 	ld.w %d2,[%sp]20
80004ab6:	ff 22 0f 80 	jge.u %d2,2,80004ad4 <__muldf3+0x44>
80004aba:	19 a3 18 00 	ld.w %d3,[%sp]24
80004abe:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004ac2:	d9 a4 14 00 	lea %a4,[%sp]20
80004ac6:	0b 23 10 21 	ne %d2,%d3,%d2
80004aca:	59 a2 18 00 	st.w [%sp]24,%d2
80004ace:	6d 00 01 02 	call 80004ed0 <__pack_d>
80004ad2:	00 90       	ret 
80004ad4:	19 a3 28 00 	ld.w %d3,[%sp]40
80004ad8:	bf 23 14 80 	jlt.u %d3,2,80004b00 <__muldf3+0x70>
80004adc:	df 42 0a 80 	jne %d2,4,80004af0 <__muldf3+0x60>
80004ae0:	91 00 00 48 	movh.a %a4,32768
80004ae4:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80004ae8:	df 23 f3 7f 	jeq %d3,2,80004ace <__muldf3+0x3e>
80004aec:	1d ff e7 ff 	j 80004aba <__muldf3+0x2a>
80004af0:	df 43 15 80 	jne %d3,4,80004b1a <__muldf3+0x8a>
80004af4:	91 00 00 48 	movh.a %a4,32768
80004af8:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80004afc:	df 22 e9 7f 	jeq %d2,2,80004ace <__muldf3+0x3e>
80004b00:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004b04:	19 a3 18 00 	ld.w %d3,[%sp]24
80004b08:	d9 a4 28 00 	lea %a4,[%sp]40
80004b0c:	0b 23 10 21 	ne %d2,%d3,%d2
80004b10:	59 a2 2c 00 	st.w [%sp]44,%d2
80004b14:	6d 00 de 01 	call 80004ed0 <__pack_d>
80004b18:	00 90       	ret 
80004b1a:	19 a5 2c 00 	ld.w %d5,[%sp]44
80004b1e:	19 a4 18 00 	ld.w %d4,[%sp]24
80004b22:	0b 45 10 a1 	ne %d10,%d5,%d4
80004b26:	df 22 aa 00 	jeq %d2,2,80004c7a <__muldf3+0x1ea>
80004b2a:	df 23 ae 00 	jeq %d3,2,80004c86 <__muldf3+0x1f6>
80004b2e:	19 a6 34 00 	ld.w %d6,[%sp]52
80004b32:	19 a4 20 00 	ld.w %d4,[%sp]32
80004b36:	82 03       	mov %d3,0
80004b38:	73 46 68 00 	mul.u %e0,%d6,%d4
80004b3c:	19 a2 38 00 	ld.w %d2,[%sp]56
80004b40:	82 0b       	mov %d11,0
80004b42:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
80004b46:	02 48       	mov %d8,%d4
80004b48:	19 a7 24 00 	ld.w %d7,[%sp]36
80004b4c:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
80004b50:	73 42 68 40 	mul.u %e4,%d2,%d4
80004b54:	82 0d       	mov %d13,0
80004b56:	82 0c       	mov %d12,0
80004b58:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
80004b5c:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
80004b60:	73 27 68 80 	mul.u %e8,%d7,%d2
80004b64:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
80004b68:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
80004b6c:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
80004b70:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
80004b74:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
80004b78:	0b 35 00 61 	eq %d6,%d5,%d3
80004b7c:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80004b80:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80004b84:	02 67       	mov %d7,%d6
80004b86:	82 06       	mov %d6,0
80004b88:	0b 06 40 60 	addx %d6,%d6,%d0
80004b8c:	0b 12 50 50 	addc %d5,%d2,%d1
80004b90:	0b 51 00 41 	eq %d4,%d1,%d5
80004b94:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
80004b98:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
80004b9c:	df 04 06 80 	jne %d4,0,80004ba8 <__muldf3+0x118>
80004ba0:	8b 1b 80 b0 	addx %d11,%d11,1
80004ba4:	8b 07 a0 70 	addc %d7,%d7,0
80004ba8:	82 04       	mov %d4,0
80004baa:	0b 83 40 30 	addx %d3,%d3,%d8
80004bae:	0b 94 50 20 	addc %d2,%d4,%d9
80004bb2:	0b b3 40 30 	addx %d3,%d3,%d11
80004bb6:	0b 72 50 20 	addc %d2,%d2,%d7
80004bba:	19 a4 1c 00 	ld.w %d4,[%sp]28
80004bbe:	19 a7 30 00 	ld.w %d7,[%sp]48
80004bc2:	59 aa 00 10 	st.w [%sp]64,%d10
80004bc6:	0b 74 00 10 	add %d1,%d4,%d7
80004bca:	7b 00 00 42 	movh %d4,8192
80004bce:	1b 41 00 00 	addi %d0,%d1,4
80004bd2:	0b 42 00 71 	eq %d7,%d2,%d4
80004bd6:	b7 07 01 70 	insert %d7,%d7,0,0,1
80004bda:	59 a0 04 10 	st.w [%sp]68,%d0
80004bde:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
80004be2:	df 07 2b 80 	jne %d7,0,80004c38 <__muldf3+0x1a8>
80004be6:	1b 51 00 70 	addi %d7,%d1,5
80004bea:	8f 13 00 01 	and %d0,%d3,1
80004bee:	02 71       	mov %d1,%d7
80004bf0:	df 00 07 00 	jeq %d0,0,80004bfe <__muldf3+0x16e>
80004bf4:	77 65 80 6f 	dextr %d6,%d5,%d6,31
80004bf8:	06 f5       	sh %d5,-1
80004bfa:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
80004bfe:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80004c02:	06 f2       	sh %d2,-1
80004c04:	0b 24 30 01 	lt.u %d0,%d4,%d2
80004c08:	0b 24 70 02 	or.eq %d0,%d4,%d2
80004c0c:	c2 17       	add %d7,1
80004c0e:	df 00 ee ff 	jne %d0,0,80004bea <__muldf3+0x15a>
80004c12:	59 a1 04 10 	st.w [%sp]68,%d1
80004c16:	8f f3 0f 41 	and %d4,%d3,255
80004c1a:	8b 04 28 42 	ne %d4,%d4,128
80004c1e:	df 04 3a 00 	jeq %d4,0,80004c92 <__muldf3+0x202>
80004c22:	59 a2 0c 10 	st.w [%sp]76,%d2
80004c26:	82 32       	mov %d2,3
80004c28:	59 a3 08 10 	st.w [%sp]72,%d3
80004c2c:	d9 a4 3c 00 	lea %a4,[%sp]60
80004c30:	59 a2 3c 00 	st.w [%sp]60,%d2
80004c34:	1d ff 4d ff 	j 80004ace <__muldf3+0x3e>
80004c38:	7b 00 00 71 	movh %d7,4096
80004c3c:	0b 27 30 41 	lt.u %d4,%d7,%d2
80004c40:	0b 27 70 42 	or.eq %d4,%d7,%d2
80004c44:	df 04 e9 ff 	jne %d4,0,80004c16 <__muldf3+0x186>
80004c48:	77 32 80 20 	dextr %d2,%d2,%d3,1
80004c4c:	c2 f0       	add %d0,-1
80004c4e:	06 13       	sh %d3,1
80004c50:	ff 05 06 00 	jge %d5,0,80004c5c <__muldf3+0x1cc>
80004c54:	8f 13 40 11 	or %d1,%d3,1
80004c58:	0b 21 10 28 	mov %e2,%d1,%d2
80004c5c:	0b 72 00 41 	eq %d4,%d2,%d7
80004c60:	b7 04 01 40 	insert %d4,%d4,0,0,1
80004c64:	77 65 80 50 	dextr %d5,%d5,%d6,1
80004c68:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
80004c6c:	06 16       	sh %d6,1
80004c6e:	df 04 ed ff 	jne %d4,0,80004c48 <__muldf3+0x1b8>
80004c72:	59 a0 04 10 	st.w [%sp]68,%d0
80004c76:	1d ff d0 ff 	j 80004c16 <__muldf3+0x186>
80004c7a:	59 aa 18 00 	st.w [%sp]24,%d10
80004c7e:	d9 a4 14 00 	lea %a4,[%sp]20
80004c82:	1d ff 26 ff 	j 80004ace <__muldf3+0x3e>
80004c86:	59 aa 2c 00 	st.w [%sp]44,%d10
80004c8a:	d9 a4 28 00 	lea %a4,[%sp]40
80004c8e:	1d ff 20 ff 	j 80004ace <__muldf3+0x3e>
80004c92:	77 32 00 4c 	dextr %d4,%d2,%d3,24
80004c96:	a6 65       	or %d5,%d6
80004c98:	8b 05 20 52 	ne %d5,%d5,0
80004c9c:	0f 45 e0 40 	andn %d4,%d5,%d4
80004ca0:	df 04 c1 7f 	jeq %d4,0,80004c22 <__muldf3+0x192>
80004ca4:	8b 03 88 30 	addx %d3,%d3,128
80004ca8:	8b 02 a0 20 	addc %d2,%d2,0
80004cac:	8f f3 cf 31 	andn %d3,%d3,255
80004cb0:	1d ff b9 ff 	j 80004c22 <__muldf3+0x192>

80004cb4 <__divdf3>:
80004cb4:	20 38       	sub.a %sp,56
80004cb6:	d9 a5 10 00 	lea %a5,[%sp]16
80004cba:	40 a4       	mov.aa %a4,%sp
80004cbc:	89 a4 40 09 	st.d [%sp],%e4
80004cc0:	89 a6 48 09 	st.d [%sp]8,%e6
80004cc4:	6d 00 d5 01 	call 8000506e <__unpack_d>
80004cc8:	d9 a5 24 00 	lea %a5,[%sp]36
80004ccc:	d9 a4 08 00 	lea %a4,[%sp]8
80004cd0:	6d 00 cf 01 	call 8000506e <__unpack_d>
80004cd4:	19 a2 10 00 	ld.w %d2,[%sp]16
80004cd8:	ff 22 07 80 	jge.u %d2,2,80004ce6 <__divdf3+0x32>
80004cdc:	d9 a4 10 00 	lea %a4,[%sp]16
80004ce0:	6d 00 f8 00 	call 80004ed0 <__pack_d>
80004ce4:	00 90       	ret 
80004ce6:	19 a3 24 00 	ld.w %d3,[%sp]36
80004cea:	d9 a4 24 00 	lea %a4,[%sp]36
80004cee:	bf 23 f9 ff 	jlt.u %d3,2,80004ce0 <__divdf3+0x2c>
80004cf2:	19 a5 14 00 	ld.w %d5,[%sp]20
80004cf6:	19 a4 28 00 	ld.w %d4,[%sp]40
80004cfa:	c6 54       	xor %d4,%d5
80004cfc:	59 a4 14 00 	st.w [%sp]20,%d4
80004d00:	1b e2 ff 4f 	addi %d4,%d2,-2
80004d04:	8f 24 c0 41 	andn %d4,%d4,2
80004d08:	df 04 0a 80 	jne %d4,0,80004d1c <__divdf3+0x68>
80004d0c:	91 00 00 48 	movh.a %a4,32768
80004d10:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80004d14:	5f 32 e4 ff 	jne %d2,%d3,80004cdc <__divdf3+0x28>
80004d18:	1d ff e4 ff 	j 80004ce0 <__divdf3+0x2c>
80004d1c:	df 43 51 00 	jeq %d3,4,80004dbe <__divdf3+0x10a>
80004d20:	df 23 5a 00 	jeq %d3,2,80004dd4 <__divdf3+0x120>
80004d24:	19 a3 18 00 	ld.w %d3,[%sp]24
80004d28:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004d2c:	09 a4 70 09 	ld.d %e4,[%sp]48
80004d30:	0b 23 80 00 	sub %d0,%d3,%d2
80004d34:	09 a2 5c 09 	ld.d %e2,[%sp]28
80004d38:	0b 53 00 61 	eq %d6,%d3,%d5
80004d3c:	02 67       	mov %d7,%d6
80004d3e:	0b 42 50 72 	and.ge.u %d7,%d2,%d4
80004d42:	59 a0 18 00 	st.w [%sp]24,%d0
80004d46:	0b 35 a0 72 	or.lt.u %d7,%d5,%d3
80004d4a:	df 07 0b 80 	jne %d7,0,80004d60 <__divdf3+0xac>
80004d4e:	1b f0 ff 6f 	addi %d6,%d0,-1
80004d52:	77 23 80 30 	dextr %d3,%d3,%d2,1
80004d56:	06 12       	sh %d2,1
80004d58:	59 a6 18 00 	st.w [%sp]24,%d6
80004d5c:	0b 53 00 61 	eq %d6,%d3,%d5
80004d60:	3b d0 03 10 	mov %d1,61
80004d64:	d2 08       	mov %e8,0
80004d66:	82 00       	mov %d0,0
80004d68:	7b 00 00 71 	movh %d7,4096
80004d6c:	1d 00 04 00 	j 80004d74 <__divdf3+0xc0>
80004d70:	0b 53 00 61 	eq %d6,%d3,%d5
80004d74:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80004d78:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80004d7c:	df 06 0c 80 	jne %d6,0,80004d94 <__divdf3+0xe0>
80004d80:	0f 08 a0 a0 	or %d10,%d8,%d0
80004d84:	0f 79 a0 60 	or %d6,%d9,%d7
80004d88:	0b 42 c0 20 	subx %d2,%d2,%d4
80004d8c:	0b a6 10 88 	mov %e8,%d6,%d10
80004d90:	0b 53 d0 30 	subc %d3,%d3,%d5
80004d94:	c2 f1       	add %d1,-1
80004d96:	77 07 80 0f 	dextr %d0,%d7,%d0,31
80004d9a:	77 23 80 30 	dextr %d3,%d3,%d2,1
80004d9e:	06 f7       	sh %d7,-1
80004da0:	06 12       	sh %d2,1
80004da2:	df 01 e7 ff 	jne %d1,0,80004d70 <__divdf3+0xbc>
80004da6:	8f f8 0f 41 	and %d4,%d8,255
80004daa:	8b 04 28 42 	ne %d4,%d4,128
80004dae:	df 04 1a 00 	jeq %d4,0,80004de2 <__divdf3+0x12e>
80004db2:	59 a8 1c 00 	st.w [%sp]28,%d8
80004db6:	59 a9 20 00 	st.w [%sp]32,%d9
80004dba:	1d ff 91 ff 	j 80004cdc <__divdf3+0x28>
80004dbe:	82 02       	mov %d2,0
80004dc0:	a0 02       	mov.a %a2,0
80004dc2:	a0 03       	mov.a %a3,0
80004dc4:	89 a2 dc 09 	st.da [%sp]28,%a2
80004dc8:	59 a2 18 00 	st.w [%sp]24,%d2
80004dcc:	d9 a4 10 00 	lea %a4,[%sp]16
80004dd0:	1d ff 88 ff 	j 80004ce0 <__divdf3+0x2c>
80004dd4:	82 42       	mov %d2,4
80004dd6:	d9 a4 10 00 	lea %a4,[%sp]16
80004dda:	59 a2 10 00 	st.w [%sp]16,%d2
80004dde:	1d ff 81 ff 	j 80004ce0 <__divdf3+0x2c>
80004de2:	a6 32       	or %d2,%d3
80004de4:	77 89 00 4c 	dextr %d4,%d9,%d8,24
80004de8:	8b 02 20 32 	ne %d3,%d2,0
80004dec:	0f 43 e0 20 	andn %d2,%d3,%d4
80004df0:	df 02 e1 7f 	jeq %d2,0,80004db2 <__divdf3+0xfe>
80004df4:	8b 08 88 80 	addx %d8,%d8,128
80004df8:	8b 09 a0 90 	addc %d9,%d9,0
80004dfc:	8f f8 cf 81 	andn %d8,%d8,255
80004e00:	1d ff d9 ff 	j 80004db2 <__divdf3+0xfe>

80004e04 <__floatsidf>:
80004e04:	82 32       	mov %d2,3
80004e06:	20 18       	sub.a %sp,24
80004e08:	59 a2 04 00 	st.w [%sp]4,%d2
80004e0c:	8f 14 1e 20 	sh %d2,%d4,-31
80004e10:	59 a2 08 00 	st.w [%sp]8,%d2
80004e14:	df 04 0e 80 	jne %d4,0,80004e30 <__floatsidf+0x2c>
80004e18:	82 22       	mov %d2,2
80004e1a:	59 a2 04 00 	st.w [%sp]4,%d2
80004e1e:	d9 a4 04 00 	lea %a4,[%sp]4
80004e22:	6d 00 57 00 	call 80004ed0 <__pack_d>
80004e26:	60 25       	mov.a %a5,%d2
80004e28:	60 34       	mov.a %a4,%d3
80004e2a:	80 52       	mov.d %d2,%a5
80004e2c:	80 43       	mov.d %d3,%a4
80004e2e:	00 90       	ret 
80004e30:	ff 04 0a 00 	jge %d4,0,80004e44 <__floatsidf+0x40>
80004e34:	7b 00 00 28 	movh %d2,32768
80004e38:	a0 05       	mov.a %a5,0
80004e3a:	91 00 1e 4c 	movh.a %a4,49632
80004e3e:	5f 24 f6 7f 	jeq %d4,%d2,80004e2a <__floatsidf+0x26>
80004e42:	32 54       	rsub %d4
80004e44:	0f 04 b0 61 	clz %d6,%d4
80004e48:	1b d6 01 60 	addi %d6,%d6,29
80004e4c:	8f f6 01 21 	and %d2,%d6,31
80004e50:	82 05       	mov %d5,0
80004e52:	8b 06 82 72 	ge %d7,%d6,32
80004e56:	17 45 80 32 	dextr %d3,%d5,%d4,%d2
80004e5a:	0f 24 00 20 	sh %d2,%d4,%d2
80004e5e:	2b 23 50 37 	seln %d3,%d7,%d3,%d2
80004e62:	8b c6 03 61 	rsub %d6,%d6,60
80004e66:	ab 02 a0 27 	seln %d2,%d7,%d2,0
80004e6a:	59 a3 14 00 	st.w [%sp]20,%d3
80004e6e:	59 a6 0c 00 	st.w [%sp]12,%d6
80004e72:	59 a2 10 00 	st.w [%sp]16,%d2
80004e76:	1d ff d4 ff 	j 80004e1e <__floatsidf+0x1a>

80004e7a <__truncdfsf2>:
80004e7a:	20 20       	sub.a %sp,32
80004e7c:	d9 a5 0c 00 	lea %a5,[%sp]12
80004e80:	d9 a4 04 00 	lea %a4,[%sp]4
80004e84:	89 a4 44 09 	st.d [%sp]4,%e4
80004e88:	6d 00 f3 00 	call 8000506e <__unpack_d>
80004e8c:	19 a3 18 00 	ld.w %d3,[%sp]24
80004e90:	19 a2 1c 00 	ld.w %d2,[%sp]28
80004e94:	77 32 00 21 	dextr %d2,%d2,%d3,2
80004e98:	b7 03 02 3f 	insert %d3,%d3,0,30,2
80004e9c:	02 27       	mov %d7,%d2
80004e9e:	df 03 04 00 	jeq %d3,0,80004ea6 <__truncdfsf2+0x2c>
80004ea2:	8f 12 40 71 	or %d7,%d2,1
80004ea6:	19 a6 14 00 	ld.w %d6,[%sp]20
80004eaa:	19 a5 10 00 	ld.w %d5,[%sp]16
80004eae:	19 a4 0c 00 	ld.w %d4,[%sp]12
80004eb2:	6d 00 03 00 	call 80004eb8 <__make_fp>
80004eb6:	00 90       	ret 

80004eb8 <__make_fp>:
80004eb8:	20 10       	sub.a %sp,16
80004eba:	40 a4       	mov.aa %a4,%sp
80004ebc:	74 a4       	st.w [%sp],%d4
80004ebe:	59 a5 04 00 	st.w [%sp]4,%d5
80004ec2:	59 a6 08 00 	st.w [%sp]8,%d6
80004ec6:	59 a7 0c 00 	st.w [%sp]12,%d7
80004eca:	6d 00 31 01 	call 8000512c <__pack_f>
80004ece:	00 90       	ret 

80004ed0 <__pack_d>:
80004ed0:	54 44       	ld.w %d4,[%a4]
80004ed2:	19 43 0c 00 	ld.w %d3,[%a4]12
80004ed6:	19 42 10 00 	ld.w %d2,[%a4]16
80004eda:	19 41 04 00 	ld.w %d1,[%a4]4
80004ede:	bf 24 56 80 	jlt.u %d4,2,80004f8a <__pack_d+0xba>
80004ee2:	7b 00 ff 57 	movh %d5,32752
80004ee6:	d2 06       	mov %e6,0
80004ee8:	df 44 0b 00 	jeq %d4,4,80004efe <__pack_d+0x2e>
80004eec:	0f 23 a0 50 	or %d5,%d3,%d2
80004ef0:	8b 05 00 02 	eq %d0,%d5,0
80004ef4:	8b 24 e0 04 	or.eq %d0,%d4,2
80004ef8:	82 05       	mov %d5,0
80004efa:	df 00 0c 00 	jeq %d0,0,80004f12 <__pack_d+0x42>
80004efe:	0b 10 00 28 	mov %e2,%d1
80004f02:	a6 75       	or %d5,%d7
80004f04:	8f f2 01 20 	sh %d2,%d2,31
80004f08:	0f 25 a0 40 	or %d4,%d5,%d2
80004f0c:	02 43       	mov %d3,%d4
80004f0e:	02 62       	mov %d2,%d6
80004f10:	00 90       	ret 
80004f12:	19 44 08 00 	ld.w %d4,[%a4]8
80004f16:	3b 20 c0 0f 	mov %d0,-1022
80004f1a:	3f 04 41 00 	jlt %d4,%d0,80004f9c <__pack_d+0xcc>
80004f1e:	3b 00 40 00 	mov %d0,1024
80004f22:	7b 00 ff 57 	movh %d5,32752
80004f26:	7f 04 ec 7f 	jge %d4,%d0,80004efe <__pack_d+0x2e>
80004f2a:	8f f3 0f 51 	and %d5,%d3,255
80004f2e:	8b 05 28 52 	ne %d5,%d5,128
80004f32:	df 05 1b 00 	jeq %d5,0,80004f68 <__pack_d+0x98>
80004f36:	8b f3 87 30 	addx %d3,%d3,127
80004f3a:	8b 02 a0 20 	addc %d2,%d2,0
80004f3e:	7b 00 00 52 	movh %d5,8192
80004f42:	0b 25 30 61 	lt.u %d6,%d5,%d2
80004f46:	0b 25 70 62 	or.eq %d6,%d5,%d2
80004f4a:	df 06 19 80 	jne %d6,0,80004f7c <__pack_d+0xac>
80004f4e:	1b f4 3f 40 	addi %d4,%d4,1023
80004f52:	0b 40 00 48 	mov %e4,%d4
80004f56:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80004f5a:	06 82       	sh %d2,-8
80004f5c:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
80004f60:	8f 44 01 50 	sh %d5,%d4,20
80004f64:	1d ff cd ff 	j 80004efe <__pack_d+0x2e>
80004f68:	8f 03 10 51 	and %d5,%d3,256
80004f6c:	df 05 e9 7f 	jeq %d5,0,80004f3e <__pack_d+0x6e>
80004f70:	8b 03 88 30 	addx %d3,%d3,128
80004f74:	8b 02 a0 20 	addc %d2,%d2,0
80004f78:	1d ff e3 ff 	j 80004f3e <__pack_d+0x6e>
80004f7c:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80004f80:	1b 04 40 40 	addi %d4,%d4,1024
80004f84:	06 f2       	sh %d2,-1
80004f86:	1d ff e6 ff 	j 80004f52 <__pack_d+0x82>
80004f8a:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80004f8e:	06 82       	sh %d2,-8
80004f90:	b7 12 8d 79 	insert %d7,%d2,1,19,13
80004f94:	7b 00 ff 57 	movh %d5,32752
80004f98:	1d ff b3 ff 	j 80004efe <__pack_d+0x2e>
80004f9c:	0b 40 80 40 	sub %d4,%d0,%d4
80004fa0:	8b 94 83 02 	ge %d0,%d4,57
80004fa4:	df 00 ad ff 	jne %d0,0,80004efe <__pack_d+0x2e>
80004fa8:	8b 04 82 52 	ge %d5,%d4,32
80004fac:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
80004fb0:	ab 02 a0 75 	seln %d7,%d5,%d2,0
80004fb4:	8f f4 01 51 	and %d5,%d4,31
80004fb8:	8b 05 02 61 	rsub %d6,%d5,32
80004fbc:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
80004fc0:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
80004fc4:	8b 04 82 82 	ge %d8,%d4,32
80004fc8:	32 55       	rsub %d5
80004fca:	02 60       	mov %d0,%d6
80004fcc:	8f f4 01 41 	and %d4,%d4,31
80004fd0:	82 f6       	mov %d6,-1
80004fd2:	0f 57 00 70 	sh %d7,%d7,%d5
80004fd6:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
80004fda:	0f 46 00 40 	sh %d4,%d6,%d4
80004fde:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
80004fe2:	ab 04 a0 48 	seln %d4,%d8,%d4,0
80004fe6:	0f 43 e0 30 	andn %d3,%d3,%d4
80004fea:	0f 52 e0 20 	andn %d2,%d2,%d5
80004fee:	a6 32       	or %d2,%d3
80004ff0:	02 03       	mov %d3,%d0
80004ff2:	8b 02 00 35 	or.ne %d3,%d2,0
80004ff6:	8f f3 0f 51 	and %d5,%d3,255
80004ffa:	82 12       	mov %d2,1
80004ffc:	8b 05 08 24 	and.eq %d2,%d5,128
80005000:	02 74       	mov %d4,%d7
80005002:	df 02 14 80 	jne %d2,0,8000502a <__pack_d+0x15a>
80005006:	8b f3 87 30 	addx %d3,%d3,127
8000500a:	8b 07 a0 20 	addc %d2,%d7,0
8000500e:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80005012:	7b 00 00 31 	movh %d3,4096
80005016:	8f 82 1f 70 	sh %d7,%d2,-8
8000501a:	0b 32 50 21 	ge.u %d2,%d2,%d3
8000501e:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80005022:	8f 42 01 50 	sh %d5,%d2,20
80005026:	1d ff 6c ff 	j 80004efe <__pack_d+0x2e>
8000502a:	8b 03 88 60 	addx %d6,%d3,128
8000502e:	8b 07 a0 20 	addc %d2,%d7,0
80005032:	7b 00 00 a1 	movh %d10,4096
80005036:	8f 82 1f 70 	sh %d7,%d2,-8
8000503a:	77 62 00 6c 	dextr %d6,%d2,%d6,24
8000503e:	0b a2 50 21 	ge.u %d2,%d2,%d10
80005042:	53 12 40 80 	mul.u %e8,%d2,1
80005046:	8f 03 10 01 	and %d0,%d3,256
8000504a:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
8000504e:	8f 48 01 50 	sh %d5,%d8,20
80005052:	df 00 56 ff 	jne %d0,0,80004efe <__pack_d+0x2e>
80005056:	8f 84 1f 70 	sh %d7,%d4,-8
8000505a:	0b a4 50 21 	ge.u %d2,%d4,%d10
8000505e:	77 34 00 6c 	dextr %d6,%d4,%d3,24
80005062:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80005066:	8f 42 01 50 	sh %d5,%d2,20
8000506a:	1d ff 4a ff 	j 80004efe <__pack_d+0x2e>

8000506e <__unpack_d>:
8000506e:	09 48 40 09 	ld.d %e8,[%a4]
80005072:	3b f0 7f 00 	mov %d0,2047
80005076:	8f 19 1e 70 	sh %d7,%d9,-31
8000507a:	37 09 6b 5a 	extr.u %d5,%d9,20,11
8000507e:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
80005082:	59 57 04 00 	st.w [%a5]4,%d7
80005086:	df 05 26 80 	jne %d5,0,800050d2 <__unpack_d+0x64>
8000508a:	8b 08 20 22 	ne %d2,%d8,0
8000508e:	8b 06 00 25 	or.ne %d2,%d6,0
80005092:	df 02 33 00 	jeq %d2,0,800050f8 <__unpack_d+0x8a>
80005096:	82 32       	mov %d2,3
80005098:	77 86 00 34 	dextr %d3,%d6,%d8,8
8000509c:	8f 88 00 40 	sh %d4,%d8,8
800050a0:	74 52       	st.w [%a5],%d2
800050a2:	3b 10 c0 5f 	mov %d5,-1023
800050a6:	7b 00 00 61 	movh %d6,4096
800050aa:	77 43 80 30 	dextr %d3,%d3,%d4,1
800050ae:	02 57       	mov %d7,%d5
800050b0:	0b 63 00 21 	eq %d2,%d3,%d6
800050b4:	b7 02 01 20 	insert %d2,%d2,0,0,1
800050b8:	06 14       	sh %d4,1
800050ba:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
800050be:	c2 f5       	add %d5,-1
800050c0:	df 02 f5 ff 	jne %d2,0,800050aa <__unpack_d+0x3c>
800050c4:	59 57 08 00 	st.w [%a5]8,%d7
800050c8:	59 54 0c 00 	st.w [%a5]12,%d4
800050cc:	59 53 10 00 	st.w [%a5]16,%d3
800050d0:	00 90       	ret 
800050d2:	5f 05 16 00 	jeq %d5,%d0,800050fe <__unpack_d+0x90>
800050d6:	82 32       	mov %d2,3
800050d8:	1b 15 c0 5f 	addi %d5,%d5,-1023
800050dc:	8f 88 00 40 	sh %d4,%d8,8
800050e0:	74 52       	st.w [%a5],%d2
800050e2:	77 86 00 24 	dextr %d2,%d6,%d8,8
800050e6:	59 55 08 00 	st.w [%a5]8,%d5
800050ea:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800050ee:	59 54 0c 00 	st.w [%a5]12,%d4
800050f2:	59 52 10 00 	st.w [%a5]16,%d2
800050f6:	00 90       	ret 
800050f8:	82 22       	mov %d2,2
800050fa:	74 52       	st.w [%a5],%d2
800050fc:	00 90       	ret 
800050fe:	8b 08 20 52 	ne %d5,%d8,0
80005102:	8b 06 00 55 	or.ne %d5,%d6,0
80005106:	df 05 05 80 	jne %d5,0,80005110 <__unpack_d+0xa2>
8000510a:	82 42       	mov %d2,4
8000510c:	74 52       	st.w [%a5],%d2
8000510e:	00 90       	ret 
80005110:	77 89 00 34 	dextr %d3,%d9,%d8,8
80005114:	37 09 e1 49 	extr.u %d4,%d9,19,1
80005118:	b7 03 85 3d 	insert %d3,%d3,0,27,5
8000511c:	8f 88 00 20 	sh %d2,%d8,8
80005120:	74 54       	st.w [%a5],%d4
80005122:	59 52 0c 00 	st.w [%a5]12,%d2
80005126:	59 53 10 00 	st.w [%a5]16,%d3
8000512a:	00 90       	ret 

8000512c <__pack_f>:
8000512c:	54 44       	ld.w %d4,[%a4]
8000512e:	19 43 0c 00 	ld.w %d3,[%a4]12
80005132:	19 47 04 00 	ld.w %d7,[%a4]4
80005136:	bf 24 3f 80 	jlt.u %d4,2,800051b4 <__pack_f+0x88>
8000513a:	7b 00 f8 57 	movh %d5,32640
8000513e:	82 06       	mov %d6,0
80005140:	df 44 09 00 	jeq %d4,4,80005152 <__pack_f+0x26>
80005144:	8b 03 00 22 	eq %d2,%d3,0
80005148:	8b 24 e0 24 	or.eq %d2,%d4,2
8000514c:	82 05       	mov %d5,0
8000514e:	df 02 08 00 	jeq %d2,0,8000515e <__pack_f+0x32>
80005152:	8f f7 01 70 	sh %d7,%d7,31
80005156:	0f 56 a0 20 	or %d2,%d6,%d5
8000515a:	a6 72       	or %d2,%d7
8000515c:	00 90       	ret 
8000515e:	19 42 08 00 	ld.w %d2,[%a4]8
80005162:	8b 22 98 42 	ge %d4,%d2,-126
80005166:	df 04 33 00 	jeq %d4,0,800051cc <__pack_f+0xa0>
8000516a:	8b 02 88 42 	ge %d4,%d2,128
8000516e:	7b 00 f8 57 	movh %d5,32640
80005172:	df 04 f0 ff 	jne %d4,0,80005152 <__pack_f+0x26>
80005176:	8f f3 07 51 	and %d5,%d3,127
8000517a:	8f 03 08 41 	and %d4,%d3,128
8000517e:	8b 05 24 52 	ne %d5,%d5,64
80005182:	ab 03 04 44 	cadd %d4,%d4,%d3,64
80005186:	1b f3 03 30 	addi %d3,%d3,63
8000518a:	2b 43 40 35 	sel %d3,%d5,%d3,%d4
8000518e:	1b f2 07 50 	addi %d5,%d2,127
80005192:	bf 03 0c 00 	jlt %d3,0,800051aa <__pack_f+0x7e>
80005196:	37 03 f7 63 	extr.u %d6,%d3,7,23
8000519a:	8f 75 01 50 	sh %d5,%d5,23
8000519e:	8f f7 01 70 	sh %d7,%d7,31
800051a2:	0f 56 a0 20 	or %d2,%d6,%d5
800051a6:	a6 72       	or %d2,%d7
800051a8:	00 90       	ret 
800051aa:	06 f3       	sh %d3,-1
800051ac:	1b 02 08 50 	addi %d5,%d2,128
800051b0:	1d ff f3 ff 	j 80005196 <__pack_f+0x6a>
800051b4:	37 03 f6 33 	extr.u %d3,%d3,7,22
800051b8:	7b 00 f8 57 	movh %d5,32640
800051bc:	b7 f3 01 6b 	insert %d6,%d3,15,22,1
800051c0:	8f f7 01 70 	sh %d7,%d7,31
800051c4:	0f 56 a0 20 	or %d2,%d6,%d5
800051c8:	a6 72       	or %d2,%d7
800051ca:	00 90       	ret 
800051cc:	8b 22 18 21 	rsub %d2,%d2,-126
800051d0:	8b a2 81 42 	ge %d4,%d2,26
800051d4:	df 04 bf ff 	jne %d4,0,80005152 <__pack_f+0x26>
800051d8:	82 f5       	mov %d5,-1
800051da:	8b 02 00 41 	rsub %d4,%d2,0
800051de:	0f 25 00 20 	sh %d2,%d5,%d2
800051e2:	0f 43 00 40 	sh %d4,%d3,%d4
800051e6:	0f 23 e0 30 	andn %d3,%d3,%d2
800051ea:	8b 03 00 45 	or.ne %d4,%d3,0
800051ee:	8f f4 07 31 	and %d3,%d4,127
800051f2:	8b 03 04 32 	eq %d3,%d3,64
800051f6:	df 03 0e 80 	jne %d3,0,80005212 <__pack_f+0xe6>
800051fa:	1b f4 03 20 	addi %d2,%d4,63
800051fe:	7b 00 00 34 	movh %d3,16384
80005202:	37 02 f7 63 	extr.u %d6,%d2,7,23
80005206:	0b 32 50 21 	ge.u %d2,%d2,%d3
8000520a:	8f 72 01 50 	sh %d5,%d2,23
8000520e:	1d ff a2 ff 	j 80005152 <__pack_f+0x26>
80005212:	1b 04 04 30 	addi %d3,%d4,64
80005216:	7b 00 00 24 	movh %d2,16384
8000521a:	37 03 f7 63 	extr.u %d6,%d3,7,23
8000521e:	0b 23 50 31 	ge.u %d3,%d3,%d2
80005222:	8f 73 01 50 	sh %d5,%d3,23
80005226:	6f 74 96 ff 	jnz.t %d4,7,80005152 <__pack_f+0x26>
8000522a:	0b 24 50 21 	ge.u %d2,%d4,%d2
8000522e:	37 04 f7 63 	extr.u %d6,%d4,7,23
80005232:	8f 72 01 50 	sh %d5,%d2,23
80005236:	1d ff 8e ff 	j 80005152 <__pack_f+0x26>

8000523a <__do_global_ctors_aux>:
8000523a:	91 00 00 28 	movh.a %a2,32768
8000523e:	d9 22 00 a5 	lea %a2,[%a2]21120 <80005280 <__CTOR_END__>>
80005242:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
80005246:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
8000524a:	df f2 0a 00 	jeq %d2,-1,8000525e <__do_global_ctors_aux+0x24>
8000524e:	40 3c       	mov.aa %a12,%a3
80005250:	60 22       	mov.a %a2,%d2
80005252:	b0 cc       	add.a %a12,-4
80005254:	2d 02 00 00 	calli %a2
80005258:	54 c2       	ld.w %d2,[%a12]
8000525a:	df f2 fb ff 	jne %d2,-1,80005250 <__do_global_ctors_aux+0x16>
8000525e:	00 90       	ret 

Disassembly of section .init:

80005260 <_init>:
80005260:	6d ff 10 da 	call 80000680 <frame_dummy>
80005264:	6d ff eb ff 	call 8000523a <__do_global_ctors_aux>
80005268:	00 90       	ret 
8000526a:	00 00       	nop 
8000526c:	00 00       	nop 
	...

Disassembly of section .fini:

80005270 <_fini>:
80005270:	6d ff d6 d9 	call 8000061c <__do_global_dtors_aux>
80005274:	00 90       	ret 
	...

Disassembly of section .traptab_tc2:

801f6100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6100:	0d 00 00 02 	svlcx 
801f6104:	02 f4       	mov %d4,%d15
801f6106:	91 00 00 28 	movh.a %a2,32768
801f610a:	d9 22 b0 53 	lea %a2,[%a2]14704 <80003970 <IfxCpu_Trap_memoryManagementError>>
801f610e:	dc 02       	ji %a2
801f6110:	00 80       	rfe 
	...
801f611e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6120:	0d 00 00 02 	svlcx 
801f6124:	02 f4       	mov %d4,%d15
801f6126:	91 00 00 28 	movh.a %a2,32768
801f612a:	d9 22 9e 63 	lea %a2,[%a2]14750 <8000399e <IfxCpu_Trap_internalProtectionError>>
801f612e:	dc 02       	ji %a2
801f6130:	00 80       	rfe 
	...
801f613e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6140:	0d 00 00 02 	svlcx 
801f6144:	02 f4       	mov %d4,%d15
801f6146:	91 00 00 28 	movh.a %a2,32768
801f614a:	d9 22 8c 73 	lea %a2,[%a2]14796 <800039cc <IfxCpu_Trap_instructionError>>
801f614e:	dc 02       	ji %a2
801f6150:	00 80       	rfe 
	...
801f615e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6160:	02 f4       	mov %d4,%d15
801f6162:	91 00 00 28 	movh.a %a2,32768
801f6166:	d9 22 ba 73 	lea %a2,[%a2]14842 <800039fa <IfxCpu_Trap_contextManagementError>>
801f616a:	dc 02       	ji %a2
801f616c:	00 80       	rfe 
	...
801f617e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6180:	0d 00 00 02 	svlcx 
801f6184:	02 f4       	mov %d4,%d15
801f6186:	91 00 00 28 	movh.a %a2,32768
801f618a:	d9 22 a8 83 	lea %a2,[%a2]14888 <80003a28 <IfxCpu_Trap_busError>>
801f618e:	dc 02       	ji %a2
801f6190:	00 80       	rfe 
	...
801f619e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f61a0:	0d 00 00 02 	svlcx 
801f61a4:	02 f4       	mov %d4,%d15
801f61a6:	91 00 00 28 	movh.a %a2,32768
801f61aa:	d9 22 96 93 	lea %a2,[%a2]14934 <80003a56 <IfxCpu_Trap_assertion>>
801f61ae:	dc 02       	ji %a2
801f61b0:	00 80       	rfe 
	...
801f61be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
801f61c0:	0d 00 00 02 	svlcx 
801f61c4:	02 f4       	mov %d4,%d15
801f61c6:	91 00 00 28 	movh.a %a2,32768
801f61ca:	d9 22 a2 b3 	lea %a2,[%a2]15074 <80003ae2 <IfxCpu_Trap_systemCall_Cpu2>>
801f61ce:	dc 02       	ji %a2
801f61d0:	00 80       	rfe 
	...
801f61de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f61e0:	0d 00 00 02 	svlcx 
801f61e4:	02 f4       	mov %d4,%d15
801f61e6:	91 00 00 28 	movh.a %a2,32768
801f61ea:	d9 22 8e c3 	lea %a2,[%a2]15118 <80003b0e <IfxCpu_Trap_nonMaskableInterrupt>>
801f61ee:	dc 02       	ji %a2
801f61f0:	00 80       	rfe 
}
801f61f2:	00 90       	ret 

801f61f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc1:

801f6200 <IfxCpu_Trap_vectorTable1>:
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6200:	0d 00 00 02 	svlcx 
801f6204:	02 f4       	mov %d4,%d15
801f6206:	91 00 00 28 	movh.a %a2,32768
801f620a:	d9 22 b0 53 	lea %a2,[%a2]14704 <80003970 <IfxCpu_Trap_memoryManagementError>>
801f620e:	dc 02       	ji %a2
801f6210:	00 80       	rfe 
	...
801f621e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6220:	0d 00 00 02 	svlcx 
801f6224:	02 f4       	mov %d4,%d15
801f6226:	91 00 00 28 	movh.a %a2,32768
801f622a:	d9 22 9e 63 	lea %a2,[%a2]14750 <8000399e <IfxCpu_Trap_internalProtectionError>>
801f622e:	dc 02       	ji %a2
801f6230:	00 80       	rfe 
	...
801f623e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6240:	0d 00 00 02 	svlcx 
801f6244:	02 f4       	mov %d4,%d15
801f6246:	91 00 00 28 	movh.a %a2,32768
801f624a:	d9 22 8c 73 	lea %a2,[%a2]14796 <800039cc <IfxCpu_Trap_instructionError>>
801f624e:	dc 02       	ji %a2
801f6250:	00 80       	rfe 
	...
801f625e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6260:	02 f4       	mov %d4,%d15
801f6262:	91 00 00 28 	movh.a %a2,32768
801f6266:	d9 22 ba 73 	lea %a2,[%a2]14842 <800039fa <IfxCpu_Trap_contextManagementError>>
801f626a:	dc 02       	ji %a2
801f626c:	00 80       	rfe 
	...
801f627e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6280:	0d 00 00 02 	svlcx 
801f6284:	02 f4       	mov %d4,%d15
801f6286:	91 00 00 28 	movh.a %a2,32768
801f628a:	d9 22 a8 83 	lea %a2,[%a2]14888 <80003a28 <IfxCpu_Trap_busError>>
801f628e:	dc 02       	ji %a2
801f6290:	00 80       	rfe 
	...
801f629e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f62a0:	0d 00 00 02 	svlcx 
801f62a4:	02 f4       	mov %d4,%d15
801f62a6:	91 00 00 28 	movh.a %a2,32768
801f62aa:	d9 22 96 93 	lea %a2,[%a2]14934 <80003a56 <IfxCpu_Trap_assertion>>
801f62ae:	dc 02       	ji %a2
801f62b0:	00 80       	rfe 
	...
801f62be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
801f62c0:	0d 00 00 02 	svlcx 
801f62c4:	02 f4       	mov %d4,%d15
801f62c6:	91 00 00 28 	movh.a %a2,32768
801f62ca:	d9 22 b6 a3 	lea %a2,[%a2]15030 <80003ab6 <IfxCpu_Trap_systemCall_Cpu1>>
801f62ce:	dc 02       	ji %a2
801f62d0:	00 80       	rfe 
	...
801f62de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f62e0:	0d 00 00 02 	svlcx 
801f62e4:	02 f4       	mov %d4,%d15
801f62e6:	91 00 00 28 	movh.a %a2,32768
801f62ea:	d9 22 8e c3 	lea %a2,[%a2]15118 <80003b0e <IfxCpu_Trap_nonMaskableInterrupt>>
801f62ee:	dc 02       	ji %a2
801f62f0:	00 80       	rfe 
}
801f62f2:	00 90       	ret 

801f62f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .inttab_tc0_064:

801f4c80 <__intvec_tc0_100>:
801f4c80:	0d 00 00 02 	svlcx 
801f4c84:	91 00 00 e8 	movh.a %a14,32768
801f4c88:	d9 ee 68 d0 	lea %a14,[%a14]1896 <80000768 <ISR_STM>>
801f4c8c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_0C8:

801f5900 <__intvec_tc0_200>:
801f5900:	0d 00 00 02 	svlcx 
801f5904:	91 00 00 e8 	movh.a %a14,32768
801f5908:	d9 ee 78 f0 	lea %a14,[%a14]2040 <800007f8 <ISR_PWM_GTM>>
801f590c:	dc 0e       	ji %a14
