
07_UART.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bmhd_0       00000020  80000000  80000000  000002d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .bmhd_1       00000020  80020000  80020000  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .startup      00000010  80000020  80000020  000002f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .interface_const 00000000  80000040  80000040  00007e3c  2**0
                  CONTENTS
  4 .traptab_tc0  00000100  80000100  80000100  00000320  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .rodata       000003f8  80000200  80000200  00000420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .CPU2.zbss    00000000  50000000  50000000  00007e3c  2**0
                  CONTENTS
  7 .CPU2.bss     00000000  50000000  50000000  00007e3c  2**0
                  CONTENTS
  8 .CPU1.zbss    00000000  60000000  60000000  00007e3c  2**0
                  CONTENTS
  9 .CPU1.bss     00000000  60001ae4  60001ae4  00007e3c  2**0
                  CONTENTS
 10 .CPU0.zbss    00000000  70000000  70000000  00007e3c  2**0
                  CONTENTS
 11 .CPU0.bss     00000000  70000000  70000000  00007e3c  2**0
                  CONTENTS
 12 .zbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC
 13 .sbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC, SMALL_DATA
 14 .bss          00000564  60000580  801f687c  00007e40  2**3
                  ALLOC
 15 .CPU2.zdata   00000000  50000000  50000000  00007e3c  2**0
                  CONTENTS
 16 .CPU2.data    00000000  50000000  50000000  00007e3c  2**0
                  CONTENTS
 17 .CPU1.zdata   00000000  60000000  60000000  00007e3c  2**0
                  CONTENTS
 18 .CPU1.data    00000000  60001ae4  60001ae4  00007e3c  2**0
                  CONTENTS
 19 .CPU0.zdata   00000000  70000000  70000000  00007e3c  2**0
                  CONTENTS
 20 .CPU0.data    00000000  70000000  70000000  00007e3c  2**0
                  CONTENTS
 21 .zdata        00000000  60000000  801f687c  00007e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .sdata        00000000  60000000  801f687c  00007e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
 23 .data         0000057c  60000000  801f6300  000078c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .lmu_zdata    00000000  90000000  90000000  00007e3c  2**0
                  CONTENTS
 25 .lmu_sdata    00000000  90000000  90000000  00007e3c  2**0
                  CONTENTS
 26 .lmu_data     00000000  90000000  90000000  00007e3c  2**0
                  CONTENTS
 27 .CPU0.psram_text 00000000  70100000  70100000  00007e3c  2**0
                  CONTENTS
 28 .CPU1.psram_text 00000000  60100000  60100000  00007e3c  2**0
                  CONTENTS
 29 .CPU2.psram_text 00000000  50100000  50100000  00007e3c  2**0
                  CONTENTS
 30 .text         00006df0  800005f8  800005f8  00000818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .init         00000010  800073e8  800073e8  00007608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .fini         00000008  800073f8  800073f8  00007618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .eh_frame     00000000  80007400  80007400  00007e3c  2**0
                  CONTENTS
 34 .gcc_except_table 00000000  80007400  80007400  00007e3c  2**0
                  CONTENTS
 35 .ctors        00000010  80007400  80007400  00007620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 36 .dtors        00000010  80007410  80007410  00007630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 37 .traptab_tc2  00000100  801f6100  801f6100  000076c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 38 .traptab_tc1  00000100  801f6200  801f6200  000077c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 39 .heap         00001000  60000ae4  801f687c  00007e3c  2**0
                  ALLOC
 40 .CPU2.ustack  00000800  5001ae00  5001ae00  000002d4  2**0
                  ALLOC
 41 .CPU2.istack  00000400  5001b700  5001b700  000002d4  2**0
                  ALLOC
 42 .CPU2.csa     00002000  5001bc00  5001bc00  000002d4  2**0
                  ALLOC
 43 .CPU1.ustack  00000800  6001ae00  6001ae00  000002d4  2**0
                  ALLOC
 44 .CPU1.istack  00000400  6001b700  6001b700  000002d4  2**0
                  ALLOC
 45 .CPU1.csa     00002000  6001bc00  6001bc00  000002d4  2**0
                  ALLOC
 46 .CPU0.ustack  00000800  70018e00  70018e00  000002d4  2**0
                  ALLOC
 47 .CPU0.istack  00000400  70019700  70019700  000002d4  2**0
                  ALLOC
 48 .CPU0.csa     00002000  70019c00  70019c00  000002d4  2**0
                  ALLOC
 49 .inttab_tc0_000 00000000  801f4000  801f4000  00007e3c  2**0
                  CONTENTS
 50 .inttab_tc0_001 00000000  801f4020  801f4020  00007e3c  2**0
                  CONTENTS
 51 .inttab_tc0_002 00000000  801f4040  801f4040  00007e3c  2**0
                  CONTENTS
 52 .inttab_tc0_003 00000000  801f4060  801f4060  00007e3c  2**0
                  CONTENTS
 53 .inttab_tc0_004 0000000e  801f4080  801f4080  00007660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .inttab_tc0_005 00000000  801f40a0  801f40a0  00007e3c  2**0
                  CONTENTS
 55 .inttab_tc0_006 00000000  801f40c0  801f40c0  00007e3c  2**0
                  CONTENTS
 56 .inttab_tc0_007 00000000  801f40e0  801f40e0  00007e3c  2**0
                  CONTENTS
 57 .inttab_tc0_008 0000000e  801f4100  801f4100  0000766e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .inttab_tc0_009 00000000  801f4120  801f4120  00007e3c  2**0
                  CONTENTS
 59 .inttab_tc0_00A 00000000  801f4140  801f4140  00007e3c  2**0
                  CONTENTS
 60 .inttab_tc0_00B 00000000  801f4160  801f4160  00007e3c  2**0
                  CONTENTS
 61 .inttab_tc0_00C 0000000e  801f4180  801f4180  0000767c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .inttab_tc0_00D 00000000  801f41a0  801f41a0  00007e3c  2**0
                  CONTENTS
 63 .inttab_tc0_00E 00000000  801f41c0  801f41c0  00007e3c  2**0
                  CONTENTS
 64 .inttab_tc0_00F 00000000  801f41e0  801f41e0  00007e3c  2**0
                  CONTENTS
 65 .inttab_tc0_010 00000000  801f4200  801f4200  00007e3c  2**0
                  CONTENTS
 66 .inttab_tc0_011 00000000  801f4220  801f4220  00007e3c  2**0
                  CONTENTS
 67 .inttab_tc0_012 00000000  801f4240  801f4240  00007e3c  2**0
                  CONTENTS
 68 .inttab_tc0_013 00000000  801f4260  801f4260  00007e3c  2**0
                  CONTENTS
 69 .inttab_tc0_014 00000000  801f4280  801f4280  00007e3c  2**0
                  CONTENTS
 70 .inttab_tc0_015 00000000  801f42a0  801f42a0  00007e3c  2**0
                  CONTENTS
 71 .inttab_tc0_016 00000000  801f42c0  801f42c0  00007e3c  2**0
                  CONTENTS
 72 .inttab_tc0_017 00000000  801f42e0  801f42e0  00007e3c  2**0
                  CONTENTS
 73 .inttab_tc0_018 00000000  801f4300  801f4300  00007e3c  2**0
                  CONTENTS
 74 .inttab_tc0_019 00000000  801f4320  801f4320  00007e3c  2**0
                  CONTENTS
 75 .inttab_tc0_01A 00000000  801f4340  801f4340  00007e3c  2**0
                  CONTENTS
 76 .inttab_tc0_01B 00000000  801f4360  801f4360  00007e3c  2**0
                  CONTENTS
 77 .inttab_tc0_01C 00000000  801f4380  801f4380  00007e3c  2**0
                  CONTENTS
 78 .inttab_tc0_01D 00000000  801f43a0  801f43a0  00007e3c  2**0
                  CONTENTS
 79 .inttab_tc0_01E 00000000  801f43c0  801f43c0  00007e3c  2**0
                  CONTENTS
 80 .inttab_tc0_01F 00000000  801f43e0  801f43e0  00007e3c  2**0
                  CONTENTS
 81 .inttab_tc0_020 00000000  801f4400  801f4400  00007e3c  2**0
                  CONTENTS
 82 .inttab_tc0_021 00000000  801f4420  801f4420  00007e3c  2**0
                  CONTENTS
 83 .inttab_tc0_022 00000000  801f4440  801f4440  00007e3c  2**0
                  CONTENTS
 84 .inttab_tc0_023 00000000  801f4460  801f4460  00007e3c  2**0
                  CONTENTS
 85 .inttab_tc0_024 00000000  801f4480  801f4480  00007e3c  2**0
                  CONTENTS
 86 .inttab_tc0_025 00000000  801f44a0  801f44a0  00007e3c  2**0
                  CONTENTS
 87 .inttab_tc0_026 00000000  801f44c0  801f44c0  00007e3c  2**0
                  CONTENTS
 88 .inttab_tc0_027 00000000  801f44e0  801f44e0  00007e3c  2**0
                  CONTENTS
 89 .inttab_tc0_028 00000000  801f4500  801f4500  00007e3c  2**0
                  CONTENTS
 90 .inttab_tc0_029 00000000  801f4520  801f4520  00007e3c  2**0
                  CONTENTS
 91 .inttab_tc0_02A 00000000  801f4540  801f4540  00007e3c  2**0
                  CONTENTS
 92 .inttab_tc0_02B 00000000  801f4560  801f4560  00007e3c  2**0
                  CONTENTS
 93 .inttab_tc0_02C 00000000  801f4580  801f4580  00007e3c  2**0
                  CONTENTS
 94 .inttab_tc0_02D 00000000  801f45a0  801f45a0  00007e3c  2**0
                  CONTENTS
 95 .inttab_tc0_02E 00000000  801f45c0  801f45c0  00007e3c  2**0
                  CONTENTS
 96 .inttab_tc0_02F 00000000  801f45e0  801f45e0  00007e3c  2**0
                  CONTENTS
 97 .inttab_tc0_030 00000000  801f4600  801f4600  00007e3c  2**0
                  CONTENTS
 98 .inttab_tc0_031 00000000  801f4620  801f4620  00007e3c  2**0
                  CONTENTS
 99 .inttab_tc0_032 00000000  801f4640  801f4640  00007e3c  2**0
                  CONTENTS
100 .inttab_tc0_033 00000000  801f4660  801f4660  00007e3c  2**0
                  CONTENTS
101 .inttab_tc0_034 00000000  801f4680  801f4680  00007e3c  2**0
                  CONTENTS
102 .inttab_tc0_035 00000000  801f46a0  801f46a0  00007e3c  2**0
                  CONTENTS
103 .inttab_tc0_036 00000000  801f46c0  801f46c0  00007e3c  2**0
                  CONTENTS
104 .inttab_tc0_037 00000000  801f46e0  801f46e0  00007e3c  2**0
                  CONTENTS
105 .inttab_tc0_038 00000000  801f4700  801f4700  00007e3c  2**0
                  CONTENTS
106 .inttab_tc0_039 00000000  801f4720  801f4720  00007e3c  2**0
                  CONTENTS
107 .inttab_tc0_03A 00000000  801f4740  801f4740  00007e3c  2**0
                  CONTENTS
108 .inttab_tc0_03B 00000000  801f4760  801f4760  00007e3c  2**0
                  CONTENTS
109 .inttab_tc0_03C 00000000  801f4780  801f4780  00007e3c  2**0
                  CONTENTS
110 .inttab_tc0_03D 00000000  801f47a0  801f47a0  00007e3c  2**0
                  CONTENTS
111 .inttab_tc0_03E 00000000  801f47c0  801f47c0  00007e3c  2**0
                  CONTENTS
112 .inttab_tc0_03F 00000000  801f47e0  801f47e0  00007e3c  2**0
                  CONTENTS
113 .inttab_tc0_040 00000000  801f4800  801f4800  00007e3c  2**0
                  CONTENTS
114 .inttab_tc0_041 00000000  801f4820  801f4820  00007e3c  2**0
                  CONTENTS
115 .inttab_tc0_042 00000000  801f4840  801f4840  00007e3c  2**0
                  CONTENTS
116 .inttab_tc0_043 00000000  801f4860  801f4860  00007e3c  2**0
                  CONTENTS
117 .inttab_tc0_044 00000000  801f4880  801f4880  00007e3c  2**0
                  CONTENTS
118 .inttab_tc0_045 00000000  801f48a0  801f48a0  00007e3c  2**0
                  CONTENTS
119 .inttab_tc0_046 00000000  801f48c0  801f48c0  00007e3c  2**0
                  CONTENTS
120 .inttab_tc0_047 00000000  801f48e0  801f48e0  00007e3c  2**0
                  CONTENTS
121 .inttab_tc0_048 00000000  801f4900  801f4900  00007e3c  2**0
                  CONTENTS
122 .inttab_tc0_049 00000000  801f4920  801f4920  00007e3c  2**0
                  CONTENTS
123 .inttab_tc0_04A 00000000  801f4940  801f4940  00007e3c  2**0
                  CONTENTS
124 .inttab_tc0_04B 00000000  801f4960  801f4960  00007e3c  2**0
                  CONTENTS
125 .inttab_tc0_04C 00000000  801f4980  801f4980  00007e3c  2**0
                  CONTENTS
126 .inttab_tc0_04D 00000000  801f49a0  801f49a0  00007e3c  2**0
                  CONTENTS
127 .inttab_tc0_04E 00000000  801f49c0  801f49c0  00007e3c  2**0
                  CONTENTS
128 .inttab_tc0_04F 00000000  801f49e0  801f49e0  00007e3c  2**0
                  CONTENTS
129 .inttab_tc0_050 00000000  801f4a00  801f4a00  00007e3c  2**0
                  CONTENTS
130 .inttab_tc0_051 00000000  801f4a20  801f4a20  00007e3c  2**0
                  CONTENTS
131 .inttab_tc0_052 00000000  801f4a40  801f4a40  00007e3c  2**0
                  CONTENTS
132 .inttab_tc0_053 00000000  801f4a60  801f4a60  00007e3c  2**0
                  CONTENTS
133 .inttab_tc0_054 00000000  801f4a80  801f4a80  00007e3c  2**0
                  CONTENTS
134 .inttab_tc0_055 00000000  801f4aa0  801f4aa0  00007e3c  2**0
                  CONTENTS
135 .inttab_tc0_056 00000000  801f4ac0  801f4ac0  00007e3c  2**0
                  CONTENTS
136 .inttab_tc0_057 00000000  801f4ae0  801f4ae0  00007e3c  2**0
                  CONTENTS
137 .inttab_tc0_058 00000000  801f4b00  801f4b00  00007e3c  2**0
                  CONTENTS
138 .inttab_tc0_059 00000000  801f4b20  801f4b20  00007e3c  2**0
                  CONTENTS
139 .inttab_tc0_05A 00000000  801f4b40  801f4b40  00007e3c  2**0
                  CONTENTS
140 .inttab_tc0_05B 00000000  801f4b60  801f4b60  00007e3c  2**0
                  CONTENTS
141 .inttab_tc0_05C 00000000  801f4b80  801f4b80  00007e3c  2**0
                  CONTENTS
142 .inttab_tc0_05D 00000000  801f4ba0  801f4ba0  00007e3c  2**0
                  CONTENTS
143 .inttab_tc0_05E 00000000  801f4bc0  801f4bc0  00007e3c  2**0
                  CONTENTS
144 .inttab_tc0_05F 00000000  801f4be0  801f4be0  00007e3c  2**0
                  CONTENTS
145 .inttab_tc0_060 00000000  801f4c00  801f4c00  00007e3c  2**0
                  CONTENTS
146 .inttab_tc0_061 00000000  801f4c20  801f4c20  00007e3c  2**0
                  CONTENTS
147 .inttab_tc0_062 00000000  801f4c40  801f4c40  00007e3c  2**0
                  CONTENTS
148 .inttab_tc0_063 00000000  801f4c60  801f4c60  00007e3c  2**0
                  CONTENTS
149 .inttab_tc0_064 0000000e  801f4c80  801f4c80  0000768a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .inttab_tc0_065 00000000  801f4ca0  801f4ca0  00007e3c  2**0
                  CONTENTS
151 .inttab_tc0_066 00000000  801f4cc0  801f4cc0  00007e3c  2**0
                  CONTENTS
152 .inttab_tc0_067 00000000  801f4ce0  801f4ce0  00007e3c  2**0
                  CONTENTS
153 .inttab_tc0_068 00000000  801f4d00  801f4d00  00007e3c  2**0
                  CONTENTS
154 .inttab_tc0_069 00000000  801f4d20  801f4d20  00007e3c  2**0
                  CONTENTS
155 .inttab_tc0_06A 00000000  801f4d40  801f4d40  00007e3c  2**0
                  CONTENTS
156 .inttab_tc0_06B 00000000  801f4d60  801f4d60  00007e3c  2**0
                  CONTENTS
157 .inttab_tc0_06C 00000000  801f4d80  801f4d80  00007e3c  2**0
                  CONTENTS
158 .inttab_tc0_06D 00000000  801f4da0  801f4da0  00007e3c  2**0
                  CONTENTS
159 .inttab_tc0_06E 00000000  801f4dc0  801f4dc0  00007e3c  2**0
                  CONTENTS
160 .inttab_tc0_06F 00000000  801f4de0  801f4de0  00007e3c  2**0
                  CONTENTS
161 .inttab_tc0_070 00000000  801f4e00  801f4e00  00007e3c  2**0
                  CONTENTS
162 .inttab_tc0_071 00000000  801f4e20  801f4e20  00007e3c  2**0
                  CONTENTS
163 .inttab_tc0_072 00000000  801f4e40  801f4e40  00007e3c  2**0
                  CONTENTS
164 .inttab_tc0_073 00000000  801f4e60  801f4e60  00007e3c  2**0
                  CONTENTS
165 .inttab_tc0_074 00000000  801f4e80  801f4e80  00007e3c  2**0
                  CONTENTS
166 .inttab_tc0_075 00000000  801f4ea0  801f4ea0  00007e3c  2**0
                  CONTENTS
167 .inttab_tc0_076 00000000  801f4ec0  801f4ec0  00007e3c  2**0
                  CONTENTS
168 .inttab_tc0_077 00000000  801f4ee0  801f4ee0  00007e3c  2**0
                  CONTENTS
169 .inttab_tc0_078 00000000  801f4f00  801f4f00  00007e3c  2**0
                  CONTENTS
170 .inttab_tc0_079 00000000  801f4f20  801f4f20  00007e3c  2**0
                  CONTENTS
171 .inttab_tc0_07A 00000000  801f4f40  801f4f40  00007e3c  2**0
                  CONTENTS
172 .inttab_tc0_07B 00000000  801f4f60  801f4f60  00007e3c  2**0
                  CONTENTS
173 .inttab_tc0_07C 00000000  801f4f80  801f4f80  00007e3c  2**0
                  CONTENTS
174 .inttab_tc0_07D 00000000  801f4fa0  801f4fa0  00007e3c  2**0
                  CONTENTS
175 .inttab_tc0_07E 00000000  801f4fc0  801f4fc0  00007e3c  2**0
                  CONTENTS
176 .inttab_tc0_07F 00000000  801f4fe0  801f4fe0  00007e3c  2**0
                  CONTENTS
177 .inttab_tc0_080 00000000  801f5000  801f5000  00007e3c  2**0
                  CONTENTS
178 .inttab_tc0_081 00000000  801f5020  801f5020  00007e3c  2**0
                  CONTENTS
179 .inttab_tc0_082 00000000  801f5040  801f5040  00007e3c  2**0
                  CONTENTS
180 .inttab_tc0_083 00000000  801f5060  801f5060  00007e3c  2**0
                  CONTENTS
181 .inttab_tc0_084 00000000  801f5080  801f5080  00007e3c  2**0
                  CONTENTS
182 .inttab_tc0_085 00000000  801f50a0  801f50a0  00007e3c  2**0
                  CONTENTS
183 .inttab_tc0_086 00000000  801f50c0  801f50c0  00007e3c  2**0
                  CONTENTS
184 .inttab_tc0_087 00000000  801f50e0  801f50e0  00007e3c  2**0
                  CONTENTS
185 .inttab_tc0_088 00000000  801f5100  801f5100  00007e3c  2**0
                  CONTENTS
186 .inttab_tc0_089 00000000  801f5120  801f5120  00007e3c  2**0
                  CONTENTS
187 .inttab_tc0_08A 00000000  801f5140  801f5140  00007e3c  2**0
                  CONTENTS
188 .inttab_tc0_08B 00000000  801f5160  801f5160  00007e3c  2**0
                  CONTENTS
189 .inttab_tc0_08C 00000000  801f5180  801f5180  00007e3c  2**0
                  CONTENTS
190 .inttab_tc0_08D 00000000  801f51a0  801f51a0  00007e3c  2**0
                  CONTENTS
191 .inttab_tc0_08E 00000000  801f51c0  801f51c0  00007e3c  2**0
                  CONTENTS
192 .inttab_tc0_08F 00000000  801f51e0  801f51e0  00007e3c  2**0
                  CONTENTS
193 .inttab_tc0_090 00000000  801f5200  801f5200  00007e3c  2**0
                  CONTENTS
194 .inttab_tc0_091 00000000  801f5220  801f5220  00007e3c  2**0
                  CONTENTS
195 .inttab_tc0_092 00000000  801f5240  801f5240  00007e3c  2**0
                  CONTENTS
196 .inttab_tc0_093 00000000  801f5260  801f5260  00007e3c  2**0
                  CONTENTS
197 .inttab_tc0_094 00000000  801f5280  801f5280  00007e3c  2**0
                  CONTENTS
198 .inttab_tc0_095 00000000  801f52a0  801f52a0  00007e3c  2**0
                  CONTENTS
199 .inttab_tc0_096 00000000  801f52c0  801f52c0  00007e3c  2**0
                  CONTENTS
200 .inttab_tc0_097 00000000  801f52e0  801f52e0  00007e3c  2**0
                  CONTENTS
201 .inttab_tc0_098 00000000  801f5300  801f5300  00007e3c  2**0
                  CONTENTS
202 .inttab_tc0_099 00000000  801f5320  801f5320  00007e3c  2**0
                  CONTENTS
203 .inttab_tc0_09A 00000000  801f5340  801f5340  00007e3c  2**0
                  CONTENTS
204 .inttab_tc0_09B 00000000  801f5360  801f5360  00007e3c  2**0
                  CONTENTS
205 .inttab_tc0_09C 00000000  801f5380  801f5380  00007e3c  2**0
                  CONTENTS
206 .inttab_tc0_09D 00000000  801f53a0  801f53a0  00007e3c  2**0
                  CONTENTS
207 .inttab_tc0_09E 00000000  801f53c0  801f53c0  00007e3c  2**0
                  CONTENTS
208 .inttab_tc0_09F 00000000  801f53e0  801f53e0  00007e3c  2**0
                  CONTENTS
209 .inttab_tc0_0A0 00000000  801f5400  801f5400  00007e3c  2**0
                  CONTENTS
210 .inttab_tc0_0A1 00000000  801f5420  801f5420  00007e3c  2**0
                  CONTENTS
211 .inttab_tc0_0A2 00000000  801f5440  801f5440  00007e3c  2**0
                  CONTENTS
212 .inttab_tc0_0A3 00000000  801f5460  801f5460  00007e3c  2**0
                  CONTENTS
213 .inttab_tc0_0A4 00000000  801f5480  801f5480  00007e3c  2**0
                  CONTENTS
214 .inttab_tc0_0A5 00000000  801f54a0  801f54a0  00007e3c  2**0
                  CONTENTS
215 .inttab_tc0_0A6 00000000  801f54c0  801f54c0  00007e3c  2**0
                  CONTENTS
216 .inttab_tc0_0A7 00000000  801f54e0  801f54e0  00007e3c  2**0
                  CONTENTS
217 .inttab_tc0_0A8 00000000  801f5500  801f5500  00007e3c  2**0
                  CONTENTS
218 .inttab_tc0_0A9 00000000  801f5520  801f5520  00007e3c  2**0
                  CONTENTS
219 .inttab_tc0_0AA 00000000  801f5540  801f5540  00007e3c  2**0
                  CONTENTS
220 .inttab_tc0_0AB 00000000  801f5560  801f5560  00007e3c  2**0
                  CONTENTS
221 .inttab_tc0_0AC 00000000  801f5580  801f5580  00007e3c  2**0
                  CONTENTS
222 .inttab_tc0_0AD 00000000  801f55a0  801f55a0  00007e3c  2**0
                  CONTENTS
223 .inttab_tc0_0AE 00000000  801f55c0  801f55c0  00007e3c  2**0
                  CONTENTS
224 .inttab_tc0_0AF 00000000  801f55e0  801f55e0  00007e3c  2**0
                  CONTENTS
225 .inttab_tc0_0B0 00000000  801f5600  801f5600  00007e3c  2**0
                  CONTENTS
226 .inttab_tc0_0B1 00000000  801f5620  801f5620  00007e3c  2**0
                  CONTENTS
227 .inttab_tc0_0B2 00000000  801f5640  801f5640  00007e3c  2**0
                  CONTENTS
228 .inttab_tc0_0B3 00000000  801f5660  801f5660  00007e3c  2**0
                  CONTENTS
229 .inttab_tc0_0B4 00000000  801f5680  801f5680  00007e3c  2**0
                  CONTENTS
230 .inttab_tc0_0B5 00000000  801f56a0  801f56a0  00007e3c  2**0
                  CONTENTS
231 .inttab_tc0_0B6 00000000  801f56c0  801f56c0  00007e3c  2**0
                  CONTENTS
232 .inttab_tc0_0B7 00000000  801f56e0  801f56e0  00007e3c  2**0
                  CONTENTS
233 .inttab_tc0_0B8 00000000  801f5700  801f5700  00007e3c  2**0
                  CONTENTS
234 .inttab_tc0_0B9 00000000  801f5720  801f5720  00007e3c  2**0
                  CONTENTS
235 .inttab_tc0_0BA 00000000  801f5740  801f5740  00007e3c  2**0
                  CONTENTS
236 .inttab_tc0_0BB 00000000  801f5760  801f5760  00007e3c  2**0
                  CONTENTS
237 .inttab_tc0_0BC 00000000  801f5780  801f5780  00007e3c  2**0
                  CONTENTS
238 .inttab_tc0_0BD 00000000  801f57a0  801f57a0  00007e3c  2**0
                  CONTENTS
239 .inttab_tc0_0BE 00000000  801f57c0  801f57c0  00007e3c  2**0
                  CONTENTS
240 .inttab_tc0_0BF 00000000  801f57e0  801f57e0  00007e3c  2**0
                  CONTENTS
241 .inttab_tc0_0C0 00000000  801f5800  801f5800  00007e3c  2**0
                  CONTENTS
242 .inttab_tc0_0C1 00000000  801f5820  801f5820  00007e3c  2**0
                  CONTENTS
243 .inttab_tc0_0C2 00000000  801f5840  801f5840  00007e3c  2**0
                  CONTENTS
244 .inttab_tc0_0C3 00000000  801f5860  801f5860  00007e3c  2**0
                  CONTENTS
245 .inttab_tc0_0C4 00000000  801f5880  801f5880  00007e3c  2**0
                  CONTENTS
246 .inttab_tc0_0C5 00000000  801f58a0  801f58a0  00007e3c  2**0
                  CONTENTS
247 .inttab_tc0_0C6 00000000  801f58c0  801f58c0  00007e3c  2**0
                  CONTENTS
248 .inttab_tc0_0C7 00000000  801f58e0  801f58e0  00007e3c  2**0
                  CONTENTS
249 .inttab_tc0_0C8 0000000e  801f5900  801f5900  00007698  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .inttab_tc0_0C9 00000000  801f5920  801f5920  00007e3c  2**0
                  CONTENTS
251 .inttab_tc0_0CA 00000000  801f5940  801f5940  00007e3c  2**0
                  CONTENTS
252 .inttab_tc0_0CB 00000000  801f5960  801f5960  00007e3c  2**0
                  CONTENTS
253 .inttab_tc0_0CC 00000000  801f5980  801f5980  00007e3c  2**0
                  CONTENTS
254 .inttab_tc0_0CD 00000000  801f59a0  801f59a0  00007e3c  2**0
                  CONTENTS
255 .inttab_tc0_0CE 00000000  801f59c0  801f59c0  00007e3c  2**0
                  CONTENTS
256 .inttab_tc0_0CF 00000000  801f59e0  801f59e0  00007e3c  2**0
                  CONTENTS
257 .inttab_tc0_0D0 00000000  801f5a00  801f5a00  00007e3c  2**0
                  CONTENTS
258 .inttab_tc0_0D1 00000000  801f5a20  801f5a20  00007e3c  2**0
                  CONTENTS
259 .inttab_tc0_0D2 00000000  801f5a40  801f5a40  00007e3c  2**0
                  CONTENTS
260 .inttab_tc0_0D3 00000000  801f5a60  801f5a60  00007e3c  2**0
                  CONTENTS
261 .inttab_tc0_0D4 00000000  801f5a80  801f5a80  00007e3c  2**0
                  CONTENTS
262 .inttab_tc0_0D5 00000000  801f5aa0  801f5aa0  00007e3c  2**0
                  CONTENTS
263 .inttab_tc0_0D6 00000000  801f5ac0  801f5ac0  00007e3c  2**0
                  CONTENTS
264 .inttab_tc0_0D7 00000000  801f5ae0  801f5ae0  00007e3c  2**0
                  CONTENTS
265 .inttab_tc0_0D8 00000000  801f5b00  801f5b00  00007e3c  2**0
                  CONTENTS
266 .inttab_tc0_0D9 00000000  801f5b20  801f5b20  00007e3c  2**0
                  CONTENTS
267 .inttab_tc0_0DA 00000000  801f5b40  801f5b40  00007e3c  2**0
                  CONTENTS
268 .inttab_tc0_0DB 00000000  801f5b60  801f5b60  00007e3c  2**0
                  CONTENTS
269 .inttab_tc0_0DC 00000000  801f5b80  801f5b80  00007e3c  2**0
                  CONTENTS
270 .inttab_tc0_0DD 00000000  801f5ba0  801f5ba0  00007e3c  2**0
                  CONTENTS
271 .inttab_tc0_0DE 00000000  801f5bc0  801f5bc0  00007e3c  2**0
                  CONTENTS
272 .inttab_tc0_0DF 00000000  801f5be0  801f5be0  00007e3c  2**0
                  CONTENTS
273 .inttab_tc0_0E0 00000000  801f5c00  801f5c00  00007e3c  2**0
                  CONTENTS
274 .inttab_tc0_0E1 00000000  801f5c20  801f5c20  00007e3c  2**0
                  CONTENTS
275 .inttab_tc0_0E2 00000000  801f5c40  801f5c40  00007e3c  2**0
                  CONTENTS
276 .inttab_tc0_0E3 00000000  801f5c60  801f5c60  00007e3c  2**0
                  CONTENTS
277 .inttab_tc0_0E4 00000000  801f5c80  801f5c80  00007e3c  2**0
                  CONTENTS
278 .inttab_tc0_0E5 00000000  801f5ca0  801f5ca0  00007e3c  2**0
                  CONTENTS
279 .inttab_tc0_0E6 00000000  801f5cc0  801f5cc0  00007e3c  2**0
                  CONTENTS
280 .inttab_tc0_0E7 00000000  801f5ce0  801f5ce0  00007e3c  2**0
                  CONTENTS
281 .inttab_tc0_0E8 00000000  801f5d00  801f5d00  00007e3c  2**0
                  CONTENTS
282 .inttab_tc0_0E9 00000000  801f5d20  801f5d20  00007e3c  2**0
                  CONTENTS
283 .inttab_tc0_0EA 00000000  801f5d40  801f5d40  00007e3c  2**0
                  CONTENTS
284 .inttab_tc0_0EB 00000000  801f5d60  801f5d60  00007e3c  2**0
                  CONTENTS
285 .inttab_tc0_0EC 00000000  801f5d80  801f5d80  00007e3c  2**0
                  CONTENTS
286 .inttab_tc0_0ED 00000000  801f5da0  801f5da0  00007e3c  2**0
                  CONTENTS
287 .inttab_tc0_0EE 00000000  801f5dc0  801f5dc0  00007e3c  2**0
                  CONTENTS
288 .inttab_tc0_0EF 00000000  801f5de0  801f5de0  00007e3c  2**0
                  CONTENTS
289 .inttab_tc0_0F0 00000000  801f5e00  801f5e00  00007e3c  2**0
                  CONTENTS
290 .inttab_tc0_0F1 00000000  801f5e20  801f5e20  00007e3c  2**0
                  CONTENTS
291 .inttab_tc0_0F2 00000000  801f5e40  801f5e40  00007e3c  2**0
                  CONTENTS
292 .inttab_tc0_0F3 00000000  801f5e60  801f5e60  00007e3c  2**0
                  CONTENTS
293 .inttab_tc0_0F4 00000000  801f5e80  801f5e80  00007e3c  2**0
                  CONTENTS
294 .inttab_tc0_0F5 00000000  801f5ea0  801f5ea0  00007e3c  2**0
                  CONTENTS
295 .inttab_tc0_0F6 00000000  801f5ec0  801f5ec0  00007e3c  2**0
                  CONTENTS
296 .inttab_tc0_0F7 00000000  801f5ee0  801f5ee0  00007e3c  2**0
                  CONTENTS
297 .inttab_tc0_0F8 00000000  801f5f00  801f5f00  00007e3c  2**0
                  CONTENTS
298 .inttab_tc0_0F9 00000000  801f5f20  801f5f20  00007e3c  2**0
                  CONTENTS
299 .inttab_tc0_0FA 00000000  801f5f40  801f5f40  00007e3c  2**0
                  CONTENTS
300 .inttab_tc0_0FB 00000000  801f5f60  801f5f60  00007e3c  2**0
                  CONTENTS
301 .inttab_tc0_0FC 00000000  801f5f80  801f5f80  00007e3c  2**0
                  CONTENTS
302 .inttab_tc0_0FD 00000000  801f5fa0  801f5fa0  00007e3c  2**0
                  CONTENTS
303 .inttab_tc0_0FE 00000000  801f5fc0  801f5fc0  00007e3c  2**0
                  CONTENTS
304 .inttab_tc0_0FF 00000000  801f5fe0  801f5fe0  00007e3c  2**0
                  CONTENTS
305 .comment      0000001b  00000000  00000000  00007e3c  2**0
                  CONTENTS, READONLY
306 .debug_aranges 000011a8  00000000  00000000  00007e58  2**3
                  CONTENTS, READONLY, DEBUGGING
307 .debug_info   001ac72a  00000000  00000000  00009000  2**0
                  CONTENTS, READONLY, DEBUGGING
308 .debug_abbrev 00009e38  00000000  00000000  001b572a  2**0
                  CONTENTS, READONLY, DEBUGGING
309 .debug_line   000238cd  00000000  00000000  001bf562  2**0
                  CONTENTS, READONLY, DEBUGGING
310 .debug_frame  00002498  00000000  00000000  001e2e30  2**2
                  CONTENTS, READONLY, DEBUGGING
311 .debug_str    000061c6  00000000  00000000  001e52c8  2**0
                  CONTENTS, READONLY, DEBUGGING
312 .debug_loc    0000fb34  00000000  00000000  001eb48e  2**0
                  CONTENTS, READONLY, DEBUGGING
313 .debug_ranges 000018b0  00000000  00000000  001fafc8  2**3
                  CONTENTS, READONLY, DEBUGGING
314 .debug_macro  000f2b16  00000000  00000000  001fc878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startup:

80000020 <_START>:
#elif defined(__DCC__)
#pragma section CODE ".start" X
#endif

void _START(void)
{
80000020:	40 ae       	mov.aa %a14,%sp
    __non_return_call(_Core0_start);
80000022:	91 00 00 28 	movh.a %a2,32768
80000026:	d9 22 62 94 	lea %a2,[%a2]18018 <80004662 <_Core0_start>>
8000002a:	dc 02       	ji %a2
}
8000002c:	00 90       	ret 

8000002e <_START_end>:
8000002e:	08 00       	ld.bu %d0,[%a15]0

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 24 84 	lea %a2,[%a2]16932 <80004224 <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 12 94 	lea %a2,[%a2]16978 <80004252 <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 00 a4 	lea %a2,[%a2]17024 <80004280 <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 2e a4 	lea %a2,[%a2]17070 <800042ae <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 1c b4 	lea %a2,[%a2]17116 <800042dc <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 0a c4 	lea %a2,[%a2]17162 <8000430a <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 3e c4 	lea %a2,[%a2]17214 <8000433e <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 02 f4 	lea %a2,[%a2]17346 <800043c2 <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .text:

800005f8 <deregister_tm_clones>:
800005f8:	7b 00 00 26 	movh %d2,24576
800005fc:	1b c2 57 20 	addi %d2,%d2,1404
80000600:	91 00 00 46 	movh.a %a4,24576
80000604:	60 22       	mov.a %a2,%d2
80000606:	d9 44 7c 50 	lea %a4,[%a4]1404 <6000057c <__TMC_END__>>
8000060a:	7d 42 0a 00 	jeq.a %a2,%a4,8000061e <deregister_tm_clones+0x26>
8000060e:	91 00 00 20 	movh.a %a2,0
80000612:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
80000616:	bd 02 04 00 	jz.a %a2,8000061e <deregister_tm_clones+0x26>
8000061a:	2d 02 00 00 	calli %a2
8000061e:	00 90       	ret 

80000620 <register_tm_clones>:
80000620:	7b 00 00 26 	movh %d2,24576
80000624:	1b c2 57 20 	addi %d2,%d2,1404
80000628:	91 00 00 46 	movh.a %a4,24576
8000062c:	60 22       	mov.a %a2,%d2
8000062e:	d9 44 7c 50 	lea %a4,[%a4]1404 <6000057c <__TMC_END__>>
80000632:	01 42 20 20 	sub.a %a2,%a2,%a4
80000636:	80 22       	mov.d %d2,%a2
80000638:	8f e2 3f 30 	sha %d3,%d2,-2
8000063c:	8f 12 1e 20 	sh %d2,%d2,-31
80000640:	42 32       	add %d2,%d3
80000642:	8f f2 3f 40 	sha %d4,%d2,-1
80000646:	df 04 0a 00 	jeq %d4,0,8000065a <register_tm_clones+0x3a>
8000064a:	91 00 00 20 	movh.a %a2,0
8000064e:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
80000652:	bd 02 04 00 	jz.a %a2,8000065a <register_tm_clones+0x3a>
80000656:	2d 02 00 00 	calli %a2
8000065a:	00 90       	ret 

8000065c <__do_global_dtors_aux>:
8000065c:	91 00 00 e6 	movh.a %a14,24576
80000660:	39 e2 40 60 	ld.bu %d2,[%a14]1408 <60000580 <completed.1>>
80000664:	df 02 2d 80 	jne %d2,0,800006be <__do_global_dtors_aux+0x62>
80000668:	91 00 00 38 	movh.a %a3,32768
8000066c:	91 00 00 28 	movh.a %a2,32768
80000670:	d9 33 60 07 	lea %a3,[%a3]29728 <80007420 <__DTOR_END__>>
80000674:	d9 22 54 07 	lea %a2,[%a2]29716 <80007414 <__DTOR_LIST__>>
80000678:	01 23 20 20 	sub.a %a2,%a3,%a2
8000067c:	80 22       	mov.d %d2,%a2
8000067e:	86 e2       	sha %d2,-2
80000680:	1b f2 ff 8f 	addi %d8,%d2,-1
80000684:	91 00 00 c6 	movh.a %a12,24576
80000688:	7b 00 00 28 	movh %d2,32768
8000068c:	1b 42 41 27 	addi %d2,%d2,29716
80000690:	60 2d       	mov.a %a13,%d2
80000692:	19 c2 44 60 	ld.w %d2,[%a12]1412 <60000584 <dtor_idx.0>>
80000696:	7f 82 0f 80 	jge.u %d2,%d8,800006b4 <__do_global_dtors_aux+0x58>
8000069a:	d9 cc 44 60 	lea %a12,[%a12]1412 <60000584 <dtor_idx.0>>
8000069e:	c2 12       	add %d2,1
800006a0:	74 c2       	st.w [%a12],%d2
800006a2:	06 22       	sh %d2,2
800006a4:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800006a8:	d4 22       	ld.a %a2,[%a2]
800006aa:	2d 02 00 00 	calli %a2
800006ae:	54 c2       	ld.w %d2,[%a12]
800006b0:	3f 82 f7 ff 	jlt.u %d2,%d8,8000069e <__do_global_dtors_aux+0x42>
800006b4:	6d ff a2 ff 	call 800005f8 <deregister_tm_clones>
800006b8:	82 12       	mov %d2,1
800006ba:	e9 e2 40 60 	st.b [%a14]1408 <60000580 <completed.1>>,%d2
800006be:	00 90       	ret 

800006c0 <frame_dummy>:
800006c0:	6d ff b0 ff 	call 80000620 <register_tm_clones>
800006c4:	00 90       	ret 

800006c6 <init_UART>:
/*송신/수신 데이터 버퍼 변수 선언*/
uint8 g_uartTxBuffer[ASC_TX_BUFFER_SIZE + sizeof(Ifx_Fifo) + 8];
uint8 g_uartRxBuffer[ASC_RX_BUFFER_SIZE + sizeof(Ifx_Fifo) + 8];

void init_UART(void)
{
800006c6:	40 ae       	mov.aa %a14,%sp
800006c8:	20 98       	sub.a %sp,152
    IfxAsclin_Asc_Config ascConf; // UART config 구조체 선언

    /*Set default configurations*/
    IfxAsclin_Asc_initModuleConfig(&ascConf, &MODULE_ASCLIN3); /* Initiallize the structure with default values*/
800006ca:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x5fff8900>
800006ce:	d9 e4 cc ef 	lea %a4,[%a14]-116
800006d2:	6d 00 93 28 	call 800057f8 <IfxAsclin_Asc_initModuleConfig>
    //구조체 디폴트 값으로 초기화

    /* Set the desired baud rate */
    ascConf.baudrate.baudrate   = ASC_BAUDRATE; /*baudrate 설정 */
800006d6:	7b 10 7e 24 	movh %d2,18401
800006da:	59 e2 d0 ef 	st.w [%a14]-112,%d2
    ascConf.baudrate.oversampling = IfxAsclin_OversamplingFactor_16;/* 한 비트에 몇 번 샘플링 할지(데이터 정확성 향상)*/
800006de:	3b f0 00 20 	mov %d2,15
800006e2:	59 e2 d8 ef 	st.w [%a14]-104,%d2

    /*Configure the sampling mode */
    ascConf.interrupt.txPriority  = ISR_PRIORITY_ASCLIN_TX; /* TX 인터럽트 순위 설정 */
800006e6:	3b 80 00 20 	mov %d2,8
800006ea:	f9 e2 d4 ff 	st.h [%a14]-44,%d2
    ascConf.interrupt.rxPriority  = ISR_PRIORITY_ASCLIN_RX;/* RX 인터럽트 순위 설정 */
800006ee:	82 42       	mov %d2,4
800006f0:	f9 e2 d6 ff 	st.h [%a14]-42,%d2
    ascConf.interrupt.erPriority  = ISR_PRIORITY_ASCLIN_ER;/* 에러 인터럽트 순위 설정 */
800006f4:	3b c0 00 20 	mov %d2,12
800006f8:	f9 e2 d8 ff 	st.h [%a14]-40,%d2
    ascConf.interrupt.typeOfService  = IfxSrc_Tos_cpu0;    /* 인터럽트 발생 CPU 설정 */
800006fc:	82 02       	mov %d2,0
800006fe:	59 e2 dc ff 	st.w [%a14]-36,%d2

    /*Pin configuration*/
    const IfxAsclin_Asc_Pins pins = {
80000702:	d9 e3 e8 df 	lea %a3,[%a14]-152
80000706:	91 00 00 26 	movh.a %a2,24576
8000070a:	d9 22 00 00 	lea %a2,[%a2]0 <60000000 <LCF_DSPR1_START>>
8000070e:	40 34       	mov.aa %a4,%a3
80000710:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
80000714:	89 44 48 01 	st.d [%a4+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80000718:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
8000071c:	89 44 48 01 	st.d [%a4+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80000720:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
80000724:	89 44 48 01 	st.d [%a4+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80000728:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
8000072c:	89 44 48 01 	st.d [%a4+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80000730:	44 24       	ld.w %d4,[%a2+]
80000732:	64 44       	st.w [%a4+],%d4
            .rts  = NULL_PTR, /*RTS pin not used (request to send)*/
            .rtsMode  = IfxPort_OutputMode_pushPull,
            .pinDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1, /*핀 드라이버 선택*/

    };
    ascConf.pins = &pins;
80000734:	b5 e3 e0 ff 	st.a [%a14]-32 <60000008 <LCF_DSPR1_START+0x8>>,%a3

    /*FIFO buffers configuration */
     ascConf.txBuffer  = g_uartTxBuffer;  /*Set the Transmission buffer*/
80000738:	91 00 00 26 	movh.a %a2,24576
8000073c:	d9 22 b0 00 	lea %a2,[%a2]2096 <60000830 <g_uartTxBuffer>>
80000740:	b5 e2 ec ff 	st.a [%a14]-20 <60000830 <g_uartTxBuffer>>,%a2
     ascConf.txBufferSize = ASC_TX_BUFFER_SIZE;
80000744:	3b 00 10 20 	mov %d2,256
80000748:	f9 e2 ea ff 	st.h [%a14]-22,%d2
     ascConf.rxBuffer = g_uartRxBuffer;
8000074c:	91 00 00 26 	movh.a %a2,24576
80000750:	d9 22 48 c0 	lea %a2,[%a2]1800 <60000708 <g_uartRxBuffer>>
80000754:	b5 e2 f4 ff 	st.a [%a14]-12 <60000708 <g_uartRxBuffer>>,%a2
     ascConf.rxBufferSize = ASC_RX_BUFFER_SIZE;
80000758:	f9 e2 f0 ff 	st.h [%a14]-16 <60000708 <g_uartRxBuffer>>,%d2

     /*Init ASCLIN module */
     IfxAsclin_Asc_initModule(&g_ascHandle0, &ascConf);
8000075c:	d9 e5 cc ef 	lea %a5,[%a14]-116 <60000708 <g_uartRxBuffer>>
80000760:	91 00 00 46 	movh.a %a4,24576
80000764:	d9 44 98 50 	lea %a4,[%a4]2392 <60000958 <g_ascHandle0>>
80000768:	6d 00 0e 26 	call 80005384 <IfxAsclin_Asc_initModule>


}
8000076c:	00 90       	ret 

8000076e <out_UART0>:

void out_UART0(const unsigned char chr)
{
8000076e:	40 ae       	mov.aa %a14,%sp
    IfxAsclin_Asc_blockingWrite(&g_ascHandle0, chr);
80000770:	8f f4 0f 41 	and %d4,%d4,255
80000774:	91 00 00 46 	movh.a %a4,24576
80000778:	d9 44 98 50 	lea %a4,[%a4]2392 <60000958 <g_ascHandle0>>
8000077c:	6d 00 f9 28 	call 8000596e <IfxAsclin_Asc_blockingWrite>
}
80000780:	00 90       	ret 

80000782 <asc0TxISR>:

IFX_INTERRUPT(asc0TxISR, 0 , ISR_PRIORITY_ASCLIN_TX);
void asc0TxISR(void){IfxAsclin_Asc_isrTransmit(&g_ascHandle0);}
80000782:	40 ae       	mov.aa %a14,%sp
80000784:	91 00 00 46 	movh.a %a4,24576
80000788:	d9 44 98 50 	lea %a4,[%a4]2392 <60000958 <g_ascHandle0>>
8000078c:	6d 00 22 25 	call 800051d0 <IfxAsclin_Asc_isrTransmit>
80000790:	0d 00 40 02 	rslcx 
80000794:	00 80       	rfe 

80000796 <asc0RxISR>:

IFX_INTERRUPT(asc0RxISR, 0 , ISR_PRIORITY_ASCLIN_RX);
void asc0RxISR(void)
{
80000796:	40 ae       	mov.aa %a14,%sp

    IfxAsclin_Asc_isrReceive(&g_ascHandle0);
80000798:	91 00 00 c6 	movh.a %a12,24576
8000079c:	d9 cc 98 50 	lea %a12,[%a12]2392 <60000958 <g_ascHandle0>>
800007a0:	40 c4       	mov.aa %a4,%a12
800007a2:	6d 00 7d 25 	call 8000529c <IfxAsclin_Asc_isrReceive>
    RXDATA = IfxAsclin_Asc_blockingRead(&g_ascHandle0);
800007a6:	40 c4       	mov.aa %a4,%a12
800007a8:	6d 00 d9 25 	call 8000535a <IfxAsclin_Asc_blockingRead>
800007ac:	91 00 00 26 	movh.a %a2,24576
800007b0:	e9 22 90 60 	st.b [%a2]2448 <60000990 <RXDATA>>,%d2

    RXcnt++;
800007b4:	91 00 00 26 	movh.a %a2,24576
800007b8:	d9 23 8c 60 	lea %a3,[%a2]2444 <6000098c <RXcnt>>
800007bc:	54 33       	ld.w %d3,[%a3]
800007be:	7b 00 f8 23 	movh %d2,16256
800007c2:	6b 02 21 23 	add.f %d2,%d3,%d2
800007c6:	74 32       	st.w [%a3],%d2
}
800007c8:	0d 00 40 02 	rslcx 
800007cc:	00 80       	rfe 

800007ce <asc0ErrISR>:

IFX_INTERRUPT(asc0ErrISR, 0, ISR_PRIORITY_ASCLIN_ER);
void asc0ErrISR(void){while(1);}
800007ce:	40 ae       	mov.aa %a14,%sp
800007d0:	1d 00 00 00 	j 800007d0 <asc0ErrISR+0x2>

800007d4 <Task1ms>:
    }
}


void Task1ms(void)
{
800007d4:	40 ae       	mov.aa %a14,%sp
    cnt1ms++;
800007d6:	91 00 00 26 	movh.a %a2,24576
800007da:	d9 23 84 b0 	lea %a3,[%a2]2756 <60000ac4 <cnt1ms>>
800007de:	54 32       	ld.w %d2,[%a3]
800007e0:	c2 12       	add %d2,1
800007e2:	59 22 84 b0 	st.w [%a2]2756 <60000ac4 <cnt1ms>>,%d2
}
800007e6:	00 90       	ret 

800007e8 <Task10ms>:
void Task10ms(void)
{
800007e8:	40 ae       	mov.aa %a14,%sp
    cnt10ms++;
800007ea:	91 00 00 26 	movh.a %a2,24576
800007ee:	d9 23 80 b0 	lea %a3,[%a2]2752 <60000ac0 <cnt10ms>>
800007f2:	54 32       	ld.w %d2,[%a3]
800007f4:	c2 12       	add %d2,1
800007f6:	59 22 80 b0 	st.w [%a2]2752 <60000ac0 <cnt10ms>>,%d2
}
800007fa:	00 90       	ret 

800007fc <Task100ms>:
void Task100ms(void)
{
800007fc:	40 ae       	mov.aa %a14,%sp
    cnt100ms++;
800007fe:	91 00 00 26 	movh.a %a2,24576
80000802:	d9 23 bc a0 	lea %a3,[%a2]2748 <60000abc <cnt100ms>>
80000806:	54 32       	ld.w %d2,[%a3]
80000808:	c2 12       	add %d2,1
8000080a:	59 22 bc a0 	st.w [%a2]2748 <60000abc <cnt100ms>>,%d2
    out_UART0('A');
8000080e:	3b 10 04 40 	mov %d4,65
80000812:	6d ff ae ff 	call 8000076e <out_UART0>
    //ADC_G3_GetData();
    //PWM_dutyUpdate();
}
80000816:	00 90       	ret 

80000818 <AppScheduling>:
{
80000818:	40 ae       	mov.aa %a14,%sp
    if (Scheduler1msFlag == 1)
8000081a:	91 00 00 26 	movh.a %a2,24576
8000081e:	19 22 80 60 	ld.w %d2,[%a2]2432 <60000980 <Scheduler1msFlag>>
80000822:	df 12 03 00 	jeq %d2,1,80000828 <AppScheduling+0x10>
}
80000826:	00 90       	ret 
        Scheduler1msFlag = 0;
80000828:	82 02       	mov %d2,0
8000082a:	59 22 80 60 	st.w [%a2]2432,%d2
        Task1ms();
8000082e:	6d ff d3 ff 	call 800007d4 <Task1ms>
        if (Scheduler10msFlag == 1)
80000832:	91 00 00 26 	movh.a %a2,24576
80000836:	19 22 bc 50 	ld.w %d2,[%a2]2428 <6000097c <Scheduler10msFlag>>
8000083a:	df 12 0f 00 	jeq %d2,1,80000858 <AppScheduling+0x40>
        if (Scheduler100msFlag == 1)
8000083e:	91 00 00 26 	movh.a %a2,24576
80000842:	19 22 b8 50 	ld.w %d2,[%a2]2424 <60000978 <Scheduler100msFlag>>
80000846:	df 12 f0 ff 	jne %d2,1,80000826 <AppScheduling+0xe>
            Scheduler100msFlag = 0;
8000084a:	82 02       	mov %d2,0
8000084c:	59 22 b8 50 	st.w [%a2]2424 <60000978 <Scheduler100msFlag>>,%d2
            Task100ms();
80000850:	6d ff d6 ff 	call 800007fc <Task100ms>
}
80000854:	1d ff e9 ff 	j 80000826 <AppScheduling+0xe>
            Scheduler10msFlag = 0;
80000858:	82 02       	mov %d2,0
8000085a:	59 22 bc 50 	st.w [%a2]2428,%d2
            Task10ms();
8000085e:	6d ff c5 ff 	call 800007e8 <Task10ms>
80000862:	1d ff ee ff 	j 8000083e <AppScheduling+0x26>

80000866 <init_STM>:
uint32 Scheduler1msFlag = 0;
uint32 Scheduler10msFlag = 0;
uint32 Scheduler100msFlag = 0;

void init_STM(void)
{
80000866:	40 ae       	mov.aa %a14,%sp
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80000868:	4d c0 e2 8f 	mfcr %d8,$icr
    return reg.B.IE != 0;
8000086c:	37 08 e1 87 	extr.u %d8,%d8,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80000870:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80000874:	00 00       	nop 
    boolean ISR_State = IfxCpu_disableInterrupts();     // 진행 중인 인터럽트를 반환 및 인터럽트 중지

    IfxStm_enableOcdsSuspend(STM0);                     //OCDS: on chip debugging system [디버깅 시,cpu 중단하면 타이머도 같이 중단되도록 설정(시스템 상태분석 용이)]
80000876:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000087a:	6d 00 70 0a 	call 80001d5a <IfxStm_enableOcdsSuspend>
    IfxStm_initCompareConfig(&stmConfig);                // 비교기능 구조체 초기화 (초기값 정의)
8000087e:	91 00 00 c6 	movh.a %a12,24576
80000882:	d9 cc 88 b0 	lea %a12,[%a12]2760 <60000ac8 <stmConfig>>
80000886:	40 c4       	mov.aa %a4,%a12
80000888:	6d 00 46 0b 	call 80001f14 <IfxStm_initCompareConfig>

    stmConfig.ticks           = 100000u;             // 주기 (비교 값) 설정 1밀리초 뒤 시작
8000088c:	7b 20 00 20 	movh %d2,2
80000890:	1b 02 6a 28 	addi %d2,%d2,-31072
80000894:	59 c2 10 00 	st.w [%a12]16 <60000010 <LCF_DSPR1_START+0x10>>,%d2
    stmConfig.triggerPriority = 100u;                   // STM 모듈에서 발생한 인터럽트 우선순위 설정 100번째 함수
80000898:	3b 40 06 20 	mov %d2,100
8000089c:	f9 c2 14 00 	st.h [%a12]20 <60000014 <LCF_DSPR1_START+0x14>>,%d2
    stmConfig.typeOfService   = IfxSrc_Tos_cpu0;        // STM에서 발생한 인터럽트를 cpu0에서 처리하도록 설정
800008a0:	82 02       	mov %d2,0
800008a2:	59 c2 18 00 	st.w [%a12]24 <60000018 <LCF_DSPR1_START+0x18>>,%d2

    IfxStm_initCompare(STM0, &stmConfig);               // STM0의 비교기 초기화 및 설정 값 적용 (stmConfig로 바꿈)
800008a6:	40 c5       	mov.aa %a5,%a12
800008a8:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
800008ac:	6d 00 8b 0a 	call 80001dc2 <IfxStm_initCompare>
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800008b0:	df 08 04 00 	jeq %d8,0,800008b8 <init_STM+0x52>
    {
        __enable();
800008b4:	0d 00 00 03 	enable 

    IfxCpu_restoreInterrupts(ISR_State);                // 진행 중이던 인터럽트 상태 복원
}
800008b8:	00 90       	ret 

800008ba <ISR_STM>:


IFX_INTERRUPT(ISR_STM,0,100);                           // 인터럽트 등록 명령어 (실행할 함수, 벡터 테이블 번호, 우선순위)

void ISR_STM(void)
{
800008ba:	40 ae       	mov.aa %a14,%sp
    __enable();
800008bc:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxStm_clearCompareFlag(STM0, stmConfig.comparator);                // 비교 flag 초기화 (완료 표시 초기화)
800008c0:	91 00 00 c6 	movh.a %a12,24576
800008c4:	19 c4 88 b0 	ld.w %d4,[%a12]2760 <60000ac8 <stmConfig>>
800008c8:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
800008cc:	6d 00 19 0a 	call 80001cfe <IfxStm_clearCompareFlag>
    IfxStm_increaseCompare(STM0, stmConfig.comparator, 5000u);     // 비교 값 업데이트 (100000u >> 100000/100M = 0.001 = 1ms)
800008d0:	19 c2 88 b0 	ld.w %d2,[%a12]2760 <60000ac8 <stmConfig>>
}


IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
{
    stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
800008d4:	1b c2 00 20 	addi %d2,%d2,12
800008d8:	06 22       	sh %d2,2
800008da:	60 22       	mov.a %a2,%d2
800008dc:	11 02 00 2f 	addih.a %a2,%a2,61440
800008e0:	54 22       	ld.w %d2,[%a2]
800008e2:	1b 82 38 21 	addi %d2,%d2,5000
800008e6:	74 22       	st.w [%a2],%d2

    counter1ms++;
800008e8:	91 00 00 26 	movh.a %a2,24576
800008ec:	d9 23 84 60 	lea %a3,[%a2]2436 <60000984 <counter1ms>>
800008f0:	54 32       	ld.w %d2,[%a3]
800008f2:	c2 12       	add %d2,1
800008f4:	59 22 84 60 	st.w [%a2]2436 <60000984 <counter1ms>>,%d2

    if ((counter1ms % 1) == 0){Scheduler1msFlag = 1;}           //1밀리초에 한번 flag가 1로 올라감 1초에 실행되는 scheduler 실행
800008f8:	91 00 00 26 	movh.a %a2,24576
800008fc:	82 13       	mov %d3,1
800008fe:	59 23 80 60 	st.w [%a2]2432 <60000980 <Scheduler1msFlag>>,%d3
    if ((counter1ms % 10) == 0){Scheduler10msFlag = 1;}         //
80000902:	7b d0 cc 4c 	movh %d4,52429
80000906:	1b d4 cc 4c 	addi %d4,%d4,-13107
8000090a:	73 42 68 40 	mul.u %e4,%d2,%d4
8000090e:	8f d5 1f 30 	sh %d3,%d5,-3
80000912:	53 a3 20 30 	mul %d3,%d3,10
80000916:	5f 32 07 80 	jne %d2,%d3,80000924 <ISR_STM+0x6a>
8000091a:	91 00 00 26 	movh.a %a2,24576
8000091e:	82 13       	mov %d3,1
80000920:	59 23 bc 50 	st.w [%a2]2428 <6000097c <Scheduler10msFlag>>,%d3
    if ((counter1ms % 100) == 0){Scheduler100msFlag = 1;}       //1000000u >> 10ms, 10ms&100 = 1s
80000924:	7b c0 1e 45 	movh %d4,20972
80000928:	1b f4 51 48 	addi %d4,%d4,-31457
8000092c:	73 42 68 40 	mul.u %e4,%d2,%d4
80000930:	8f b5 1f 30 	sh %d3,%d5,-5
80000934:	53 43 26 30 	mul %d3,%d3,100
80000938:	5f 32 07 80 	jne %d2,%d3,80000946 <ISR_STM+0x8c>
8000093c:	91 00 00 26 	movh.a %a2,24576
80000940:	82 12       	mov %d2,1
80000942:	59 22 b8 50 	st.w [%a2]2424 <60000978 <Scheduler100msFlag>>,%d2

}
80000946:	0d 00 40 02 	rslcx 
8000094a:	00 80       	rfe 

8000094c <ISR_PWM_GTM>:
   init_PWM(&timerConfig);       /* PWM 초기 설정 */
}

IFX_INTERRUPT(ISR_PWM_GTM, 0, PRIORITY_GTM);
void ISR_PWM_GTM(void)
{
8000094c:	40 ae       	mov.aa %a14,%sp
8000094e:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxGtm_Tom_Timer_acknowledgeTimerIrq(&GtmPwmHl.timer);
80000952:	91 00 00 46 	movh.a %a4,24576
80000956:	d9 44 98 60 	lea %a4,[%a4]2456 <60000998 <GtmPwmHl>>
8000095a:	6d 00 cd 10 	call 80002af4 <IfxGtm_Tom_Timer_acknowledgeTimerIrq>
}
8000095e:	0d 00 40 02 	rslcx 
80000962:	00 80       	rfe 

80000964 <PWM_dutyUpdate>:

    IfxGtm_Tom_Timer_run(&GtmPwmHl.timer);  /* 타이머 및 PWM 시작 */
}

void PWM_dutyUpdate()
{
80000964:	40 ae       	mov.aa %a14,%sp
80000966:	20 08       	sub.a %sp,8
    GtmPwmHl.duty[0] += 0.1 * direction;
80000968:	91 00 00 26 	movh.a %a2,24576
8000096c:	19 24 94 60 	ld.w %d4,[%a2]2452 <60000994 <direction>>
80000970:	6d 00 75 2d 	call 8000645a <__floatsidf>
80000974:	7b a0 99 69 	movh %d6,39322
80000978:	1b a6 99 69 	addi %d6,%d6,-26214
8000097c:	7b a0 fb 73 	movh %d7,16314
80000980:	1b 97 99 79 	addi %d7,%d7,-26215
80000984:	0b 23 10 48 	mov %e4,%d3,%d2
80000988:	6d 00 af 2b 	call 800060e6 <__muldf3>
8000098c:	02 29       	mov %d9,%d2
8000098e:	02 38       	mov %d8,%d3
80000990:	91 00 00 c6 	movh.a %a12,24576
80000994:	d9 cc 98 60 	lea %a12,[%a12]2456 <60000998 <GtmPwmHl>>
80000998:	19 c4 1c 20 	ld.w %d4,[%a12]156 <6000009c <_impure_data+0x58>>
8000099c:	6d 00 43 2a 	call 80005e22 <__extendsfdf2>
800009a0:	0b 23 10 48 	mov %e4,%d3,%d2
800009a4:	02 96       	mov %d6,%d9
800009a6:	02 87       	mov %d7,%d8
800009a8:	6d 00 82 2b 	call 800060ac <__adddf3>
800009ac:	0b 23 10 48 	mov %e4,%d3,%d2
800009b0:	6d 00 a0 2d 	call 800064f0 <__truncdfsf2>
800009b4:	59 c2 1c 20 	st.w [%a12]156 <6000009c <_impure_data+0x58>>,%d2
    if (GtmPwmHl.duty[0] >= 1.0) {
800009b8:	7b 00 f8 33 	movh %d3,16256
800009bc:	4b 32 01 30 	cmp.f %d3,%d2,%d3
800009c0:	87 33 a2 30 	or.t %d3,%d3,2,%d3,1
800009c4:	df 03 2b 00 	jeq %d3,0,80000a1a <PWM_dutyUpdate+0xb6>
        GtmPwmHl.duty[0] = 1.0;
800009c8:	7b 00 f8 23 	movh %d2,16256
800009cc:	59 c2 1c 20 	st.w [%a12]156 <6000009c <_impure_data+0x58>>,%d2
        direction = -1;
800009d0:	91 00 00 26 	movh.a %a2,24576
800009d4:	82 f2       	mov %d2,-1
800009d6:	59 22 94 60 	st.w [%a2]2452 <60000994 <direction>>,%d2
            }

    IfxGtm_Tom_PwmHl *pwmHl = &GtmPwmHl.pwm;
    IfxGtm_Tom_Timer *timer = &GtmPwmHl.timer;

    Ifx_TimerValue timerPeriod = IfxGtm_Tom_Timer_getPeriod(timer); /* = 타이머 한 주기 Tic 수 */
800009da:	91 00 00 c6 	movh.a %a12,24576
800009de:	d9 cc 98 60 	lea %a12,[%a12]2456 <60000998 <GtmPwmHl>>
800009e2:	40 c4       	mov.aa %a4,%a12
800009e4:	6d 00 bb 10 	call 80002b5a <IfxGtm_Tom_Timer_getPeriod>
    Ifx_TimerValue Duty2Tic[2];

    Duty2Tic[0] = (uint32)(GtmPwmHl.duty[0]*timerPeriod);           /* 듀티 값을 Tic 수로 한산 */
800009e8:	19 c3 1c 20 	ld.w %d3,[%a12]156 <6000009c <_impure_data+0x58>>
800009ec:	4b 02 61 21 	utof %d2,%d2
800009f0:	4b 32 41 20 	mul.f %d2,%d2,%d3
800009f4:	4b 02 71 21 	ftouz %d2,%d2
800009f8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    Duty2Tic[1] = (uint32)(GtmPwmHl.duty[0]*timerPeriod);;          /* 듀티 값을 Tic 수로 한산 */
800009fc:	59 e2 fc ff 	st.w [%a14]-4,%d2

    IfxGtm_Tom_Timer_disableUpdate(timer);                          /* 업데이트 비활성화 */
80000a00:	40 c4       	mov.aa %a4,%a12
80000a02:	6d 00 9e 10 	call 80002b3e <IfxGtm_Tom_Timer_disableUpdate>
    IfxGtm_Tom_PwmHl_setOnTime(pwmHl, Duty2Tic);                    /* 듀티 값 변경 */
80000a06:	d9 e5 f8 ff 	lea %a5,[%a14]-8
80000a0a:	d9 c4 04 10 	lea %a4,[%a12]68 <60000044 <_impure_data>>
80000a0e:	6d 00 bc 14 	call 80003386 <IfxGtm_Tom_PwmHl_setOnTime>
    IfxGtm_Tom_Timer_applyUpdate(timer);                            /* 듀티 변경 값 적용 */
80000a12:	40 c4       	mov.aa %a4,%a12
80000a14:	6d 00 87 10 	call 80002b22 <IfxGtm_Tom_Timer_applyUpdate>
}
80000a18:	00 90       	ret 
    else if (GtmPwmHl.duty[0] <= 0.0) {
80000a1a:	82 03       	mov %d3,0
80000a1c:	4b 32 01 20 	cmp.f %d2,%d2,%d3
80000a20:	87 22 a0 20 	or.t %d2,%d2,0,%d2,1
80000a24:	df 02 db 7f 	jeq %d2,0,800009da <PWM_dutyUpdate+0x76>
        GtmPwmHl.duty[0] = 0.0;
80000a28:	91 00 00 26 	movh.a %a2,24576
80000a2c:	d9 22 98 60 	lea %a2,[%a2]2456 <60000998 <GtmPwmHl>>
80000a30:	59 23 1c 20 	st.w [%a2]156 <6000009c <_impure_data+0x58>>,%d3
        direction = 1;
80000a34:	91 00 00 26 	movh.a %a2,24576
80000a38:	82 12       	mov %d2,1
80000a3a:	59 22 94 60 	st.w [%a2]2452 <60000994 <direction>>,%d2
80000a3e:	1d ff ce ff 	j 800009da <PWM_dutyUpdate+0x76>

80000a42 <init_PWM>:
{
80000a42:	40 ae       	mov.aa %a14,%sp
80000a44:	20 48       	sub.a %sp,72
80000a46:	40 4d       	mov.aa %a13,%a4
    IfxGtm_Tom_PwmHl_initConfig(&pwmHlConfig);   /* 구조체 디폴트 값으로 초기화 */
80000a48:	d9 e4 c8 ff 	lea %a4,[%a14]-56
80000a4c:	6d 00 0a 1a 	call 80003e60 <IfxGtm_Tom_PwmHl_initConfig>
    ccx[0]   = &IfxGtm_TOM0_4_TOUT22_P33_0_OUT; /* PWM 출력 핀 설정 Ch.1 ccx */
80000a50:	91 00 00 28 	movh.a %a2,32768
80000a54:	d9 22 10 90 	lea %a2,[%a2]592 <80000250 <IfxGtm_TOM0_4_TOUT22_P33_0_OUT>>
80000a58:	b5 e2 c0 ff 	st.a [%a14]-64 <80000250 <IfxGtm_TOM0_4_TOUT22_P33_0_OUT>>,%a2
    coutx[0] = &IfxGtm_TOM0_3_TOUT105_P10_3_OUT;/* PWM 출력 핀 설정 Ch.1 coutx */ /*모터 드라이버 채널B PWM*/
80000a5c:	91 00 00 28 	movh.a %a2,32768
80000a60:	d9 22 2c 90 	lea %a2,[%a2]620 <8000026c <IfxGtm_TOM0_3_TOUT105_P10_3_OUT>>
80000a64:	b5 e2 f8 ef 	st.a [%a14]-72 <8000026c <IfxGtm_TOM0_3_TOUT105_P10_3_OUT>>,%a2
    ccx[1]   = &IfxGtm_TOM0_5_TOUT23_P33_1_OUT; /* PWM 출력 핀 설정 Ch.2 ccx */
80000a68:	91 00 00 28 	movh.a %a2,32768
80000a6c:	d9 22 34 80 	lea %a2,[%a2]564 <80000234 <IfxGtm_TOM0_5_TOUT23_P33_1_OUT>>
80000a70:	b5 e2 c4 ff 	st.a [%a14]-60 <80000234 <IfxGtm_TOM0_5_TOUT23_P33_1_OUT>>,%a2
    coutx[1] = &IfxGtm_TOM0_2_TOUT107_P10_5_OUT;/* PWM 출력 핀 설정 Ch.2 coutx */
80000a74:	91 00 00 28 	movh.a %a2,32768
80000a78:	d9 22 08 a0 	lea %a2,[%a2]648 <80000288 <IfxGtm_TOM0_2_TOUT107_P10_5_OUT>>
80000a7c:	b5 e2 fc ef 	st.a [%a14]-68 <80000288 <IfxGtm_TOM0_2_TOUT107_P10_5_OUT>>,%a2
    pwmHlConfig.timer                   = &GtmPwmHl.timer;                          /* 타이머 객체 설정 */
80000a80:	91 00 00 c6 	movh.a %a12,24576
80000a84:	d9 cc 98 60 	lea %a12,[%a12]2456 <60000998 <GtmPwmHl>>
80000a88:	b5 ec ec ff 	st.a [%a14]-20 <60000998 <GtmPwmHl>>,%a12
    pwmHlConfig.tom                     = timerConfig ->tom;                        /* TOM 설정 */
80000a8c:	19 d2 38 00 	ld.w %d2,[%a13]56 <60000998 <GtmPwmHl>>
80000a90:	59 e2 f0 ff 	st.w [%a14]-16 <60000998 <GtmPwmHl>>,%d2
    pwmHlConfig.base.deadtime           = 2e-6;                                     /* 데드 타임 설정 */
80000a94:	7b 60 60 23 	movh %d2,13830
80000a98:	1b d2 7b 23 	addi %d2,%d2,14269
80000a9c:	59 e2 c8 ff 	st.w [%a14]-56,%d2
    pwmHlConfig.base.minPulse           = 1e-6;                                     /* 최소 펄스 시간 설정 */
80000aa0:	7b 60 58 23 	movh %d2,13702
80000aa4:	1b d2 7b 23 	addi %d2,%d2,14269
80000aa8:	59 e2 cc ff 	st.w [%a14]-52,%d2
    pwmHlConfig.base.channelCount       = 2;                                        /* PWM 채널 수 설정 */
80000aac:	82 22       	mov %d2,2
80000aae:	e9 e2 d0 ff 	st.b [%a14]-48,%d2
    pwmHlConfig.base.emergencyEnabled   = FALSE;                                    /* 비상 기능 설정 */
80000ab2:	82 02       	mov %d2,0
80000ab4:	e9 e2 d1 ff 	st.b [%a14]-47,%d2
    pwmHlConfig.base.outputMode         = IfxPort_OutputMode_none;                  /* 출력 모드 설정 */
80000ab8:	82 02       	mov %d2,0
80000aba:	59 e2 d4 ff 	st.w [%a14]-44,%d2
    pwmHlConfig.base.outputDriver       = IfxPort_PadDriver_cmosAutomotiveSpeed1;   /* PWM 드라이버 타입 설정) */
80000abe:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    pwmHlConfig.base.ccxActiveState     = Ifx_ActiveState_high;                     /* 핀 활성 상태 설정 (Low or High일 때 활성 설정) */
80000ac2:	82 12       	mov %d2,1
80000ac4:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    pwmHlConfig.base.coutxActiveState   = Ifx_ActiveState_high;                     /* 핀 활성 상태 설정 (Low or High일 때 활성 설정) */
80000ac8:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    pwmHlConfig.ccx                     = ccx;                                      /* 핀 적용 (Compare capture x) */
80000acc:	d9 e2 c0 ff 	lea %a2,[%a14]-64
80000ad0:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    pwmHlConfig.coutx                   = coutx;                                    /* 핀 적용 (Compare output x) */
80000ad4:	d9 e2 f8 ef 	lea %a2,[%a14]-72
80000ad8:	b5 e2 f8 ff 	st.a [%a14]-8,%a2
    IfxGtm_Tom_PwmHl_init(&GtmPwmHl.pwm, &pwmHlConfig);                             /* PWM 설정 값 적용 */
80000adc:	80 c2       	mov.d %d2,%a12
80000ade:	1b 42 04 80 	addi %d8,%d2,68
80000ae2:	d9 e5 c8 ff 	lea %a5,[%a14]-56
80000ae6:	60 84       	mov.a %a4,%d8
80000ae8:	6d 00 c1 17 	call 80003a6a <IfxGtm_Tom_PwmHl_init>
    IfxGtm_Tom_PwmHl_setMode(&GtmPwmHl.pwm, Ifx_Pwm_Mode_centerAligned);            /* PWM 생성 방식 설정 */
80000aec:	82 04       	mov %d4,0
80000aee:	60 84       	mov.a %a4,%d8
80000af0:	6d 00 a2 13 	call 80003234 <IfxGtm_Tom_PwmHl_setMode>
    GtmPwmHl.duty[0] = 0;    /* Ch.1 듀티 설정 */
80000af4:	82 02       	mov %d2,0
80000af6:	59 c2 1c 20 	st.w [%a12]156 <6000009c <_impure_data+0x58>>,%d2
    GtmPwmHl.duty[1] = 0;     /* Ch.2 듀티 설정 */
80000afa:	59 c2 20 20 	st.w [%a12]160 <600000a0 <_impure_data+0x5c>>,%d2
    PWM_dutyUpdate();           /* 듀티 설정 */
80000afe:	6d ff 33 ff 	call 80000964 <PWM_dutyUpdate>
    IfxGtm_Tom_Timer_run(&GtmPwmHl.timer);  /* 타이머 및 PWM 시작 */
80000b02:	40 c4       	mov.aa %a4,%a12
80000b04:	6d 00 71 10 	call 80002be6 <IfxGtm_Tom_Timer_run>
}
80000b08:	00 90       	ret 

80000b0a <init_Tom>:
{
80000b0a:	40 ae       	mov.aa %a14,%sp
80000b0c:	20 58       	sub.a %sp,88
   IfxGtm_Tom_Timer_initConfig(&timerConfig, &MODULE_GTM);
80000b0e:	91 00 01 5f 	movh.a %a5,61456
80000b12:	d9 e4 ec ef 	lea %a4,[%a14]-84
80000b16:	6d 00 55 13 	call 800031c0 <IfxGtm_Tom_Timer_initConfig>
   timerConfig.base.frequency       = 2000;                                          /* PWM 주기 */
80000b1a:	7b a0 4f 24 	movh %d2,17658
80000b1e:	59 e2 ec ef 	st.w [%a14]-84,%d2
   timerConfig.base.isrPriority     = PRIORITY_GTM;                                  /* 인터럽트 우선순위 */
80000b22:	3b 80 0c 20 	mov %d2,200
80000b26:	f9 e2 f0 ef 	st.h [%a14]-80,%d2
   timerConfig.base.isrProvider     = IfxSrc_Tos_cpu0;                               /* 인터럽트 처리 cpu 설정 */
80000b2a:	82 03       	mov %d3,0
80000b2c:	59 e3 f4 ef 	st.w [%a14]-76,%d3
   timerConfig.base.minResolution   = (1.0/timerConfig.base.frequency) / 1000;       /* 최소 분해능 설정 */
80000b30:	7b 60 50 23 	movh %d2,13574
80000b34:	1b d2 7b 23 	addi %d2,%d2,14269
80000b38:	59 e2 f8 ef 	st.w [%a14]-72,%d2
   timerConfig.clock                = IfxGtm_Tom_Ch_ClkSrc_cmuFxclk0;                /* Base clock (100MHz)에서 몇을 나누어 사용할지 */
80000b3c:	59 e3 f0 ff 	st.w [%a14]-16,%d3
   timerConfig.base.countDir        = IfxStdIf_Timer_CountDir_upAndDown;             /* 비교파 모양 설정 */
80000b40:	82 12       	mov %d2,1
80000b42:	59 e2 d8 ff 	st.w [%a14]-40,%d2
   timerConfig.tom                  = IfxGtm_Tom_0;                                  /* 몇 번째 TOM 사용할지 설정 */
80000b46:	59 e3 e4 ff 	st.w [%a14]-28,%d3
   timerConfig.timerChannel         = IfxGtm_Tom_Ch_0;                               /* TOM 채널 설정 */
80000b4a:	59 e3 e8 ff 	st.w [%a14]-24,%d3
   timerConfig.triggerOut           = &IfxGtm_TOM0_0_TOUT77_P15_6_OUT;               /* trigger 출력 핀 설정 */
80000b4e:	91 00 00 28 	movh.a %a2,32768
80000b52:	d9 22 24 a0 	lea %a2,[%a2]676 <800002a4 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>
80000b56:	b5 e2 ec ff 	st.a [%a14]-20 <800002a4 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%a2
   timerConfig.base.trigger.enabled             = TRUE;                              /* trigger 활성화 */
80000b5a:	e9 e2 fc ef 	st.b [%a14]-68 <800002a4 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%d2
   timerConfig.base.trigger.outputEnabled       = TRUE;                              /* trigger 출력 활성화 */
80000b5e:	e9 e2 d5 ff 	st.b [%a14]-43 <800002a4 <IfxGtm_TOM0_0_TOUT77_P15_6_OUT>>,%d2
   timerConfig.base.trigger.triggerPoint        = 500;                               /* 이벤트 발생(ex: 1) 후 몇 틱(tick) 후에 이벤트를 끝낼지 (ex:0) */
80000b62:	3b 40 1f 30 	mov %d3,500
80000b66:	59 e3 c0 ff 	st.w [%a14]-64,%d3
   timerConfig.base.trigger.risingEdgeAtPeriod  = TRUE;                              /* 디폴트를 0으로할지 1로 할지 (ex: TRUE --> 디폴트 0, 이벤트 발생 시 1) */
80000b6a:	e9 e2 d4 ff 	st.b [%a14]-44,%d2
   IfxGtm_Tom_Timer_init(&GtmPwmHl.timer, &timerConfig);                             /* 설정 값 반영 */
80000b6e:	d9 e5 ec ef 	lea %a5,[%a14]-84
80000b72:	91 00 00 46 	movh.a %a4,24576
80000b76:	d9 44 98 60 	lea %a4,[%a4]2456 <60000998 <GtmPwmHl>>
80000b7a:	6d 00 df 10 	call 80002d38 <IfxGtm_Tom_Timer_init>
   init_PWM(&timerConfig);       /* PWM 초기 설정 */
80000b7e:	d9 e4 ec ef 	lea %a4,[%a14]-84
80000b82:	6d ff 60 ff 	call 80000a42 <init_PWM>
}
80000b86:	00 90       	ret 

80000b88 <init_GTM>:

void init_GTM(void)
{
80000b88:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_ICR);
80000b8a:	4d c0 e2 8f 	mfcr %d8,$icr
    return reg.B.IE != 0;
80000b8e:	37 08 e1 87 	extr.u %d8,%d8,15,1
    __disable();
80000b92:	0d 00 40 03 	disable 
80000b96:	00 00       	nop 
    boolean interruptState = IfxCpu_disableInterrupts();

    Ifx_GTM *gtm = &MODULE_GTM;
    float32 gtmFreq = IfxGtm_Cmu_getModuleFrequency(gtm);           /* GTM 모듈 클럭 주파수 가져오기(100MHz) */
80000b98:	91 00 01 4f 	movh.a %a4,61456
80000b9c:	6d 00 9d 19 	call 80003ed6 <IfxGtm_Cmu_getModuleFrequency>
80000ba0:	02 29       	mov %d9,%d2
    IfxGtm_enable(gtm);
80000ba2:	91 00 01 4f 	movh.a %a4,61456
80000ba6:	6d 00 6e 19 	call 80003e82 <IfxGtm_enable>

    IfxGtm_Cmu_setGclkFrequency(&MODULE_GTM, gtmFreq);              /* Global clock 주기 설정) */
80000baa:	02 94       	mov %d4,%d9
80000bac:	91 00 01 4f 	movh.a %a4,61456
80000bb0:	6d 00 be 1a 	call 8000412c <IfxGtm_Cmu_setGclkFrequency>

    float32 gtmGclkFreq = IfxGtm_Cmu_getGclkFrequency(gtm);
80000bb4:	91 00 01 4f 	movh.a %a4,61456
80000bb8:	6d 00 93 19 	call 80003ede <IfxGtm_Cmu_getGclkFrequency>
    IfxGtm_Cmu_setClkFrequency(&MODULE_GTM, IfxGtm_Cmu_Clk_0, gtmGclkFreq); /* clk_0 클럭 주파수 설정) */
80000bbc:	02 25       	mov %d5,%d2
80000bbe:	82 04       	mov %d4,0
80000bc0:	91 00 01 4f 	movh.a %a4,61456
80000bc4:	6d 00 6e 1a 	call 800040a0 <IfxGtm_Cmu_setClkFrequency>

    init_Tom();         /* TOM 및 PWM 초기 설정 */
80000bc8:	6d ff a1 ff 	call 80000b0a <init_Tom>
    if (enabled != FALSE)
80000bcc:	df 08 04 00 	jeq %d8,0,80000bd4 <init_GTM+0x4c>
        __enable();
80000bd0:	0d 00 00 03 	enable 

    IfxCpu_restoreInterrupts(interruptState);   /* enable interrupts again */
    IfxGtm_Cmu_enableClocks(gtm, IFXGTM_CMU_CLKEN_FXCLK | IFXGTM_CMU_CLKEN_CLK0);
80000bd4:	7b 00 08 40 	movh %d4,128
80000bd8:	c2 24       	add %d4,2
80000bda:	91 00 01 4f 	movh.a %a4,61456
80000bde:	6d 00 78 19 	call 80003ece <IfxGtm_Cmu_enableClocks>
}
80000be2:	00 90       	ret 

80000be4 <IfxGtm_PinMap_setTomTout>:
    IfxPort_setPinModeOutput(config->pin.port, config->pin.pinIndex, outputMode, config->select);
    IfxPort_setPinPadDriver(config->pin.port, config->pin.pinIndex, padDriver);
}

void IfxGtm_PinMap_setTomTout(IfxGtm_Tom_ToutMap *config, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
80000be4:	40 ae       	mov.aa %a14,%sp
80000be6:	40 4c       	mov.aa %a12,%a4
80000be8:	02 58       	mov %d8,%d5
    uint32 outselReg = (config->toutn >> 4);
80000bea:	19 42 0c 00 	ld.w %d2,[%a4]12
80000bee:	8f c2 1f 70 	sh %d7,%d2,-4
    uint32 shift = (config->toutn & 0xFU) * 2;
80000bf2:	8f f2 00 21 	and %d2,%d2,15
80000bf6:	06 12       	sh %d2,1
    uint32 outsel = (uint32)config->toutSel << shift;
80000bf8:	19 43 08 00 	ld.w %d3,[%a4]8
80000bfc:	0f 23 00 60 	sh %d6,%d3,%d2
    uint32 mask = 0x3U << shift;
80000c00:	82 33       	mov %d3,3
80000c02:	0f 23 00 30 	sh %d3,%d3,%d2

    __ldmst_c(&(MODULE_GTM.INOUTSEL.T.OUTSEL[outselReg].U), mask, outsel);
80000c06:	8f 27 00 20 	sh %d2,%d7,2
80000c0a:	7b a0 01 5f 	movh %d5,61466
80000c0e:	1b 05 d3 5f 	addi %d5,%d5,-720
80000c12:	60 52       	mov.a %a2,%d5
80000c14:	01 22 00 26 	addsc.a %a2,%a2,%d2,0


/******************************************************************************/
IFX_INLINE void __ldmst_c(volatile void *address, unsigned mask, unsigned value)
{
    *(volatile uint32 *)address = (*(volatile uint32 *)address & ~(mask)) | (mask & value);
80000c18:	54 22       	ld.w %d2,[%a2]
80000c1a:	c6 26       	xor %d6,%d2
80000c1c:	26 63       	and %d3,%d6
80000c1e:	c6 32       	xor %d2,%d3
80000c20:	74 22       	st.w [%a2],%d2
    IfxPort_setPinModeOutput(config->pin.port, config->pin.pinIndex, outputMode, config->select);
80000c22:	19 45 18 00 	ld.w %d5,[%a4]24
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80000c26:	a6 45       	or %d5,%d4
80000c28:	39 44 14 00 	ld.bu %d4,[%a4]20
80000c2c:	99 44 10 00 	ld.a %a4,[%a4]16
80000c30:	6d 00 06 0f 	call 80002a3c <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(config->pin.port, config->pin.pinIndex, padDriver);
80000c34:	02 85       	mov %d5,%d8
80000c36:	39 c4 14 00 	ld.bu %d4,[%a12]20
80000c3a:	99 c4 10 00 	ld.a %a4,[%a12]16
80000c3e:	6d 00 36 0f 	call 80002aaa <IfxPort_setPinPadDriver>
}
80000c42:	00 90       	ret 

80000c44 <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80000c44:	40 ae       	mov.aa %a14,%sp
80000c46:	40 52       	mov.aa %a2,%a5
    uint8 *Dest = (uint8 *)data;
80000c48:	1d 00 07 00 	j 80000c56 <Ifx_CircularBuffer_read8+0x12>
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80000c4c:	82 02       	mov %d2,0
80000c4e:	f9 42 04 00 	st.h [%a4]4,%d2
        }
    } while (count > 0);
80000c52:	bf 14 19 00 	jlt %d4,1,80000c84 <Ifx_CircularBuffer_read8+0x40>
        count--;
80000c56:	c2 f4       	add %d4,-1
80000c58:	37 04 50 40 	extr %d4,%d4,0,16
        *Dest = ((uint8 *)buffer->base)[buffer->index];
80000c5c:	b9 42 04 00 	ld.hu %d2,[%a4]4
80000c60:	d4 43       	ld.a %a3,[%a4]
80000c62:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
80000c66:	14 32       	ld.bu %d2,[%a3]
80000c68:	24 22       	st.b [%a2+],%d2
        buffer->index++;
80000c6a:	b9 42 04 00 	ld.hu %d2,[%a4]4
80000c6e:	c2 12       	add %d2,1
80000c70:	37 02 70 20 	extr.u %d2,%d2,0,16
80000c74:	f9 42 04 00 	st.h [%a4]4,%d2
        if (buffer->index >= buffer->length)
80000c78:	b9 43 06 00 	ld.hu %d3,[%a4]6
80000c7c:	3f 32 eb ff 	jlt.u %d2,%d3,80000c52 <Ifx_CircularBuffer_read8+0xe>
80000c80:	1d ff e6 ff 	j 80000c4c <Ifx_CircularBuffer_read8+0x8>

    return Dest;
}
80000c84:	00 90       	ret 

80000c86 <Ifx_CircularBuffer_write8>:
    return Dest;
}


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80000c86:	40 ae       	mov.aa %a14,%sp
80000c88:	40 52       	mov.aa %a2,%a5
    const uint8 *source = (const uint8 *)data;
80000c8a:	1d 00 07 00 	j 80000c98 <Ifx_CircularBuffer_write8+0x12>
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80000c8e:	82 02       	mov %d2,0
80000c90:	f9 42 04 00 	st.h [%a4]4,%d2
        }
    } while (count > 0);
80000c94:	bf 14 19 00 	jlt %d4,1,80000cc6 <Ifx_CircularBuffer_write8+0x40>
        count--;
80000c98:	c2 f4       	add %d4,-1
80000c9a:	37 04 50 40 	extr %d4,%d4,0,16
        ((uint8 *)buffer->base)[buffer->index] = *source;
80000c9e:	b9 42 04 00 	ld.hu %d2,[%a4]4
80000ca2:	d4 43       	ld.a %a3,[%a4]
80000ca4:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
80000ca8:	04 22       	ld.bu %d2,[%a2+]
80000caa:	34 32       	st.b [%a3],%d2
        buffer->index++;
80000cac:	b9 42 04 00 	ld.hu %d2,[%a4]4
80000cb0:	c2 12       	add %d2,1
80000cb2:	37 02 70 20 	extr.u %d2,%d2,0,16
80000cb6:	f9 42 04 00 	st.h [%a4]4,%d2
        if (buffer->index >= buffer->length)
80000cba:	b9 43 06 00 	ld.hu %d3,[%a4]6
80000cbe:	3f 32 eb ff 	jlt.u %d2,%d3,80000c94 <Ifx_CircularBuffer_write8+0xe>
80000cc2:	1d ff e6 ff 	j 80000c8e <Ifx_CircularBuffer_write8+0x8>

    return source;
}
80000cc6:	00 90       	ret 

80000cc8 <Ifx_Fifo_beginRead>:

/**
 * param: count in bytes
 */
static Ifx_SizeT Ifx_Fifo_beginRead(Ifx_Fifo *fifo, Ifx_SizeT count)
{
80000cc8:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_ICR);
80000cca:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80000cce:	37 03 e1 37 	extr.u %d3,%d3,15,1
    __disable();
80000cd2:	0d 00 40 03 	disable 
80000cd6:	00 00       	nop 
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80000cd8:	c9 40 04 00 	ld.h %d0,[%a4]4
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80000cdc:	0b 04 80 01 	min %d0,%d4,%d0
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
80000ce0:	37 00 50 50 	extr %d5,%d0,0,16
    blockSize               -= blockSize % fifo->elementSize;
80000ce4:	c9 46 1a 00 	ld.h %d6,[%a4]26
80000ce8:	4b 65 01 62 	div %e6,%d5,%d6
80000cec:	0b 70 80 20 	sub %d2,%d0,%d7
80000cf0:	37 02 50 20 	extr %d2,%d2,0,16
    fifo->eventReader        = FALSE;
80000cf4:	82 05       	mov %d5,0
80000cf6:	e9 45 1c 00 	st.b [%a4]28,%d5
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80000cfa:	a2 24       	sub %d4,%d2
80000cfc:	c9 45 18 00 	ld.h %d5,[%a4]24
80000d00:	0b 54 80 41 	min %d4,%d4,%d5
80000d04:	59 44 08 00 	st.w [%a4]8,%d4
    if (enabled != FALSE)
80000d08:	df 03 04 00 	jeq %d3,0,80000d10 <Ifx_Fifo_beginRead+0x48>
        __enable();
80000d0c:	0d 00 00 03 	enable 
    IfxCpu_restoreInterrupts(interruptState);

    return blockSize;
}
80000d10:	00 90       	ret 

80000d12 <Ifx_Fifo_readEnd>:

/**
 * param: count in bytes
 */
static Ifx_SizeT Ifx_Fifo_readEnd(Ifx_Fifo *fifo, Ifx_SizeT count, Ifx_SizeT blockSize)
{
80000d12:	40 ae       	mov.aa %a14,%sp
80000d14:	02 47       	mov %d7,%d4
    reg.U = __mfcr(CPU_ICR);
80000d16:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80000d1a:	37 03 e1 37 	extr.u %d3,%d3,15,1
    __disable();
80000d1e:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
80000d22:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
80000d24:	37 05 70 20 	extr.u %d2,%d5,0,16
80000d28:	c9 46 04 00 	ld.h %d6,[%a4]4
80000d2c:	a2 26       	sub %d6,%d2
80000d2e:	f9 46 04 00 	st.h [%a4]4,%d6

    if (fifo->shared.writerWaitx != 0)
80000d32:	d9 42 0c 00 	lea %a2,[%a4]12
80000d36:	19 46 0c 00 	ld.w %d6,[%a4]12
80000d3a:	df 06 07 00 	jeq %d6,0,80000d48 <Ifx_Fifo_readEnd+0x36>
    {
        fifo->shared.writerWaitx -= blockSize;
80000d3e:	0b 56 80 40 	sub %d4,%d6,%d5
80000d42:	74 24       	st.w [%a2],%d4

        if (fifo->shared.writerWaitx <= 0)
80000d44:	bf 14 0b 00 	jlt %d4,1,80000d5a <Ifx_Fifo_readEnd+0x48>
    if (enabled != FALSE)
80000d48:	df 03 04 00 	jeq %d3,0,80000d50 <Ifx_Fifo_readEnd+0x3e>
        __enable();
80000d4c:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
80000d50:	0b 27 80 20 	sub %d2,%d7,%d2
}
80000d54:	37 02 50 20 	extr %d2,%d2,0,16
80000d58:	00 90       	ret 
            fifo->shared.writerWaitx = 0;
80000d5a:	82 04       	mov %d4,0
80000d5c:	74 24       	st.w [%a2],%d4
            fifo->eventWriter        = TRUE; /* Signal the writer */
80000d5e:	82 14       	mov %d4,1
80000d60:	e9 44 1d 00 	st.b [%a4]29,%d4
80000d64:	1d ff f2 ff 	j 80000d48 <Ifx_Fifo_readEnd+0x36>

80000d68 <Ifx_Fifo_beginWrite>:
    IfxCpu_restoreInterrupts(interruptState);
}


static Ifx_SizeT Ifx_Fifo_beginWrite(Ifx_Fifo *fifo, Ifx_SizeT count)
{
80000d68:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_ICR);
80000d6a:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80000d6e:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
80000d72:	0d 00 40 03 	disable 
80000d76:	00 00       	nop 
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
80000d78:	c9 43 18 00 	ld.h %d3,[%a4]24
80000d7c:	c9 42 04 00 	ld.h %d2,[%a4]4
80000d80:	0b 23 80 20 	sub %d2,%d3,%d2
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80000d84:	0b 24 80 01 	min %d0,%d4,%d2
80000d88:	37 00 50 60 	extr %d6,%d0,0,16
    blockSize               -= blockSize % fifo->elementSize;
80000d8c:	c9 42 1a 00 	ld.h %d2,[%a4]26
80000d90:	4b 26 01 62 	div %e6,%d6,%d2
80000d94:	0b 70 80 20 	sub %d2,%d0,%d7
80000d98:	37 02 50 20 	extr %d2,%d2,0,16
    fifo->eventWriter        = FALSE;
80000d9c:	82 06       	mov %d6,0
80000d9e:	e9 46 1d 00 	st.b [%a4]29,%d6
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80000da2:	a2 24       	sub %d4,%d2
80000da4:	0b 34 80 41 	min %d4,%d4,%d3
80000da8:	59 44 0c 00 	st.w [%a4]12,%d4
    if (enabled != FALSE)
80000dac:	df 05 04 00 	jeq %d5,0,80000db4 <Ifx_Fifo_beginWrite+0x4c>
        __enable();
80000db0:	0d 00 00 03 	enable 
    IfxCpu_restoreInterrupts(interruptState);

    return blockSize;
}
80000db4:	00 90       	ret 

80000db6 <Ifx_Fifo_endWrite>:

    return result;
}

static Ifx_SizeT Ifx_Fifo_endWrite(Ifx_Fifo *fifo, Ifx_SizeT count, Ifx_SizeT blockSize)
{
80000db6:	40 ae       	mov.aa %a14,%sp
80000db8:	02 40       	mov %d0,%d4
    reg.U = __mfcr(CPU_ICR);
80000dba:	4d c0 e2 6f 	mfcr %d6,$icr
    return reg.B.IE != 0;
80000dbe:	37 06 e1 67 	extr.u %d6,%d6,15,1
    __disable();
80000dc2:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
80000dc6:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80000dc8:	37 05 70 20 	extr.u %d2,%d5,0,16
80000dcc:	c9 43 04 00 	ld.h %d3,[%a4]4
80000dd0:	42 23       	add %d3,%d2
80000dd2:	37 03 50 30 	extr %d3,%d3,0,16
80000dd6:	f9 43 04 00 	st.h [%a4]4,%d3
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80000dda:	c9 47 10 00 	ld.h %d7,[%a4]16
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80000dde:	0b 37 a0 31 	max %d3,%d7,%d3
80000de2:	f9 43 10 00 	st.h [%a4]16,%d3

    if (fifo->shared.readerWaitx != 0)
80000de6:	d9 42 08 00 	lea %a2,[%a4]8
80000dea:	19 43 08 00 	ld.w %d3,[%a4]8
80000dee:	df 03 06 00 	jeq %d3,0,80000dfa <Ifx_Fifo_endWrite+0x44>
    {
        fifo->shared.readerWaitx -= blockSize;
80000df2:	a2 53       	sub %d3,%d5
80000df4:	74 23       	st.w [%a2],%d3

        if (fifo->shared.readerWaitx <= 0)
80000df6:	bf 13 0b 00 	jlt %d3,1,80000e0c <Ifx_Fifo_endWrite+0x56>
    if (enabled != FALSE)
80000dfa:	df 06 04 00 	jeq %d6,0,80000e02 <Ifx_Fifo_endWrite+0x4c>
        __enable();
80000dfe:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
80000e02:	0b 20 80 20 	sub %d2,%d0,%d2
}
80000e06:	37 02 50 20 	extr %d2,%d2,0,16
80000e0a:	00 90       	ret 
            fifo->shared.readerWaitx = 0;
80000e0c:	82 03       	mov %d3,0
80000e0e:	74 23       	st.w [%a2],%d3
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80000e10:	82 13       	mov %d3,1
80000e12:	e9 43 1c 00 	st.b [%a4]28,%d3
80000e16:	1d ff f2 ff 	j 80000dfa <Ifx_Fifo_endWrite+0x44>

80000e1a <Ifx_Fifo_init>:
{
80000e1a:	40 ae       	mov.aa %a14,%sp
80000e1c:	40 42       	mov.aa %a2,%a4
    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
80000e1e:	c2 34       	add %d4,3
80000e20:	37 04 50 40 	extr %d4,%d4,0,16
80000e24:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
80000e28:	82 02       	mov %d2,0
80000e2a:	e9 42 1c 00 	st.b [%a4]28,%d2
        fifo->eventWriter        = TRUE;
80000e2e:	82 12       	mov %d2,1
80000e30:	e9 42 1d 00 	st.b [%a4]29,%d2
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
80000e34:	80 42       	mov.d %d2,%a4
80000e36:	1b 72 02 20 	addi %d2,%d2,39
80000e3a:	8f 72 c0 21 	andn %d2,%d2,7
80000e3e:	74 42       	st.w [%a4],%d2
        fifo->shared.count       = 0;
80000e40:	82 02       	mov %d2,0
80000e42:	f9 42 04 00 	st.h [%a4]4,%d2
        fifo->shared.maxcount    = 0;
80000e46:	f9 42 10 00 	st.h [%a4]16,%d2
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
80000e4a:	82 02       	mov %d2,0
80000e4c:	59 42 0c 00 	st.w [%a4]12,%d2
80000e50:	59 42 08 00 	st.w [%a4]8,%d2
        fifo->startIndex         = fifo->endIndex = 0;
80000e54:	f9 42 16 00 	st.h [%a4]22,%d2
80000e58:	f9 42 14 00 	st.h [%a4]20,%d2
        fifo->size               = size;
80000e5c:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
80000e60:	f9 45 1a 00 	st.h [%a4]26,%d5
}
80000e64:	00 90       	ret 

80000e66 <Ifx_Fifo_create>:
{
80000e66:	40 ae       	mov.aa %a14,%sp
80000e68:	37 05 50 90 	extr %d9,%d5,0,16
    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80000e6c:	1b 34 00 20 	addi %d2,%d4,3
80000e70:	37 02 50 20 	extr %d2,%d2,0,16
80000e74:	8f 32 c0 81 	andn %d8,%d2,3
    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80000e78:	1b 88 02 40 	addi %d4,%d8,40
80000e7c:	6d 00 5e 2d 	call 80006938 <malloc>
    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
80000e80:	bd 02 07 00 	jz.a %a2,80000e8e <Ifx_Fifo_create+0x28>
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
80000e84:	02 95       	mov %d5,%d9
80000e86:	02 84       	mov %d4,%d8
80000e88:	40 24       	mov.aa %a4,%a2
80000e8a:	6d ff c8 ff 	call 80000e1a <Ifx_Fifo_init>
}
80000e8e:	00 90       	ret 

80000e90 <Ifx_Fifo_read>:
{
80000e90:	40 ae       	mov.aa %a14,%sp
80000e92:	20 08       	sub.a %sp,8
80000e94:	40 4c       	mov.aa %a12,%a4
80000e96:	80 5d       	mov.d %d13,%a5
80000e98:	02 69       	mov %d9,%d6
80000e9a:	02 78       	mov %d8,%d7
80000e9c:	37 04 50 a0 	extr %d10,%d4,0,16
    if (count != 0)
80000ea0:	df 0a 7c 00 	jeq %d10,0,80000f98 <Ifx_Fifo_read+0x108>
        buffer.base   = fifo->buffer;
80000ea4:	54 42       	ld.w %d2,[%a4]
80000ea6:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80000eaa:	b9 42 18 00 	ld.hu %d2,[%a4]24
80000eae:	f9 e2 fe ff 	st.h [%a14]-2,%d2
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80000eb2:	b9 42 14 00 	ld.hu %d2,[%a4]20
80000eb6:	f9 e2 fc ff 	st.h [%a14]-4,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80000eba:	82 f2       	mov %d2,-1
80000ebc:	06 f2       	sh %d2,-1
80000ebe:	0b 27 00 21 	eq %d2,%d7,%d2
80000ec2:	8b f6 1f 24 	and.eq %d2,%d6,-1
80000ec6:	df 02 1a 80 	jne %d2,0,80000efa <Ifx_Fifo_read+0x6a>
    reg.U = __mfcr(CPU_ICR);
80000eca:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80000ece:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
80000ed2:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
80000ed6:	00 00       	nop 
    result  = stm->TIM0.U;
80000ed8:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
80000edc:	19 26 10 00 	ld.w %d6,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
80000ee0:	19 22 2c 00 	ld.w %d2,[%a2]44
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80000ee4:	02 63       	mov %d3,%d6
80000ee6:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
80000eea:	df 04 04 00 	jeq %d4,0,80000ef2 <Ifx_Fifo_read+0x62>
        __enable();
80000eee:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80000ef2:	0b 39 40 90 	addx %d9,%d9,%d3
80000ef6:	0b 28 50 80 	addc %d8,%d8,%d2
    boolean            Stop = FALSE;
80000efa:	82 0c       	mov %d12,0
80000efc:	1d 00 1f 00 	j 80000f3a <Ifx_Fifo_read+0xaa>
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
80000f00:	02 24       	mov %d4,%d2
80000f02:	60 d5       	mov.a %a5,%d13
80000f04:	d9 e4 f8 ff 	lea %a4,[%a14]-8
80000f08:	6d ff 9e fe 	call 80000c44 <Ifx_CircularBuffer_read8>
80000f0c:	80 2d       	mov.d %d13,%a2
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
80000f0e:	02 b5       	mov %d5,%d11
80000f10:	02 a4       	mov %d4,%d10
80000f12:	40 c4       	mov.aa %a4,%a12
80000f14:	6d ff ff fe 	call 80000d12 <Ifx_Fifo_readEnd>
80000f18:	02 2a       	mov %d10,%d2
80000f1a:	1d 00 17 00 	j 80000f48 <Ifx_Fifo_read+0xb8>
    {
        result = FALSE;
    }
    else
    {
        result = IfxStm_now() >= deadLine;
80000f1e:	0b 38 00 21 	eq %d2,%d8,%d3
80000f22:	0b 94 50 22 	and.ge.u %d2,%d4,%d9
80000f26:	0b 38 90 22 	or.lt %d2,%d8,%d3
80000f2a:	8f f2 0f 21 	and %d2,%d2,255
            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80000f2e:	df 02 2e 80 	jne %d2,0,80000f8a <Ifx_Fifo_read+0xfa>
            if (count != 0)
80000f32:	df 0a 3f 80 	jne %d10,0,80000fb0 <Ifx_Fifo_read+0x120>
        } while (count != 0);
80000f36:	df 0a 2d 00 	jeq %d10,0,80000f90 <Ifx_Fifo_read+0x100>
            blockSize = Ifx_Fifo_beginRead(fifo, count);
80000f3a:	02 a4       	mov %d4,%d10
80000f3c:	40 c4       	mov.aa %a4,%a12
80000f3e:	6d ff c5 fe 	call 80000cc8 <Ifx_Fifo_beginRead>
80000f42:	02 2b       	mov %d11,%d2
            if (blockSize != 0)
80000f44:	df 02 de ff 	jne %d2,0,80000f00 <Ifx_Fifo_read+0x70>
            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80000f48:	df 0c 21 80 	jne %d12,0,80000f8a <Ifx_Fifo_read+0xfa>
    if (deadLine == TIME_INFINITE)
80000f4c:	82 f2       	mov %d2,-1
80000f4e:	06 f2       	sh %d2,-1
80000f50:	0b 28 00 21 	eq %d2,%d8,%d2
80000f54:	8b f9 1f 24 	and.eq %d2,%d9,-1
80000f58:	df 02 ed ff 	jne %d2,0,80000f32 <Ifx_Fifo_read+0xa2>
    reg.U = __mfcr(CPU_ICR);
80000f5c:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80000f60:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
80000f64:	0d 00 40 03 	disable 
80000f68:	00 00       	nop 
    result  = stm->TIM0.U;
80000f6a:	c5 f3 00 00 	lea %a3,f0000000 <_SMALL_DATA4_+0x5fff8000>
80000f6e:	19 34 10 00 	ld.w %d4,[%a3]16
    result |= ((uint64)stm->CAP.U) << 32;
80000f72:	19 32 2c 00 	ld.w %d2,[%a3]44
80000f76:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80000f7a:	b7 02 81 3f 	insert %d3,%d2,0,31,1
    if (enabled != FALSE)
80000f7e:	df 05 d0 7f 	jeq %d5,0,80000f1e <Ifx_Fifo_read+0x8e>
        __enable();
80000f82:	0d 00 00 03 	enable 
80000f86:	1d ff cc ff 	j 80000f1e <Ifx_Fifo_read+0x8e>
                fifo->shared.readerWaitx = 0;
80000f8a:	82 02       	mov %d2,0
80000f8c:	59 c2 08 00 	st.w [%a12]8,%d2
        fifo->startIndex = buffer.index;
80000f90:	c9 e2 fc ff 	ld.h %d2,[%a14]-4
80000f94:	f9 c2 14 00 	st.h [%a12]20,%d2
}
80000f98:	02 a2       	mov %d2,%d10
80000f9a:	00 90       	ret 
        result = IfxStm_now() >= deadLine;
80000f9c:	0b 28 00 31 	eq %d3,%d8,%d2
80000fa0:	0b 94 50 32 	and.ge.u %d3,%d4,%d9
80000fa4:	0b 28 90 32 	or.lt %d3,%d8,%d2
80000fa8:	8f f3 0f 31 	and %d3,%d3,255
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80000fac:	df 03 25 80 	jne %d3,0,80000ff6 <Ifx_Fifo_read+0x166>
80000fb0:	39 c2 1c 00 	ld.bu %d2,[%a12]28
80000fb4:	df 02 21 80 	jne %d2,0,80000ff6 <Ifx_Fifo_read+0x166>
    if (deadLine == TIME_INFINITE)
80000fb8:	82 f2       	mov %d2,-1
80000fba:	06 f2       	sh %d2,-1
80000fbc:	0b 28 00 21 	eq %d2,%d8,%d2
80000fc0:	8b f9 1f 24 	and.eq %d2,%d9,-1
80000fc4:	df 02 f6 ff 	jne %d2,0,80000fb0 <Ifx_Fifo_read+0x120>
    reg.U = __mfcr(CPU_ICR);
80000fc8:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80000fcc:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
80000fd0:	0d 00 40 03 	disable 
80000fd4:	00 00       	nop 
    result  = stm->TIM0.U;
80000fd6:	c5 f3 00 00 	lea %a3,f0000000 <_SMALL_DATA4_+0x5fff8000>
80000fda:	19 34 10 00 	ld.w %d4,[%a3]16
    result |= ((uint64)stm->CAP.U) << 32;
80000fde:	19 32 2c 00 	ld.w %d2,[%a3]44
80000fe2:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80000fe6:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
80000fea:	df 05 d9 7f 	jeq %d5,0,80000f9c <Ifx_Fifo_read+0x10c>
        __enable();
80000fee:	0d 00 00 03 	enable 
80000ff2:	1d ff d5 ff 	j 80000f9c <Ifx_Fifo_read+0x10c>
                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
80000ff6:	39 cc 1c 00 	ld.bu %d12,[%a12]28
80000ffa:	8b 0c 00 c2 	eq %d12,%d12,0
80000ffe:	1d ff 9c ff 	j 80000f36 <Ifx_Fifo_read+0xa6>

80001002 <Ifx_Fifo_write>:



Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
80001002:	40 ae       	mov.aa %a14,%sp
80001004:	20 08       	sub.a %sp,8
80001006:	40 4c       	mov.aa %a12,%a4
80001008:	80 5d       	mov.d %d13,%a5
8000100a:	02 69       	mov %d9,%d6
8000100c:	02 78       	mov %d8,%d7
8000100e:	37 04 50 a0 	extr %d10,%d4,0,16
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80001012:	df 0a 7c 00 	jeq %d10,0,8000110a <Ifx_Fifo_write+0x108>
    {
        buffer.base   = fifo->buffer;
80001016:	54 42       	ld.w %d2,[%a4]
80001018:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
8000101c:	b9 42 18 00 	ld.hu %d2,[%a4]24
80001020:	f9 e2 fe ff 	st.h [%a14]-2,%d2
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
80001024:	b9 42 16 00 	ld.hu %d2,[%a4]22
80001028:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    if (timeout == TIME_INFINITE)
8000102c:	82 f2       	mov %d2,-1
8000102e:	06 f2       	sh %d2,-1
80001030:	0b 27 00 21 	eq %d2,%d7,%d2
80001034:	8b f6 1f 24 	and.eq %d2,%d6,-1
80001038:	df 02 1a 80 	jne %d2,0,8000106c <Ifx_Fifo_write+0x6a>
    reg.U = __mfcr(CPU_ICR);
8000103c:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80001040:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
80001044:	0d 00 40 03 	disable 
80001048:	00 00       	nop 
    result  = stm->TIM0.U;
8000104a:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000104e:	19 26 10 00 	ld.w %d6,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
80001052:	19 22 2c 00 	ld.w %d2,[%a2]44
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80001056:	02 63       	mov %d3,%d6
80001058:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
8000105c:	df 04 04 00 	jeq %d4,0,80001064 <Ifx_Fifo_write+0x62>
        __enable();
80001060:	0d 00 00 03 	enable 
        deadLine = IfxStm_now() + timeout;
80001064:	0b 39 40 90 	addx %d9,%d9,%d3
80001068:	0b 28 50 80 	addc %d8,%d8,%d2
    boolean            Stop = FALSE;
8000106c:	82 0c       	mov %d12,0
8000106e:	1d 00 1f 00 	j 800010ac <Ifx_Fifo_write+0xaa>
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
            {
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
80001072:	02 24       	mov %d4,%d2
80001074:	60 d5       	mov.a %a5,%d13
80001076:	d9 e4 f8 ff 	lea %a4,[%a14]-8
8000107a:	6d ff 06 fe 	call 80000c86 <Ifx_CircularBuffer_write8>
8000107e:	80 2d       	mov.d %d13,%a2
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
80001080:	02 b5       	mov %d5,%d11
80001082:	02 a4       	mov %d4,%d10
80001084:	40 c4       	mov.aa %a4,%a12
80001086:	6d ff 98 fe 	call 80000db6 <Ifx_Fifo_endWrite>
8000108a:	02 2a       	mov %d10,%d2
8000108c:	1d 00 17 00 	j 800010ba <Ifx_Fifo_write+0xb8>
        result = IfxStm_now() >= deadLine;
80001090:	0b 38 00 21 	eq %d2,%d8,%d3
80001094:	0b 94 50 22 	and.ge.u %d2,%d4,%d9
80001098:	0b 38 90 22 	or.lt %d2,%d8,%d3
8000109c:	8f f2 0f 21 	and %d2,%d2,255
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800010a0:	df 02 2e 80 	jne %d2,0,800010fc <Ifx_Fifo_write+0xfa>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
800010a4:	df 0a 3f 80 	jne %d10,0,80001122 <Ifx_Fifo_write+0x120>
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
            }
        } while (count != 0);
800010a8:	df 0a 2d 00 	jeq %d10,0,80001102 <Ifx_Fifo_write+0x100>
            blockSize = Ifx_Fifo_beginWrite(fifo, count);
800010ac:	02 a4       	mov %d4,%d10
800010ae:	40 c4       	mov.aa %a4,%a12
800010b0:	6d ff 5c fe 	call 80000d68 <Ifx_Fifo_beginWrite>
800010b4:	02 2b       	mov %d11,%d2
            if (blockSize != 0)
800010b6:	df 02 de ff 	jne %d2,0,80001072 <Ifx_Fifo_write+0x70>
            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800010ba:	df 0c 21 80 	jne %d12,0,800010fc <Ifx_Fifo_write+0xfa>
    if (deadLine == TIME_INFINITE)
800010be:	82 f2       	mov %d2,-1
800010c0:	06 f2       	sh %d2,-1
800010c2:	0b 28 00 21 	eq %d2,%d8,%d2
800010c6:	8b f9 1f 24 	and.eq %d2,%d9,-1
800010ca:	df 02 ed ff 	jne %d2,0,800010a4 <Ifx_Fifo_write+0xa2>
    reg.U = __mfcr(CPU_ICR);
800010ce:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800010d2:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
800010d6:	0d 00 40 03 	disable 
800010da:	00 00       	nop 
    result  = stm->TIM0.U;
800010dc:	c5 f3 00 00 	lea %a3,f0000000 <_SMALL_DATA4_+0x5fff8000>
800010e0:	19 34 10 00 	ld.w %d4,[%a3]16
    result |= ((uint64)stm->CAP.U) << 32;
800010e4:	19 32 2c 00 	ld.w %d2,[%a3]44
800010e8:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800010ec:	b7 02 81 3f 	insert %d3,%d2,0,31,1
    if (enabled != FALSE)
800010f0:	df 05 d0 7f 	jeq %d5,0,80001090 <Ifx_Fifo_write+0x8e>
        __enable();
800010f4:	0d 00 00 03 	enable 
800010f8:	1d ff cc ff 	j 80001090 <Ifx_Fifo_write+0x8e>
                fifo->shared.writerWaitx = 0;
800010fc:	82 02       	mov %d2,0
800010fe:	59 c2 0c 00 	st.w [%a12]12,%d2

        fifo->endIndex = buffer.index;
80001102:	c9 e2 fc ff 	ld.h %d2,[%a14]-4
80001106:	f9 c2 16 00 	st.h [%a12]22,%d2
    }

    return count;
}
8000110a:	02 a2       	mov %d2,%d10
8000110c:	00 90       	ret 
        result = IfxStm_now() >= deadLine;
8000110e:	0b 28 00 31 	eq %d3,%d8,%d2
80001112:	0b 94 50 32 	and.ge.u %d3,%d4,%d9
80001116:	0b 28 90 32 	or.lt %d3,%d8,%d2
8000111a:	8f f3 0f 31 	and %d3,%d3,255
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000111e:	df 03 25 80 	jne %d3,0,80001168 <Ifx_Fifo_write+0x166>
80001122:	39 c2 1d 00 	ld.bu %d2,[%a12]29
80001126:	df 02 21 80 	jne %d2,0,80001168 <Ifx_Fifo_write+0x166>
    if (deadLine == TIME_INFINITE)
8000112a:	82 f2       	mov %d2,-1
8000112c:	06 f2       	sh %d2,-1
8000112e:	0b 28 00 21 	eq %d2,%d8,%d2
80001132:	8b f9 1f 24 	and.eq %d2,%d9,-1
80001136:	df 02 f6 ff 	jne %d2,0,80001122 <Ifx_Fifo_write+0x120>
    reg.U = __mfcr(CPU_ICR);
8000113a:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
8000113e:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
80001142:	0d 00 40 03 	disable 
80001146:	00 00       	nop 
    result  = stm->TIM0.U;
80001148:	c5 f3 00 00 	lea %a3,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000114c:	19 34 10 00 	ld.w %d4,[%a3]16
    result |= ((uint64)stm->CAP.U) << 32;
80001150:	19 32 2c 00 	ld.w %d2,[%a3]44
80001154:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80001158:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
8000115c:	df 05 d9 7f 	jeq %d5,0,8000110e <Ifx_Fifo_write+0x10c>
        __enable();
80001160:	0d 00 00 03 	enable 
80001164:	1d ff d5 ff 	j 8000110e <Ifx_Fifo_write+0x10c>
                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
80001168:	39 cc 1d 00 	ld.bu %d12,[%a12]29
8000116c:	8b 0c 00 c2 	eq %d12,%d12,0
80001170:	1d ff 9c ff 	j 800010a8 <Ifx_Fifo_write+0xa6>

80001174 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80001174:	40 ae       	mov.aa %a14,%sp
80001176:	40 4c       	mov.aa %a12,%a4
80001178:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000117a:	6d 00 09 0c 	call 8000298c <IfxScuWdt_getSafetyWatchdogPassword>
8000117e:	02 29       	mov %d9,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80001180:	02 24       	mov %d4,%d2
80001182:	6d 00 af 0a 	call 800026e0 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80001186:	8b 08 a2 32 	ge.u %d3,%d8,32
8000118a:	df 03 0d 80 	jne %d3,0,800011a4 <IfxVadc_disableAccess+0x30>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
8000118e:	d9 c2 08 20 	lea %a2,[%a12]136
80001192:	19 c2 08 20 	ld.w %d2,[%a12]136
80001196:	d7 12 01 28 	insert %d2,%d2,1,%d8,1
8000119a:	74 22       	st.w [%a2],%d2
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
    }

    IfxScuWdt_setSafetyEndinit(passwd);
8000119c:	02 94       	mov %d4,%d9
8000119e:	6d 00 27 0c 	call 800029ec <IfxScuWdt_setSafetyEndinit>
}
800011a2:	00 90       	ret 
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
800011a4:	d9 c2 0c 20 	lea %a2,[%a12]140
800011a8:	19 c3 0c 20 	ld.w %d3,[%a12]140
800011ac:	8f f8 01 21 	and %d2,%d8,31
800011b0:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
800011b4:	74 22       	st.w [%a2],%d2
800011b6:	1d ff f3 ff 	j 8000119c <IfxVadc_disableAccess+0x28>

800011ba <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800011ba:	40 ae       	mov.aa %a14,%sp
800011bc:	40 4c       	mov.aa %a12,%a4
800011be:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800011c0:	6d 00 e6 0b 	call 8000298c <IfxScuWdt_getSafetyWatchdogPassword>
800011c4:	02 29       	mov %d9,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800011c6:	02 24       	mov %d4,%d2
800011c8:	6d 00 8c 0a 	call 800026e0 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800011cc:	8b 08 a2 32 	ge.u %d3,%d8,32
800011d0:	df 03 0d 80 	jne %d3,0,800011ea <IfxVadc_enableAccess+0x30>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
800011d4:	d9 c2 08 20 	lea %a2,[%a12]136
800011d8:	19 c2 08 20 	ld.w %d2,[%a12]136
800011dc:	d7 02 01 28 	insert %d2,%d2,0,%d8,1
800011e0:	74 22       	st.w [%a2],%d2
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800011e2:	02 94       	mov %d4,%d9
800011e4:	6d 00 04 0c 	call 800029ec <IfxScuWdt_setSafetyEndinit>
}
800011e8:	00 90       	ret 
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
800011ea:	d9 c2 0c 20 	lea %a2,[%a12]140
800011ee:	19 c3 0c 20 	ld.w %d3,[%a12]140
800011f2:	8f f8 01 21 	and %d2,%d8,31
800011f6:	d7 03 01 22 	insert %d2,%d3,0,%d2,1
800011fa:	74 22       	st.w [%a2],%d2
800011fc:	1d ff f3 ff 	j 800011e2 <IfxVadc_enableAccess+0x28>

80001200 <IfxVadc_disablePostCalibration>:
{
80001200:	40 ae       	mov.aa %a14,%sp
80001202:	40 4c       	mov.aa %a12,%a4
80001204:	02 48       	mov %d8,%d4
80001206:	8f f5 0f 91 	and %d9,%d5,255
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
8000120a:	bf 84 03 80 	jlt.u %d4,8,80001210 <IfxVadc_disablePostCalibration+0x10>
}
8000120e:	00 90       	ret 
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80001210:	3b f0 01 40 	mov %d4,31
80001214:	6d ff d3 ff 	call 800011ba <IfxVadc_enableAccess>
        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80001218:	1b 08 01 80 	addi %d8,%d8,16
8000121c:	82 12       	mov %d2,1
8000121e:	0f 82 00 20 	sh %d2,%d2,%d8
        if (disable == TRUE)
80001222:	df 19 10 00 	jeq %d9,1,80001242 <IfxVadc_disablePostCalibration+0x42>
            vadc->GLOBCFG.U &= ~mask;
80001226:	d9 c2 00 20 	lea %a2,[%a12]128
8000122a:	19 c3 00 20 	ld.w %d3,[%a12]128
8000122e:	0f 23 e0 20 	andn %d2,%d3,%d2
80001232:	74 22       	st.w [%a2],%d2
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80001234:	3b f0 01 40 	mov %d4,31
80001238:	40 c4       	mov.aa %a4,%a12
8000123a:	6d ff 9d ff 	call 80001174 <IfxVadc_disableAccess>
}
8000123e:	1d ff e8 ff 	j 8000120e <IfxVadc_disablePostCalibration+0xe>
            vadc->GLOBCFG.U |= mask;
80001242:	d9 c2 00 20 	lea %a2,[%a12]128
80001246:	19 c3 00 20 	ld.w %d3,[%a12]128
8000124a:	a6 32       	or %d2,%d3
8000124c:	74 22       	st.w [%a2],%d2
8000124e:	1d ff f3 ff 	j 80001234 <IfxVadc_disablePostCalibration+0x34>

80001252 <IfxVadc_getAdcAnalogFrequency>:
    IfxScuWdt_setCpuEndinit(passwd);
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
80001252:	40 ae       	mov.aa %a14,%sp
80001254:	40 4c       	mov.aa %a12,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
80001256:	6d 00 37 08 	call 800022c4 <IfxScuCcu_getSpbFrequency>
8000125a:	19 c3 00 20 	ld.w %d3,[%a12]128
8000125e:	8f f3 01 31 	and %d3,%d3,31
80001262:	c2 13       	add %d3,1
80001264:	4b 03 61 31 	utof %d3,%d3
}
80001268:	4b 32 51 20 	div.f %d2,%d2,%d3
8000126c:	00 90       	ret 

8000126e <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
8000126e:	40 ae       	mov.aa %a14,%sp
80001270:	40 4c       	mov.aa %a12,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
80001272:	6d 00 29 08 	call 800022c4 <IfxScuCcu_getSpbFrequency>
80001276:	19 c3 00 20 	ld.w %d3,[%a12]128
8000127a:	37 03 62 34 	extr.u %d3,%d3,8,2
8000127e:	c2 13       	add %d3,1
80001280:	4b 03 61 31 	utof %d3,%d3
}
80001284:	4b 32 51 20 	div.f %d2,%d2,%d3
80001288:	00 90       	ret 

8000128a <IfxVadc_getSrcAddress>:
    }
}


volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
8000128a:	40 ae       	mov.aa %a14,%sp
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
8000128c:	bf 45 07 80 	jlt.u %d5,4,8000129a <IfxVadc_getSrcAddress+0x10>
    {
        index -= 4;
80001290:	c2 c5       	add %d5,-4

        if ((group & 0x1) != 0)
80001292:	6f 04 10 00 	jz.t %d4,0,800012b2 <IfxVadc_getSrcAddress+0x28>
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
80001296:	3b 90 00 40 	mov %d4,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
8000129a:	8f 24 00 20 	sh %d2,%d4,2
8000129e:	42 52       	add %d2,%d5
800012a0:	06 22       	sh %d2,2
800012a2:	91 00 00 28 	movh.a %a2,32768
800012a6:	d9 22 10 c0 	lea %a2,[%a2]784 <80000310 <IfxVadc_cfg_srcAddresses>>
800012aa:	01 22 00 26 	addsc.a %a2,%a2,%d2,0

    return &(base[0]);
}
800012ae:	d4 22       	ld.a %a2,[%a2]
800012b0:	00 90       	ret 
            group = IfxVadc_GroupId_global0;    /* Shared interrupt common 0 is used */
800012b2:	3b 80 00 40 	mov %d4,8
800012b6:	1d ff f2 ff 	j 8000129a <IfxVadc_getSrcAddress+0x10>

800012ba <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
800012ba:	40 ae       	mov.aa %a14,%sp
800012bc:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800012be:	19 42 00 20 	ld.w %d2,[%a4]128
800012c2:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
800012c4:	37 48 02 84 	insert %d8,%d8,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
800012c8:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800012cc:	3b f0 01 40 	mov %d4,31
800012d0:	6d ff 75 ff 	call 800011ba <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800012d4:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800012d8:	3b f0 01 40 	mov %d4,31
800012dc:	40 c4       	mov.aa %a4,%a12
800012de:	6d ff 4b ff 	call 80001174 <IfxVadc_disableAccess>
}
800012e2:	00 90       	ret 

800012e4 <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
800012e4:	40 ae       	mov.aa %a14,%sp
800012e6:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800012e8:	19 42 00 20 	ld.w %d2,[%a4]128
800012ec:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.DIVA  = converterClockDivider;
800012ee:	37 48 05 80 	insert %d8,%d8,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
800012f2:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800012f6:	3b f0 01 40 	mov %d4,31
800012fa:	6d ff 60 ff 	call 800011ba <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800012fe:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80001302:	3b f0 01 40 	mov %d4,31
80001306:	40 c4       	mov.aa %a4,%a12
80001308:	6d ff 36 ff 	call 80001174 <IfxVadc_disableAccess>
}
8000130c:	00 90       	ret 

8000130e <IfxVadc_initializeFAdcD>:


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
8000130e:	40 ae       	mov.aa %a14,%sp
80001310:	80 4a       	mov.d %d10,%a4
80001312:	02 48       	mov %d8,%d4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80001314:	6d 00 d8 07 	call 800022c4 <IfxScuCcu_getSpbFrequency>
80001318:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
8000131c:	4b 82 11 82 	div.u %e8,%d2,%d8
80001320:	1b f8 ff 3f 	addi %d3,%d8,-1
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80001324:	82 34       	mov %d4,3
80001326:	0b 43 90 41 	min.u %d4,%d3,%d4

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
8000132a:	1b 14 00 80 	addi %d8,%d4,1
8000132e:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80001332:	60 a4       	mov.a %a4,%d10
80001334:	6d ff c3 ff 	call 800012ba <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
80001338:	02 82       	mov %d2,%d8
8000133a:	00 90       	ret 

8000133c <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
8000133c:	40 ae       	mov.aa %a14,%sp
8000133e:	80 49       	mov.d %d9,%a4
80001340:	02 48       	mov %d8,%d4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80001342:	6d 00 c1 07 	call 800022c4 <IfxScuCcu_getSpbFrequency>
80001346:	4b 02 71 31 	ftouz %d3,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
8000134a:	8f 23 00 40 	sh %d4,%d3,2
8000134e:	4b 84 11 42 	div.u %e4,%d4,%d8

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80001352:	1b 24 00 20 	addi %d2,%d4,2
80001356:	06 e2       	sh %d2,-2
    divA   = __minu(divA - 1, 0x1Fu);
80001358:	c2 f2       	add %d2,-1
8000135a:	3b f0 01 40 	mov %d4,31
8000135e:	0b 42 90 41 	min.u %d4,%d2,%d4
    result = fadc / (divA + 1);
80001362:	1b 14 00 20 	addi %d2,%d4,1
80001366:	4b 23 11 62 	div.u %e6,%d3,%d2
8000136a:	02 68       	mov %d8,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
8000136c:	7b 10 13 50 	movh %d5,305
80001370:	1b 05 d0 52 	addi %d5,%d5,11520
80001374:	7f 65 0b 80 	jge.u %d5,%d6,8000138a <IfxVadc_initializeFAdcI+0x4e>
80001378:	3b f0 01 40 	mov %d4,31
8000137c:	0b 42 90 41 	min.u %d4,%d2,%d4
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80001380:	1b 14 00 20 	addi %d2,%d4,1
80001384:	4b 23 11 22 	div.u %e2,%d3,%d2
80001388:	02 28       	mov %d8,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
8000138a:	7b 80 ff 2f 	movh %d2,65528
8000138e:	1b 02 ee 25 	addi %d2,%d2,24288
80001392:	42 82       	add %d2,%d8
80001394:	7b a0 12 30 	movh %d3,298
80001398:	1b 03 be 38 	addi %d3,%d3,-29728
8000139c:	7f 23 05 80 	jge.u %d3,%d2,800013a6 <IfxVadc_initializeFAdcI+0x6a>
    {
        result = 0;             /* Min / Max FAdcI frequency */
800013a0:	82 08       	mov %d8,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
800013a2:	02 82       	mov %d2,%d8
800013a4:	00 90       	ret 
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
800013a6:	60 94       	mov.a %a4,%d9
800013a8:	6d ff 9e ff 	call 800012e4 <IfxVadc_initialiseAdcConverterClock>
800013ac:	1d ff fb ff 	j 800013a2 <IfxVadc_initializeFAdcI+0x66>

800013b0 <IfxVadc_selectPowerSupplyVoltage>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
800013b0:	40 ae       	mov.aa %a14,%sp
800013b2:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800013b4:	19 42 00 20 	ld.w %d2,[%a4]128
800013b8:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.LOSUP = supplyVoltage;
800013ba:	67 48 0e 80 	ins.t %d8,%d8,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
800013be:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800013c2:	3b f0 01 40 	mov %d4,31
800013c6:	6d ff fa fe 	call 800011ba <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800013ca:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800013ce:	3b f0 01 40 	mov %d4,31
800013d2:	40 c4       	mov.aa %a4,%a12
800013d4:	6d ff d0 fe 	call 80001174 <IfxVadc_disableAccess>
}
800013d8:	00 90       	ret 

800013da <IfxVadc_setArbiterPriority>:


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
800013da:	40 ae       	mov.aa %a14,%sp
800013dc:	02 50       	mov %d0,%d5
    if (slotEnable != FALSE)
800013de:	df 04 2a 00 	jeq %d4,0,80001432 <IfxVadc_setArbiterPriority+0x58>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
800013e2:	d9 42 04 00 	lea %a2,[%a4]4
800013e6:	19 43 04 00 	ld.w %d3,[%a4]4
800013ea:	1b 87 01 20 	addi %d2,%d7,24
800013ee:	0f 24 00 20 	sh %d2,%d4,%d2
800013f2:	a6 32       	or %d2,%d3
800013f4:	74 22       	st.w [%a2],%d2
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
800013f6:	54 23       	ld.w %d3,[%a2]
800013f8:	06 27       	sh %d7,2
800013fa:	82 32       	mov %d2,3
800013fc:	0f 72 00 20 	sh %d2,%d2,%d7
80001400:	0f 23 e0 20 	andn %d2,%d3,%d2
80001404:	74 22       	st.w [%a2],%d2
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80001406:	54 23       	ld.w %d3,[%a2]
80001408:	0f 70 00 20 	sh %d2,%d0,%d7
8000140c:	a6 32       	or %d2,%d3
8000140e:	74 22       	st.w [%a2],%d2

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80001410:	df 06 08 00 	jeq %d6,0,80001420 <IfxVadc_setArbiterPriority+0x46>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80001414:	54 22       	ld.w %d2,[%a2]
80001416:	c2 37       	add %d7,3
80001418:	d7 12 01 27 	insert %d2,%d2,1,%d7,1
8000141c:	74 22       	st.w [%a2],%d2
8000141e:	00 90       	ret 
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80001420:	d9 42 04 00 	lea %a2,[%a4]4
80001424:	19 42 04 00 	ld.w %d2,[%a4]4
80001428:	c2 37       	add %d7,3
8000142a:	d7 02 01 27 	insert %d2,%d2,0,%d7,1
8000142e:	74 22       	st.w [%a2],%d2
80001430:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80001432:	d9 42 04 00 	lea %a2,[%a4]4
80001436:	19 43 04 00 	ld.w %d3,[%a4]4
8000143a:	1b 87 01 20 	addi %d2,%d7,24
8000143e:	d7 03 01 22 	insert %d2,%d3,0,%d2,1
80001442:	74 22       	st.w [%a2],%d2
    }
}
80001444:	00 90       	ret 

80001446 <IfxVadc_setScan>:


void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
80001446:	40 ae       	mov.aa %a14,%sp
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80001448:	d9 42 28 20 	lea %a2,[%a4]168
8000144c:	19 42 28 20 	ld.w %d2,[%a4]168
80001450:	0f 42 c0 30 	xor %d3,%d2,%d4
80001454:	26 53       	and %d3,%d5
80001456:	c6 32       	xor %d2,%d3
80001458:	74 22       	st.w [%a2],%d2
}
8000145a:	00 90       	ret 

8000145c <IfxVadc_startupCalibration>:


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
8000145c:	40 ae       	mov.aa %a14,%sp
8000145e:	40 4c       	mov.aa %a12,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80001460:	3b f0 01 40 	mov %d4,31
80001464:	6d ff ab fe 	call 800011ba <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80001468:	d9 c2 00 20 	lea %a2,[%a12]128
8000146c:	19 c2 00 20 	ld.w %d2,[%a12]128
80001470:	b7 12 81 2f 	insert %d2,%d2,1,31,1
80001474:	74 22       	st.w [%a2],%d2
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80001476:	3b f0 01 40 	mov %d4,31
8000147a:	40 c4       	mov.aa %a4,%a12
8000147c:	6d ff 7c fe 	call 80001174 <IfxVadc_disableAccess>
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80001480:	82 02       	mov %d2,0
        calibrationRunning = FALSE;
80001482:	82 04       	mov %d4,0
        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80001484:	1d 00 05 00 	j 8000148e <IfxVadc_startupCalibration+0x32>
80001488:	c2 12       	add %d2,1
8000148a:	8f f2 0f 21 	and %d2,%d2,255
8000148e:	ff 82 0d 80 	jge.u %d2,8,800014a8 <IfxVadc_startupCalibration+0x4c>
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80001492:	8f a2 00 30 	sh %d3,%d2,10
80001496:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
8000149a:	19 23 40 20 	ld.w %d3,[%a2]1152
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
8000149e:	ef c3 f5 7f 	jz.t %d3,28,80001488 <IfxVadc_startupCalibration+0x2c>
            {
                calibrationRunning = TRUE;
800014a2:	82 14       	mov %d4,1
800014a4:	1d ff f2 ff 	j 80001488 <IfxVadc_startupCalibration+0x2c>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
800014a8:	df 04 ec ff 	jne %d4,0,80001480 <IfxVadc_startupCalibration+0x24>
}
800014ac:	00 90       	ret 

800014ae <IfxVadc_Adc_initChannel>:
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
800014ae:	40 ae       	mov.aa %a14,%sp
800014b0:	40 4f       	mov.aa %a15,%a4
800014b2:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
800014b4:	99 52 38 00 	ld.a %a2,[%a5]56
}


IFX_INLINE Ifx_VADC *IfxVadc_Adc_getVadcFromGroup(const IfxVadc_Adc_Group *group)
{
    return group->module.vadc;
800014b8:	54 28       	ld.w %d8,[%a2]
    return group->group;
800014ba:	99 2d 04 00 	ld.a %a13,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
800014be:	b5 42 08 00 	st.a [%a4]8,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
800014c2:	19 29 08 00 	ld.w %d9,[%a2]8
    IfxVadc_ChannelId channelIndex = config->channelId;
800014c6:	19 5a 18 00 	ld.w %d10,[%a5]24

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800014ca:	02 94       	mov %d4,%d9
800014cc:	60 84       	mov.a %a4,%d8
800014ce:	6d ff 76 fe 	call 800011ba <IfxVadc_enableAccess>

    /* Configure Channel */
    {
        IfxVadc_setReferenceInput(vadcG, channelIndex, config->reference);
800014d2:	19 c3 20 00 	ld.w %d3,[%a12]32
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
800014d6:	1b 0a 06 20 	addi %d2,%d10,96
800014da:	06 22       	sh %d2,2
800014dc:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800014e0:	54 22       	ld.w %d2,[%a2]
800014e2:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
800014e6:	74 22       	st.w [%a2],%d2
        IfxVadc_storeGroupResult(vadcG, channelIndex, config->resultRegister);
800014e8:	19 c3 24 00 	ld.w %d3,[%a12]36
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
800014ec:	54 22       	ld.w %d2,[%a2]
800014ee:	37 32 04 28 	insert %d2,%d2,%d3,16,4
800014f2:	74 22       	st.w [%a2],%d2
        IfxVadc_setLowerBoundary(vadcG, channelIndex, config->lowerBoundary);
800014f4:	19 c3 28 00 	ld.w %d3,[%a12]40
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
800014f8:	54 22       	ld.w %d2,[%a2]
800014fa:	37 32 02 22 	insert %d2,%d2,%d3,4,2
800014fe:	74 22       	st.w [%a2],%d2
        IfxVadc_setUpperBoundary(vadcG, channelIndex, config->upperBoundary);
80001500:	19 c3 2c 00 	ld.w %d3,[%a12]44
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
80001504:	54 22       	ld.w %d2,[%a2]
80001506:	37 32 02 23 	insert %d2,%d2,%d3,6,2
8000150a:	74 22       	st.w [%a2],%d2
        IfxVadc_setSyncRequest(vadcG, channelIndex, config->synchonize);
8000150c:	39 c3 01 00 	ld.bu %d3,[%a12]1
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
80001510:	54 22       	ld.w %d2,[%a2]
80001512:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80001516:	74 22       	st.w [%a2],%d2
        IfxVadc_setChannelInputClass(vadcG, channelIndex, config->inputClass);
80001518:	19 c3 1c 00 	ld.w %d3,[%a12]28
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
8000151c:	54 22       	ld.w %d2,[%a2]
8000151e:	37 32 02 20 	insert %d2,%d2,%d3,0,2
80001522:	74 22       	st.w [%a2],%d2
        IfxVadc_setChannelLimitCheckMode(vadcG, channelIndex, config->limitCheck);
80001524:	19 c3 34 00 	ld.w %d3,[%a12]52
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
80001528:	54 22       	ld.w %d2,[%a2]
8000152a:	37 32 02 24 	insert %d2,%d2,%d3,8,2
8000152e:	74 22       	st.w [%a2],%d2
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
80001530:	39 c3 03 00 	ld.bu %d3,[%a12]3
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
80001534:	54 22       	ld.w %d2,[%a2]
80001536:	67 32 15 20 	ins.t %d2,%d2,21,%d3,0
8000153a:	74 22       	st.w [%a2],%d2
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
8000153c:	14 c3       	ld.bu %d3,[%a12]
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
8000153e:	54 22       	ld.w %d2,[%a2]
80001540:	67 32 14 20 	ins.t %d2,%d2,20,%d3,0
80001544:	74 22       	st.w [%a2],%d2
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
80001546:	19 c3 30 00 	ld.w %d3,[%a12]48
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
8000154a:	54 22       	ld.w %d2,[%a2]
8000154c:	37 32 04 26 	insert %d2,%d2,%d3,12,4
80001550:	74 22       	st.w [%a2],%d2
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80001552:	1b 09 01 b0 	addi %d11,%d9,16
80001556:	02 b4       	mov %d4,%d11
80001558:	60 84       	mov.a %a4,%d8
8000155a:	6d ff 30 fe 	call 800011ba <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
8000155e:	39 c2 02 00 	ld.bu %d2,[%a12]2
80001562:	df 02 4c 80 	jne %d2,0,800015fa <IfxVadc_Adc_initChannel+0x14c>
    vadcG->CHASS.U |= (1 << channelIndex);
80001566:	d9 d2 08 00 	lea %a2,[%a13]8
8000156a:	19 d2 08 00 	ld.w %d2,[%a13]8
8000156e:	d7 12 01 2a 	insert %d2,%d2,1,%d10,1
80001572:	74 22       	st.w [%a2],%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80001574:	02 b4       	mov %d4,%d11
80001576:	60 84       	mov.a %a4,%d8
80001578:	6d ff fe fd 	call 80001174 <IfxVadc_disableAccess>

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
8000157c:	19 c4 14 00 	ld.w %d4,[%a12]20
80001580:	48 02       	ld.w %d2,[%a15]0
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80001582:	d9 d2 20 40 	lea %a2,[%a13]288
80001586:	19 d5 20 40 	ld.w %d5,[%a13]288
8000158a:	06 22       	sh %d2,2
8000158c:	3b f0 00 30 	mov %d3,15
80001590:	0f 23 00 30 	sh %d3,%d3,%d2
80001594:	0f 35 e0 30 	andn %d3,%d5,%d3
80001598:	74 23       	st.w [%a2],%d3
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
8000159a:	54 23       	ld.w %d3,[%a2]
8000159c:	0f 24 00 20 	sh %d2,%d4,%d2
800015a0:	a6 32       	or %d2,%d3
800015a2:	74 22       	st.w [%a2],%d2

    if (config->channelPriority > 0)
800015a4:	b9 c2 06 00 	ld.hu %d2,[%a12]6
800015a8:	df 02 32 80 	jne %d2,0,8000160c <IfxVadc_Adc_initChannel+0x15e>
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
800015ac:	19 c2 24 00 	ld.w %d2,[%a12]36
800015b0:	ff 82 51 80 	jge.u %d2,8,80001652 <IfxVadc_Adc_initChannel+0x1a4>
    {
        IfxVadc_setResultNodeEventPointer0(vadcG, config->resultSrcNr, config->resultRegister);
800015b4:	19 c4 10 00 	ld.w %d4,[%a12]16
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
800015b8:	d9 d2 30 40 	lea %a2,[%a13]304
800015bc:	19 d5 30 40 	ld.w %d5,[%a13]304
800015c0:	06 22       	sh %d2,2
800015c2:	3b f0 00 30 	mov %d3,15
800015c6:	0f 23 00 30 	sh %d3,%d3,%d2
800015ca:	0f 35 e0 30 	andn %d3,%d5,%d3
800015ce:	74 23       	st.w [%a2],%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
800015d0:	54 23       	ld.w %d3,[%a2]
800015d2:	0f 24 00 20 	sh %d2,%d4,%d2
800015d6:	a6 32       	or %d2,%d3
800015d8:	74 22       	st.w [%a2],%d2
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
800015da:	b9 c2 04 00 	ld.hu %d2,[%a12]4
800015de:	df 02 50 80 	jne %d2,0,8000167e <IfxVadc_Adc_initChannel+0x1d0>
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800015e2:	02 94       	mov %d4,%d9
800015e4:	60 84       	mov.a %a4,%d8
800015e6:	6d ff c7 fd 	call 80001174 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
800015ea:	19 c2 24 00 	ld.w %d2,[%a12]36
800015ee:	68 12       	st.w [%a15]4,%d2
    channel->channel   = config->channelId;
800015f0:	19 c2 18 00 	ld.w %d2,[%a12]24
800015f4:	68 02       	st.w [%a15]0,%d2

    return Status;
}
800015f6:	82 02       	mov %d2,0
800015f8:	00 90       	ret 
    vadcG->CHASS.U &= ~(1 << channelIndex);
800015fa:	d9 d2 08 00 	lea %a2,[%a13]8
800015fe:	19 d2 08 00 	ld.w %d2,[%a13]8
80001602:	d7 02 01 2a 	insert %d2,%d2,0,%d10,1
80001606:	74 22       	st.w [%a2],%d2
}
80001608:	1d ff b6 ff 	j 80001574 <IfxVadc_Adc_initChannel+0xc6>
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
8000160c:	19 c5 14 00 	ld.w %d5,[%a12]20
80001610:	02 94       	mov %d4,%d9
80001612:	6d ff 3c fe 	call 8000128a <IfxVadc_getSrcAddress>
        IfxVadc_clearChannelRequest(vadcG, config->channelId);
80001616:	19 c4 18 00 	ld.w %d4,[%a12]24
    vadcG->CEFCLR.U = 1 << channelId;
8000161a:	82 13       	mov %d3,1
8000161c:	82 12       	mov %d2,1
8000161e:	0f 42 00 20 	sh %d2,%d2,%d4
80001622:	59 d2 10 40 	st.w [%a13]272,%d2
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80001626:	19 c5 0c 00 	ld.w %d5,[%a12]12
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
8000162a:	39 c4 06 00 	ld.bu %d4,[%a12]6
8000162e:	54 22       	ld.w %d2,[%a2]
80001630:	37 42 08 20 	insert %d2,%d2,%d4,0,8
80001634:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80001636:	54 22       	ld.w %d2,[%a2]
80001638:	37 52 82 25 	insert %d2,%d2,%d5,11,2
8000163c:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
8000163e:	54 22       	ld.w %d2,[%a2]
80001640:	67 32 19 20 	ins.t %d2,%d2,25,%d3,0
80001644:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80001646:	54 22       	ld.w %d2,[%a2]
80001648:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
8000164c:	74 22       	st.w [%a2],%d2
}
8000164e:	1d ff af ff 	j 800015ac <IfxVadc_Adc_initChannel+0xfe>
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
80001652:	19 c4 10 00 	ld.w %d4,[%a12]16
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80001656:	d9 d2 34 40 	lea %a2,[%a13]308
8000165a:	19 d5 34 40 	ld.w %d5,[%a13]308
8000165e:	c2 82       	add %d2,-8
80001660:	06 22       	sh %d2,2
80001662:	3b f0 00 30 	mov %d3,15
80001666:	0f 23 00 30 	sh %d3,%d3,%d2
8000166a:	0f 35 e0 30 	andn %d3,%d5,%d3
8000166e:	74 23       	st.w [%a2],%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80001670:	54 23       	ld.w %d3,[%a2]
80001672:	0f 24 00 20 	sh %d2,%d4,%d2
80001676:	a6 32       	or %d2,%d3
80001678:	74 22       	st.w [%a2],%d2
}
8000167a:	1d ff b0 ff 	j 800015da <IfxVadc_Adc_initChannel+0x12c>
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
8000167e:	19 c5 10 00 	ld.w %d5,[%a12]16
80001682:	02 94       	mov %d4,%d9
80001684:	6d ff 03 fe 	call 8000128a <IfxVadc_getSrcAddress>
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80001688:	19 c2 24 00 	ld.w %d2,[%a12]36
8000168c:	1b 02 08 20 	addi %d2,%d2,128
80001690:	06 22       	sh %d2,2
80001692:	01 d2 00 36 	addsc.a %a3,%a13,%d2,0
80001696:	54 32       	ld.w %d2,[%a3]
80001698:	b7 12 81 2f 	insert %d2,%d2,1,31,1
8000169c:	74 32       	st.w [%a3],%d2
    vadcG->REFCLR.U = 0x0000FFFFu;
8000169e:	bb f0 ff 2f 	mov.u %d2,65535
800016a2:	59 d2 14 40 	st.w [%a13]276,%d2
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
800016a6:	19 c4 08 00 	ld.w %d4,[%a12]8
    src->B.SRPN = priority;
800016aa:	39 c3 04 00 	ld.bu %d3,[%a12]4
800016ae:	54 22       	ld.w %d2,[%a2]
800016b0:	37 32 08 20 	insert %d2,%d2,%d3,0,8
800016b4:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800016b6:	54 22       	ld.w %d2,[%a2]
800016b8:	37 42 82 25 	insert %d2,%d2,%d4,11,2
800016bc:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
800016be:	54 22       	ld.w %d2,[%a2]
800016c0:	b7 12 81 2c 	insert %d2,%d2,1,25,1
800016c4:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
800016c6:	54 22       	ld.w %d2,[%a2]
800016c8:	b7 12 01 25 	insert %d2,%d2,1,10,1
800016cc:	74 22       	st.w [%a2],%d2
}
800016ce:	1d ff 8a ff 	j 800015e2 <IfxVadc_Adc_initChannel+0x134>

800016d2 <IfxVadc_Adc_initChannelConfig>:


void IfxVadc_Adc_initChannelConfig(IfxVadc_Adc_ChannelConfig *config, const IfxVadc_Adc_Group *group)
{
800016d2:	40 ae       	mov.aa %a14,%sp
800016d4:	40 4c       	mov.aa %a12,%a4
800016d6:	80 58       	mov.d %d8,%a5
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
800016d8:	3b c0 03 50 	mov %d5,60
800016dc:	82 04       	mov %d4,0
800016de:	6d 00 99 23 	call 80005e10 <memset>
    config->group = group;
800016e2:	59 c8 38 00 	st.w [%a12]56,%d8
}
800016e6:	00 90       	ret 

800016e8 <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
800016e8:	40 ae       	mov.aa %a14,%sp
800016ea:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
800016ec:	d4 52       	ld.a %a2,[%a5]
800016ee:	d4 2d       	ld.a %a13,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
800016f0:	19 58 04 00 	ld.w %d8,[%a5]4
800016f4:	8f a8 00 20 	sh %d2,%d8,10
800016f8:	1b 02 48 20 	addi %d2,%d2,1152
800016fc:	80 d3       	mov.d %d3,%a13
800016fe:	0b 23 00 90 	add %d9,%d3,%d2

    /* check for write access */
    group->group   = vadcG;
80001702:	59 49 04 00 	st.w [%a4]4,%d9
    group->module  = *config->module;
80001706:	d4 52       	ld.a %a2,[%a5]
80001708:	54 22       	ld.w %d2,[%a2]
8000170a:	74 42       	st.w [%a4],%d2
    IfxVadc_GroupId groupIndex      = config->groupId;
8000170c:	19 5a 04 00 	ld.w %d10,[%a5]4
    group->groupId = groupIndex;
80001710:	59 4a 08 00 	st.w [%a4]8,%d10
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80001714:	40 d4       	mov.aa %a4,%a13
80001716:	6d ff 9e fd 	call 80001252 <IfxVadc_getAdcAnalogFrequency>
8000171a:	02 2c       	mov %d12,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
8000171c:	1b 0a 01 b0 	addi %d11,%d10,16
80001720:	02 b4       	mov %d4,%d11
80001722:	40 d4       	mov.aa %a4,%a13
80001724:	6d ff 4b fd 	call 800011ba <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80001728:	39 c4 38 10 	ld.bu %d4,[%a12]120
8000172c:	df 14 7c 00 	jeq %d4,1,80001824 <IfxVadc_Adc_initGroup+0x13c>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80001730:	82 07       	mov %d7,0
80001732:	82 06       	mov %d6,0
80001734:	82 05       	mov %d5,0
80001736:	82 04       	mov %d4,0
80001738:	60 94       	mov.a %a4,%d9
8000173a:	6d ff 50 fe 	call 800013da <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
8000173e:	39 c4 39 10 	ld.bu %d4,[%a12]121
80001742:	df 14 7b 00 	jeq %d4,1,80001838 <IfxVadc_Adc_initGroup+0x150>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80001746:	82 17       	mov %d7,1
80001748:	82 06       	mov %d6,0
8000174a:	82 05       	mov %d5,0
8000174c:	82 04       	mov %d4,0
8000174e:	60 94       	mov.a %a4,%d9
80001750:	6d ff 45 fe 	call 800013da <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80001754:	39 c4 3a 10 	ld.bu %d4,[%a12]122
80001758:	df 14 7a 00 	jeq %d4,1,8000184c <IfxVadc_Adc_initGroup+0x164>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
8000175c:	82 27       	mov %d7,2
8000175e:	82 06       	mov %d6,0
80001760:	82 05       	mov %d5,0
80001762:	82 04       	mov %d4,0
80001764:	60 94       	mov.a %a4,%d9
80001766:	6d ff 3a fe 	call 800013da <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
8000176a:	19 c2 08 00 	ld.w %d2,[%a12]8
8000176e:	5f a2 22 00 	jeq %d2,%d10,800017b2 <IfxVadc_Adc_initGroup+0xca>
    return IfxVadc_Adc_masterIndex[slave][master];
80001772:	8f 3a 00 30 	sh %d3,%d10,3
80001776:	91 00 00 28 	movh.a %a2,32768
8000177a:	d9 22 30 e0 	lea %a2,[%a2]944 <800003b0 <IfxVadc_Adc_masterIndex>>
8000177e:	80 24       	mov.d %d4,%a2
80001780:	42 34       	add %d4,%d3
80001782:	60 42       	mov.a %a2,%d4
80001784:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001788:	14 22       	ld.bu %d2,[%a2]
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
8000178a:	8f a8 00 30 	sh %d3,%d8,10
8000178e:	01 d3 00 26 	addsc.a %a2,%a13,%d3,0
80001792:	d9 23 40 30 	lea %a3,[%a2]1216
80001796:	19 23 40 30 	ld.w %d3,[%a2]1216
8000179a:	37 23 02 30 	insert %d3,%d3,%d2,0,2
8000179e:	74 33       	st.w [%a3],%d3
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
800017a0:	54 33       	ld.w %d3,[%a3]
800017a2:	8f 32 00 21 	and %d2,%d2,3
800017a6:	3b 80 00 40 	mov %d4,8
800017aa:	0f 24 00 20 	sh %d2,%d4,%d2
800017ae:	a6 32       	or %d2,%d3
800017b0:	74 32       	st.w [%a3],%d2
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
800017b2:	8f a8 00 20 	sh %d2,%d8,10
800017b6:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800017ba:	d9 23 40 20 	lea %a3,[%a2]1152
800017be:	19 23 40 20 	ld.w %d3,[%a2]1152
800017c2:	8f 33 c0 31 	andn %d3,%d3,3
800017c6:	74 33       	st.w [%a3],%d3

    /* Setup arbiter */
    /* turn off the group during initialization, see UM for sync mode */
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);
800017c8:	19 c2 34 10 	ld.w %d2,[%a12]116
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
800017cc:	d9 23 40 20 	lea %a3,[%a2]1152
800017d0:	19 23 40 20 	ld.w %d3,[%a2]1152
800017d4:	37 23 02 32 	insert %d3,%d3,%d2,4,2
800017d8:	74 33       	st.w [%a3],%d3

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
800017da:	39 c2 38 10 	ld.bu %d2,[%a12]120
800017de:	df 12 41 00 	jeq %d2,1,80001860 <IfxVadc_Adc_initGroup+0x178>
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
800017e2:	39 c2 39 10 	ld.bu %d2,[%a12]121
800017e6:	df 12 b0 00 	jeq %d2,1,80001946 <IfxVadc_Adc_initGroup+0x25e>
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
800017ea:	39 c2 3a 10 	ld.bu %d2,[%a12]122
800017ee:	df 12 1f 01 	jeq %d2,1,80001a2c <IfxVadc_Adc_initGroup+0x344>
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
800017f2:	19 c2 08 00 	ld.w %d2,[%a12]8
800017f6:	5f a2 76 01 	jeq %d2,%d10,80001ae2 <IfxVadc_Adc_initGroup+0x3fa>
800017fa:	82 04       	mov %d4,0
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
800017fc:	8f a8 00 20 	sh %d2,%d8,10
80001800:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001804:	d9 23 40 20 	lea %a3,[%a2]1152
80001808:	19 23 40 20 	ld.w %d3,[%a2]1152
8000180c:	37 43 02 30 	insert %d3,%d3,%d4,0,2
80001810:	74 33       	st.w [%a3],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80001812:	39 c5 30 10 	ld.bu %d5,[%a12]112
80001816:	02 a4       	mov %d4,%d10
80001818:	40 d4       	mov.aa %a4,%a13
8000181a:	6d ff f3 fc 	call 80001200 <IfxVadc_disablePostCalibration>

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
8000181e:	82 03       	mov %d3,0
80001820:	1d 00 77 01 	j 80001b0e <IfxVadc_Adc_initGroup+0x426>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80001824:	82 07       	mov %d7,0
80001826:	19 c6 10 10 	ld.w %d6,[%a12]80
8000182a:	19 c5 0c 10 	ld.w %d5,[%a12]76
8000182e:	60 94       	mov.a %a4,%d9
80001830:	6d ff d5 fd 	call 800013da <IfxVadc_setArbiterPriority>
80001834:	1d ff 85 ff 	j 8000173e <IfxVadc_Adc_initGroup+0x56>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80001838:	82 17       	mov %d7,1
8000183a:	19 c6 34 00 	ld.w %d6,[%a12]52
8000183e:	19 c5 30 00 	ld.w %d5,[%a12]48
80001842:	60 94       	mov.a %a4,%d9
80001844:	6d ff cb fd 	call 800013da <IfxVadc_setArbiterPriority>
80001848:	1d ff 86 ff 	j 80001754 <IfxVadc_Adc_initGroup+0x6c>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
8000184c:	82 27       	mov %d7,2
8000184e:	19 c6 2c 10 	ld.w %d6,[%a12]108
80001852:	19 c5 28 10 	ld.w %d5,[%a12]104
80001856:	60 94       	mov.a %a4,%d9
80001858:	6d ff c1 fd 	call 800013da <IfxVadc_setArbiterPriority>
8000185c:	1d ff 87 ff 	j 8000176a <IfxVadc_Adc_initGroup+0x82>
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80001860:	19 c2 08 10 	ld.w %d2,[%a12]72
80001864:	df 02 37 00 	jeq %d2,0,800018d2 <IfxVadc_Adc_initGroup+0x1ea>
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80001868:	8f a8 00 20 	sh %d2,%d8,10
8000186c:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001870:	d9 23 44 40 	lea %a3,[%a2]1284
80001874:	19 22 44 40 	ld.w %d2,[%a2]1284
80001878:	b7 12 01 21 	insert %d2,%d2,1,2,1
8000187c:	74 32       	st.w [%a3],%d2
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
8000187e:	19 c5 08 10 	ld.w %d5,[%a12]72
80001882:	19 c4 00 10 	ld.w %d4,[%a12]64
    qctrl0.U        = vadcG->QCTRL0.U;
80001886:	d9 23 40 40 	lea %a3,[%a2]1280
8000188a:	19 22 40 40 	ld.w %d2,[%a2]1280
    qctrl0.B.XTWC   = 1;
8000188e:	b7 12 81 27 	insert %d2,%d2,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80001892:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    qctrl0.B.XTSEL  = triggerSource;
80001896:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadcG->QCTRL0.U = qctrl0.U;
8000189a:	74 32       	st.w [%a3],%d2
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
8000189c:	19 c2 00 10 	ld.w %d2,[%a12]64
800018a0:	8b f2 20 22 	ne %d2,%d2,15
800018a4:	df 02 22 80 	jne %d2,0,800018e8 <IfxVadc_Adc_initGroup+0x200>
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
800018a8:	19 c3 3c 00 	ld.w %d3,[%a12]60
    qctrl0.U           = vadcG->QCTRL0.U;
800018ac:	8f a8 00 20 	sh %d2,%d8,10
800018b0:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800018b4:	54 32       	ld.w %d2,[%a3]
    qctrl0.B.GTWC      = 1;
800018b6:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
800018ba:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
800018be:	74 32       	st.w [%a3],%d2
    vadcG->QMR0.B.ENGT = gatingMode;
800018c0:	d9 23 44 40 	lea %a3,[%a2]1284
800018c4:	19 22 44 40 	ld.w %d2,[%a2]1284
800018c8:	b7 12 02 20 	insert %d2,%d2,1,0,2
800018cc:	74 32       	st.w [%a3],%d2
}
800018ce:	1d 00 0d 00 	j 800018e8 <IfxVadc_Adc_initGroup+0x200>
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
800018d2:	8f a8 00 20 	sh %d2,%d8,10
800018d6:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800018da:	d9 23 44 40 	lea %a3,[%a2]1284
800018de:	19 22 44 40 	ld.w %d2,[%a2]1284
800018e2:	8f 42 c0 21 	andn %d2,%d2,4
800018e6:	74 32       	st.w [%a3],%d2
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
800018e8:	19 c2 00 10 	ld.w %d2,[%a12]64
800018ec:	8b f2 00 22 	eq %d2,%d2,15
800018f0:	df 02 1a 80 	jne %d2,0,80001924 <IfxVadc_Adc_initGroup+0x23c>
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
800018f4:	19 c5 3c 00 	ld.w %d5,[%a12]60
800018f8:	19 c4 04 10 	ld.w %d4,[%a12]68
    qctrl0.U           = vadcG->QCTRL0.U;
800018fc:	8f a8 00 20 	sh %d2,%d8,10
80001900:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001904:	d9 23 40 40 	lea %a3,[%a2]1280
80001908:	19 22 40 40 	ld.w %d2,[%a2]1280
    qctrl0.B.GTWC      = 1;
8000190c:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80001910:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80001914:	74 32       	st.w [%a3],%d2
    vadcG->QMR0.B.ENGT = gatingMode;
80001916:	d9 23 44 40 	lea %a3,[%a2]1284
8000191a:	19 22 44 40 	ld.w %d2,[%a2]1284
8000191e:	37 42 02 20 	insert %d2,%d2,%d4,0,2
80001922:	74 32       	st.w [%a3],%d2
        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80001924:	39 c3 38 00 	ld.bu %d3,[%a12]56
80001928:	8b 03 20 32 	ne %d3,%d3,0
    vadcG->QMR0.B.FLUSH = flushQueue;
8000192c:	8f a8 00 20 	sh %d2,%d8,10
80001930:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001934:	d9 23 44 40 	lea %a3,[%a2]1284
80001938:	19 22 44 40 	ld.w %d2,[%a2]1284
8000193c:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80001940:	74 32       	st.w [%a3],%d2
}
80001942:	1d ff 50 ff 	j 800017e2 <IfxVadc_Adc_initGroup+0xfa>
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80001946:	19 c2 2c 00 	ld.w %d2,[%a12]44
8000194a:	df 02 37 00 	jeq %d2,0,800019b8 <IfxVadc_Adc_initGroup+0x2d0>
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
8000194e:	8f a8 00 20 	sh %d2,%d8,10
80001952:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001956:	d9 23 64 40 	lea %a3,[%a2]1316
8000195a:	19 22 64 40 	ld.w %d2,[%a2]1316
8000195e:	b7 12 01 21 	insert %d2,%d2,1,2,1
80001962:	74 32       	st.w [%a3],%d2
            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80001964:	19 c5 2c 00 	ld.w %d5,[%a12]44
80001968:	19 c4 24 00 	ld.w %d4,[%a12]36
    asctrl.U        = vadcG->ASCTRL.U;
8000196c:	d9 23 60 40 	lea %a3,[%a2]1312
80001970:	19 22 60 40 	ld.w %d2,[%a2]1312
    asctrl.B.XTWC   = 1;
80001974:	b7 12 81 27 	insert %d2,%d2,1,15,1
    asctrl.B.XTMODE = triggerMode;
80001978:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    asctrl.B.XTSEL  = triggerSource;
8000197c:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadcG->ASCTRL.U = asctrl.U;
80001980:	74 32       	st.w [%a3],%d2
            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80001982:	19 c2 24 00 	ld.w %d2,[%a12]36
80001986:	8b f2 20 22 	ne %d2,%d2,15
8000198a:	df 02 22 80 	jne %d2,0,800019ce <IfxVadc_Adc_initGroup+0x2e6>
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
8000198e:	19 c3 20 00 	ld.w %d3,[%a12]32
    asctrl.U           = vadcG->ASCTRL.U;
80001992:	8f a8 00 20 	sh %d2,%d8,10
80001996:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
8000199a:	54 32       	ld.w %d2,[%a3]
    asctrl.B.GTWC      = 1;
8000199c:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    asctrl.B.GTSEL     = gatingSource;
800019a0:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadcG->ASCTRL.U    = asctrl.U;
800019a4:	74 32       	st.w [%a3],%d2
    vadcG->ASMR.B.ENGT = gatingMode;
800019a6:	d9 23 64 40 	lea %a3,[%a2]1316
800019aa:	19 22 64 40 	ld.w %d2,[%a2]1316
800019ae:	b7 12 02 20 	insert %d2,%d2,1,0,2
800019b2:	74 32       	st.w [%a3],%d2
}
800019b4:	1d 00 0d 00 	j 800019ce <IfxVadc_Adc_initGroup+0x2e6>
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
800019b8:	8f a8 00 20 	sh %d2,%d8,10
800019bc:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800019c0:	d9 23 64 40 	lea %a3,[%a2]1316
800019c4:	19 22 64 40 	ld.w %d2,[%a2]1316
800019c8:	8f 42 c0 21 	andn %d2,%d2,4
800019cc:	74 32       	st.w [%a3],%d2
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
800019ce:	19 c2 24 00 	ld.w %d2,[%a12]36
800019d2:	8b f2 00 22 	eq %d2,%d2,15
800019d6:	df 02 1a 80 	jne %d2,0,80001a0a <IfxVadc_Adc_initGroup+0x322>
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
800019da:	19 c5 20 00 	ld.w %d5,[%a12]32
800019de:	19 c4 28 00 	ld.w %d4,[%a12]40
    asctrl.U           = vadcG->ASCTRL.U;
800019e2:	8f a8 00 20 	sh %d2,%d8,10
800019e6:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800019ea:	d9 23 60 40 	lea %a3,[%a2]1312
800019ee:	19 22 60 40 	ld.w %d2,[%a2]1312
    asctrl.B.GTWC      = 1;
800019f2:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    asctrl.B.GTSEL     = gatingSource;
800019f6:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadcG->ASCTRL.U    = asctrl.U;
800019fa:	74 32       	st.w [%a3],%d2
    vadcG->ASMR.B.ENGT = gatingMode;
800019fc:	d9 23 64 40 	lea %a3,[%a2]1316
80001a00:	19 22 64 40 	ld.w %d2,[%a2]1316
80001a04:	37 42 02 20 	insert %d2,%d2,%d4,0,2
80001a08:	74 32       	st.w [%a3],%d2
        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80001a0a:	39 c3 1c 00 	ld.bu %d3,[%a12]28
80001a0e:	8b 03 20 32 	ne %d3,%d3,0
    vadcG->ASMR.B.SCAN = autoscanEnable;
80001a12:	8f a8 00 20 	sh %d2,%d8,10
80001a16:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001a1a:	d9 23 64 40 	lea %a3,[%a2]1316
80001a1e:	19 22 64 40 	ld.w %d2,[%a2]1316
80001a22:	67 32 04 20 	ins.t %d2,%d2,4,%d3,0
80001a26:	74 32       	st.w [%a3],%d2
}
80001a28:	1d ff e1 fe 	j 800017ea <IfxVadc_Adc_initGroup+0x102>
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80001a2c:	19 c2 24 10 	ld.w %d2,[%a12]100
80001a30:	df 02 1e 00 	jeq %d2,0,80001a6c <IfxVadc_Adc_initGroup+0x384>
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80001a34:	d9 d2 04 80 	lea %a2,[%a13]516
80001a38:	19 d2 04 80 	ld.w %d2,[%a13]516
80001a3c:	b7 12 01 21 	insert %d2,%d2,1,2,1
80001a40:	74 22       	st.w [%a2],%d2
            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80001a42:	19 c5 24 10 	ld.w %d5,[%a12]100
80001a46:	19 c4 1c 10 	ld.w %d4,[%a12]92
    brsctrl.U        = vadc->BRSCTRL.U;
80001a4a:	d9 d2 00 80 	lea %a2,[%a13]512
80001a4e:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.XTWC   = 1;
80001a52:	b7 12 81 27 	insert %d2,%d2,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80001a56:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    brsctrl.B.XTSEL  = triggerSource;
80001a5a:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80001a5e:	74 22       	st.w [%a2],%d2
            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80001a60:	19 c2 1c 10 	ld.w %d2,[%a12]92
80001a64:	8b f2 20 22 	ne %d2,%d2,15
80001a68:	df 02 29 00 	jeq %d2,0,80001aba <IfxVadc_Adc_initGroup+0x3d2>
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80001a6c:	19 c2 1c 10 	ld.w %d2,[%a12]92
80001a70:	8b f2 00 22 	eq %d2,%d2,15
80001a74:	df 02 16 80 	jne %d2,0,80001aa0 <IfxVadc_Adc_initGroup+0x3b8>
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80001a78:	19 c5 18 10 	ld.w %d5,[%a12]88
80001a7c:	19 c4 20 10 	ld.w %d4,[%a12]96
    brsctrl.U          = vadc->BRSCTRL.U;
80001a80:	d9 d2 00 80 	lea %a2,[%a13]512
80001a84:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.GTWC     = 1;
80001a88:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80001a8c:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80001a90:	74 22       	st.w [%a2],%d2
    vadc->BRSMR.B.ENGT = gatingMode;
80001a92:	d9 d2 04 80 	lea %a2,[%a13]516
80001a96:	19 d2 04 80 	ld.w %d2,[%a13]516
80001a9a:	37 42 02 20 	insert %d2,%d2,%d4,0,2
80001a9e:	74 22       	st.w [%a2],%d2
        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80001aa0:	39 c3 14 10 	ld.bu %d3,[%a12]84
80001aa4:	8b 03 20 32 	ne %d3,%d3,0
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80001aa8:	d9 d2 04 80 	lea %a2,[%a13]516
80001aac:	19 d2 04 80 	ld.w %d2,[%a13]516
80001ab0:	67 32 04 20 	ins.t %d2,%d2,4,%d3,0
80001ab4:	74 22       	st.w [%a2],%d2
}
80001ab6:	1d ff 9e fe 	j 800017f2 <IfxVadc_Adc_initGroup+0x10a>
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80001aba:	19 c3 18 10 	ld.w %d3,[%a12]88
    brsctrl.U          = vadc->BRSCTRL.U;
80001abe:	d9 d2 00 80 	lea %a2,[%a13]512
80001ac2:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.GTWC     = 1;
80001ac6:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80001aca:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80001ace:	74 22       	st.w [%a2],%d2
    vadc->BRSMR.B.ENGT = gatingMode;
80001ad0:	d9 d2 04 80 	lea %a2,[%a13]516
80001ad4:	19 d2 04 80 	ld.w %d2,[%a13]516
80001ad8:	b7 12 02 20 	insert %d2,%d2,1,0,2
80001adc:	74 22       	st.w [%a2],%d2
}
80001ade:	1d ff c7 ff 	j 80001a6c <IfxVadc_Adc_initGroup+0x384>
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80001ae2:	82 34       	mov %d4,3
80001ae4:	1d ff 8c fe 	j 800017fc <IfxVadc_Adc_initGroup+0x114>
80001ae8:	3b f0 0f 50 	mov %d5,255
80001aec:	0b 54 90 51 	min.u %d5,%d4,%d5
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80001af0:	8f 88 00 20 	sh %d2,%d8,8
80001af4:	42 62       	add %d2,%d6
80001af6:	1b 82 12 40 	addi %d4,%d2,296
80001afa:	06 24       	sh %d4,2
80001afc:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80001b00:	54 24       	ld.w %d4,[%a2]
80001b02:	37 54 05 40 	insert %d4,%d4,%d5,0,5
80001b06:	74 24       	st.w [%a2],%d4
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80001b08:	c2 13       	add %d3,1
80001b0a:	8f f3 0f 31 	and %d3,%d3,255
80001b0e:	ff 23 29 80 	jge.u %d3,2,80001b60 <IfxVadc_Adc_initGroup+0x478>
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80001b12:	02 36       	mov %d6,%d3
80001b14:	1b 23 00 40 	addi %d4,%d3,2
80001b18:	06 34       	sh %d4,3
80001b1a:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
80001b1e:	54 25       	ld.w %d5,[%a2]
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80001b20:	8f 88 00 20 	sh %d2,%d8,8
80001b24:	42 32       	add %d2,%d3
80001b26:	1b 82 12 40 	addi %d4,%d2,296
80001b2a:	06 24       	sh %d4,2
80001b2c:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80001b30:	54 24       	ld.w %d4,[%a2]
80001b32:	37 54 03 44 	insert %d4,%d4,%d5,8,3
80001b36:	74 24       	st.w [%a2],%d4
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80001b38:	8f 33 00 40 	sh %d4,%d3,3
80001b3c:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
80001b40:	19 24 0c 00 	ld.w %d4,[%a2]12
    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80001b44:	4b c4 41 40 	mul.f %d4,%d4,%d12
80001b48:	4b 04 71 41 	ftouz %d4,%d4
80001b4c:	c2 e4       	add %d4,-2
    if (ticks > 31)
80001b4e:	8b 04 62 52 	lt.u %d5,%d4,32
80001b52:	df 05 cb ff 	jne %d5,0,80001ae8 <IfxVadc_Adc_initGroup+0x400>
        ticks = (ticks / 16) + 15;
80001b56:	06 c4       	sh %d4,-4
80001b58:	1b f4 00 40 	addi %d4,%d4,15
80001b5c:	1d ff c6 ff 	j 80001ae8 <IfxVadc_Adc_initGroup+0x400>
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80001b60:	02 b4       	mov %d4,%d11
80001b62:	40 d4       	mov.aa %a4,%a13
80001b64:	6d ff 08 fb 	call 80001174 <IfxVadc_disableAccess>

    return status;
}
80001b68:	82 02       	mov %d2,0
80001b6a:	00 90       	ret 

80001b6c <IfxVadc_Adc_initGroupConfig>:


void IfxVadc_Adc_initGroupConfig(IfxVadc_Adc_GroupConfig *config, IfxVadc_Adc *vadc)
{
80001b6c:	40 ae       	mov.aa %a14,%sp
80001b6e:	40 4c       	mov.aa %a12,%a4
80001b70:	80 58       	mov.d %d8,%a5
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80001b72:	3b c0 07 50 	mov %d5,124
80001b76:	82 04       	mov %d4,0
80001b78:	6d 00 4c 21 	call 80005e10 <memset>
80001b7c:	7b 60 58 23 	movh %d2,13702
80001b80:	1b d2 7b 23 	addi %d2,%d2,14269
80001b84:	59 c2 0c 00 	st.w [%a12]12,%d2
80001b88:	59 c2 14 00 	st.w [%a12]20,%d2
80001b8c:	82 12       	mov %d2,1
80001b8e:	59 c2 30 00 	st.w [%a12]48,%d2
80001b92:	e9 c2 38 00 	st.b [%a12]56,%d2
80001b96:	59 c2 0c 10 	st.w [%a12]76,%d2
80001b9a:	59 c2 28 10 	st.w [%a12]104,%d2
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80001b9e:	74 c8       	st.w [%a12],%d8
    config->master                 = config->groupId;
    config->disablePostCalibration = FALSE;
}
80001ba0:	00 90       	ret 

80001ba2 <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80001ba2:	40 ae       	mov.aa %a14,%sp
80001ba4:	40 5d       	mov.aa %a13,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80001ba6:	d4 5c       	ld.a %a12,[%a5]
    vadc->vadc = vadcSFR;
80001ba8:	f4 4c       	st.a [%a4],%a12
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001baa:	6d 00 df 06 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80001bae:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80001bb0:	02 24       	mov %d4,%d2
80001bb2:	6d 00 72 05 	call 80002696 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80001bb6:	82 02       	mov %d2,0
80001bb8:	74 c2       	st.w [%a12],%d2
    IfxScuWdt_setCpuEndinit(passwd);
80001bba:	02 84       	mov %d4,%d8
80001bbc:	6d 00 f3 06 	call 800029a2 <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80001bc0:	19 d4 24 00 	ld.w %d4,[%a13]36
80001bc4:	40 c4       	mov.aa %a4,%a12
80001bc6:	6d ff f5 fb 	call 800013b0 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80001bca:	19 d4 18 00 	ld.w %d4,[%a13]24
80001bce:	4b 04 71 41 	ftouz %d4,%d4
80001bd2:	40 c4       	mov.aa %a4,%a12
80001bd4:	6d ff b4 fb 	call 8000133c <IfxVadc_initializeFAdcI>
80001bd8:	df 02 04 80 	jne %d2,0,80001be0 <IfxVadc_Adc_initModule+0x3e>
    {
        return IfxVadc_Status_notInitialised;
80001bdc:	82 12       	mov %d2,1
        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
}
80001bde:	00 90       	ret 
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80001be0:	19 d4 14 00 	ld.w %d4,[%a13]20
80001be4:	4b 04 71 41 	ftouz %d4,%d4
80001be8:	40 c4       	mov.aa %a4,%a12
80001bea:	6d ff 92 fb 	call 8000130e <IfxVadc_initializeFAdcD>
    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80001bee:	40 c4       	mov.aa %a4,%a12
80001bf0:	6d ff 31 fb 	call 80001252 <IfxVadc_getAdcAnalogFrequency>
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80001bf4:	82 03       	mov %d3,0
80001bf6:	1d 00 12 00 	j 80001c1a <IfxVadc_Adc_initModule+0x78>
80001bfa:	3b f0 0f 50 	mov %d5,255
80001bfe:	0b 54 90 51 	min.u %d5,%d4,%d5
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80001c02:	1b 86 02 40 	addi %d4,%d6,40
80001c06:	06 24       	sh %d4,2
80001c08:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
80001c0c:	54 24       	ld.w %d4,[%a2]
80001c0e:	37 54 05 40 	insert %d4,%d4,%d5,0,5
80001c12:	74 24       	st.w [%a2],%d4
80001c14:	c2 13       	add %d3,1
80001c16:	8f f3 0f 31 	and %d3,%d3,255
80001c1a:	ff 23 26 80 	jge.u %d3,2,80001c66 <IfxVadc_Adc_initModule+0xc4>
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80001c1e:	02 36       	mov %d6,%d3
80001c20:	1b 13 00 40 	addi %d4,%d3,1
80001c24:	06 34       	sh %d4,3
80001c26:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80001c2a:	54 25       	ld.w %d5,[%a2]
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80001c2c:	1b 83 02 40 	addi %d4,%d3,40
80001c30:	06 24       	sh %d4,2
80001c32:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
80001c36:	54 24       	ld.w %d4,[%a2]
80001c38:	37 54 03 44 	insert %d4,%d4,%d5,8,3
80001c3c:	74 24       	st.w [%a2],%d4
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80001c3e:	8f 33 00 40 	sh %d4,%d3,3
80001c42:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80001c46:	19 24 04 00 	ld.w %d4,[%a2]4
    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80001c4a:	4b 24 41 40 	mul.f %d4,%d4,%d2
80001c4e:	4b 04 71 41 	ftouz %d4,%d4
80001c52:	c2 e4       	add %d4,-2
    if (ticks > 31)
80001c54:	8b 04 62 52 	lt.u %d5,%d4,32
80001c58:	df 05 d1 ff 	jne %d5,0,80001bfa <IfxVadc_Adc_initModule+0x58>
        ticks = (ticks / 16) + 15;
80001c5c:	06 c4       	sh %d4,-4
80001c5e:	1b f4 00 40 	addi %d4,%d4,15
80001c62:	1d ff cc ff 	j 80001bfa <IfxVadc_Adc_initModule+0x58>
    if (config->startupCalibration == TRUE)
80001c66:	39 d2 20 00 	ld.bu %d2,[%a13]32
80001c6a:	df 12 23 00 	jeq %d2,1,80001cb0 <IfxVadc_Adc_initModule+0x10e>
    return status;
80001c6e:	82 02       	mov %d2,0
80001c70:	00 90       	ret 
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80001c72:	1b 08 01 90 	addi %d9,%d8,16
80001c76:	02 94       	mov %d4,%d9
80001c78:	40 c4       	mov.aa %a4,%a12
80001c7a:	6d ff a0 fa 	call 800011ba <IfxVadc_enableAccess>
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80001c7e:	8f a8 00 20 	sh %d2,%d8,10
80001c82:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80001c86:	d9 23 40 20 	lea %a3,[%a2]1152
80001c8a:	19 22 40 20 	ld.w %d2,[%a2]1152
80001c8e:	b7 32 02 20 	insert %d2,%d2,3,0,2
80001c92:	74 32       	st.w [%a3],%d2
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80001c94:	02 94       	mov %d4,%d9
80001c96:	40 c4       	mov.aa %a4,%a12
80001c98:	6d ff 6e fa 	call 80001174 <IfxVadc_disableAccess>
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80001c9c:	c2 18       	add %d8,1
80001c9e:	8f f8 0f 81 	and %d8,%d8,255
80001ca2:	bf 88 e8 ff 	jlt.u %d8,8,80001c72 <IfxVadc_Adc_initModule+0xd0>
        IfxVadc_startupCalibration(vadcSFR);
80001ca6:	40 c4       	mov.aa %a4,%a12
80001ca8:	6d ff da fb 	call 8000145c <IfxVadc_startupCalibration>
    return status;
80001cac:	82 02       	mov %d2,0
80001cae:	00 90       	ret 
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80001cb0:	82 08       	mov %d8,0
80001cb2:	1d ff f8 ff 	j 80001ca2 <IfxVadc_Adc_initModule+0x100>

80001cb6 <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80001cb6:	40 ae       	mov.aa %a14,%sp
80001cb8:	40 4c       	mov.aa %a12,%a4
80001cba:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80001cbc:	f4 c5       	st.a [%a12],%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80001cbe:	7b 90 b9 24 	movh %d2,19353
80001cc2:	1b 02 68 29 	addi %d2,%d2,-27008
80001cc6:	59 c2 18 00 	st.w [%a12]24,%d2

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80001cca:	6d ff d2 fa 	call 8000126e <IfxVadc_getAdcDigitalFrequency>
80001cce:	59 c2 14 00 	st.w [%a12]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80001cd2:	6d 00 f9 02 	call 800022c4 <IfxScuCcu_getSpbFrequency>
80001cd6:	59 c2 1c 00 	st.w [%a12]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80001cda:	82 02       	mov %d2,0
80001cdc:	59 c2 08 00 	st.w [%a12]8,%d2
    config->globalInputClass[0].sampleTime = 1.0e-6;
80001ce0:	7b 60 58 33 	movh %d3,13702
80001ce4:	1b d3 7b 33 	addi %d3,%d3,14269
80001ce8:	59 c3 04 00 	st.w [%a12]4,%d3
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80001cec:	59 c2 10 00 	st.w [%a12]16,%d2
    config->globalInputClass[1].sampleTime = 1.0e-6;
80001cf0:	59 c3 0c 00 	st.w [%a12]12,%d3
    config->startupCalibration             = FALSE;
80001cf4:	e9 c2 20 00 	st.b [%a12]32,%d2
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
80001cf8:	59 c2 24 00 	st.w [%a12]36,%d2
}
80001cfc:	00 90       	ret 

80001cfe <IfxStm_clearCompareFlag>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator)
{
80001cfe:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
80001d00:	df 04 0a 80 	jne %d4,0,80001d14 <IfxStm_clearCompareFlag+0x16>
    {
        stm->ISCR.B.CMP0IRR = 1U;
80001d04:	d9 42 00 10 	lea %a2,[%a4]64
80001d08:	19 42 00 10 	ld.w %d2,[%a4]64
80001d0c:	b7 12 01 20 	insert %d2,%d2,1,0,1
80001d10:	74 22       	st.w [%a2],%d2
80001d12:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
80001d14:	df 14 03 00 	jeq %d4,1,80001d1a <IfxStm_clearCompareFlag+0x1c>
    {
        stm->ISCR.B.CMP1IRR = 1U;
    }
}
80001d18:	00 90       	ret 
        stm->ISCR.B.CMP1IRR = 1U;
80001d1a:	d9 42 00 10 	lea %a2,[%a4]64
80001d1e:	19 42 00 10 	ld.w %d2,[%a4]64
80001d22:	b7 12 01 21 	insert %d2,%d2,1,2,1
80001d26:	74 22       	st.w [%a2],%d2
}
80001d28:	1d ff f8 ff 	j 80001d18 <IfxStm_clearCompareFlag+0x1a>

80001d2c <IfxStm_enableComparatorInterrupt>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator)
{
80001d2c:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
80001d2e:	df 04 0a 80 	jne %d4,0,80001d42 <IfxStm_enableComparatorInterrupt+0x16>
    {
        stm->ICR.B.CMP0EN = 1U;
80001d32:	d9 42 3c 00 	lea %a2,[%a4]60
80001d36:	19 42 3c 00 	ld.w %d2,[%a4]60
80001d3a:	b7 12 01 20 	insert %d2,%d2,1,0,1
80001d3e:	74 22       	st.w [%a2],%d2
80001d40:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
80001d42:	df 14 03 00 	jeq %d4,1,80001d48 <IfxStm_enableComparatorInterrupt+0x1c>
    {
        stm->ICR.B.CMP1EN = 1U;
    }
}
80001d46:	00 90       	ret 
        stm->ICR.B.CMP1EN = 1U;
80001d48:	d9 42 3c 00 	lea %a2,[%a4]60
80001d4c:	19 42 3c 00 	ld.w %d2,[%a4]60
80001d50:	b7 12 01 22 	insert %d2,%d2,1,4,1
80001d54:	74 22       	st.w [%a2],%d2
}
80001d56:	1d ff f8 ff 	j 80001d46 <IfxStm_enableComparatorInterrupt+0x1a>

80001d5a <IfxStm_enableOcdsSuspend>:


void IfxStm_enableOcdsSuspend(Ifx_STM *stm)
{
80001d5a:	40 ae       	mov.aa %a14,%sp
    Ifx_STM_OCS ocs = stm->OCS;
80001d5c:	d9 42 28 30 	lea %a2,[%a4]232
80001d60:	19 42 28 30 	ld.w %d2,[%a4]232

    /* Only if OCDS is enabled write into the OCS register */
    if (MODULE_CBS.OSTATE.B.OEN == 1U)
80001d64:	85 f3 40 20 	ld.w %d3,f0000480 <_SMALL_DATA4_+0x5fff8480>
80001d68:	6f 03 03 80 	jnz.t %d3,0,80001d6e <IfxStm_enableOcdsSuspend+0x14>
        ocs.B.SUS_P      = 1;
        ocs.B.SUS        = 2;
        stm->OCS         = ocs;
        stm->OCS.B.SUS_P = 0;
    }
}
80001d6c:	00 90       	ret 
        ocs.B.SUS_P      = 1;
80001d6e:	b7 12 01 2e 	insert %d2,%d2,1,28,1
        ocs.B.SUS        = 2;
80001d72:	b7 22 04 2c 	insert %d2,%d2,2,24,4
        stm->OCS         = ocs;
80001d76:	74 22       	st.w [%a2],%d2
        stm->OCS.B.SUS_P = 0;
80001d78:	54 22       	ld.w %d2,[%a2]
80001d7a:	b7 02 01 2e 	insert %d2,%d2,0,28,1
80001d7e:	74 22       	st.w [%a2],%d2
}
80001d80:	1d ff f6 ff 	j 80001d6c <IfxStm_enableOcdsSuspend+0x12>

80001d84 <IfxStm_getIndex>:
    return module;
}


IfxStm_Index IfxStm_getIndex(Ifx_STM *stm)
{
80001d84:	40 ae       	mov.aa %a14,%sp
    uint32       index;
    IfxStm_Index result;

    result = IfxStm_Index_none;

    for (index = 0; index < IFXSTM_NUM_MODULES; index++)
80001d86:	82 02       	mov %d2,0
80001d88:	1d 00 03 00 	j 80001d8e <IfxStm_getIndex+0xa>
80001d8c:	c2 12       	add %d2,1
80001d8e:	ff 32 18 80 	jge.u %d2,3,80001dbe <IfxStm_getIndex+0x3a>
    {
        if (IfxStm_cfg_indexMap[index].module == stm)
80001d92:	8f 32 00 30 	sh %d3,%d2,3
80001d96:	91 00 00 28 	movh.a %a2,32768
80001d9a:	d9 22 38 b0 	lea %a2,[%a2]760 <800002f8 <IfxStm_cfg_indexMap>>
80001d9e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80001da2:	54 23       	ld.w %d3,[%a2]
80001da4:	80 44       	mov.d %d4,%a4
80001da6:	5f 43 f3 ff 	jne %d3,%d4,80001d8c <IfxStm_getIndex+0x8>
        {
            result = (IfxStm_Index)IfxStm_cfg_indexMap[index].index;
80001daa:	06 32       	sh %d2,3
80001dac:	91 00 00 28 	movh.a %a2,32768
80001db0:	d9 22 38 b0 	lea %a2,[%a2]760 <800002f8 <IfxStm_cfg_indexMap>>
80001db4:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001db8:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80001dbc:	00 90       	ret 
    result = IfxStm_Index_none;
80001dbe:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
80001dc0:	00 90       	ret 

80001dc2 <IfxStm_initCompare>:
    return comparator == IfxStm_Comparator_0 ? &MODULE_SRC.STM.STM[index].SR0 : &MODULE_SRC.STM.STM[index].SR1;
}


boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config)
{
80001dc2:	40 ae       	mov.aa %a14,%sp
80001dc4:	40 4d       	mov.aa %a13,%a4
80001dc6:	40 5c       	mov.aa %a12,%a5
    sint32        index;
    boolean       result;
    Ifx_STM_CMCON comcon = stm->CMCON;
80001dc8:	19 42 38 00 	ld.w %d2,[%a4]56
    Ifx_STM_ICR   icr    = stm->ICR;
80001dcc:	19 43 3c 00 	ld.w %d3,[%a4]60

    if (config->comparator == 0)
80001dd0:	54 54       	ld.w %d4,[%a5]
80001dd2:	df 04 82 80 	jne %d4,0,80001ed6 <IfxStm_initCompare+0x114>
    {
        comcon.B.MSIZE0  = config->compareSize;
80001dd6:	19 54 0c 00 	ld.w %d4,[%a5]12
80001dda:	37 42 05 20 	insert %d2,%d2,%d4,0,5
        comcon.B.MSTART0 = config->compareOffset;
80001dde:	19 54 08 00 	ld.w %d4,[%a5]8
80001de2:	37 42 05 24 	insert %d2,%d2,%d4,8,5
        icr.B.CMP0OS     = config->comparatorInterrupt;
80001de6:	19 54 04 00 	ld.w %d4,[%a5]4
80001dea:	67 43 02 30 	ins.t %d3,%d3,2,%d4,0
        result           = TRUE;
80001dee:	82 18       	mov %d8,1
    {
        /*Invalid value */
        result = FALSE;
    }

    stm->ICR.U   = icr.U;
80001df0:	59 d3 3c 00 	st.w [%a13]60,%d3
    stm->CMCON.U = comcon.U;
80001df4:	59 d2 38 00 	st.w [%a13]56,%d2

    /* configure interrupt */
    index = IfxStm_getIndex(stm);
80001df8:	40 d4       	mov.aa %a4,%a13
80001dfa:	6d ff c5 ff 	call 80001d84 <IfxStm_getIndex>

    if (config->triggerPriority > 0)
80001dfe:	b9 c3 14 00 	ld.hu %d3,[%a12]20
80001e02:	df 03 20 00 	jeq %d3,0,80001e42 <IfxStm_initCompare+0x80>
    {
        volatile Ifx_SRC_SRCR *srcr;

        if (config->comparatorInterrupt == IfxStm_ComparatorInterrupt_ir0)
80001e06:	19 c4 04 00 	ld.w %d4,[%a12]4
80001e0a:	df 04 7a 80 	jne %d4,0,80001efe <IfxStm_initCompare+0x13c>
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR0);
80001e0e:	06 32       	sh %d2,3
80001e10:	7b 40 00 4f 	movh %d4,61444
80001e14:	1b 04 49 48 	addi %d4,%d4,-31600
80001e18:	60 42       	mov.a %a2,%d4
80001e1a:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
        else
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
        }

        IfxSrc_init(srcr, config->typeOfService, config->triggerPriority);
80001e1e:	19 c4 18 00 	ld.w %d4,[%a12]24
    src->B.SRPN = priority;
80001e22:	54 22       	ld.w %d2,[%a2]
80001e24:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80001e28:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80001e2a:	54 22       	ld.w %d2,[%a2]
80001e2c:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80001e30:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80001e32:	54 22       	ld.w %d2,[%a2]
80001e34:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80001e38:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80001e3a:	54 22       	ld.w %d2,[%a2]
80001e3c:	b7 12 01 25 	insert %d2,%d2,1,10,1
80001e40:	74 22       	st.w [%a2],%d2
        IfxSrc_enable(srcr);
    }

    /*Configure the comparator ticks to current value to avoid any wrong triggering*/
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset);
80001e42:	39 c5 08 00 	ld.bu %d5,[%a12]8

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80001e46:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
80001e4a:	19 d2 2c 00 	ld.w %d2,[%a13]44
80001e4e:	8f 06 40 41 	or %d4,%d6,0
80001e52:	02 23       	mov %d3,%d2
{
    uint64 now;

    now = IfxStm_get(stm);

    return (uint32)(now >> offset);
80001e54:	8b 05 82 22 	ge %d2,%d5,32
80001e58:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
80001e5c:	ab 03 a0 32 	seln %d3,%d2,%d3,0
80001e60:	8f f5 01 21 	and %d2,%d5,31
80001e64:	8b 02 02 51 	rsub %d5,%d2,32
80001e68:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
80001e6c:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
80001e70:	54 c2       	ld.w %d2,[%a12]
80001e72:	1b c2 00 20 	addi %d2,%d2,12
80001e76:	06 22       	sh %d2,2
80001e78:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001e7c:	74 23       	st.w [%a2],%d3

    /* clear the interrupt flag of the selected comparator before enabling the interrupt */
    /* this is to avaoid the unneccesary interrupt for the compare match of reset values of the registers */
    IfxStm_clearCompareFlag(stm, config->comparator);
80001e7e:	54 c4       	ld.w %d4,[%a12]
80001e80:	40 d4       	mov.aa %a4,%a13
80001e82:	6d ff 3e ff 	call 80001cfe <IfxStm_clearCompareFlag>
    /* enable the interrupt for the selected comparator */
    IfxStm_enableComparatorInterrupt(stm, config->comparator);
80001e86:	54 c4       	ld.w %d4,[%a12]
80001e88:	40 d4       	mov.aa %a4,%a13
80001e8a:	6d ff 51 ff 	call 80001d2c <IfxStm_enableComparatorInterrupt>

    /*Configure the comparator ticks */
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset) + config->ticks;
80001e8e:	39 c5 08 00 	ld.bu %d5,[%a12]8
    result  = stm->TIM0.U;
80001e92:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
80001e96:	19 d2 2c 00 	ld.w %d2,[%a13]44
80001e9a:	8f 06 40 41 	or %d4,%d6,0
80001e9e:	02 23       	mov %d3,%d2
    return (uint32)(now >> offset);
80001ea0:	8b 05 82 22 	ge %d2,%d5,32
80001ea4:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
80001ea8:	ab 03 a0 32 	seln %d3,%d2,%d3,0
80001eac:	8f f5 01 21 	and %d2,%d5,31
80001eb0:	8b 02 02 51 	rsub %d5,%d2,32
80001eb4:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
80001eb8:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
80001ebc:	02 34       	mov %d4,%d3
80001ebe:	19 c3 10 00 	ld.w %d3,[%a12]16
80001ec2:	54 c2       	ld.w %d2,[%a12]
80001ec4:	42 43       	add %d3,%d4
80001ec6:	1b c2 00 20 	addi %d2,%d2,12
80001eca:	06 22       	sh %d2,2
80001ecc:	01 d2 00 d6 	addsc.a %a13,%a13,%d2,0
80001ed0:	74 d3       	st.w [%a13],%d3

    return result;
}
80001ed2:	02 82       	mov %d2,%d8
80001ed4:	00 90       	ret 
    else if (config->comparator == 1)
80001ed6:	df 14 05 00 	jeq %d4,1,80001ee0 <IfxStm_initCompare+0x11e>
        result = FALSE;
80001eda:	82 08       	mov %d8,0
80001edc:	1d ff 8a ff 	j 80001df0 <IfxStm_initCompare+0x2e>
        comcon.B.MSIZE1  = config->compareSize;
80001ee0:	19 54 0c 00 	ld.w %d4,[%a5]12
80001ee4:	37 42 05 28 	insert %d2,%d2,%d4,16,5
        comcon.B.MSTART1 = config->compareOffset;
80001ee8:	19 54 08 00 	ld.w %d4,[%a5]8
80001eec:	37 42 05 2c 	insert %d2,%d2,%d4,24,5
        icr.B.CMP1OS     = config->comparatorInterrupt;
80001ef0:	19 54 04 00 	ld.w %d4,[%a5]4
80001ef4:	67 43 06 30 	ins.t %d3,%d3,6,%d4,0
        result           = TRUE;
80001ef8:	82 18       	mov %d8,1
80001efa:	1d ff 7b ff 	j 80001df0 <IfxStm_initCompare+0x2e>
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
80001efe:	06 32       	sh %d2,3
80001f00:	c2 42       	add %d2,4
80001f02:	7b 40 00 4f 	movh %d4,61444
80001f06:	1b 04 49 48 	addi %d4,%d4,-31600
80001f0a:	60 42       	mov.a %a2,%d4
80001f0c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001f10:	1d ff 87 ff 	j 80001e1e <IfxStm_initCompare+0x5c>

80001f14 <IfxStm_initCompareConfig>:


void IfxStm_initCompareConfig(IfxStm_CompareConfig *config)
{
80001f14:	40 ae       	mov.aa %a14,%sp
    config->comparator          = IfxStm_Comparator_0;
80001f16:	82 02       	mov %d2,0
80001f18:	74 42       	st.w [%a4],%d2
    config->compareOffset       = IfxStm_ComparatorOffset_0;
80001f1a:	59 42 08 00 	st.w [%a4]8,%d2
    config->compareSize         = IfxStm_ComparatorSize_32Bits;
80001f1e:	3b f0 01 30 	mov %d3,31
80001f22:	59 43 0c 00 	st.w [%a4]12,%d3
    config->comparatorInterrupt = IfxStm_ComparatorInterrupt_ir0;     /*User must select the interrupt output */
80001f26:	59 42 04 00 	st.w [%a4]4,%d2
    config->ticks               = 0xFFFFFFFF;
80001f2a:	82 f3       	mov %d3,-1
80001f2c:	59 43 10 00 	st.w [%a4]16,%d3
    config->triggerPriority     = 0;
80001f30:	f9 42 14 00 	st.h [%a4]20,%d2
    config->typeOfService       = IfxSrc_Tos_cpu0;
80001f34:	59 42 18 00 	st.w [%a4]24,%d2
}
80001f38:	00 90       	ret 

80001f3a <IfxScuCcu_isOscillatorStable>:
    *cfg = IfxScuCcu_defaultErayPllConfig;
}


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
80001f3a:	40 ae       	mov.aa %a14,%sp
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
80001f3c:	6d 00 16 05 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80001f40:	02 28       	mov %d8,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80001f42:	91 30 00 2f 	movh.a %a2,61443
80001f46:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
80001f4a:	54 23       	ld.w %d3,[%a2]
80001f4c:	8f 03 c6 31 	andn %d3,%d3,96
80001f50:	74 23       	st.w [%a2],%d3

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
80001f52:	91 00 00 36 	movh.a %a3,24576
80001f56:	19 33 78 50 	ld.w %d3,[%a3]1400 <60000578 <IfxScuCcu_xtalFrequency>>
80001f5a:	7b 00 b6 26 	movh %d2,27488
80001f5e:	1b b2 a6 2c 	addi %d2,%d2,-13717
80001f62:	73 23 68 20 	mul.u %e2,%d3,%d2
80001f66:	8f c3 1e 20 	sh %d2,%d3,-20
80001f6a:	c2 f2       	add %d2,-1
80001f6c:	54 23       	ld.w %d3,[%a2]
80001f6e:	37 23 05 38 	insert %d3,%d3,%d2,16,5
80001f72:	74 23       	st.w [%a2],%d3

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80001f74:	54 23       	ld.w %d3,[%a2]
80001f76:	b7 13 01 31 	insert %d3,%d3,1,2,1
80001f7a:	74 23       	st.w [%a2],%d3
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
80001f7c:	3b 00 28 30 	mov %d3,640

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80001f80:	1d 00 05 00 	j 80001f8a <IfxScuCcu_isOscillatorStable+0x50>
    {
        TimeoutCtr--;
80001f84:	c2 f3       	add %d3,-1

        if (TimeoutCtr == 0)
80001f86:	df 03 25 00 	jeq %d3,0,80001fd0 <IfxScuCcu_isOscillatorStable+0x96>
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80001f8a:	91 30 00 2f 	movh.a %a2,61443
80001f8e:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
80001f92:	54 25       	ld.w %d5,[%a2]
80001f94:	6f 15 f8 7f 	jz.t %d5,1,80001f84 <IfxScuCcu_isOscillatorStable+0x4a>
80001f98:	54 25       	ld.w %d5,[%a2]
80001f9a:	6f 85 f5 7f 	jz.t %d5,8,80001f84 <IfxScuCcu_isOscillatorStable+0x4a>
    boolean status     = 0;
80001f9e:	82 09       	mov %d9,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80001fa0:	02 84       	mov %d4,%d8
80001fa2:	6d 00 7a 03 	call 80002696 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80001fa6:	91 30 00 2f 	movh.a %a2,61443
80001faa:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80001fae:	54 23       	ld.w %d3,[%a2]
80001fb0:	b7 13 81 31 	insert %d3,%d3,1,3,1
80001fb4:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
80001fb6:	91 30 00 2f 	movh.a %a2,61443
80001fba:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001fbe:	54 23       	ld.w %d3,[%a2]
80001fc0:	b7 13 81 31 	insert %d3,%d3,1,3,1
80001fc4:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinitPw);
80001fc6:	02 84       	mov %d4,%d8
80001fc8:	6d 00 ed 04 	call 800029a2 <IfxScuWdt_setCpuEndinit>
    }

    return status;
}
80001fcc:	02 92       	mov %d2,%d9
80001fce:	00 90       	ret 
            status = 1;
80001fd0:	82 19       	mov %d9,1
80001fd2:	1d ff e7 ff 	j 80001fa0 <IfxScuCcu_isOscillatorStable+0x66>

80001fd6 <IfxScuCcu_getOsc0Frequency>:
{
80001fd6:	40 ae       	mov.aa %a14,%sp
    return (float32)IfxScuCcu_xtalFrequency;
80001fd8:	91 00 00 26 	movh.a %a2,24576
80001fdc:	19 22 78 50 	ld.w %d2,[%a2]1400 <60000578 <IfxScuCcu_xtalFrequency>>
}
80001fe0:	4b 02 61 21 	utof %d2,%d2
80001fe4:	00 90       	ret 

80001fe6 <IfxScuCcu_getOscFrequency>:
{
80001fe6:	40 ae       	mov.aa %a14,%sp
    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80001fe8:	91 30 00 2f 	movh.a %a2,61443
80001fec:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001ff0:	54 22       	ld.w %d2,[%a2]
80001ff2:	37 02 62 2e 	extr.u %d2,%d2,28,2
80001ff6:	df 02 10 00 	jeq %d2,0,80002016 <IfxScuCcu_getOscFrequency+0x30>
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80001ffa:	54 22       	ld.w %d2,[%a2]
80001ffc:	37 02 62 2e 	extr.u %d2,%d2,28,2
80002000:	df 12 04 00 	jeq %d2,1,80002008 <IfxScuCcu_getOscFrequency+0x22>
        freq = 0.0f;
80002004:	82 02       	mov %d2,0
}
80002006:	00 90       	ret 
        freq = (float32)IfxScuCcu_xtalFrequency;
80002008:	91 00 00 26 	movh.a %a2,24576
8000200c:	19 22 78 50 	ld.w %d2,[%a2]1400 <60000578 <IfxScuCcu_xtalFrequency>>
80002010:	4b 02 61 21 	utof %d2,%d2
80002014:	00 90       	ret 
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80002016:	7b f0 cb 24 	movh %d2,19647
8000201a:	1b 02 c2 2b 	addi %d2,%d2,-17376
8000201e:	00 90       	ret 

80002020 <IfxScuCcu_getPllErayFrequency>:
{
80002020:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
80002022:	6d ff e2 ff 	call 80001fe6 <IfxScuCcu_getOscFrequency>
80002026:	02 24       	mov %d4,%d2
    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80002028:	91 30 00 2f 	movh.a %a2,61443
8000202c:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80002030:	19 23 24 00 	ld.w %d3,[%a2]36 <f0030024 <_SMALL_DATA4_+0x60028024>>
80002034:	6f 03 21 80 	jnz.t %d3,0,80002076 <IfxScuCcu_getPllErayFrequency+0x56>
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80002038:	91 30 00 2f 	movh.a %a2,61443
8000203c:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80002040:	19 22 24 00 	ld.w %d2,[%a2]36 <f0030024 <_SMALL_DATA4_+0x60028024>>
80002044:	6f 32 27 80 	jnz.t %d2,3,80002092 <IfxScuCcu_getPllErayFrequency+0x72>
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80002048:	91 30 00 2f 	movh.a %a2,61443
8000204c:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80002050:	19 22 28 00 	ld.w %d2,[%a2]40 <f0030028 <_SMALL_DATA4_+0x60028028>>
80002054:	37 02 e5 24 	extr.u %d2,%d2,9,5
80002058:	c2 12       	add %d2,1
8000205a:	4b 02 41 21 	itof %d2,%d2
8000205e:	4b 42 41 40 	mul.f %d4,%d2,%d4
80002062:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <_SMALL_DATA4_+0x6002802c>>
80002066:	8f f2 07 21 	and %d2,%d2,127
8000206a:	c2 12       	add %d2,1
8000206c:	4b 02 41 21 	itof %d2,%d2
80002070:	4b 24 51 20 	div.f %d2,%d4,%d2
}
80002074:	00 90       	ret 
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80002076:	91 30 00 2f 	movh.a %a2,61443
8000207a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
8000207e:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <_SMALL_DATA4_+0x6002802c>>
80002082:	37 02 67 28 	extr.u %d2,%d2,16,7
80002086:	c2 12       	add %d2,1
80002088:	4b 02 41 21 	itof %d2,%d2
8000208c:	4b 24 51 20 	div.f %d2,%d4,%d2
80002090:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80002092:	91 30 00 2f 	movh.a %a2,61443
80002096:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
8000209a:	19 24 2c 00 	ld.w %d4,[%a2]44 <f003002c <_SMALL_DATA4_+0x6002802c>>
8000209e:	8f f4 07 41 	and %d4,%d4,127
800020a2:	c2 14       	add %d4,1
800020a4:	6d 00 db 21 	call 8000645a <__floatsidf>
800020a8:	0b 23 10 68 	mov %e6,%d3,%d2
800020ac:	82 04       	mov %d4,0
800020ae:	7b 80 19 54 	movh %d5,16792
800020b2:	1b 45 78 5d 	addi %d5,%d5,-10364
800020b6:	6d 00 2a 21 	call 8000630a <__divdf3>
800020ba:	0b 23 10 48 	mov %e4,%d3,%d2
800020be:	6d 00 19 22 	call 800064f0 <__truncdfsf2>
800020c2:	00 90       	ret 

800020c4 <IfxScuCcu_getPllFrequency>:
{
800020c4:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
800020c6:	6d ff 90 ff 	call 80001fe6 <IfxScuCcu_getOscFrequency>
800020ca:	02 24       	mov %d4,%d2
    if (scu->PLLSTAT.B.VCOBYST == 1)
800020cc:	91 30 00 2f 	movh.a %a2,61443
800020d0:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800020d4:	19 23 14 00 	ld.w %d3,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
800020d8:	6f 03 27 80 	jnz.t %d3,0,80002126 <IfxScuCcu_getPllFrequency+0x62>
    else if (scu->PLLSTAT.B.FINDIS == 1)
800020dc:	91 30 00 2f 	movh.a %a2,61443
800020e0:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800020e4:	19 22 14 00 	ld.w %d2,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
800020e8:	6f 32 2d 80 	jnz.t %d2,3,80002142 <IfxScuCcu_getPllFrequency+0x7e>
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
800020ec:	91 30 00 2f 	movh.a %a2,61443
800020f0:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800020f4:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
800020f8:	37 02 e7 24 	extr.u %d2,%d2,9,7
800020fc:	c2 12       	add %d2,1
800020fe:	4b 02 41 21 	itof %d2,%d2
80002102:	4b 42 41 30 	mul.f %d3,%d2,%d4
80002106:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
8000210a:	8f f4 07 41 	and %d4,%d4,127
8000210e:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
80002112:	37 02 64 2c 	extr.u %d2,%d2,24,4
80002116:	c2 12       	add %d2,1
80002118:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
8000211c:	4b 02 41 21 	itof %d2,%d2
80002120:	4b 23 51 20 	div.f %d2,%d3,%d2
}
80002124:	00 90       	ret 
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80002126:	91 30 00 2f 	movh.a %a2,61443
8000212a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
8000212e:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80002132:	37 02 67 28 	extr.u %d2,%d2,16,7
80002136:	c2 12       	add %d2,1
80002138:	4b 02 41 21 	itof %d2,%d2
8000213c:	4b 24 51 20 	div.f %d2,%d4,%d2
80002140:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80002142:	91 30 00 2f 	movh.a %a2,61443
80002146:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
8000214a:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
8000214e:	8f f4 07 41 	and %d4,%d4,127
80002152:	c2 14       	add %d4,1
80002154:	6d 00 83 21 	call 8000645a <__floatsidf>
80002158:	0b 23 10 68 	mov %e6,%d3,%d2
8000215c:	82 04       	mov %d4,0
8000215e:	7b 80 19 54 	movh %d5,16792
80002162:	1b 45 78 5d 	addi %d5,%d5,-10364
80002166:	6d 00 d2 20 	call 8000630a <__divdf3>
8000216a:	0b 23 10 48 	mov %e4,%d3,%d2
8000216e:	6d 00 c1 21 	call 800064f0 <__truncdfsf2>
80002172:	00 90       	ret 

80002174 <IfxScuCcu_getSourceFrequency>:
{
80002174:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON0.B.CLKSEL)
80002176:	91 30 00 2f 	movh.a %a2,61443
8000217a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
8000217e:	54 22       	ld.w %d2,[%a2]
80002180:	37 02 62 2e 	extr.u %d2,%d2,28,2
80002184:	df 02 07 00 	jeq %d2,0,80002192 <IfxScuCcu_getSourceFrequency+0x1e>
80002188:	df 12 0a 80 	jne %d2,1,8000219c <IfxScuCcu_getSourceFrequency+0x28>
        sourcefreq = IfxScuCcu_getPllFrequency();
8000218c:	6d ff 9c ff 	call 800020c4 <IfxScuCcu_getPllFrequency>
        break;
80002190:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
80002192:	7b f0 cb 24 	movh %d2,19647
80002196:	1b 02 c2 2b 	addi %d2,%d2,-17376
8000219a:	00 90       	ret 
        sourcefreq = 0;
8000219c:	82 02       	mov %d2,0
}
8000219e:	00 90       	ret 

800021a0 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
800021a0:	40 ae       	mov.aa %a14,%sp
800021a2:	02 48       	mov %d8,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
800021a4:	6d ff e8 ff 	call 80002174 <IfxScuCcu_getSourceFrequency>
800021a8:	91 30 00 2f 	movh.a %a2,61443
800021ac:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800021b0:	54 23       	ld.w %d3,[%a2]
800021b2:	37 03 64 34 	extr.u %d3,%d3,8,4
800021b6:	4b 03 41 31 	itof %d3,%d3
800021ba:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
800021be:	4b 28 41 40 	mul.f %d4,%d8,%d2
800021c2:	4b 04 71 41 	ftouz %d4,%d4
    uint32 stmCountBegin = STM0_TIM0.U;
800021c6:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
800021ca:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
800021ce:	a2 32       	sub %d2,%d3
800021d0:	3f 42 fd ff 	jlt.u %d2,%d4,800021ca <IfxScuCcu_wait+0x2a>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
800021d4:	00 90       	ret 
	...

800021d8 <IfxScuCcu_getMaxFrequency>:
{
800021d8:	40 ae       	mov.aa %a14,%sp
    sourceFrequency = IfxScuCcu_getSourceFrequency();
800021da:	6d ff cd ff 	call 80002174 <IfxScuCcu_getSourceFrequency>
    switch (SCU_CCUCON0.B.LPDIV)
800021de:	91 30 00 2f 	movh.a %a2,61443
800021e2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800021e6:	54 23       	ld.w %d3,[%a2]
800021e8:	37 03 64 36 	extr.u %d3,%d3,12,4
800021ec:	ff 53 39 80 	jge.u %d3,5,8000225e <IfxScuCcu_getMaxFrequency+0x86>
800021f0:	91 00 00 28 	movh.a %a2,32768
800021f4:	d9 22 00 82 	lea %a2,[%a2]8704 <80002200 <IfxScuCcu_getMaxFrequency+0x28>>
800021f8:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
800021fc:	dc 02       	ji %a2
800021fe:	00 00       	nop 
80002200:	1d 00 0a 00 	j 80002214 <IfxScuCcu_getMaxFrequency+0x3c>
80002204:	1d 00 19 00 	j 80002236 <IfxScuCcu_getMaxFrequency+0x5e>
80002208:	1d 00 1c 00 	j 80002240 <IfxScuCcu_getMaxFrequency+0x68>
8000220c:	1d 00 1f 00 	j 8000224a <IfxScuCcu_getMaxFrequency+0x72>
80002210:	1d 00 22 00 	j 80002254 <IfxScuCcu_getMaxFrequency+0x7c>
        if (SCU_CCUCON5.B.MAXDIV == 0)
80002214:	91 30 00 2f 	movh.a %a2,61443
80002218:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
8000221c:	54 23       	ld.w %d3,[%a2]
8000221e:	8f f3 00 31 	and %d3,%d3,15
80002222:	df 03 1f 00 	jeq %d3,0,80002260 <IfxScuCcu_getMaxFrequency+0x88>
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
80002226:	54 23       	ld.w %d3,[%a2]
80002228:	8f f3 00 31 	and %d3,%d3,15
8000222c:	4b 03 41 31 	itof %d3,%d3
80002230:	4b 32 51 20 	div.f %d2,%d2,%d3
80002234:	00 90       	ret 
        maxFrequency = sourceFrequency / 15;
80002236:	7b 00 17 34 	movh %d3,16752
8000223a:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
8000223e:	00 90       	ret 
        maxFrequency = sourceFrequency / 30;
80002240:	7b 00 1f 34 	movh %d3,16880
80002244:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80002248:	00 90       	ret 
        maxFrequency = sourceFrequency / 60;
8000224a:	7b 00 27 34 	movh %d3,17008
8000224e:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80002252:	00 90       	ret 
        maxFrequency = sourceFrequency / 120;
80002254:	7b 00 2f 34 	movh %d3,17136
80002258:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
8000225c:	00 90       	ret 
    switch (SCU_CCUCON0.B.LPDIV)
8000225e:	82 02       	mov %d2,0
}
80002260:	00 90       	ret 

80002262 <IfxScuCcu_getMaxFrequency_end>:
	...

80002264 <IfxScuCcu_getBaud1Frequency>:
{
80002264:	40 ae       	mov.aa %a14,%sp
80002266:	20 08       	sub.a %sp,8
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80002268:	91 30 00 2f 	movh.a %a2,61443
8000226c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80002270:	54 28       	ld.w %d8,[%a2]
    if (ccucon0.B.BAUD1DIV == 0)
80002272:	59 e8 fc ff 	st.w [%a14]-4 <f0036030 <_SMALL_DATA4_+0x6002e030>>,%d8
80002276:	8f f8 00 21 	and %d2,%d8,15
8000227a:	df 02 04 80 	jne %d2,0,80002282 <IfxScuCcu_getBaud1Frequency+0x1e>
        frequency = 0;
8000227e:	82 02       	mov %d2,0
}
80002280:	00 90       	ret 
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
80002282:	6d ff ab ff 	call 800021d8 <IfxScuCcu_getMaxFrequency>
80002286:	8f f8 00 31 	and %d3,%d8,15
8000228a:	4b 03 41 31 	itof %d3,%d3
8000228e:	4b 32 51 20 	div.f %d2,%d2,%d3
80002292:	00 90       	ret 

80002294 <IfxScuCcu_getBaud2Frequency>:
{
80002294:	40 ae       	mov.aa %a14,%sp
80002296:	20 08       	sub.a %sp,8
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80002298:	91 30 00 2f 	movh.a %a2,61443
8000229c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800022a0:	54 28       	ld.w %d8,[%a2]
    if (ccucon0.B.BAUD2DIV == 0)
800022a2:	59 e8 fc ff 	st.w [%a14]-4 <f0036030 <_SMALL_DATA4_+0x6002e030>>,%d8
800022a6:	8f 08 0f 21 	and %d2,%d8,240
800022aa:	df 02 04 80 	jne %d2,0,800022b2 <IfxScuCcu_getBaud2Frequency+0x1e>
        frequency = 0;
800022ae:	82 02       	mov %d2,0
}
800022b0:	00 90       	ret 
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
800022b2:	6d ff 93 ff 	call 800021d8 <IfxScuCcu_getMaxFrequency>
800022b6:	37 08 64 32 	extr.u %d3,%d8,4,4
800022ba:	4b 03 41 31 	itof %d3,%d3
800022be:	4b 32 51 20 	div.f %d2,%d2,%d3
800022c2:	00 90       	ret 

800022c4 <IfxScuCcu_getSpbFrequency>:
{
800022c4:	40 ae       	mov.aa %a14,%sp
    sourceFrequency = IfxScuCcu_getSourceFrequency();
800022c6:	6d ff 57 ff 	call 80002174 <IfxScuCcu_getSourceFrequency>
    switch (SCU_CCUCON0.B.LPDIV)
800022ca:	91 30 00 2f 	movh.a %a2,61443
800022ce:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800022d2:	54 23       	ld.w %d3,[%a2]
800022d4:	37 03 64 36 	extr.u %d3,%d3,12,4
800022d8:	ff 53 39 80 	jge.u %d3,5,8000234a <IfxScuCcu_getSpbFrequency+0x86>
800022dc:	91 00 00 28 	movh.a %a2,32768
800022e0:	d9 22 2c b2 	lea %a2,[%a2]8940 <800022ec <IfxScuCcu_getSpbFrequency+0x28>>
800022e4:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
800022e8:	dc 02       	ji %a2
800022ea:	00 00       	nop 
800022ec:	1d 00 0a 00 	j 80002300 <IfxScuCcu_getSpbFrequency+0x3c>
800022f0:	1d 00 19 00 	j 80002322 <IfxScuCcu_getSpbFrequency+0x5e>
800022f4:	1d 00 1c 00 	j 8000232c <IfxScuCcu_getSpbFrequency+0x68>
800022f8:	1d 00 1f 00 	j 80002336 <IfxScuCcu_getSpbFrequency+0x72>
800022fc:	1d 00 22 00 	j 80002340 <IfxScuCcu_getSpbFrequency+0x7c>
        if (SCU_CCUCON0.B.SPBDIV == 0)
80002300:	91 30 00 2f 	movh.a %a2,61443
80002304:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80002308:	54 23       	ld.w %d3,[%a2]
8000230a:	37 03 64 38 	extr.u %d3,%d3,16,4
8000230e:	df 03 20 00 	jeq %d3,0,8000234e <IfxScuCcu_getSpbFrequency+0x8a>
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
80002312:	54 23       	ld.w %d3,[%a2]
80002314:	37 03 64 38 	extr.u %d3,%d3,16,4
80002318:	4b 03 41 31 	itof %d3,%d3
8000231c:	4b 32 51 20 	div.f %d2,%d2,%d3
80002320:	00 90       	ret 
        spbFrequency = sourceFrequency / 30;
80002322:	7b 00 1f 34 	movh %d3,16880
80002326:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
8000232a:	00 90       	ret 
        spbFrequency = sourceFrequency / 60;
8000232c:	7b 00 27 34 	movh %d3,17008
80002330:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80002334:	00 90       	ret 
        spbFrequency = sourceFrequency / 120;
80002336:	7b 00 2f 34 	movh %d3,17136
8000233a:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
8000233e:	00 90       	ret 
        spbFrequency = sourceFrequency / 240;
80002340:	7b 00 37 34 	movh %d3,17264
80002344:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80002348:	00 90       	ret 
    switch (SCU_CCUCON0.B.LPDIV)
8000234a:	82 02       	mov %d2,0
8000234c:	00 90       	ret 
            spbFrequency = 0.0f;
8000234e:	82 02       	mov %d2,0
}
80002350:	00 90       	ret 

80002352 <IfxScuCcu_getSpbFrequency_end>:
	...

80002354 <IfxScuCcu_init>:
{
80002354:	40 ae       	mov.aa %a14,%sp
80002356:	40 4c       	mov.aa %a12,%a4
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80002358:	19 42 10 10 	ld.w %d2,[%a4]80
8000235c:	91 00 00 26 	movh.a %a2,24576
80002360:	59 22 78 50 	st.w [%a2]1400 <60000578 <IfxScuCcu_xtalFrequency>>,%d2
    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80002364:	6d 00 02 03 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80002368:	02 2a       	mov %d10,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
8000236a:	6d 00 11 03 	call 8000298c <IfxScuWdt_getSafetyWatchdogPassword>
8000236e:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80002370:	02 a4       	mov %d4,%d10
80002372:	6d 00 92 01 	call 80002696 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80002376:	91 30 00 2f 	movh.a %a2,61443
8000237a:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
8000237e:	54 2d       	ld.w %d13,[%a2]
80002380:	37 0d e1 d1 	extr.u %d13,%d13,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
80002384:	54 22       	ld.w %d2,[%a2]
80002386:	b7 12 81 21 	insert %d2,%d2,1,3,1
8000238a:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000238c:	02 a4       	mov %d4,%d10
8000238e:	6d 00 0a 03 	call 800029a2 <IfxScuWdt_setCpuEndinit>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80002392:	02 84       	mov %d4,%d8
80002394:	6d 00 a6 01 	call 800026e0 <IfxScuWdt_clearSafetyEndinit>
        while (SCU_CCUCON0.B.LCK != 0U)
80002398:	91 30 00 2f 	movh.a %a2,61443
8000239c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800023a0:	54 23       	ld.w %d3,[%a2]
800023a2:	bf 03 fb 7f 	jlt %d3,0,80002398 <IfxScuCcu_init+0x44>
        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
800023a6:	54 22       	ld.w %d2,[%a2]
800023a8:	b7 02 02 2e 	insert %d2,%d2,0,28,2
800023ac:	74 22       	st.w [%a2],%d2
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
800023ae:	54 22       	ld.w %d2,[%a2]
800023b0:	b7 12 01 2f 	insert %d2,%d2,1,30,1
800023b4:	74 22       	st.w [%a2],%d2
        SCU_PLLCON0.B.SETFINDIS = 1;
800023b6:	91 30 00 2f 	movh.a %a2,61443
800023ba:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
800023be:	54 22       	ld.w %d2,[%a2]
800023c0:	b7 12 01 22 	insert %d2,%d2,1,4,1
800023c4:	74 22       	st.w [%a2],%d2
        while (SCU_CCUCON1.B.LCK != 0U)
800023c6:	91 30 00 2f 	movh.a %a2,61443
800023ca:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800023ce:	54 23       	ld.w %d3,[%a2]
800023d0:	bf 03 fb 7f 	jlt %d3,0,800023c6 <IfxScuCcu_init+0x72>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
800023d4:	54 22       	ld.w %d2,[%a2]
800023d6:	b7 12 02 2e 	insert %d2,%d2,1,28,2
800023da:	74 22       	st.w [%a2],%d2
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
800023dc:	54 22       	ld.w %d2,[%a2]
800023de:	b7 12 01 2f 	insert %d2,%d2,1,30,1
800023e2:	74 22       	st.w [%a2],%d2
        status             |= IfxScuCcu_isOscillatorStable();
800023e4:	6d ff ab fd 	call 80001f3a <IfxScuCcu_isOscillatorStable>
800023e8:	02 2c       	mov %d12,%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800023ea:	02 84       	mov %d4,%d8
800023ec:	6d 00 00 03 	call 800029ec <IfxScuWdt_setSafetyEndinit>
    if (status == 0)
800023f0:	df 0c 28 00 	jeq %d12,0,80002440 <IfxScuCcu_init+0xec>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800023f4:	02 84       	mov %d4,%d8
800023f6:	6d 00 75 01 	call 800026e0 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
800023fa:	91 30 00 2f 	movh.a %a2,61443
800023fe:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80002402:	54 23       	ld.w %d3,[%a2]
80002404:	8f 03 c4 31 	andn %d3,%d3,64
80002408:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000240a:	02 84       	mov %d4,%d8
8000240c:	6d 00 f0 02 	call 800029ec <IfxScuWdt_setSafetyEndinit>
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80002410:	02 a4       	mov %d4,%d10
80002412:	6d 00 42 01 	call 80002696 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80002416:	91 30 00 2f 	movh.a %a2,61443
8000241a:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
8000241e:	54 23       	ld.w %d3,[%a2]
80002420:	b7 13 81 31 	insert %d3,%d3,1,3,1
80002424:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80002426:	91 30 00 2f 	movh.a %a2,61443
8000242a:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
8000242e:	54 23       	ld.w %d3,[%a2]
80002430:	67 d3 03 30 	ins.t %d3,%d3,3,%d13,0
80002434:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinit_pw);
80002436:	02 a4       	mov %d4,%d10
80002438:	6d 00 b5 02 	call 800029a2 <IfxScuWdt_setCpuEndinit>
}
8000243c:	02 c2       	mov %d2,%d12
8000243e:	00 90       	ret 
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80002440:	02 84       	mov %d4,%d8
80002442:	6d 00 4f 01 	call 800026e0 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80002446:	91 30 00 2f 	movh.a %a2,61443
8000244a:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
8000244e:	54 23       	ld.w %d3,[%a2]
80002450:	6f 53 fb 7f 	jz.t %d3,5,80002446 <IfxScuCcu_init+0xf2>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80002454:	39 c3 0a 00 	ld.bu %d3,[%a12]10
80002458:	91 30 00 2f 	movh.a %a2,61443
8000245c:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80002460:	54 22       	ld.w %d2,[%a2]
80002462:	37 32 07 20 	insert %d2,%d2,%d3,0,7
80002466:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80002468:	39 c3 08 00 	ld.bu %d3,[%a12]8
8000246c:	91 30 00 2f 	movh.a %a2,61443
80002470:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80002474:	54 22       	ld.w %d2,[%a2]
80002476:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
8000247a:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
8000247c:	39 c3 09 00 	ld.bu %d3,[%a12]9
80002480:	54 22       	ld.w %d2,[%a2]
80002482:	37 32 87 24 	insert %d2,%d2,%d3,9,7
80002486:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80002488:	54 22       	ld.w %d2,[%a2]
8000248a:	b7 12 01 23 	insert %d2,%d2,1,6,1
8000248e:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
80002490:	54 22       	ld.w %d2,[%a2]
80002492:	b7 02 01 28 	insert %d2,%d2,0,16,1
80002496:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80002498:	54 22       	ld.w %d2,[%a2]
8000249a:	b7 12 81 22 	insert %d2,%d2,1,5,1
8000249e:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
800024a0:	54 22       	ld.w %d2,[%a2]
800024a2:	b7 12 01 28 	insert %d2,%d2,1,16,1
800024a6:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.RESLD = 1;
800024a8:	54 22       	ld.w %d2,[%a2]
800024aa:	b7 12 01 29 	insert %d2,%d2,1,18,1
800024ae:	74 22       	st.w [%a2],%d2
                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800024b0:	7b 20 85 43 	movh %d4,14418
800024b4:	1b 74 71 4b 	addi %d4,%d4,-18665
800024b8:	6d ff 74 fe 	call 800021a0 <IfxScuCcu_wait>
                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
800024bc:	91 30 00 2f 	movh.a %a2,61443
800024c0:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
800024c4:	54 23       	ld.w %d3,[%a2]
800024c6:	6f 23 fb 7f 	jz.t %d3,2,800024bc <IfxScuCcu_init+0x168>
                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
800024ca:	91 30 00 2f 	movh.a %a2,61443
800024ce:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
800024d2:	54 22       	ld.w %d2,[%a2]
800024d4:	8f 12 c0 21 	andn %d2,%d2,1
800024d8:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
800024da:	91 30 00 2f 	movh.a %a2,61443
800024de:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800024e2:	54 23       	ld.w %d3,[%a2]
800024e4:	bf 03 fb 7f 	jlt %d3,0,800024da <IfxScuCcu_init+0x186>
                    SCU_CCUCON0.B.CLKSEL = 0x01;
800024e8:	54 22       	ld.w %d2,[%a2]
800024ea:	b7 12 02 2e 	insert %d2,%d2,1,28,2
800024ee:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
800024f0:	91 30 00 2f 	movh.a %a2,61443
800024f4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800024f8:	54 23       	ld.w %d3,[%a2]
800024fa:	bf 03 fb 7f 	jlt %d3,0,800024f0 <IfxScuCcu_init+0x19c>
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
800024fe:	19 c4 0c 00 	ld.w %d4,[%a12]12
80002502:	6d ff 4f fe 	call 800021a0 <IfxScuCcu_wait>
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80002506:	91 30 00 2f 	movh.a %a2,61443
8000250a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
8000250e:	54 23       	ld.w %d3,[%a2]
80002510:	19 c4 14 00 	ld.w %d4,[%a12]20 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80002514:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80002518:	19 c2 10 00 	ld.w %d2,[%a12]16
8000251c:	26 42       	and %d2,%d4
8000251e:	a6 23       	or %d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80002520:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon0.B.UP     = 1;
80002524:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80002528:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON1.B.LCK != 0U)
8000252a:	91 30 00 2f 	movh.a %a2,61443
8000252e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80002532:	54 23       	ld.w %d3,[%a2]
80002534:	bf 03 fb 7f 	jlt %d3,0,8000252a <IfxScuCcu_init+0x1d6>
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80002538:	54 23       	ld.w %d3,[%a2]
8000253a:	19 c4 1c 00 	ld.w %d4,[%a12]28
8000253e:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80002542:	19 c2 18 00 	ld.w %d2,[%a12]24
80002546:	26 42       	and %d2,%d4
80002548:	a6 23       	or %d3,%d2
                        ccucon1.B.INSEL = 1;
8000254a:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon1.B.UP    = 1;
8000254e:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON1     = ccucon1;
80002552:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON2.B.LCK != 0U)
80002554:	91 30 00 2f 	movh.a %a2,61443
80002558:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x6002e040>>
8000255c:	54 23       	ld.w %d3,[%a2]
8000255e:	bf 03 fb 7f 	jlt %d3,0,80002554 <IfxScuCcu_init+0x200>
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80002562:	54 23       	ld.w %d3,[%a2]
80002564:	19 c4 24 00 	ld.w %d4,[%a12]36
80002568:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
8000256c:	19 c2 20 00 	ld.w %d2,[%a12]32
80002570:	26 42       	and %d2,%d4
80002572:	a6 32       	or %d2,%d3
                        ccucon2.B.UP = 1;
80002574:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON2  = ccucon2;
80002578:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON5.B.LCK != 0U)
8000257a:	91 30 00 2f 	movh.a %a2,61443
8000257e:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
80002582:	54 23       	ld.w %d3,[%a2]
80002584:	bf 03 fb 7f 	jlt %d3,0,8000257a <IfxScuCcu_init+0x226>
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80002588:	54 23       	ld.w %d3,[%a2]
8000258a:	19 c4 2c 00 	ld.w %d4,[%a12]44
8000258e:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80002592:	19 c2 28 00 	ld.w %d2,[%a12]40
80002596:	26 42       	and %d2,%d4
80002598:	a6 32       	or %d2,%d3
                        ccucon5.B.UP = 1;
8000259a:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON5  = ccucon5;
8000259e:	74 22       	st.w [%a2],%d2
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800025a0:	91 30 00 2f 	movh.a %a2,61443
800025a4:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x6002e080>>
800025a8:	54 23       	ld.w %d3,[%a2]
800025aa:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036080 <_SMALL_DATA4_+0x6002e080>>
800025ae:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
800025b2:	19 c2 30 00 	ld.w %d2,[%a12]48
800025b6:	26 42       	and %d2,%d4
800025b8:	a6 32       	or %d2,%d3
                        SCU_CCUCON6 = ccucon6;
800025ba:	74 22       	st.w [%a2],%d2
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800025bc:	91 30 00 2f 	movh.a %a2,61443
800025c0:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x6002e084>>
800025c4:	54 23       	ld.w %d3,[%a2]
800025c6:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f0036084 <_SMALL_DATA4_+0x6002e084>>
800025ca:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
800025ce:	19 c2 38 00 	ld.w %d2,[%a12]56
800025d2:	26 42       	and %d2,%d4
800025d4:	a6 32       	or %d2,%d3
                        SCU_CCUCON7 = ccucon7;
800025d6:	74 22       	st.w [%a2],%d2
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
800025d8:	91 30 00 2f 	movh.a %a2,61443
800025dc:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x6002e088>>
800025e0:	54 23       	ld.w %d3,[%a2]
800025e2:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036088 <_SMALL_DATA4_+0x6002e088>>
800025e6:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
800025ea:	19 c2 00 10 	ld.w %d2,[%a12]64
800025ee:	26 42       	and %d2,%d4
800025f0:	a6 32       	or %d2,%d3
                        SCU_CCUCON8 = ccucon8;
800025f2:	74 22       	st.w [%a2],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800025f4:	02 84       	mov %d4,%d8
800025f6:	6d 00 fb 01 	call 800029ec <IfxScuWdt_setSafetyEndinit>
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
800025fa:	91 00 80 df 	movh.a %a13,63488
800025fe:	d9 dd 14 02 	lea %a13,[%a13]8212 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80002602:	54 d9       	ld.w %d9,[%a13]
80002604:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80002608:	0f 49 e0 90 	andn %d9,%d9,%d4
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000260c:	19 c2 08 10 	ld.w %d2,[%a12]72
80002610:	26 42       	and %d2,%d4
80002612:	a6 29       	or %d9,%d2
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80002614:	02 a4       	mov %d4,%d10
80002616:	6d 00 40 00 	call 80002696 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
8000261a:	74 d9       	st.w [%a13],%d9
                IfxScuWdt_setCpuEndinit(endinit_pw);
8000261c:	02 a4       	mov %d4,%d10
8000261e:	6d 00 c2 01 	call 800029a2 <IfxScuWdt_setCpuEndinit>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80002622:	02 c9       	mov %d9,%d12
80002624:	1d 00 0d 00 	j 8000263e <IfxScuCcu_init+0x2ea>
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80002628:	99 c2 04 00 	ld.a %a2,[%a12]4
8000262c:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80002630:	19 24 04 00 	ld.w %d4,[%a2]4
80002634:	6d ff b6 fd 	call 800021a0 <IfxScuCcu_wait>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80002638:	c2 19       	add %d9,1
8000263a:	8f f9 0f 91 	and %d9,%d9,255
8000263e:	14 c3       	ld.bu %d3,[%a12]
80002640:	7f 39 da fe 	jge.u %d9,%d3,800023f4 <IfxScuCcu_init+0xa0>
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80002644:	02 84       	mov %d4,%d8
80002646:	6d 00 4d 00 	call 800026e0 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000264a:	91 30 00 2f 	movh.a %a2,61443
8000264e:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80002652:	54 23       	ld.w %d3,[%a2]
80002654:	6f 53 fb 7f 	jz.t %d3,5,8000264a <IfxScuCcu_init+0x2f6>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80002658:	53 c9 20 b0 	mul %d11,%d9,12
8000265c:	99 c2 04 00 	ld.a %a2,[%a12]4
80002660:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80002664:	14 24       	ld.bu %d4,[%a2]
80002666:	91 30 00 2f 	movh.a %a2,61443
8000266a:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
8000266e:	54 23       	ld.w %d3,[%a2]
80002670:	37 43 07 30 	insert %d3,%d3,%d4,0,7
80002674:	74 23       	st.w [%a2],%d3
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80002676:	02 84       	mov %d4,%d8
80002678:	6d 00 ba 01 	call 800029ec <IfxScuWdt_setSafetyEndinit>
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
8000267c:	99 c2 04 00 	ld.a %a2,[%a12]4
80002680:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80002684:	d9 22 08 00 	lea %a2,[%a2]8
80002688:	d4 22       	ld.a %a2,[%a2]
8000268a:	bd 02 cf 7f 	jz.a %a2,80002628 <IfxScuCcu_init+0x2d4>
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
8000268e:	2d 02 00 00 	calli %a2
80002692:	1d ff cb ff 	j 80002628 <IfxScuCcu_init+0x2d4>

80002696 <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
80002696:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80002698:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000269c:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800026a0:	7b 30 00 3f 	movh %d3,61443
800026a4:	1b 03 10 36 	addi %d3,%d3,24832
800026a8:	13 c2 20 23 	madd %d2,%d3,%d2,12
800026ac:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800026ae:	54 22       	ld.w %d2,[%a2]
800026b0:	6f 12 0b 00 	jz.t %d2,1,800026c6 <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800026b4:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800026b8:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800026bc:	54 22       	ld.w %d2,[%a2]
800026be:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800026c2:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800026c4:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800026c6:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800026ca:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800026ce:	54 22       	ld.w %d2,[%a2]
800026d0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800026d4:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800026d6:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800026d8:	54 22       	ld.w %d2,[%a2]
800026da:	6f 02 ff ff 	jnz.t %d2,0,800026d8 <IfxScuWdt_clearCpuEndinit+0x42>
}
800026de:	00 90       	ret 

800026e0 <IfxScuWdt_clearSafetyEndinit>:


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
800026e0:	40 ae       	mov.aa %a14,%sp
800026e2:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800026e6:	91 30 00 2f 	movh.a %a2,61443
800026ea:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800026ee:	54 22       	ld.w %d2,[%a2]
800026f0:	6f 12 0b 00 	jz.t %d2,1,80002706 <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800026f4:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800026f8:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800026fc:	54 22       	ld.w %d2,[%a2]
800026fe:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002702:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002704:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002706:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000270a:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000270e:	91 30 00 2f 	movh.a %a2,61443
80002712:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002716:	54 22       	ld.w %d2,[%a2]
80002718:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000271c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000271e:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002720:	91 30 00 2f 	movh.a %a2,61443
80002724:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002728:	54 22       	ld.w %d2,[%a2]
8000272a:	6f 02 fb ff 	jnz.t %d2,0,80002720 <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
8000272e:	00 90       	ret 

80002730 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80002730:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80002732:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80002736:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000273a:	7b 30 00 3f 	movh %d3,61443
8000273e:	1b 03 10 36 	addi %d3,%d3,24832
80002742:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002746:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80002748:	54 22       	ld.w %d2,[%a2]
8000274a:	6f 12 0b 00 	jz.t %d2,1,80002760 <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000274e:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002752:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002756:	54 22       	ld.w %d2,[%a2]
80002758:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000275c:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000275e:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002760:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002762:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002766:	54 22       	ld.w %d2,[%a2]
80002768:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000276c:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000276e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80002770:	54 22       	ld.w %d2,[%a2]
80002772:	6f 02 ff ff 	jnz.t %d2,0,80002770 <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80002776:	d9 23 04 00 	lea %a3,[%a2]4
8000277a:	19 22 04 00 	ld.w %d2,[%a2]4
8000277e:	b7 12 81 21 	insert %d2,%d2,1,3,1
80002782:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80002784:	54 22       	ld.w %d2,[%a2]
80002786:	6f 12 09 00 	jz.t %d2,1,80002798 <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000278a:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000278e:	54 22       	ld.w %d2,[%a2]
80002790:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002794:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002796:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002798:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000279c:	54 22       	ld.w %d2,[%a2]
8000279e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800027a2:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800027a4:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800027a6:	54 22       	ld.w %d2,[%a2]
800027a8:	6f 02 ff 7f 	jz.t %d2,0,800027a6 <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800027ac:	00 90       	ret 

800027ae <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
800027ae:	40 ae       	mov.aa %a14,%sp
800027b0:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
800027b4:	91 30 00 2f 	movh.a %a2,61443
800027b8:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800027bc:	54 22       	ld.w %d2,[%a2]
800027be:	6f 12 0b 00 	jz.t %d2,1,800027d4 <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800027c2:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800027c6:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800027ca:	54 22       	ld.w %d2,[%a2]
800027cc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800027d0:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800027d2:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800027d4:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800027d6:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800027da:	91 30 00 2f 	movh.a %a2,61443
800027de:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800027e2:	54 22       	ld.w %d2,[%a2]
800027e4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800027e8:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800027ea:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800027ec:	91 30 00 2f 	movh.a %a2,61443
800027f0:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800027f4:	54 22       	ld.w %d2,[%a2]
800027f6:	6f 02 fb ff 	jnz.t %d2,0,800027ec <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
800027fa:	91 30 00 2f 	movh.a %a2,61443
800027fe:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80002802:	54 22       	ld.w %d2,[%a2]
80002804:	b7 12 81 21 	insert %d2,%d2,1,3,1
80002808:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000280a:	91 30 00 2f 	movh.a %a2,61443
8000280e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002812:	54 22       	ld.w %d2,[%a2]
80002814:	6f 12 09 00 	jz.t %d2,1,80002826 <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002818:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000281c:	54 22       	ld.w %d2,[%a2]
8000281e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002822:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002824:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002826:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000282a:	91 30 00 2f 	movh.a %a2,61443
8000282e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002832:	54 22       	ld.w %d2,[%a2]
80002834:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002838:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000283a:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000283c:	91 30 00 2f 	movh.a %a2,61443
80002840:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002844:	54 22       	ld.w %d2,[%a2]
80002846:	6f 02 fb 7f 	jz.t %d2,0,8000283c <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
8000284a:	00 90       	ret 

8000284c <IfxScuWdt_enableCpuWatchdog>:


void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
8000284c:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
8000284e:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80002852:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80002856:	7b 30 00 3f 	movh %d3,61443
8000285a:	1b 03 10 36 	addi %d3,%d3,24832
8000285e:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002862:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80002864:	54 22       	ld.w %d2,[%a2]
80002866:	6f 12 0b 00 	jz.t %d2,1,8000287c <IfxScuWdt_enableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000286a:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000286e:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002872:	54 22       	ld.w %d2,[%a2]
80002874:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002878:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000287a:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000287c:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000287e:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002882:	54 22       	ld.w %d2,[%a2]
80002884:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002888:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000288a:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
8000288c:	54 22       	ld.w %d2,[%a2]
8000288e:	6f 02 ff ff 	jnz.t %d2,0,8000288c <IfxScuWdt_enableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
80002892:	d9 23 04 00 	lea %a3,[%a2]4
80002896:	19 22 04 00 	ld.w %d2,[%a2]4
8000289a:	8f 82 c0 21 	andn %d2,%d2,8
8000289e:	74 32       	st.w [%a3],%d2
    if (watchdog->CON0.B.LCK)
800028a0:	54 22       	ld.w %d2,[%a2]
800028a2:	6f 12 09 00 	jz.t %d2,1,800028b4 <IfxScuWdt_enableCpuWatchdog+0x68>
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800028a6:	8f 14 40 31 	or %d3,%d4,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800028aa:	54 22       	ld.w %d2,[%a2]
800028ac:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800028b0:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800028b2:	74 22       	st.w [%a2],%d2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800028b4:	8f 34 40 41 	or %d4,%d4,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800028b8:	54 22       	ld.w %d2,[%a2]
800028ba:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800028be:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800028c0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800028c2:	54 22       	ld.w %d2,[%a2]
800028c4:	6f 02 ff 7f 	jz.t %d2,0,800028c2 <IfxScuWdt_enableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800028c8:	00 90       	ret 

800028ca <IfxScuWdt_enableSafetyWatchdog>:


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
800028ca:	40 ae       	mov.aa %a14,%sp
800028cc:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
800028d0:	91 30 00 2f 	movh.a %a2,61443
800028d4:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800028d8:	54 22       	ld.w %d2,[%a2]
800028da:	6f 12 0b 00 	jz.t %d2,1,800028f0 <IfxScuWdt_enableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800028de:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800028e2:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800028e6:	54 22       	ld.w %d2,[%a2]
800028e8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800028ec:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800028ee:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800028f0:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800028f2:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800028f6:	91 30 00 2f 	movh.a %a2,61443
800028fa:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800028fe:	54 22       	ld.w %d2,[%a2]
80002900:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002904:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002906:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002908:	91 30 00 2f 	movh.a %a2,61443
8000290c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002910:	54 22       	ld.w %d2,[%a2]
80002912:	6f 02 fb ff 	jnz.t %d2,0,80002908 <IfxScuWdt_enableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
80002916:	91 30 00 2f 	movh.a %a2,61443
8000291a:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
8000291e:	54 22       	ld.w %d2,[%a2]
80002920:	8f 82 c0 21 	andn %d2,%d2,8
80002924:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
80002926:	91 30 00 2f 	movh.a %a2,61443
8000292a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000292e:	54 22       	ld.w %d2,[%a2]
80002930:	6f 12 09 00 	jz.t %d2,1,80002942 <IfxScuWdt_enableSafetyWatchdog+0x78>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002934:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002938:	54 22       	ld.w %d2,[%a2]
8000293a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000293e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002940:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002942:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002946:	91 30 00 2f 	movh.a %a2,61443
8000294a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000294e:	54 22       	ld.w %d2,[%a2]
80002950:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002954:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002956:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002958:	91 30 00 2f 	movh.a %a2,61443
8000295c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002960:	54 22       	ld.w %d2,[%a2]
80002962:	6f 02 fb 7f 	jz.t %d2,0,80002958 <IfxScuWdt_enableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80002966:	00 90       	ret 

80002968 <IfxScuWdt_getCpuWatchdogPassword>:


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
80002968:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
8000296a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000296e:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80002972:	7b 30 00 3f 	movh %d3,61443
80002976:	1b 03 10 36 	addi %d3,%d3,24832
8000297a:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
8000297e:	60 22       	mov.a %a2,%d2
80002980:	54 22       	ld.w %d2,[%a2]
80002982:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80002986:	8f f2 83 21 	xor %d2,%d2,63
8000298a:	00 90       	ret 

8000298c <IfxScuWdt_getSafetyWatchdogPassword>:
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
8000298c:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
8000298e:	91 30 00 2f 	movh.a %a2,61443
80002992:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002996:	54 22       	ld.w %d2,[%a2]
80002998:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
8000299c:	8f f2 83 21 	xor %d2,%d2,63
800029a0:	00 90       	ret 

800029a2 <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
800029a2:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800029a4:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800029a8:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800029ac:	7b 30 00 3f 	movh %d3,61443
800029b0:	1b 03 10 36 	addi %d3,%d3,24832
800029b4:	13 c2 20 23 	madd %d2,%d3,%d2,12
800029b8:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
800029ba:	54 22       	ld.w %d2,[%a2]
800029bc:	6f 12 0b 00 	jz.t %d2,1,800029d2 <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029c0:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800029c4:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800029c8:	54 22       	ld.w %d2,[%a2]
800029ca:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029ce:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800029d0:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029d2:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800029d6:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800029da:	54 22       	ld.w %d2,[%a2]
800029dc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029e0:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800029e2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800029e4:	54 22       	ld.w %d2,[%a2]
800029e6:	6f 02 ff 7f 	jz.t %d2,0,800029e4 <IfxScuWdt_setCpuEndinit+0x42>
}
800029ea:	00 90       	ret 

800029ec <IfxScuWdt_setSafetyEndinit>:


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
800029ec:	40 ae       	mov.aa %a14,%sp
800029ee:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
800029f2:	91 30 00 2f 	movh.a %a2,61443
800029f6:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800029fa:	54 22       	ld.w %d2,[%a2]
800029fc:	6f 12 0b 00 	jz.t %d2,1,80002a12 <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002a00:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002a04:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002a08:	54 22       	ld.w %d2,[%a2]
80002a0a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002a0e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002a10:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002a12:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002a16:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002a1a:	91 30 00 2f 	movh.a %a2,61443
80002a1e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002a22:	54 22       	ld.w %d2,[%a2]
80002a24:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002a28:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002a2a:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002a2c:	91 30 00 2f 	movh.a %a2,61443
80002a30:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002a34:	54 22       	ld.w %d2,[%a2]
80002a36:	6f 02 fb 7f 	jz.t %d2,0,80002a2c <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80002a3a:	00 90       	ret 

80002a3c <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80002a3c:	40 ae       	mov.aa %a14,%sp
80002a3e:	40 4c       	mov.aa %a12,%a4
80002a40:	02 5a       	mov %d10,%d5
80002a42:	8f f4 0f c1 	and %d12,%d4,255
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80002a46:	80 42       	mov.d %d2,%a4
80002a48:	1b 02 01 b0 	addi %d11,%d2,16
    uint8                 iocrIndex = (pinIndex / 4);
80002a4c:	37 04 66 91 	extr.u %d9,%d4,2,6
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80002a50:	8f 34 00 41 	and %d4,%d4,3
80002a54:	8f 34 00 80 	sh %d8,%d4,3

    if (port == &MODULE_P40)
80002a58:	7b 40 00 2f 	movh %d2,61444
80002a5c:	1b 02 00 2e 	addi %d2,%d2,-8192
80002a60:	80 43       	mov.d %d3,%a4
80002a62:	5f 23 12 00 	jeq %d3,%d2,80002a86 <IfxPort_setPinMode+0x4a>
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
        IfxScuWdt_setCpuEndinit(passwd);
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80002a66:	8f 29 00 20 	sh %d2,%d9,2
80002a6a:	60 b2       	mov.a %a2,%d11
80002a6c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002a70:	3b f0 0f 40 	mov %d4,255
80002a74:	0f 84 00 40 	sh %d4,%d4,%d8
80002a78:	0f 8a 00 20 	sh %d2,%d10,%d8
                     ::"a"(address), "d"(mask), "d"((long long)value));
80002a7c:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
80002a7e:	02 43       	mov %d3,%d4
80002a80:	49 22 40 08 	ldmst [%a2]0,%e2
}
80002a84:	00 90       	ret 
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80002a86:	6d ff 71 ff 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80002a8a:	02 2d       	mov %d13,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80002a8c:	02 24       	mov %d4,%d2
80002a8e:	6d ff 04 fe 	call 80002696 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80002a92:	d9 c2 20 10 	lea %a2,[%a12]96
80002a96:	19 c2 20 10 	ld.w %d2,[%a12]96
80002a9a:	d7 02 01 2c 	insert %d2,%d2,0,%d12,1
80002a9e:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(passwd);
80002aa0:	02 d4       	mov %d4,%d13
80002aa2:	6d ff 80 ff 	call 800029a2 <IfxScuWdt_setCpuEndinit>
80002aa6:	1d ff e0 ff 	j 80002a66 <IfxPort_setPinMode+0x2a>

80002aaa <IfxPort_setPinPadDriver>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80002aaa:	40 ae       	mov.aa %a14,%sp
80002aac:	80 4b       	mov.d %d11,%a4
80002aae:	02 5a       	mov %d10,%d5
80002ab0:	8f f4 0f 81 	and %d8,%d4,255
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80002ab4:	6d ff 5a ff 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80002ab8:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80002aba:	02 24       	mov %d4,%d2
80002abc:	6d ff ed fd 	call 80002696 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80002ac0:	1b 0b 04 40 	addi %d4,%d11,64
        uint8            pdrIndex = (pinIndex / 8);
80002ac4:	8f d8 1f 20 	sh %d2,%d8,-3
        uint8            shift    = (pinIndex & 0x7U) * 4;
80002ac8:	8f 78 00 31 	and %d3,%d8,7
80002acc:	06 23       	sh %d3,2
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80002ace:	06 22       	sh %d2,2
80002ad0:	60 42       	mov.a %a2,%d4
80002ad2:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
80002ad6:	3b f0 00 20 	mov %d2,15
80002ada:	0f 32 00 20 	sh %d2,%d2,%d3
80002ade:	0f 3a 00 30 	sh %d3,%d10,%d3
                     ::"a"(address), "d"(mask), "d"((long long)value));
80002ae2:	53 13 40 60 	mul.u %e6,%d3,1
    __asm__ volatile("mov %H2,%1 \n\
80002ae6:	02 27       	mov %d7,%d2
80002ae8:	49 46 40 08 	ldmst [%a4]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80002aec:	02 94       	mov %d4,%d9
80002aee:	6d ff 5a ff 	call 800029a2 <IfxScuWdt_setCpuEndinit>
}
80002af2:	00 90       	ret 

80002af4 <IfxGtm_Tom_Timer_acknowledgeTimerIrq>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxGtm_Tom_Timer_acknowledgeTimerIrq(IfxGtm_Tom_Timer *driver)
{
80002af4:	40 ae       	mov.aa %a14,%sp
    boolean event;

    event = IfxGtm_Tom_Ch_isZeroNotification(driver->tom, driver->timerChannel);
80002af6:	19 43 14 00 	ld.w %d3,[%a4]20
80002afa:	19 42 24 00 	ld.w %d2,[%a4]36
}


IFX_INLINE Ifx_GTM_TOM_CH *IfxGtm_Tom_Ch_getChannelPointer(Ifx_GTM_TOM *tom, IfxGtm_Tom_Ch channel)
{
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002afe:	06 62       	sh %d2,6
80002b00:	60 32       	mov.a %a2,%d3
80002b02:	01 22 00 26 	addsc.a %a2,%a2,%d2,0

IFX_INLINE boolean IfxGtm_Tom_Ch_isZeroNotification(Ifx_GTM_TOM *tom, IfxGtm_Tom_Ch channel)
{
    boolean         notify;
    Ifx_GTM_TOM_CH *tomCh = IfxGtm_Tom_Ch_getChannelPointer(tom, channel);
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
80002b06:	d9 23 1c 00 	lea %a3,[%a2]28
80002b0a:	19 22 1c 00 	ld.w %d2,[%a2]28
80002b0e:	6f 02 08 00 	jz.t %d2,0,80002b1e <IfxGtm_Tom_Timer_acknowledgeTimerIrq+0x2a>
    tomCh->IRQ_NOTIFY.B.CCU0TC = 1;
80002b12:	54 32       	ld.w %d2,[%a3]
80002b14:	b7 12 01 20 	insert %d2,%d2,1,0,1
80002b18:	74 32       	st.w [%a3],%d2
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
80002b1a:	82 12       	mov %d2,1
}
80002b1c:	00 90       	ret 
    notify = (tomCh->IRQ_NOTIFY.B.CCU0TC != 0u) ? TRUE : FALSE;
80002b1e:	82 02       	mov %d2,0
    }
    else
    {}

    return event;
}
80002b20:	00 90       	ret 

80002b22 <IfxGtm_Tom_Timer_applyUpdate>:
    }
}


void IfxGtm_Tom_Timer_applyUpdate(IfxGtm_Tom_Timer *driver)
{
80002b22:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[0], driver->tgcGlobalControlApplyUpdate[0]);
80002b24:	99 42 18 00 	ld.a %a2,[%a4]24
}


IFX_INLINE void IfxGtm_Tom_Tgc_writeGlobalControl(Ifx_GTM_TOM_TGC *tgc, uint32 control)
{
    tgc->GLB_CTRL.U = control;
80002b28:	19 42 3c 00 	ld.w %d2,[%a4]60
80002b2c:	74 22       	st.w [%a2],%d2

    if (driver->tgc[1])
80002b2e:	99 42 1c 00 	ld.a %a2,[%a4]28
80002b32:	bd 02 05 00 	jz.a %a2,80002b3c <IfxGtm_Tom_Timer_applyUpdate+0x1a>
    {
        IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[1], driver->tgcGlobalControlApplyUpdate[1]);  /* Note: Write of 0 value has no effect */
80002b36:	19 42 00 10 	ld.w %d2,[%a4]64
80002b3a:	74 22       	st.w [%a2],%d2
    }
}
80002b3c:	00 90       	ret 

80002b3e <IfxGtm_Tom_Timer_disableUpdate>:


void IfxGtm_Tom_Timer_disableUpdate(IfxGtm_Tom_Timer *driver)
{
80002b3e:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[0], driver->tgcGlobalControlDisableUpdate[0]);
80002b40:	99 42 18 00 	ld.a %a2,[%a4]24
80002b44:	19 42 34 00 	ld.w %d2,[%a4]52
80002b48:	74 22       	st.w [%a2],%d2

    if (driver->tgc[1])
80002b4a:	99 42 1c 00 	ld.a %a2,[%a4]28
80002b4e:	bd 02 05 00 	jz.a %a2,80002b58 <IfxGtm_Tom_Timer_disableUpdate+0x1a>
    {
        IfxGtm_Tom_Tgc_writeGlobalControl(driver->tgc[1], driver->tgcGlobalControlDisableUpdate[1]); /* Note: Write of 0 value has no effect */
80002b52:	19 42 38 00 	ld.w %d2,[%a4]56
80002b56:	74 22       	st.w [%a2],%d2
    }
}
80002b58:	00 90       	ret 

80002b5a <IfxGtm_Tom_Timer_getPeriod>:
    return driver->offset;
}


Ifx_TimerValue IfxGtm_Tom_Timer_getPeriod(IfxGtm_Tom_Timer *driver)
{
80002b5a:	40 ae       	mov.aa %a14,%sp
    return driver->base.period;
}
80002b5c:	54 42       	ld.w %d2,[%a4]
80002b5e:	00 90       	ret 

80002b60 <IfxGtm_Tom_Timer_setPeriod>:
    return status;
}


boolean IfxGtm_Tom_Timer_setPeriod(IfxGtm_Tom_Timer *driver, Ifx_TimerValue period)
{
80002b60:	40 ae       	mov.aa %a14,%sp
    driver->base.period = period;
80002b62:	74 44       	st.w [%a4],%d4
    IfxGtm_Tom_Ch_setCompareZeroShadow(driver->tom, driver->timerChannel, (uint16)period);
80002b64:	19 43 24 00 	ld.w %d3,[%a4]36
80002b68:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002b6c:	06 63       	sh %d3,6
80002b6e:	99 42 14 00 	ld.a %a2,[%a4]20
80002b72:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->SR0.U = shadowZero;
80002b76:	59 24 04 00 	st.w [%a2]4,%d4

    if (driver->triggerChannel != driver->timerChannel)
80002b7a:	19 42 28 00 	ld.w %d2,[%a4]40
80002b7e:	19 43 24 00 	ld.w %d3,[%a4]36
80002b82:	5f 32 0a 00 	jeq %d2,%d3,80002b96 <IfxGtm_Tom_Timer_setPeriod+0x36>
    {
        IfxGtm_Tom_Ch_setCompareZeroShadow(driver->tom, driver->triggerChannel, (uint16)period);
80002b86:	19 43 14 00 	ld.w %d3,[%a4]20
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002b8a:	06 62       	sh %d2,6
80002b8c:	60 32       	mov.a %a2,%d3
80002b8e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->SR0.U = shadowZero;
80002b92:	59 24 04 00 	st.w [%a2]4,%d4
    }

    return TRUE;
}
80002b96:	82 12       	mov %d2,1
80002b98:	00 90       	ret 

80002b9a <IfxGtm_Tom_Timer_setFrequency>:
{
80002b9a:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue period = IfxStdIf_Timer_sToTick(driver->base.clockFreq, 1.0f / frequency);
80002b9c:	19 43 08 00 	ld.w %d3,[%a4]8
80002ba0:	7b 00 f8 23 	movh %d2,16256
80002ba4:	4b 42 51 20 	div.f %d2,%d2,%d4
 * \param  seconds time value in seconds to be converted
 * \return Return the converted time in timer ticks
 */
IFX_INLINE Ifx_TimerValue IfxStdIf_Timer_sToTick(float32 clockFreq, float32 seconds)
{
    return seconds * clockFreq;
80002ba8:	4b 23 41 20 	mul.f %d2,%d3,%d2
80002bac:	4b 02 71 41 	ftouz %d4,%d2
    if ((period & (0xFFFF << 16)) != 0)
80002bb0:	b7 04 10 20 	insert %d2,%d4,0,0,16
80002bb4:	df 02 04 00 	jeq %d2,0,80002bbc <IfxGtm_Tom_Timer_setFrequency+0x22>
        status = FALSE;
80002bb8:	82 02       	mov %d2,0
}
80002bba:	00 90       	ret 
        IfxGtm_Tom_Timer_setPeriod(driver, period);
80002bbc:	6d ff d2 ff 	call 80002b60 <IfxGtm_Tom_Timer_setPeriod>
    boolean        status = TRUE;
80002bc0:	82 12       	mov %d2,1
80002bc2:	00 90       	ret 

80002bc4 <IfxGtm_Tom_Timer_setTrigger>:
    IfxGtm_Tom_Ch_setOneShotMode(driver->tom, driver->timerChannel, enabled);
}


void IfxGtm_Tom_Timer_setTrigger(IfxGtm_Tom_Timer *driver, Ifx_TimerValue triggerPoint)
{
80002bc4:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_Ch_setCompareOneShadow(driver->tom, driver->triggerChannel, (uint16)triggerPoint + 1);
80002bc6:	19 43 14 00 	ld.w %d3,[%a4]20
80002bca:	19 42 28 00 	ld.w %d2,[%a4]40
80002bce:	37 04 70 40 	extr.u %d4,%d4,0,16
80002bd2:	c2 14       	add %d4,1
80002bd4:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002bd8:	06 62       	sh %d2,6
80002bda:	60 32       	mov.a %a2,%d3
80002bdc:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->SR1.U = shadowOne;
80002be0:	59 24 08 00 	st.w [%a2]8,%d4
}
80002be4:	00 90       	ret 

80002be6 <IfxGtm_Tom_Timer_run>:
{
80002be6:	40 ae       	mov.aa %a14,%sp
80002be8:	40 4c       	mov.aa %a12,%a4
    IfxGtm_Tom_Tgc_enableChannels(driver->tgc[0], driver->channelsMask[0], 0, TRUE);
80002bea:	99 4d 18 00 	ld.a %a13,[%a4]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80002bee:	82 06       	mov %d6,0
80002bf0:	82 05       	mov %d5,0
80002bf2:	b9 44 2c 00 	ld.hu %d4,[%a4]44
80002bf6:	6d 00 f3 0a 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80002bfa:	59 d2 00 10 	st.w [%a13]64,%d2
        tgc->ENDIS_STAT.U = value;
80002bfe:	59 d2 04 10 	st.w [%a13]68,%d2
    if (driver->tgc[1])
80002c02:	99 cd 1c 00 	ld.a %a13,[%a12]28
80002c06:	bd 0d 0c 00 	jz.a %a13,80002c1e <IfxGtm_Tom_Timer_run+0x38>
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80002c0a:	82 06       	mov %d6,0
80002c0c:	82 05       	mov %d5,0
80002c0e:	b9 c4 2e 00 	ld.hu %d4,[%a12]46
80002c12:	6d 00 e5 0a 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80002c16:	59 d2 00 10 	st.w [%a13]64,%d2
        tgc->ENDIS_STAT.U = value;
80002c1a:	59 d2 04 10 	st.w [%a13]68,%d2
}
80002c1e:	00 90       	ret 

80002c20 <IfxGtm_Tom_Timer_updateInputFrequency>:
    }
}


void IfxGtm_Tom_Timer_updateInputFrequency(IfxGtm_Tom_Timer *driver)
{
80002c20:	40 ae       	mov.aa %a14,%sp
80002c22:	20 18       	sub.a %sp,24
80002c24:	40 4c       	mov.aa %a12,%a4
    driver->base.clockFreq = IfxGtm_Tom_Ch_getClockFrequency(driver->gtm, driver->tom, driver->timerChannel);
80002c26:	99 44 10 00 	ld.a %a4,[%a4]16
80002c2a:	19 c2 24 00 	ld.w %d2,[%a12]36
    IfxGtm_Cmu_Fxclk     clkIndex[5] = {
80002c2e:	91 00 00 26 	movh.a %a2,24576
80002c32:	d9 22 28 00 	lea %a2,[%a2]40 <60000028 <LCF_DSPR1_START+0x28>>
80002c36:	d9 e3 ec ff 	lea %a3,[%a14]-20 <60000028 <LCF_DSPR1_START+0x28>>
80002c3a:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
80002c3e:	89 34 48 01 	st.d [%a3+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80002c42:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
80002c46:	89 34 48 01 	st.d [%a3+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80002c4a:	44 24       	ld.w %d4,[%a2+]
80002c4c:	64 34       	st.w [%a3+],%d4
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002c4e:	06 62       	sh %d2,6
80002c50:	99 c2 14 00 	ld.a %a2,[%a12]20
80002c54:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    clk = (IfxGtm_Tom_Ch_ClkSrc)tomCh->CTRL.B.CLK_SRC_SR;
80002c58:	54 22       	ld.w %d2,[%a2]
80002c5a:	37 02 63 26 	extr.u %d2,%d2,12,3
    if (clk == IfxGtm_Tom_Ch_ClkSrc_noClock)
80002c5e:	df 52 06 80 	jne %d2,5,80002c6a <IfxGtm_Tom_Timer_updateInputFrequency+0x4a>
        return (float32)0.0f;
80002c62:	82 02       	mov %d2,0
80002c64:	59 c2 08 00 	st.w [%a12]8,%d2
}
80002c68:	00 90       	ret 
        return IfxGtm_Cmu_getFxClkFrequency(gtm, clkIndex[clk], TRUE);
80002c6a:	06 22       	sh %d2,2
80002c6c:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
80002c70:	82 15       	mov %d5,1
80002c72:	19 24 ec ff 	ld.w %d4,[%a2]-20
80002c76:	6d 00 b1 09 	call 80003fd8 <IfxGtm_Cmu_getFxClkFrequency>
80002c7a:	1d ff f5 ff 	j 80002c64 <IfxGtm_Tom_Timer_updateInputFrequency+0x44>

80002c7e <IfxGtm_Tom_Timer_addToChannelMask>:
{
80002c7e:	40 ae       	mov.aa %a14,%sp
80002c80:	40 4c       	mov.aa %a12,%a4
    if (driver->timerChannel <= IfxGtm_Tom_Ch_7)
80002c82:	19 42 24 00 	ld.w %d2,[%a4]36
80002c86:	8b 82 80 22 	ge %d2,%d2,8
80002c8a:	df 02 39 80 	jne %d2,0,80002cfc <IfxGtm_Tom_Timer_addToChannelMask+0x7e>
        if (channel <= IfxGtm_Tom_Ch_7)
80002c8e:	8b 84 80 22 	ge %d2,%d4,8
80002c92:	df 02 1b 80 	jne %d2,0,80002cc8 <IfxGtm_Tom_Timer_addToChannelMask+0x4a>
            driver->channelsMask[0]                 |= 1 << channel;
80002c96:	c9 42 2c 00 	ld.h %d2,[%a4]44
80002c9a:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
80002c9e:	37 02 70 50 	extr.u %d5,%d2,0,16
80002ca2:	f9 45 2c 00 	st.h [%a4]44,%d5
            driver->tgcGlobalControlDisableUpdate[0] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[0], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002ca6:	3b 00 01 60 	mov %d6,16
80002caa:	82 04       	mov %d4,0
80002cac:	6d 00 98 0a 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80002cb0:	59 c2 34 00 	st.w [%a12]52,%d2
            driver->tgcGlobalControlApplyUpdate[0]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[0], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002cb4:	3b 00 01 60 	mov %d6,16
80002cb8:	82 05       	mov %d5,0
80002cba:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
80002cbe:	6d 00 8f 0a 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80002cc2:	59 c2 3c 00 	st.w [%a12]60,%d2
80002cc6:	00 90       	ret 
            driver->channelsMask[1]                 |= 1 << (channel - IfxGtm_Tom_Ch_8);
80002cc8:	c2 84       	add %d4,-8
80002cca:	c9 42 2e 00 	ld.h %d2,[%a4]46
80002cce:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
80002cd2:	37 02 70 50 	extr.u %d5,%d2,0,16
80002cd6:	f9 45 2e 00 	st.h [%a4]46,%d5
            driver->tgcGlobalControlDisableUpdate[1] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[1], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002cda:	3b 00 01 60 	mov %d6,16
80002cde:	82 04       	mov %d4,0
80002ce0:	6d 00 7e 0a 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80002ce4:	59 c2 38 00 	st.w [%a12]56,%d2
            driver->tgcGlobalControlApplyUpdate[1]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[1], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002ce8:	3b 00 01 60 	mov %d6,16
80002cec:	82 05       	mov %d5,0
80002cee:	b9 c4 2e 00 	ld.hu %d4,[%a12]46
80002cf2:	6d 00 75 0a 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80002cf6:	59 c2 00 10 	st.w [%a12]64,%d2
80002cfa:	00 90       	ret 
        driver->channelsMask[0]                 |= 1 << (channel - IfxGtm_Tom_Ch_8);
80002cfc:	c2 84       	add %d4,-8
80002cfe:	c9 42 2c 00 	ld.h %d2,[%a4]44
80002d02:	d7 12 01 24 	insert %d2,%d2,1,%d4,1
80002d06:	37 02 70 50 	extr.u %d5,%d2,0,16
80002d0a:	f9 45 2c 00 	st.h [%a4]44,%d5
        driver->tgcGlobalControlDisableUpdate[0] = IfxGtm_Tom_Tgc_buildFeature(0, driver->channelsMask[0], IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002d0e:	3b 00 01 60 	mov %d6,16
80002d12:	82 04       	mov %d4,0
80002d14:	6d 00 64 0a 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80002d18:	59 c2 34 00 	st.w [%a12]52,%d2
        driver->tgcGlobalControlApplyUpdate[0]   = IfxGtm_Tom_Tgc_buildFeature(driver->channelsMask[0], 0, IFX_GTM_TOM_TGC0_GLB_CTRL_UPEN_CTRL0_OFF);
80002d1c:	3b 00 01 60 	mov %d6,16
80002d20:	82 05       	mov %d5,0
80002d22:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
80002d26:	6d 00 5b 0a 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80002d2a:	59 c2 3c 00 	st.w [%a12]60,%d2
}
80002d2e:	00 90       	ret 

80002d30 <IfxGtm_Tom_Timer_getOffset>:
{
80002d30:	40 ae       	mov.aa %a14,%sp
}
80002d32:	19 42 30 00 	ld.w %d2,[%a4]48
80002d36:	00 90       	ret 

80002d38 <IfxGtm_Tom_Timer_init>:
{
80002d38:	40 ae       	mov.aa %a14,%sp
80002d3a:	40 4c       	mov.aa %a12,%a4
80002d3c:	40 5d       	mov.aa %a13,%a5
    driver->gtm          = config->gtm;
80002d3e:	d9 53 34 00 	lea %a3,[%a5]52
80002d42:	19 52 34 00 	ld.w %d2,[%a5]52
80002d46:	59 42 10 00 	st.w [%a4]16,%d2
    driver->tomIndex     = config->tom;
80002d4a:	19 52 38 00 	ld.w %d2,[%a5]56
80002d4e:	59 42 20 00 	st.w [%a4]32,%d2
    driver->tom          = &config->gtm->TOM[config->tom];
80002d52:	1b 02 01 20 	addi %d2,%d2,16
80002d56:	8f b2 00 20 	sh %d2,%d2,11
80002d5a:	54 33       	ld.w %d3,[%a3]
80002d5c:	0b 23 00 50 	add %d5,%d3,%d2
80002d60:	59 45 14 00 	st.w [%a4]20,%d5
    driver->timerChannel = config->timerChannel;
80002d64:	19 54 3c 00 	ld.w %d4,[%a5]60
80002d68:	59 44 24 00 	st.w [%a4]36,%d4
    base->triggerEnabled = config->base.trigger.enabled;
80002d6c:	39 52 10 00 	ld.bu %d2,[%a5]16
80002d70:	e9 42 04 00 	st.b [%a4]4,%d2
    if (base->triggerEnabled)
80002d74:	df 02 0d 00 	jeq %d2,0,80002d8e <IfxGtm_Tom_Timer_init+0x56>
        if (config->triggerOut != NULL_PTR)
80002d78:	99 52 00 10 	ld.a %a2,[%a5]64
80002d7c:	bd 02 5b 00 	jz.a %a2,80002e32 <IfxGtm_Tom_Timer_init+0xfa>
            driver->triggerChannel = config->triggerOut->channel;
80002d80:	19 22 04 00 	ld.w %d2,[%a2]4
80002d84:	59 42 28 00 	st.w [%a4]40,%d2
    boolean                result = TRUE;
80002d88:	82 18       	mov %d8,1
80002d8a:	1d 00 05 00 	j 80002d94 <IfxGtm_Tom_Timer_init+0x5c>
        driver->triggerChannel = driver->timerChannel; // Set to timer channel to disable its use
80002d8e:	59 44 28 00 	st.w [%a4]40,%d4
    boolean                result = TRUE;
80002d92:	82 18       	mov %d8,1
    if (config->timerChannel <= 7)
80002d94:	19 d2 3c 00 	ld.w %d2,[%a13]60
80002d98:	8b 82 80 22 	ge %d2,%d2,8
80002d9c:	df 02 4e 80 	jne %d2,0,80002e38 <IfxGtm_Tom_Timer_init+0x100>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC0_GLB_CTRL;
80002da0:	1b 05 03 20 	addi %d2,%d5,48
        driver->tgc[0] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 0);
80002da4:	59 c2 18 00 	st.w [%a12]24,%d2
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
80002da8:	1b 05 23 20 	addi %d2,%d5,560
        driver->tgc[1] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
80002dac:	59 c2 1c 00 	st.w [%a12]28,%d2
    driver->channelsMask[0]                  = 0;
80002db0:	82 02       	mov %d2,0
80002db2:	f9 c2 2c 00 	st.h [%a12]44,%d2
    driver->tgcGlobalControlApplyUpdate[0]   = 0;
80002db6:	82 03       	mov %d3,0
80002db8:	59 c3 3c 00 	st.w [%a12]60,%d3
    driver->tgcGlobalControlDisableUpdate[0] = 0;
80002dbc:	59 c3 34 00 	st.w [%a12]52,%d3
    driver->channelsMask[1]                  = 0;
80002dc0:	f9 c3 2e 00 	st.h [%a12]46,%d3
    driver->tgcGlobalControlApplyUpdate[1]   = 0;
80002dc4:	59 c3 00 10 	st.w [%a12]64,%d3
    driver->tgcGlobalControlDisableUpdate[1] = 0;
80002dc8:	59 c3 38 00 	st.w [%a12]56,%d3
    IfxGtm_Tom_Ch_setClockSource(driver->tom, driver->timerChannel, config->clock);
80002dcc:	19 d6 04 10 	ld.w %d6,[%a13]68
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002dd0:	06 64       	sh %d4,6
80002dd2:	60 52       	mov.a %a2,%d5
80002dd4:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
80002dd8:	54 23       	ld.w %d3,[%a2]
80002dda:	37 63 03 36 	insert %d3,%d3,%d6,12,3
80002dde:	74 23       	st.w [%a2],%d3
    IfxGtm_Tom_Ch_setTriggerOutput(driver->tom, driver->timerChannel, IfxGtm_Tom_Ch_OutputTrigger_generate);
80002de0:	19 c2 24 00 	ld.w %d2,[%a12]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002de4:	06 62       	sh %d2,6
80002de6:	99 c2 14 00 	ld.a %a2,[%a12]20
80002dea:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
80002dee:	54 23       	ld.w %d3,[%a2]
80002df0:	b7 13 01 3c 	insert %d3,%d3,1,24,1
80002df4:	74 23       	st.w [%a2],%d3
    IfxGtm_Tom_Timer_updateInputFrequency(driver);
80002df6:	40 c4       	mov.aa %a4,%a12
80002df8:	6d ff 14 ff 	call 80002c20 <IfxGtm_Tom_Timer_updateInputFrequency>
    if ((config->base.minResolution > 0) && ((1.0f / base->clockFreq) > config->base.minResolution))
80002dfc:	19 d2 0c 00 	ld.w %d2,[%a13]12
80002e00:	82 03       	mov %d3,0
80002e02:	4b 32 01 30 	cmp.f %d3,%d2,%d3
80002e06:	6f 23 0d 00 	jz.t %d3,2,80002e20 <IfxGtm_Tom_Timer_init+0xe8>
80002e0a:	19 c4 08 00 	ld.w %d4,[%a12]8
80002e0e:	7b 00 f8 33 	movh %d3,16256
80002e12:	4b 43 51 30 	div.f %d3,%d3,%d4
80002e16:	4b 32 01 20 	cmp.f %d2,%d2,%d3
80002e1a:	6f 02 03 00 	jz.t %d2,0,80002e20 <IfxGtm_Tom_Timer_init+0xe8>
        result = FALSE;
80002e1e:	82 08       	mov %d8,0
    result &= IfxGtm_Tom_Timer_setFrequency(driver, config->base.frequency);
80002e20:	54 d4       	ld.w %d4,[%a13]
80002e22:	40 c4       	mov.aa %a4,%a12
80002e24:	6d ff bb fe 	call 80002b9a <IfxGtm_Tom_Timer_setFrequency>
80002e28:	26 28       	and %d8,%d2
    if (result == TRUE)
80002e2a:	df 08 10 80 	jne %d8,0,80002e4a <IfxGtm_Tom_Timer_init+0x112>
}
80002e2e:	02 82       	mov %d2,%d8
80002e30:	00 90       	ret 
            result = FALSE;
80002e32:	82 08       	mov %d8,0
80002e34:	1d ff b0 ff 	j 80002d94 <IfxGtm_Tom_Timer_init+0x5c>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
80002e38:	1b 05 23 20 	addi %d2,%d5,560
        driver->tgc[0] = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
80002e3c:	59 c2 18 00 	st.w [%a12]24,%d2
        driver->tgc[1] = NULL_PTR; /* NOTE currently no concatenation between TOMs */
80002e40:	82 02       	mov %d2,0
80002e42:	59 c2 1c 00 	st.w [%a12]28,%d2
80002e46:	1d ff b5 ff 	j 80002db0 <IfxGtm_Tom_Timer_init+0x78>
        driver->offset = IfxStdIf_Timer_sToTick(driver->base.clockFreq, 1.0f / config->base.frequency * config->base.startOffset);
80002e4a:	19 c3 08 00 	ld.w %d3,[%a12]8
80002e4e:	54 d4       	ld.w %d4,[%a13]
80002e50:	7b 00 f8 23 	movh %d2,16256
80002e54:	4b 42 51 20 	div.f %d2,%d2,%d4
80002e58:	19 d4 30 00 	ld.w %d4,[%a13]48
80002e5c:	4b 42 41 20 	mul.f %d2,%d2,%d4
80002e60:	4b 23 41 20 	mul.f %d2,%d3,%d2
80002e64:	4b 02 71 21 	ftouz %d2,%d2
80002e68:	59 c2 30 00 	st.w [%a12]48,%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, driver->timerChannel, driver->offset);
80002e6c:	19 c3 24 00 	ld.w %d3,[%a12]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002e70:	06 63       	sh %d3,6
80002e72:	99 c2 14 00 	ld.a %a2,[%a12]20
80002e76:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CN0.U = value;
80002e7a:	59 22 14 00 	st.w [%a2]20,%d2
        maskShift = (config->timerChannel <= 7) ? 0 : 8;
80002e7e:	19 d2 3c 00 	ld.w %d2,[%a13]60
80002e82:	8b 82 80 22 	ge %d2,%d2,8
80002e86:	df 02 53 80 	jne %d2,0,80002f2c <IfxGtm_Tom_Timer_init+0x1f4>
80002e8a:	82 09       	mov %d9,0
        IfxGtm_Tom_Timer_addToChannelMask(driver, driver->timerChannel);
80002e8c:	19 c4 24 00 	ld.w %d4,[%a12]36
80002e90:	40 c4       	mov.aa %a4,%a12
80002e92:	6d ff f6 fe 	call 80002c7e <IfxGtm_Tom_Timer_addToChannelMask>
        if (base->triggerEnabled)
80002e96:	39 c2 04 00 	ld.bu %d2,[%a12]4
80002e9a:	df 02 3a 00 	jeq %d2,0,80002f0e <IfxGtm_Tom_Timer_init+0x1d6>
            IfxGtm_Tom_Ch triggerChannel     = driver->triggerChannel;
80002e9e:	19 c3 28 00 	ld.w %d3,[%a12]40
            uint16        triggerChannelMask = 1 << (triggerChannel - maskShift);
80002ea2:	0b 93 80 20 	sub %d2,%d3,%d9
80002ea6:	82 19       	mov %d9,1
80002ea8:	0f 29 00 90 	sh %d9,%d9,%d2
            IfxGtm_Tom_Ch_setSignalLevel(driver->tom, triggerChannel, config->base.trigger.risingEdgeAtPeriod ? Ifx_ActiveState_high : Ifx_ActiveState_low);
80002eac:	39 d2 28 00 	ld.bu %d2,[%a13]40
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002eb0:	8f 63 00 40 	sh %d4,%d3,6
80002eb4:	99 c2 14 00 	ld.a %a2,[%a12]20
80002eb8:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002ebc:	df 02 3c 80 	jne %d2,0,80002f34 <IfxGtm_Tom_Timer_init+0x1fc>
80002ec0:	82 05       	mov %d5,0
80002ec2:	54 22       	ld.w %d2,[%a2]
80002ec4:	67 52 0b 20 	ins.t %d2,%d2,11,%d5,0
80002ec8:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002eca:	99 c2 14 00 	ld.a %a2,[%a12]20
80002ece:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CN0.U = value;
80002ed2:	19 c2 30 00 	ld.w %d2,[%a12]48
80002ed6:	59 22 14 00 	st.w [%a2]20,%d2
            if (triggerChannel != driver->timerChannel)
80002eda:	19 c2 24 00 	ld.w %d2,[%a12]36
80002ede:	5f 32 2e 80 	jne %d2,%d3,80002f3a <IfxGtm_Tom_Timer_init+0x202>
            IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc[0], triggerChannelMask, 0, FALSE);
80002ee2:	cc c6       	ld.a %a15,[%a12]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
80002ee4:	82 06       	mov %d6,0
80002ee6:	82 05       	mov %d5,0
80002ee8:	37 09 70 40 	extr.u %d4,%d9,0,16
80002eec:	6d 00 78 09 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
80002ef0:	59 f2 08 10 	st.w [%a15]72,%d2
            if ((config->base.trigger.outputEnabled) && (config->initPins == TRUE))
80002ef4:	39 d2 29 00 	ld.bu %d2,[%a13]41
80002ef8:	df 02 06 00 	jeq %d2,0,80002f04 <IfxGtm_Tom_Timer_init+0x1cc>
80002efc:	39 d2 10 10 	ld.bu %d2,[%a13]80
80002f00:	df 12 47 00 	jeq %d2,1,80002f8e <IfxGtm_Tom_Timer_init+0x256>
            IfxGtm_Tom_Timer_setTrigger(driver, config->base.trigger.triggerPoint);
80002f04:	19 d4 14 00 	ld.w %d4,[%a13]20
80002f08:	40 c4       	mov.aa %a4,%a12
80002f0a:	6d ff 5d fe 	call 80002bc4 <IfxGtm_Tom_Timer_setTrigger>
            boolean                timerHasIrq   = config->base.isrPriority > 0;
80002f0e:	b9 d2 04 00 	ld.hu %d2,[%a13]4
80002f12:	8b 02 20 62 	ne %d6,%d2,0
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
80002f16:	b9 d3 18 00 	ld.hu %d3,[%a13]24
80002f1a:	df 03 44 00 	jeq %d3,0,80002fa2 <IfxGtm_Tom_Timer_init+0x26a>
80002f1e:	39 c3 04 00 	ld.bu %d3,[%a12]4
80002f22:	df 03 ce 80 	jne %d3,0,800030be <IfxGtm_Tom_Timer_init+0x386>
80002f26:	82 05       	mov %d5,0
80002f28:	1d 00 3e 00 	j 80002fa4 <IfxGtm_Tom_Timer_init+0x26c>
        maskShift = (config->timerChannel <= 7) ? 0 : 8;
80002f2c:	3b 80 00 90 	mov %d9,8
80002f30:	1d ff ae ff 	j 80002e8c <IfxGtm_Tom_Timer_init+0x154>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80002f34:	82 15       	mov %d5,1
80002f36:	1d ff c6 ff 	j 80002ec2 <IfxGtm_Tom_Timer_init+0x18a>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002f3a:	99 c2 14 00 	ld.a %a2,[%a12]20
80002f3e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
80002f42:	54 22       	ld.w %d2,[%a2]
80002f44:	b7 12 01 2a 	insert %d2,%d2,1,20,1
80002f48:	74 22       	st.w [%a2],%d2
                IfxGtm_Tom_Ch_setClockSource(driver->tom, triggerChannel, config->clock);
80002f4a:	19 d3 04 10 	ld.w %d3,[%a13]68
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002f4e:	99 c2 14 00 	ld.a %a2,[%a12]20
80002f52:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
80002f56:	54 22       	ld.w %d2,[%a2]
80002f58:	37 32 03 26 	insert %d2,%d2,%d3,12,3
80002f5c:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002f5e:	99 c2 14 00 	ld.a %a2,[%a12]20
80002f62:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
80002f66:	54 22       	ld.w %d2,[%a2]
80002f68:	b7 02 01 2c 	insert %d2,%d2,0,24,1
80002f6c:	74 22       	st.w [%a2],%d2
                IfxGtm_Tom_Tgc_enableChannels(driver->tgc[0], triggerChannelMask, 0, FALSE);
80002f6e:	cc c6       	ld.a %a15,[%a12]24
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80002f70:	82 06       	mov %d6,0
80002f72:	82 05       	mov %d5,0
80002f74:	37 09 70 40 	extr.u %d4,%d9,0,16
80002f78:	6d 00 32 09 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80002f7c:	59 f2 00 10 	st.w [%a15]64,%d2
                IfxGtm_Tom_Timer_addToChannelMask(driver, driver->triggerChannel);
80002f80:	19 c4 28 00 	ld.w %d4,[%a12]40
80002f84:	40 c4       	mov.aa %a4,%a12
80002f86:	6d ff 7c fe 	call 80002c7e <IfxGtm_Tom_Timer_addToChannelMask>
80002f8a:	1d ff ac ff 	j 80002ee2 <IfxGtm_Tom_Timer_init+0x1aa>
                IfxGtm_PinMap_setTomTout(config->triggerOut, config->base.trigger.outputMode, config->base.trigger.outputDriver);
80002f8e:	19 d5 24 00 	ld.w %d5,[%a13]36
80002f92:	19 d4 20 00 	ld.w %d4,[%a13]32
80002f96:	99 d4 00 10 	ld.a %a4,[%a13]64
80002f9a:	6d ff 25 ee 	call 80000be4 <IfxGtm_PinMap_setTomTout>
80002f9e:	1d ff b3 ff 	j 80002f04 <IfxGtm_Tom_Timer_init+0x1cc>
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
80002fa2:	82 05       	mov %d5,0
80002fa4:	8f f5 0f 51 	and %d5,%d5,255
            if (driver->triggerChannel == driver->timerChannel)
80002fa8:	19 c4 28 00 	ld.w %d4,[%a12]40
80002fac:	19 c3 24 00 	ld.w %d3,[%a12]36
80002fb0:	5f 34 8a 00 	jeq %d4,%d3,800030c4 <IfxGtm_Tom_Timer_init+0x38c>
                if (timerHasIrq)
80002fb4:	df 02 41 00 	jeq %d2,0,80003036 <IfxGtm_Tom_Timer_init+0x2fe>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80002fb8:	06 63       	sh %d3,6
80002fba:	99 c2 14 00 	ld.a %a2,[%a12]20
80002fbe:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    en.U = tomCh->IRQ_EN.U;
80002fc2:	d9 23 20 00 	lea %a3,[%a2]32
80002fc6:	19 24 20 00 	ld.w %d4,[%a2]32
80002fca:	02 42       	mov %d2,%d4
    tomCh->IRQ_EN.U            = IFX_ZEROS;
80002fcc:	82 03       	mov %d3,0
80002fce:	74 33       	st.w [%a3],%d3
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
80002fd0:	d9 23 28 00 	lea %a3,[%a2]40
80002fd4:	19 23 28 00 	ld.w %d3,[%a2]40
80002fd8:	b7 23 02 30 	insert %d3,%d3,2,0,2
80002fdc:	74 33       	st.w [%a3],%d3
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
80002fde:	d9 23 20 00 	lea %a3,[%a2]32
80002fe2:	59 24 20 00 	st.w [%a2]32,%d4
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
80002fe6:	b7 12 01 20 	insert %d2,%d2,1,0,1
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
80002fea:	8f 22 c0 21 	andn %d2,%d2,2
    tomCh->IRQ_EN.U            = en.U;
80002fee:	74 32       	st.w [%a3],%d2
                    src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->timerChannel);
80002ff0:	19 d3 38 00 	ld.w %d3,[%a13]56
80002ff4:	19 c2 24 00 	ld.w %d2,[%a12]36
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
80002ff8:	86 f2       	sha %d2,-1
80002ffa:	06 33       	sh %d3,3
80002ffc:	42 32       	add %d2,%d3
80002ffe:	06 22       	sh %d2,2
80003000:	7b 40 00 3f 	movh %d3,61444
80003004:	1b 03 b8 39 	addi %d3,%d3,-25728
80003008:	60 32       	mov.a %a2,%d3
8000300a:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
                    IfxSrc_init(src, config->base.isrProvider, config->base.isrPriority);
8000300e:	19 d4 08 00 	ld.w %d4,[%a13]8
    src->B.SRPN = priority;
80003012:	39 d3 04 00 	ld.bu %d3,[%a13]4
80003016:	54 22       	ld.w %d2,[%a2]
80003018:	37 32 08 20 	insert %d2,%d2,%d3,0,8
8000301c:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
8000301e:	54 22       	ld.w %d2,[%a2]
80003020:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80003024:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80003026:	54 22       	ld.w %d2,[%a2]
80003028:	b7 12 81 2c 	insert %d2,%d2,1,25,1
8000302c:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
8000302e:	54 22       	ld.w %d2,[%a2]
80003030:	b7 12 01 25 	insert %d2,%d2,1,10,1
80003034:	74 22       	st.w [%a2],%d2
                if (triggerHasIrq)
80003036:	df 05 8f 00 	jeq %d5,0,80003154 <IfxGtm_Tom_Timer_init+0x41c>
                    IfxGtm_Tom_Ch_setNotification(driver->tom, driver->triggerChannel, irqMode, FALSE, TRUE);
8000303a:	19 c2 28 00 	ld.w %d2,[%a12]40
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000303e:	06 62       	sh %d2,6
80003040:	99 c2 14 00 	ld.a %a2,[%a12]20
80003044:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    en.U = tomCh->IRQ_EN.U;
80003048:	d9 23 20 00 	lea %a3,[%a2]32
8000304c:	19 23 20 00 	ld.w %d3,[%a2]32
    tomCh->IRQ_EN.U            = IFX_ZEROS;
80003050:	82 02       	mov %d2,0
80003052:	74 32       	st.w [%a3],%d2
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
80003054:	d9 23 28 00 	lea %a3,[%a2]40
80003058:	19 22 28 00 	ld.w %d2,[%a2]40
8000305c:	b7 22 02 20 	insert %d2,%d2,2,0,2
80003060:	74 32       	st.w [%a3],%d2
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
80003062:	d9 23 20 00 	lea %a3,[%a2]32
80003066:	59 23 20 00 	st.w [%a2]32,%d3
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
8000306a:	8f 13 c0 31 	andn %d3,%d3,1
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
8000306e:	b7 13 81 30 	insert %d3,%d3,1,1,1
    tomCh->IRQ_EN.U            = en.U;
80003072:	74 33       	st.w [%a3],%d3
                    src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->triggerChannel);
80003074:	19 d3 38 00 	ld.w %d3,[%a13]56
80003078:	19 c2 28 00 	ld.w %d2,[%a12]40
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
8000307c:	86 f2       	sha %d2,-1
8000307e:	06 33       	sh %d3,3
80003080:	42 32       	add %d2,%d3
80003082:	06 22       	sh %d2,2
80003084:	7b 40 00 3f 	movh %d3,61444
80003088:	1b 03 b8 39 	addi %d3,%d3,-25728
8000308c:	60 32       	mov.a %a2,%d3
8000308e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
                    IfxSrc_init(src, config->base.trigger.isrProvider, config->base.trigger.isrPriority);
80003092:	19 d4 1c 00 	ld.w %d4,[%a13]28
    src->B.SRPN = priority;
80003096:	39 d3 18 00 	ld.bu %d3,[%a13]24
8000309a:	54 22       	ld.w %d2,[%a2]
8000309c:	37 32 08 20 	insert %d2,%d2,%d3,0,8
800030a0:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800030a2:	54 22       	ld.w %d2,[%a2]
800030a4:	37 42 82 25 	insert %d2,%d2,%d4,11,2
800030a8:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
800030aa:	54 22       	ld.w %d2,[%a2]
800030ac:	b7 12 81 2c 	insert %d2,%d2,1,25,1
800030b0:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
800030b2:	54 22       	ld.w %d2,[%a2]
800030b4:	b7 12 01 25 	insert %d2,%d2,1,10,1
800030b8:	74 22       	st.w [%a2],%d2
}
800030ba:	1d 00 4d 00 	j 80003154 <IfxGtm_Tom_Timer_init+0x41c>
            boolean                triggerHasIrq = (config->base.trigger.isrPriority > 0) && base->triggerEnabled;
800030be:	82 15       	mov %d5,1
800030c0:	1d ff 72 ff 	j 80002fa4 <IfxGtm_Tom_Timer_init+0x26c>
                IfxGtm_Tom_Ch_setNotification(driver->tom, driver->timerChannel, timerHasIrq ? config->irqModeTimer : config->irqModeTrigger, timerHasIrq, triggerHasIrq);
800030c4:	19 c4 14 00 	ld.w %d4,[%a12]20
800030c8:	df 02 70 00 	jeq %d2,0,800031a8 <IfxGtm_Tom_Timer_init+0x470>
800030cc:	19 d7 08 10 	ld.w %d7,[%a13]72
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800030d0:	06 63       	sh %d3,6
800030d2:	60 42       	mov.a %a2,%d4
800030d4:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    en.U = tomCh->IRQ_EN.U;
800030d8:	d9 23 20 00 	lea %a3,[%a2]32
800030dc:	19 20 20 00 	ld.w %d0,[%a2]32
800030e0:	02 03       	mov %d3,%d0
    tomCh->IRQ_EN.U            = IFX_ZEROS;
800030e2:	82 04       	mov %d4,0
800030e4:	74 34       	st.w [%a3],%d4
    tomCh->IRQ_MODE.B.IRQ_MODE = mode;
800030e6:	d9 23 28 00 	lea %a3,[%a2]40
800030ea:	19 24 28 00 	ld.w %d4,[%a2]40
800030ee:	37 74 02 40 	insert %d4,%d4,%d7,0,2
800030f2:	74 34       	st.w [%a3],%d4
    tomCh->IRQ_EN.U            = en.U; /* Set the values back */
800030f4:	d9 23 20 00 	lea %a3,[%a2]32
800030f8:	59 20 20 00 	st.w [%a2]32,%d0
    en.B.CCU0TC_IRQ_EN         = interruptOnCompareZero ? 1 : 0;
800030fc:	67 63 00 30 	ins.t %d3,%d3,0,%d6,0
    en.B.CCU1TC_IRQ_EN         = interruptOnCompareOne ? 1 : 0;
80003100:	67 53 01 30 	ins.t %d3,%d3,1,%d5,0
    tomCh->IRQ_EN.U            = en.U;
80003104:	74 33       	st.w [%a3],%d3
                src = IfxGtm_Tom_Ch_getSrcPointer(driver->gtm, config->tom, driver->timerChannel);
80003106:	19 d4 38 00 	ld.w %d4,[%a13]56
8000310a:	19 c3 24 00 	ld.w %d3,[%a12]36
    return &MODULE_SRC.GTM.GTM[0].TOM[tom][channel >> 1];
8000310e:	86 f3       	sha %d3,-1
80003110:	06 34       	sh %d4,3
80003112:	42 43       	add %d3,%d4
80003114:	06 23       	sh %d3,2
80003116:	7b 40 00 4f 	movh %d4,61444
8000311a:	1b 04 b8 49 	addi %d4,%d4,-25728
8000311e:	60 42       	mov.a %a2,%d4
80003120:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
                IfxSrc_init(src, timerHasIrq ? config->base.isrProvider : config->base.trigger.isrProvider, timerHasIrq ? config->base.isrPriority : config->base.trigger.isrPriority);
80003124:	df 02 46 00 	jeq %d2,0,800031b0 <IfxGtm_Tom_Timer_init+0x478>
80003128:	19 d4 08 00 	ld.w %d4,[%a13]8
8000312c:	df 02 46 00 	jeq %d2,0,800031b8 <IfxGtm_Tom_Timer_init+0x480>
80003130:	b9 d3 04 00 	ld.hu %d3,[%a13]4
    src->B.SRPN = priority;
80003134:	54 22       	ld.w %d2,[%a2]
80003136:	37 32 08 20 	insert %d2,%d2,%d3,0,8
8000313a:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
8000313c:	54 22       	ld.w %d2,[%a2]
8000313e:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80003142:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80003144:	54 22       	ld.w %d2,[%a2]
80003146:	b7 12 81 2c 	insert %d2,%d2,1,25,1
8000314a:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
8000314c:	54 22       	ld.w %d2,[%a2]
8000314e:	b7 12 01 25 	insert %d2,%d2,1,10,1
80003152:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc[0], driver->channelsMask[0], 0, 0, 0);
80003154:	99 cd 18 00 	ld.a %a13,[%a12]24
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
80003158:	82 06       	mov %d6,0
8000315a:	82 05       	mov %d5,0
8000315c:	b9 c4 2c 00 	ld.hu %d4,[%a12]44
80003160:	6d 00 3e 08 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80003164:	02 29       	mov %d9,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
80003166:	3b 00 01 60 	mov %d6,16
8000316a:	82 05       	mov %d5,0
8000316c:	82 04       	mov %d4,0
8000316e:	6d 00 37 08 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
80003172:	a6 92       	or %d2,%d9
80003174:	59 d2 08 00 	st.w [%a13]8,%d2
        IfxGtm_Tom_Tgc_trigger(driver->tgc[0]);
80003178:	99 c2 18 00 	ld.a %a2,[%a12]24
    tgc->GLB_CTRL.U = 1 << IFX_GTM_TOM_TGC0_GLB_CTRL_HOST_TRIG_OFF;
8000317c:	82 12       	mov %d2,1
8000317e:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc[0], 0, driver->channelsMask[0], 0, 0);
80003180:	99 cd 18 00 	ld.a %a13,[%a12]24
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
80003184:	82 06       	mov %d6,0
80003186:	b9 c5 2c 00 	ld.hu %d5,[%a12]44
8000318a:	82 04       	mov %d4,0
8000318c:	6d 00 28 08 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80003190:	02 29       	mov %d9,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
80003192:	3b 00 01 60 	mov %d6,16
80003196:	82 05       	mov %d5,0
80003198:	82 04       	mov %d4,0
8000319a:	6d 00 21 08 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
8000319e:	a6 92       	or %d2,%d9
800031a0:	59 d2 08 00 	st.w [%a13]8,%d2
}
800031a4:	1d ff 45 fe 	j 80002e2e <IfxGtm_Tom_Timer_init+0xf6>
                IfxGtm_Tom_Ch_setNotification(driver->tom, driver->timerChannel, timerHasIrq ? config->irqModeTimer : config->irqModeTrigger, timerHasIrq, triggerHasIrq);
800031a8:	19 d7 0c 10 	ld.w %d7,[%a13]76
800031ac:	1d ff 92 ff 	j 800030d0 <IfxGtm_Tom_Timer_init+0x398>
                IfxSrc_init(src, timerHasIrq ? config->base.isrProvider : config->base.trigger.isrProvider, timerHasIrq ? config->base.isrPriority : config->base.trigger.isrPriority);
800031b0:	19 d4 1c 00 	ld.w %d4,[%a13]28
800031b4:	1d ff bc ff 	j 8000312c <IfxGtm_Tom_Timer_init+0x3f4>
800031b8:	b9 d3 18 00 	ld.hu %d3,[%a13]24
800031bc:	1d ff bc ff 	j 80003134 <IfxGtm_Tom_Timer_init+0x3fc>

800031c0 <IfxGtm_Tom_Timer_initConfig>:
{
800031c0:	40 ae       	mov.aa %a14,%sp
800031c2:	40 4c       	mov.aa %a12,%a4
800031c4:	80 58       	mov.d %d8,%a5
    IfxStdIf_Timer_initConfig(&config->base);
800031c6:	6d 00 fc 13 	call 800059be <IfxStdIf_Timer_initConfig>
    config->gtm            = gtm;
800031ca:	59 c8 34 00 	st.w [%a12]52,%d8
    config->tom            = IfxGtm_Tom_0;
800031ce:	82 02       	mov %d2,0
800031d0:	59 c2 38 00 	st.w [%a12]56,%d2
    config->timerChannel   = IfxGtm_Tom_Ch_0;
800031d4:	59 c2 3c 00 	st.w [%a12]60,%d2
    config->triggerOut     = NULL_PTR;
800031d8:	59 c2 00 10 	st.w [%a12]64,%d2
    config->clock          = IfxGtm_Tom_Ch_ClkSrc_cmuFxclk0;
800031dc:	59 c2 04 10 	st.w [%a12]68,%d2
    config->base.countDir  = IfxStdIf_Timer_CountDir_up;
800031e0:	59 c2 2c 00 	st.w [%a12]44,%d2
    config->irqModeTimer   = IfxGtm_IrqMode_level;
800031e4:	59 c2 08 10 	st.w [%a12]72,%d2
    config->irqModeTrigger = IfxGtm_IrqMode_level;
800031e8:	59 c2 0c 10 	st.w [%a12]76,%d2
    config->initPins       = TRUE;
800031ec:	82 12       	mov %d2,1
800031ee:	e9 c2 10 10 	st.b [%a12]80,%d2
}
800031f2:	00 90       	ret 

800031f4 <IfxGtm_Tom_PwmHl_setDeadtime>:
    config->initPins = TRUE;
}


boolean IfxGtm_Tom_PwmHl_setDeadtime(IfxGtm_Tom_PwmHl *driver, float32 deadtime)
{
800031f4:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue value = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, deadtime);
800031f6:	99 42 20 00 	ld.a %a2,[%a4]32
800031fa:	19 22 08 00 	ld.w %d2,[%a2]8
800031fe:	4b 42 41 20 	mul.f %d2,%d2,%d4
80003202:	4b 02 71 21 	ftouz %d2,%d2
    driver->base.deadtime = value;
80003206:	74 42       	st.w [%a4],%d2

    return TRUE;
}
80003208:	82 12       	mov %d2,1
8000320a:	00 90       	ret 

8000320c <IfxGtm_Tom_PwmHl_setMinPulse>:


boolean IfxGtm_Tom_PwmHl_setMinPulse(IfxGtm_Tom_PwmHl *driver, float32 minPulse)
{
8000320c:	40 ae       	mov.aa %a14,%sp
    Ifx_TimerValue value = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, minPulse);
8000320e:	99 42 20 00 	ld.a %a2,[%a4]32
80003212:	19 22 08 00 	ld.w %d2,[%a2]8
80003216:	4b 42 41 20 	mul.f %d2,%d2,%d4
8000321a:	4b 02 71 21 	ftouz %d2,%d2

    driver->base.minPulse = value + driver->base.deadtime;
8000321e:	54 43       	ld.w %d3,[%a4]
80003220:	42 32       	add %d2,%d3
80003222:	59 42 04 00 	st.w [%a4]4,%d2
    driver->base.maxPulse = driver->timer->base.period - driver->base.minPulse;
80003226:	54 23       	ld.w %d3,[%a2]
80003228:	0b 23 80 20 	sub %d2,%d3,%d2
8000322c:	59 42 08 00 	st.w [%a4]8,%d2

    return TRUE;
}
80003230:	82 12       	mov %d2,1
80003232:	00 90       	ret 

80003234 <IfxGtm_Tom_PwmHl_setMode>:


boolean IfxGtm_Tom_PwmHl_setMode(IfxGtm_Tom_PwmHl *driver, Ifx_Pwm_Mode mode)
{
80003234:	40 ae       	mov.aa %a14,%sp
    boolean                result = TRUE;
    IfxGtm_Tom_PwmHl_Base *base   = &driver->base;

    if (base->mode != mode)
80003236:	19 42 0c 00 	ld.w %d2,[%a4]12
8000323a:	5f 42 a4 00 	jeq %d2,%d4,80003382 <IfxGtm_Tom_PwmHl_setMode+0x14e>
    {
        if ((mode > Ifx_Pwm_Mode_off) || (IfxGtm_Tom_PwmHl_modes[mode].update == NULL_PTR))
8000323e:	ff 54 11 80 	jge.u %d4,5,80003260 <IfxGtm_Tom_PwmHl_setMode+0x2c>
80003242:	91 00 00 28 	movh.a %a2,32768
80003246:	80 22       	mov.d %d2,%a2
80003248:	1b 82 46 20 	addi %d2,%d2,1128
8000324c:	13 44 21 22 	madd %d2,%d2,%d4,20
80003250:	60 22       	mov.a %a2,%d2
80003252:	19 22 08 00 	ld.w %d2,[%a2]8
80003256:	df 02 3c 00 	jeq %d2,0,800032ce <IfxGtm_Tom_PwmHl_setMode+0x9a>
    boolean                result = TRUE;
8000325a:	82 12       	mov %d2,1
8000325c:	1d 00 04 00 	j 80003264 <IfxGtm_Tom_PwmHl_setMode+0x30>
        {
            mode   = Ifx_Pwm_Mode_off;
            result = FALSE;
80003260:	82 02       	mov %d2,0
            mode   = Ifx_Pwm_Mode_off;
80003262:	82 44       	mov %d4,4
        }

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mode == IfxGtm_Tom_PwmHl_modes[mode].mode);

        base->mode             = mode;
80003264:	59 44 0c 00 	st.w [%a4]12,%d4
        driver->update         = IfxGtm_Tom_PwmHl_modes[mode].update;
80003268:	91 00 00 28 	movh.a %a2,32768
8000326c:	80 23       	mov.d %d3,%a2
8000326e:	1b 83 46 30 	addi %d3,%d3,1128
80003272:	13 44 21 33 	madd %d3,%d3,%d4,20
80003276:	60 32       	mov.a %a2,%d3
80003278:	19 23 08 00 	ld.w %d3,[%a2]8
8000327c:	59 43 24 00 	st.w [%a4]36,%d3
        driver->updateAndShift = IfxGtm_Tom_PwmHl_modes[mode].updateAndShift;
80003280:	19 23 0c 00 	ld.w %d3,[%a2]12
80003284:	59 43 28 00 	st.w [%a4]40,%d3
        driver->updatePulse    = IfxGtm_Tom_PwmHl_modes[mode].updatePulse;
80003288:	19 23 10 00 	ld.w %d3,[%a2]16
8000328c:	59 43 2c 00 	st.w [%a4]44,%d3

        if (base->mode != Ifx_Pwm_Mode_off)
80003290:	df 44 0e 00 	jeq %d4,4,800032ac <IfxGtm_Tom_PwmHl_setMode+0x78>
        {
            base->inverted = IfxGtm_Tom_PwmHl_modes[mode].inverted;
80003294:	91 00 00 28 	movh.a %a2,32768
80003298:	80 23       	mov.d %d3,%a2
8000329a:	1b 83 46 30 	addi %d3,%d3,1128
8000329e:	13 44 21 33 	madd %d3,%d3,%d4,20
800032a2:	60 32       	mov.a %a2,%d3
800032a4:	39 23 04 00 	ld.bu %d3,[%a2]4
800032a8:	e9 43 1c 00 	st.b [%a4]28,%d3
        }
        else
        {                       /* Keep previous inverted for off mode */
        }

        if (base->inverted)
800032ac:	39 43 1c 00 	ld.bu %d3,[%a4]28
800032b0:	df 03 13 00 	jeq %d3,0,800032d6 <IfxGtm_Tom_PwmHl_setMode+0xa2>
        {
            driver->ccxTemp   = driver->coutx;
800032b4:	80 43       	mov.d %d3,%a4
800032b6:	1b 43 04 30 	addi %d3,%d3,68
800032ba:	59 43 10 10 	st.w [%a4]80,%d3
            driver->coutxTemp = driver->ccx;
800032be:	80 43       	mov.d %d3,%a4
800032c0:	1b 83 03 30 	addi %d3,%d3,56
800032c4:	59 43 14 10 	st.w [%a4]84,%d3
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
800032c8:	82 04       	mov %d4,0
800032ca:	1d 00 3d 00 	j 80003344 <IfxGtm_Tom_PwmHl_setMode+0x110>
            result = FALSE;
800032ce:	82 02       	mov %d2,0
            mode   = Ifx_Pwm_Mode_off;
800032d0:	82 44       	mov %d4,4
800032d2:	1d ff c9 ff 	j 80003264 <IfxGtm_Tom_PwmHl_setMode+0x30>
        }
        else
        {
            driver->ccxTemp   = driver->ccx;
800032d6:	80 43       	mov.d %d3,%a4
800032d8:	1b 83 03 30 	addi %d3,%d3,56
800032dc:	59 43 10 10 	st.w [%a4]80,%d3
            driver->coutxTemp = driver->coutx;
800032e0:	80 43       	mov.d %d3,%a4
800032e2:	1b 43 04 30 	addi %d3,%d3,68
800032e6:	59 43 14 10 	st.w [%a4]84,%d3
800032ea:	1d ff ef ff 	j 800032c8 <IfxGtm_Tom_PwmHl_setMode+0x94>
                IfxGtm_Tom_Ch channel;

                channel = driver->ccx[channelIndex];
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
                    ? base->ccxActiveState
                    : IfxGtm_Tom_PwmHl_invertActiveState(driver->base.ccxActiveState));
800032ee:	19 43 14 00 	ld.w %d3,[%a4]20
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
800032f2:	8b 03 00 32 	eq %d3,%d3,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800032f6:	06 65       	sh %d5,6
800032f8:	60 62       	mov.a %a2,%d6
800032fa:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
800032fe:	df 13 37 00 	jeq %d3,1,8000336c <IfxGtm_Tom_PwmHl_setMode+0x138>
80003302:	82 05       	mov %d5,0
80003304:	54 23       	ld.w %d3,[%a2]
80003306:	67 53 0b 30 	ins.t %d3,%d3,11,%d5,0
8000330a:	74 23       	st.w [%a2],%d3

                channel = driver->coutx[channelIndex];
8000330c:	1b 14 01 30 	addi %d3,%d4,17
80003310:	06 23       	sh %d3,2
80003312:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80003316:	54 25       	ld.w %d5,[%a2]
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80003318:	19 46 30 00 	ld.w %d6,[%a4]48
8000331c:	39 43 1c 00 	ld.bu %d3,[%a4]28
80003320:	df 03 29 00 	jeq %d3,0,80003372 <IfxGtm_Tom_PwmHl_setMode+0x13e>
                    ? IfxGtm_Tom_PwmHl_invertActiveState(driver->base.coutxActiveState)
80003324:	19 43 18 00 	ld.w %d3,[%a4]24
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80003328:	8b 03 00 32 	eq %d3,%d3,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000332c:	06 65       	sh %d5,6
8000332e:	60 62       	mov.a %a2,%d6
80003330:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003334:	df 13 23 00 	jeq %d3,1,8000337a <IfxGtm_Tom_PwmHl_setMode+0x146>
80003338:	82 05       	mov %d5,0
8000333a:	54 23       	ld.w %d3,[%a2]
8000333c:	67 53 0b 30 	ins.t %d3,%d3,11,%d5,0
80003340:	74 23       	st.w [%a2],%d3
            for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003342:	c2 14       	add %d4,1
80003344:	39 43 1d 00 	ld.bu %d3,[%a4]29
80003348:	7f 34 1c 80 	jge.u %d4,%d3,80003380 <IfxGtm_Tom_PwmHl_setMode+0x14c>
                channel = driver->ccx[channelIndex];
8000334c:	1b e4 00 30 	addi %d3,%d4,14
80003350:	06 23       	sh %d3,2
80003352:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80003356:	54 25       	ld.w %d5,[%a2]
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80003358:	19 46 30 00 	ld.w %d6,[%a4]48
8000335c:	39 43 1c 00 	ld.bu %d3,[%a4]28
80003360:	df 03 c7 7f 	jeq %d3,0,800032ee <IfxGtm_Tom_PwmHl_setMode+0xba>
80003364:	19 43 14 00 	ld.w %d3,[%a4]20
80003368:	1d ff c7 ff 	j 800032f6 <IfxGtm_Tom_PwmHl_setMode+0xc2>
8000336c:	82 15       	mov %d5,1
8000336e:	1d ff cb ff 	j 80003304 <IfxGtm_Tom_PwmHl_setMode+0xd0>
                IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, base->inverted
80003372:	19 43 18 00 	ld.w %d3,[%a4]24
80003376:	1d ff db ff 	j 8000332c <IfxGtm_Tom_PwmHl_setMode+0xf8>
8000337a:	82 15       	mov %d5,1
8000337c:	1d ff df ff 	j 8000333a <IfxGtm_Tom_PwmHl_setMode+0x106>
80003380:	00 90       	ret 
    boolean                result = TRUE;
80003382:	82 12       	mov %d2,1
            }
        }
    }

    return result;
}
80003384:	00 90       	ret 

80003386 <IfxGtm_Tom_PwmHl_setOnTime>:


void IfxGtm_Tom_PwmHl_setOnTime(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80003386:	40 ae       	mov.aa %a14,%sp
    driver->update(driver, tOn);
80003388:	99 42 24 00 	ld.a %a2,[%a4]36
8000338c:	2d 02 00 00 	calli %a2
}
80003390:	00 90       	ret 

80003392 <IfxGtm_Tom_PwmHl_updateCenterAligned>:
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
}


IFX_STATIC void IfxGtm_Tom_PwmHl_updateCenterAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80003392:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
80003394:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
80003396:	99 42 20 00 	ld.a %a2,[%a4]32
8000339a:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
8000339c:	82 03       	mov %d3,0
8000339e:	1d 00 5e 00 	j 8000345a <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc8>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {                       /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
800033a2:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
800033a4:	5f 52 2e 00 	jeq %d2,%d5,80003400 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x6e>
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1) */);
        }
        else if (x == 0)
800033a8:	df 02 75 80 	jne %d2,0,80003492 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x100>
        {
            cm0 = 1;
            cm1 = period + 2;
800033ac:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
800033b0:	99 42 10 10 	ld.a %a2,[%a4]80
800033b4:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800033b8:	54 26       	ld.w %d6,[%a2]
800033ba:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800033be:	06 66       	sh %d6,6
800033c0:	99 42 30 00 	ld.a %a2,[%a4]48
800033c4:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
800033c8:	82 16       	mov %d6,1
800033ca:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
800033ce:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
800033d2:	99 42 14 10 	ld.a %a2,[%a4]84
800033d6:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800033da:	54 26       	ld.w %d6,[%a2]
800033dc:	1b 17 00 40 	addi %d4,%d7,1
800033e0:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800033e4:	06 66       	sh %d6,6
800033e6:	99 42 30 00 	ld.a %a2,[%a4]48
800033ea:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
800033ee:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
800033f2:	59 22 08 00 	st.w [%a2]8,%d2
}
800033f6:	1d 00 2f 00 	j 80003454 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc2>
            x = 0;
800033fa:	82 02       	mov %d2,0
800033fc:	1d ff d4 ff 	j 800033a4 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80003400:	99 42 10 10 	ld.a %a2,[%a4]80
80003404:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003408:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
8000340a:	37 05 70 20 	extr.u %d2,%d5,0,16
8000340e:	1b 12 00 00 	addi %d0,%d2,1
80003412:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
80003416:	1b 27 00 60 	addi %d6,%d7,2
8000341a:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000341e:	06 61       	sh %d1,6
80003420:	99 42 30 00 	ld.a %a2,[%a4]48
80003424:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80003428:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
8000342c:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
80003430:	99 42 14 10 	ld.a %a2,[%a4]84
80003434:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003438:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
8000343a:	c2 22       	add %d2,2
8000343c:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003440:	06 64       	sh %d4,6
80003442:	99 42 30 00 	ld.a %a2,[%a4]48
80003446:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
8000344a:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
8000344e:	82 22       	mov %d2,2
80003450:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003454:	c2 13       	add %d3,1
80003456:	8f f3 0f 31 	and %d3,%d3,255
8000345a:	39 42 1d 00 	ld.bu %d2,[%a4]29
8000345e:	7f 23 4e 80 	jge.u %d3,%d2,800034fa <IfxGtm_Tom_PwmHl_updateCenterAligned+0x168>
        x = tOn[channelIndex];
80003462:	8f 23 00 40 	sh %d4,%d3,2
80003466:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
8000346a:	54 22       	ld.w %d2,[%a2]
        if (driver->base.inverted != FALSE)
8000346c:	39 46 1c 00 	ld.bu %d6,[%a4]28
80003470:	df 06 04 00 	jeq %d6,0,80003478 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xe6>
            x = period - x;
80003474:	0b 25 80 20 	sub %d2,%d5,%d2
        if ((x < driver->base.minPulse) || (x <= deadtime))
80003478:	19 46 04 00 	ld.w %d6,[%a4]4
8000347c:	3f 62 93 ff 	jlt.u %d2,%d6,800033a2 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x10>
80003480:	7f 27 bd ff 	jge.u %d7,%d2,800033fa <IfxGtm_Tom_PwmHl_updateCenterAligned+0x68>
        else if (x > driver->base.maxPulse)
80003484:	19 46 08 00 	ld.w %d6,[%a4]8
80003488:	7f 26 8e ff 	jge.u %d6,%d2,800033a4 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
            x = period;
8000348c:	02 52       	mov %d2,%d5
8000348e:	1d ff 8b ff 	j 800033a4 <IfxGtm_Tom_PwmHl_updateCenterAligned+0x12>
        }
        else
        {                           /* x% duty cycle */
            cm1 = (period - x) / 2; // CM1
80003492:	0b 25 80 60 	sub %d6,%d5,%d2
80003496:	06 f6       	sh %d6,-1
            cm0 = (period + x) / 2; // CM0
80003498:	42 52       	add %d2,%d5
8000349a:	8f f2 1f 80 	sh %d8,%d2,-1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
8000349e:	99 42 10 10 	ld.a %a2,[%a4]80
800034a2:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800034a6:	54 2a       	ld.w %d10,[%a2]
800034a8:	37 02 f0 90 	extr.u %d9,%d2,1,16
800034ac:	bb f0 ff 2f 	mov.u %d2,65535
800034b0:	26 28       	and %d8,%d2
800034b2:	37 07 70 00 	extr.u %d0,%d7,0,16
800034b6:	0b 60 00 10 	add %d1,%d0,%d6
800034ba:	37 01 70 10 	extr.u %d1,%d1,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800034be:	06 6a       	sh %d10,6
800034c0:	99 42 30 00 	ld.a %a2,[%a4]48
800034c4:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->SR0.U = shadowZero;
800034c8:	59 28 04 00 	st.w [%a2]4,%d8
    tomCh->SR1.U = shadowOne;
800034cc:	59 21 08 00 	st.w [%a2]8,%d1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
800034d0:	99 42 14 10 	ld.a %a2,[%a4]84
800034d4:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800034d8:	54 21       	ld.w %d1,[%a2]
800034da:	0b 09 00 40 	add %d4,%d9,%d0
800034de:	37 04 70 40 	extr.u %d4,%d4,0,16
800034e2:	26 62       	and %d2,%d6
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800034e4:	06 61       	sh %d1,6
800034e6:	99 42 30 00 	ld.a %a2,[%a4]48
800034ea:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
800034ee:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
800034f2:	59 22 08 00 	st.w [%a2]8,%d2
}
800034f6:	1d ff af ff 	j 80003454 <IfxGtm_Tom_PwmHl_updateCenterAligned+0xc2>
        }
    }
}
800034fa:	00 90       	ret 

800034fc <IfxGtm_Tom_PwmHl_updateEdgeAligned>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateEdgeAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
800034fc:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
800034fe:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
80003500:	99 42 20 00 	ld.a %a2,[%a4]32
80003504:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003506:	82 03       	mov %d3,0
80003508:	1d 00 5e 00 	j 800035c4 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc8>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {                       /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
8000350c:	82 00       	mov %d0,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
8000350e:	5f 50 2e 00 	jeq %d0,%d5,8000356a <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x6e>
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1) */);
        }
        else if (x == 0)
80003512:	df 00 75 80 	jne %d0,0,800035fc <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x100>
        {
            cm0 = 1;
            cm1 = period + 2;
80003516:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
8000351a:	99 42 10 10 	ld.a %a2,[%a4]80
8000351e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003522:	54 26       	ld.w %d6,[%a2]
80003524:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003528:	06 66       	sh %d6,6
8000352a:	99 42 30 00 	ld.a %a2,[%a4]48
8000352e:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80003532:	82 16       	mov %d6,1
80003534:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
80003538:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
8000353c:	99 42 14 10 	ld.a %a2,[%a4]84
80003540:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003544:	54 26       	ld.w %d6,[%a2]
80003546:	1b 17 00 40 	addi %d4,%d7,1
8000354a:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000354e:	06 66       	sh %d6,6
80003550:	99 42 30 00 	ld.a %a2,[%a4]48
80003554:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80003558:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
8000355c:	59 22 08 00 	st.w [%a2]8,%d2
}
80003560:	1d 00 2f 00 	j 800035be <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc2>
            x = 0;
80003564:	82 00       	mov %d0,0
80003566:	1d ff d4 ff 	j 8000350e <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
8000356a:	99 42 10 10 	ld.a %a2,[%a4]80
8000356e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003572:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
80003574:	37 05 70 20 	extr.u %d2,%d5,0,16
80003578:	1b 12 00 00 	addi %d0,%d2,1
8000357c:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1) */ + deadtime);
80003580:	1b 27 00 60 	addi %d6,%d7,2
80003584:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003588:	06 61       	sh %d1,6
8000358a:	99 42 30 00 	ld.a %a2,[%a4]48
8000358e:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80003592:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
80003596:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
8000359a:	99 42 14 10 	ld.a %a2,[%a4]84
8000359e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800035a2:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
800035a4:	c2 22       	add %d2,2
800035a6:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800035aa:	06 64       	sh %d4,6
800035ac:	99 42 30 00 	ld.a %a2,[%a4]48
800035b0:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
800035b4:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
800035b8:	82 22       	mov %d2,2
800035ba:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
800035be:	c2 13       	add %d3,1
800035c0:	8f f3 0f 31 	and %d3,%d3,255
800035c4:	39 42 1d 00 	ld.bu %d2,[%a4]29
800035c8:	7f 23 44 80 	jge.u %d3,%d2,80003650 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x154>
        x = tOn[channelIndex];
800035cc:	8f 23 00 40 	sh %d4,%d3,2
800035d0:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
800035d4:	54 20       	ld.w %d0,[%a2]
        if (driver->base.inverted != FALSE)
800035d6:	39 46 1c 00 	ld.bu %d6,[%a4]28
800035da:	df 06 04 00 	jeq %d6,0,800035e2 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xe6>
            x = period - x;
800035de:	0b 05 80 00 	sub %d0,%d5,%d0
        if ((x < driver->base.minPulse) || (x <= deadtime))
800035e2:	19 46 04 00 	ld.w %d6,[%a4]4
800035e6:	3f 60 93 ff 	jlt.u %d0,%d6,8000350c <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x10>
800035ea:	7f 07 bd ff 	jge.u %d7,%d0,80003564 <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x68>
        else if (x > driver->base.maxPulse)
800035ee:	19 46 08 00 	ld.w %d6,[%a4]8
800035f2:	7f 06 8e ff 	jge.u %d6,%d0,8000350e <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
            x = period;
800035f6:	02 50       	mov %d0,%d5
800035f8:	1d ff 8b ff 	j 8000350e <IfxGtm_Tom_PwmHl_updateEdgeAligned+0x12>
        }
        else
        {                       /* x% duty cycle */
            cm1 = 2;            // CM1, set to 2 due to a GTM issue. should be 1 according to spec
            cm0 = x;            // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
800035fc:	99 42 10 10 	ld.a %a2,[%a4]80
80003600:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003604:	54 28       	ld.w %d8,[%a2]
80003606:	37 00 70 10 	extr.u %d1,%d0,0,16
8000360a:	37 07 70 20 	extr.u %d2,%d7,0,16
8000360e:	1b 22 00 60 	addi %d6,%d2,2
80003612:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003616:	06 68       	sh %d8,6
80003618:	99 42 30 00 	ld.a %a2,[%a4]48
8000361c:	01 28 00 26 	addsc.a %a2,%a2,%d8,0
    tomCh->SR0.U = shadowZero;
80003620:	59 21 04 00 	st.w [%a2]4,%d1
    tomCh->SR1.U = shadowOne;
80003624:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80003628:	99 42 14 10 	ld.a %a2,[%a4]84
8000362c:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003630:	54 24       	ld.w %d4,[%a2]
80003632:	42 12       	add %d2,%d1
80003634:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003638:	06 64       	sh %d4,6
8000363a:	99 42 30 00 	ld.a %a2,[%a4]48
8000363e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
80003642:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80003646:	82 22       	mov %d2,2
80003648:	59 22 08 00 	st.w [%a2]8,%d2
}
8000364c:	1d ff b9 ff 	j 800035be <IfxGtm_Tom_PwmHl_updateEdgeAligned+0xc2>
        }
    }
}
80003650:	00 90       	ret 

80003652 <IfxGtm_Tom_PwmHl_updateOff>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateOff(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn)
{
80003652:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(tOn)
    uint8 channelIndex;
    Ifx_TimerValue period;

    period = driver->timer->base.period;
80003654:	99 42 20 00 	ld.a %a2,[%a4]32
80003658:	54 27       	ld.w %d7,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
8000365a:	82 02       	mov %d2,0
8000365c:	1d 00 2d 00 	j 800036b6 <IfxGtm_Tom_PwmHl_updateOff+0x64>
    {
        IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80003660:	8f 22 00 40 	sh %d4,%d2,2
80003664:	99 42 10 10 	ld.a %a2,[%a4]80
80003668:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000366c:	54 26       	ld.w %d6,[%a2]
            2 /* 1 will keep the previous level */, period + 2);
8000366e:	37 07 70 30 	extr.u %d3,%d7,0,16
80003672:	1b 23 00 50 	addi %d5,%d3,2
80003676:	37 05 70 50 	extr.u %d5,%d5,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000367a:	06 66       	sh %d6,6
8000367c:	99 42 30 00 	ld.a %a2,[%a4]48
80003680:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80003684:	82 26       	mov %d6,2
80003686:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
8000368a:	59 25 08 00 	st.w [%a2]8,%d5
        IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], period + 1, 2);
8000368e:	99 42 14 10 	ld.a %a2,[%a4]84
80003692:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003696:	54 24       	ld.w %d4,[%a2]
80003698:	c2 13       	add %d3,1
8000369a:	37 03 70 30 	extr.u %d3,%d3,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000369e:	06 64       	sh %d4,6
800036a0:	99 42 30 00 	ld.a %a2,[%a4]48
800036a4:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
800036a8:	59 23 04 00 	st.w [%a2]4,%d3
    tomCh->SR1.U = shadowOne;
800036ac:	59 26 08 00 	st.w [%a2]8,%d6
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
800036b0:	c2 12       	add %d2,1
800036b2:	8f f2 0f 21 	and %d2,%d2,255
800036b6:	39 43 1d 00 	ld.bu %d3,[%a4]29
800036ba:	3f 32 d3 ff 	jlt.u %d2,%d3,80003660 <IfxGtm_Tom_PwmHl_updateOff+0xe>
    }
}
800036be:	00 90       	ret 

800036c0 <IfxGtm_Tom_PwmHl_updateAndShiftOff>:
{
800036c0:	40 ae       	mov.aa %a14,%sp
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
800036c2:	a0 05       	mov.a %a5,0
800036c4:	6d ff c7 ff 	call 80003652 <IfxGtm_Tom_PwmHl_updateOff>
}
800036c8:	00 90       	ret 

800036ca <IfxGtm_Tom_PwmHl_updatePulse>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updatePulse(IfxGtm_Tom_PwmHl *driver, float32 *tOn, float32 *offset)
{
800036ca:	40 ae       	mov.aa %a14,%sp
    uint8          channelIndex;
    Ifx_TimerValue period;

    period = driver->timer->base.period;
800036cc:	99 42 20 00 	ld.a %a2,[%a4]32
800036d0:	54 23       	ld.w %d3,[%a2]

    /* Top channels */
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
800036d2:	82 04       	mov %d4,0
800036d4:	1d 00 38 00 	j 80003744 <IfxGtm_Tom_PwmHl_updatePulse+0x7a>
        else
        {}

        if ((x < driver->base.minPulse) || (o > period))
        {
            x = 0;
800036d8:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
800036da:	5f 32 1f 00 	jeq %d2,%d3,80003718 <IfxGtm_Tom_PwmHl_updatePulse+0x4e>
        {   /* 100% duty cycle */
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
                period + 1 /* No compare event */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
800036de:	df 02 62 80 	jne %d2,0,800037a2 <IfxGtm_Tom_PwmHl_updatePulse+0xd8>
        {
            cm0 = 1;
            cm1 = period + 2;
800036e2:	1b 23 00 20 	addi %d2,%d3,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
800036e6:	99 42 10 10 	ld.a %a2,[%a4]80
800036ea:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
800036ee:	54 25       	ld.w %d5,[%a2]
800036f0:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800036f4:	06 65       	sh %d5,6
800036f6:	99 42 30 00 	ld.a %a2,[%a4]48
800036fa:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
800036fe:	82 15       	mov %d5,1
80003700:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
80003704:	59 22 08 00 	st.w [%a2]8,%d2
}
80003708:	1d 00 1b 00 	j 8000373e <IfxGtm_Tom_PwmHl_updatePulse+0x74>
            x = 0;
8000370c:	82 02       	mov %d2,0
8000370e:	1d ff e6 ff 	j 800036da <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            x = period;
80003712:	02 32       	mov %d2,%d3
80003714:	1d ff e3 ff 	j 800036da <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80003718:	99 42 10 10 	ld.a %a2,[%a4]80
8000371c:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80003720:	54 25       	ld.w %d5,[%a2]
                period + 1 /* No compare event */,
80003722:	1b 13 00 20 	addi %d2,%d3,1
80003726:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
8000372a:	06 65       	sh %d5,6
8000372c:	99 42 30 00 	ld.a %a2,[%a4]48
80003730:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80003734:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80003738:	82 22       	mov %d2,2
8000373a:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
8000373e:	c2 14       	add %d4,1
80003740:	8f f4 0f 41 	and %d4,%d4,255
80003744:	39 42 1d 00 	ld.bu %d2,[%a4]29
80003748:	7f 24 44 80 	jge.u %d4,%d2,800037d0 <IfxGtm_Tom_PwmHl_updatePulse+0x106>
        x = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, tOn[channelIndex]);
8000374c:	99 42 20 00 	ld.a %a2,[%a4]32
80003750:	19 25 08 00 	ld.w %d5,[%a2]8
80003754:	8f 24 00 60 	sh %d6,%d4,2
80003758:	01 56 00 26 	addsc.a %a2,%a5,%d6,0
8000375c:	54 22       	ld.w %d2,[%a2]
8000375e:	4b 25 41 20 	mul.f %d2,%d5,%d2
80003762:	4b 02 71 21 	ftouz %d2,%d2
        o = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, offset[channelIndex]);
80003766:	01 66 00 26 	addsc.a %a2,%a6,%d6,0
8000376a:	54 27       	ld.w %d7,[%a2]
8000376c:	4b 75 41 50 	mul.f %d5,%d5,%d7
80003770:	4b 05 71 51 	ftouz %d5,%d5
        if (driver->base.inverted != FALSE)
80003774:	39 47 1c 00 	ld.bu %d7,[%a4]28
80003778:	df 07 04 00 	jeq %d7,0,80003780 <IfxGtm_Tom_PwmHl_updatePulse+0xb6>
            x = period - x;
8000377c:	0b 23 80 20 	sub %d2,%d3,%d2
        if ((x < driver->base.minPulse) || (o > period))
80003780:	19 47 04 00 	ld.w %d7,[%a4]4
80003784:	3f 72 aa ff 	jlt.u %d2,%d7,800036d8 <IfxGtm_Tom_PwmHl_updatePulse+0xe>
80003788:	3f 53 c2 ff 	jlt.u %d3,%d5,8000370c <IfxGtm_Tom_PwmHl_updatePulse+0x42>
        else if ((x > driver->base.maxPulse) || (o + x > period))
8000378c:	19 47 08 00 	ld.w %d7,[%a4]8
80003790:	3f 27 c1 ff 	jlt.u %d7,%d2,80003712 <IfxGtm_Tom_PwmHl_updatePulse+0x48>
80003794:	0b 52 00 70 	add %d7,%d2,%d5
80003798:	7f 73 a1 ff 	jge.u %d3,%d7,800036da <IfxGtm_Tom_PwmHl_updatePulse+0x10>
            x = period;
8000379c:	02 32       	mov %d2,%d3
8000379e:	1d ff 9e ff 	j 800036da <IfxGtm_Tom_PwmHl_updatePulse+0x10>
        }
        else
        {                /* x% duty cycle */
            cm1 = 2 + o; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
800037a2:	1b 25 00 70 	addi %d7,%d5,2
            cm0 = o + x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
800037a6:	42 25       	add %d5,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
800037a8:	99 42 10 10 	ld.a %a2,[%a4]80
800037ac:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
800037b0:	54 26       	ld.w %d6,[%a2]
800037b2:	bb f0 ff 2f 	mov.u %d2,65535
800037b6:	26 25       	and %d5,%d2
800037b8:	26 72       	and %d2,%d7
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800037ba:	06 66       	sh %d6,6
800037bc:	99 42 30 00 	ld.a %a2,[%a4]48
800037c0:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
800037c4:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
800037c8:	59 22 08 00 	st.w [%a2]8,%d2
}
800037cc:	1d ff b9 ff 	j 8000373e <IfxGtm_Tom_PwmHl_updatePulse+0x74>
        }
    }

    /* Bottom channels */
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
800037d0:	82 04       	mov %d4,0
800037d2:	1d 00 36 00 	j 8000383e <IfxGtm_Tom_PwmHl_updatePulse+0x174>
        else
        {}

        if (x < driver->base.minPulse)
        {
            x = 0;
800037d6:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
800037d8:	5f 32 1b 00 	jeq %d2,%d3,8000380e <IfxGtm_Tom_PwmHl_updatePulse+0x144>
        {   /* 100% duty cycle */
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
800037dc:	df 02 5b 80 	jne %d2,0,80003892 <IfxGtm_Tom_PwmHl_updatePulse+0x1c8>
        {
            cm0 = 1;
            cm1 = period + 2;
800037e0:	1b 23 00 60 	addi %d6,%d3,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0, cm1);
800037e4:	8f 24 00 20 	sh %d2,%d4,2
800037e8:	99 42 14 10 	ld.a %a2,[%a4]84
800037ec:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800037f0:	54 25       	ld.w %d5,[%a2]
800037f2:	37 06 70 20 	extr.u %d2,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800037f6:	06 65       	sh %d5,6
800037f8:	99 42 30 00 	ld.a %a2,[%a4]48
800037fc:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
80003800:	82 15       	mov %d5,1
80003802:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
80003806:	59 22 08 00 	st.w [%a2]8,%d2
}
8000380a:	1d 00 17 00 	j 80003838 <IfxGtm_Tom_PwmHl_updatePulse+0x16e>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
8000380e:	8f 24 00 20 	sh %d2,%d4,2
80003812:	99 42 14 10 	ld.a %a2,[%a4]84
80003816:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000381a:	54 25       	ld.w %d5,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
8000381c:	1b 23 00 20 	addi %d2,%d3,2
80003820:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003824:	06 65       	sh %d5,6
80003826:	99 42 30 00 	ld.a %a2,[%a4]48
8000382a:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
    tomCh->SR0.U = shadowZero;
8000382e:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80003832:	82 22       	mov %d2,2
80003834:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003838:	c2 14       	add %d4,1
8000383a:	8f f4 0f 41 	and %d4,%d4,255
8000383e:	39 42 1d 00 	ld.bu %d2,[%a4]29
80003842:	7f 24 42 80 	jge.u %d4,%d2,800038c6 <IfxGtm_Tom_PwmHl_updatePulse+0x1fc>
        x = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, tOn[channelIndex + driver->base.channelCount]);
80003846:	99 42 20 00 	ld.a %a2,[%a4]32
8000384a:	19 25 08 00 	ld.w %d5,[%a2]8
8000384e:	42 42       	add %d2,%d4
80003850:	8f 22 00 60 	sh %d6,%d2,2
80003854:	01 56 00 26 	addsc.a %a2,%a5,%d6,0
80003858:	54 22       	ld.w %d2,[%a2]
8000385a:	4b 25 41 20 	mul.f %d2,%d5,%d2
8000385e:	4b 02 71 21 	ftouz %d2,%d2
        o = IfxStdIf_Timer_sToTick(driver->timer->base.clockFreq, offset[channelIndex + driver->base.channelCount]);
80003862:	01 66 00 26 	addsc.a %a2,%a6,%d6,0
80003866:	54 26       	ld.w %d6,[%a2]
80003868:	4b 65 41 60 	mul.f %d6,%d5,%d6
8000386c:	4b 06 71 61 	ftouz %d6,%d6
        if (driver->base.inverted != FALSE)
80003870:	39 45 1c 00 	ld.bu %d5,[%a4]28
80003874:	df 05 04 00 	jeq %d5,0,8000387c <IfxGtm_Tom_PwmHl_updatePulse+0x1b2>
            x = period - x;
80003878:	0b 23 80 20 	sub %d2,%d3,%d2
        if (x < driver->base.minPulse)
8000387c:	19 45 04 00 	ld.w %d5,[%a4]4
80003880:	3f 52 ab ff 	jlt.u %d2,%d5,800037d6 <IfxGtm_Tom_PwmHl_updatePulse+0x10c>
        else if (x > driver->base.maxPulse)
80003884:	19 45 08 00 	ld.w %d5,[%a4]8
80003888:	7f 25 a8 ff 	jge.u %d5,%d2,800037d8 <IfxGtm_Tom_PwmHl_updatePulse+0x10e>
            x = period;
8000388c:	02 32       	mov %d2,%d3
8000388e:	1d ff a5 ff 	j 800037d8 <IfxGtm_Tom_PwmHl_updatePulse+0x10e>
        }
        else
        {                /* x% duty cycle */
            cm1 = 2 + o; // CM1, set to 2 due to a GTM issue. should be 1 according to spec
80003892:	1b 26 00 70 	addi %d7,%d6,2
            cm0 = o + x; // CM0, set to x+2 due to a GTM issue. should be x+1 according to spec
80003896:	0b 62 00 50 	add %d5,%d2,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0, cm1);
8000389a:	8f 24 00 20 	sh %d2,%d4,2
8000389e:	99 42 14 10 	ld.a %a2,[%a4]84
800038a2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800038a6:	54 26       	ld.w %d6,[%a2]
800038a8:	bb f0 ff 2f 	mov.u %d2,65535
800038ac:	26 25       	and %d5,%d2
800038ae:	26 72       	and %d2,%d7
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
800038b0:	06 66       	sh %d6,6
800038b2:	99 42 30 00 	ld.a %a2,[%a4]48
800038b6:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
800038ba:	59 25 04 00 	st.w [%a2]4,%d5
    tomCh->SR1.U = shadowOne;
800038be:	59 22 08 00 	st.w [%a2]8,%d2
}
800038c2:	1d ff bb ff 	j 80003838 <IfxGtm_Tom_PwmHl_updatePulse+0x16e>
        }
    }
}
800038c6:	00 90       	ret 

800038c8 <IfxGtm_Tom_PwmHl_updatePulseOff>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updatePulseOff(IfxGtm_Tom_PwmHl *driver, float32 *tOn, float32 *offset)
{
800038c8:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(tOn)
    IFX_UNUSED_PARAMETER(offset)
    IfxGtm_Tom_PwmHl_updateOff(driver, NULL_PTR);
800038ca:	a0 05       	mov.a %a5,0
800038cc:	6d ff c3 fe 	call 80003652 <IfxGtm_Tom_PwmHl_updateOff>
}
800038d0:	00 90       	ret 

800038d2 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned>:


IFX_STATIC void IfxGtm_Tom_PwmHl_updateShiftCenterAligned(IfxGtm_Tom_PwmHl *driver, Ifx_TimerValue *tOn, Ifx_TimerValue *shift)
{
800038d2:	40 ae       	mov.aa %a14,%sp
800038d4:	80 6b       	mov.d %d11,%a6
    uint8          channelIndex;
    Ifx_TimerValue period;
    Ifx_TimerValue deadtime = driver->base.deadtime;
800038d6:	54 47       	ld.w %d7,[%a4]

    period = driver->timer->base.period;
800038d8:	99 42 20 00 	ld.a %a2,[%a4]32
800038dc:	54 25       	ld.w %d5,[%a2]

    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
800038de:	82 03       	mov %d3,0
800038e0:	1d 00 5e 00 	j 8000399c <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xca>
        else
        {}

        if ((x < driver->base.minPulse) || (x <= deadtime))
        {   /* For deadtime condition: avoid leading edge of top channel to occur after the trailing edge */
            x = 0;
800038e4:	82 02       	mov %d2,0
        }
        else
        {}

        /* Special handling due to GTM issue */
        if (x == period)
800038e6:	5f 52 2e 00 	jeq %d2,%d5,80003942 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x70>
                2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
                period + 2 /* No compare event, issues has been seen with +1 */,
                2 /* 1st compare event (issue: expected to be 1)*/);
        }
        else if (x == 0)
800038ea:	df 02 75 80 	jne %d2,0,800039d4 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x102>
        {
            cm0 = 1;
            cm1 = period + 2;
800038ee:	1b 25 00 20 	addi %d2,%d5,2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1);
800038f2:	99 42 10 10 	ld.a %a2,[%a4]80
800038f6:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800038fa:	54 26       	ld.w %d6,[%a2]
800038fc:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003900:	06 66       	sh %d6,6
80003902:	99 42 30 00 	ld.a %a2,[%a4]48
80003906:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
8000390a:	82 16       	mov %d6,1
8000390c:	59 26 04 00 	st.w [%a2]4,%d6
    tomCh->SR1.U = shadowOne;
80003910:	59 22 08 00 	st.w [%a2]8,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80003914:	99 42 14 10 	ld.a %a2,[%a4]84
80003918:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000391c:	54 26       	ld.w %d6,[%a2]
8000391e:	1b 17 00 40 	addi %d4,%d7,1
80003922:	37 04 70 40 	extr.u %d4,%d4,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003926:	06 66       	sh %d6,6
80003928:	99 42 30 00 	ld.a %a2,[%a4]48
8000392c:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
    tomCh->SR0.U = shadowZero;
80003930:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80003934:	59 22 08 00 	st.w [%a2]8,%d2
}
80003938:	1d 00 2f 00 	j 80003996 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xc4>
            x = 0;
8000393c:	82 02       	mov %d2,0
8000393e:	1d ff d4 ff 	j 800038e6 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex],
80003942:	99 42 10 10 	ld.a %a2,[%a4]80
80003946:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000394a:	54 21       	ld.w %d1,[%a2]
                period + 1 /* No compare event */,
8000394c:	37 05 70 20 	extr.u %d2,%d5,0,16
80003950:	1b 12 00 00 	addi %d0,%d2,1
80003954:	37 00 70 00 	extr.u %d0,%d0,0,16
                2 /* 1st compare event (issue: expected to be 1)*/ + deadtime);
80003958:	1b 27 00 60 	addi %d6,%d7,2
8000395c:	37 06 70 60 	extr.u %d6,%d6,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003960:	06 61       	sh %d1,6
80003962:	99 42 30 00 	ld.a %a2,[%a4]48
80003966:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
8000396a:	59 20 04 00 	st.w [%a2]4,%d0
    tomCh->SR1.U = shadowOne;
8000396e:	59 26 08 00 	st.w [%a2]8,%d6
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex],
80003972:	99 42 14 10 	ld.a %a2,[%a4]84
80003976:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000397a:	54 24       	ld.w %d4,[%a2]
                period + 2 /* No compare event, issues has been seen with +1 */,
8000397c:	c2 22       	add %d2,2
8000397e:	37 02 70 20 	extr.u %d2,%d2,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003982:	06 64       	sh %d4,6
80003984:	99 42 30 00 	ld.a %a2,[%a4]48
80003988:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
    tomCh->SR0.U = shadowZero;
8000398c:	59 22 04 00 	st.w [%a2]4,%d2
    tomCh->SR1.U = shadowOne;
80003990:	82 22       	mov %d2,2
80003992:	59 22 08 00 	st.w [%a2]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003996:	c2 13       	add %d3,1
80003998:	8f f3 0f 31 	and %d3,%d3,255
8000399c:	39 42 1d 00 	ld.bu %d2,[%a4]29
800039a0:	7f 23 64 80 	jge.u %d3,%d2,80003a68 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x196>
        x = tOn[channelIndex];
800039a4:	8f 23 00 40 	sh %d4,%d3,2
800039a8:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
800039ac:	54 22       	ld.w %d2,[%a2]
        if (driver->base.inverted != FALSE)
800039ae:	39 46 1c 00 	ld.bu %d6,[%a4]28
800039b2:	df 06 04 00 	jeq %d6,0,800039ba <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xe8>
            x = period - x;
800039b6:	0b 25 80 20 	sub %d2,%d5,%d2
        if ((x < driver->base.minPulse) || (x <= deadtime))
800039ba:	19 46 04 00 	ld.w %d6,[%a4]4
800039be:	3f 62 93 ff 	jlt.u %d2,%d6,800038e4 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x12>
800039c2:	7f 27 bd ff 	jge.u %d7,%d2,8000393c <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x6a>
        else if (x > driver->base.maxPulse)
800039c6:	19 46 08 00 	ld.w %d6,[%a4]8
800039ca:	7f 26 8e ff 	jge.u %d6,%d2,800038e6 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
            x = period;
800039ce:	02 52       	mov %d2,%d5
800039d0:	1d ff 8b ff 	j 800038e6 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x14>
        }
        else
        {                           /* x% duty cycle */
            s = shift[channelIndex];
800039d4:	60 b2       	mov.a %a2,%d11
800039d6:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800039da:	54 26       	ld.w %d6,[%a2]

            if (s > 0)
800039dc:	df 06 3e 00 	jeq %d6,0,80003a58 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x186>
            {
                s = __minX(s, (period - x) / 2 - 1);
800039e0:	0b 25 80 00 	sub %d0,%d5,%d2
800039e4:	06 f0       	sh %d0,-1
800039e6:	c2 f0       	add %d0,-1
800039e8:	0b 60 90 61 	min.u %d6,%d0,%d6
            else
            {
                s = __maxX(s, (x - period) / 2 + 1);
            }

            cm1 = s + (period - x) / 2; // CM1
800039ec:	0b 25 80 00 	sub %d0,%d5,%d2
800039f0:	06 f0       	sh %d0,-1
800039f2:	42 60       	add %d0,%d6
            cm0 = s + (period + x) / 2; // CM0
800039f4:	42 52       	add %d2,%d5
800039f6:	06 f2       	sh %d2,-1
800039f8:	42 26       	add %d6,%d2
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->ccxTemp[channelIndex], cm0, cm1 + deadtime);
800039fa:	99 42 10 10 	ld.a %a2,[%a4]80
800039fe:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003a02:	54 2a       	ld.w %d10,[%a2]
80003a04:	37 06 70 90 	extr.u %d9,%d6,0,16
80003a08:	bb f0 ff 2f 	mov.u %d2,65535
80003a0c:	0f 26 80 80 	and %d8,%d6,%d2
80003a10:	37 07 70 60 	extr.u %d6,%d7,0,16
80003a14:	0b 06 00 10 	add %d1,%d6,%d0
80003a18:	37 01 70 10 	extr.u %d1,%d1,0,16
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003a1c:	06 6a       	sh %d10,6
80003a1e:	99 42 30 00 	ld.a %a2,[%a4]48
80003a22:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->SR0.U = shadowZero;
80003a26:	59 28 04 00 	st.w [%a2]4,%d8
    tomCh->SR1.U = shadowOne;
80003a2a:	59 21 08 00 	st.w [%a2]8,%d1
            IfxGtm_Tom_Ch_setCompareShadow(driver->tom, driver->coutxTemp[channelIndex], cm0 + deadtime, cm1);
80003a2e:	99 42 14 10 	ld.a %a2,[%a4]84
80003a32:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003a36:	54 21       	ld.w %d1,[%a2]
80003a38:	0b 69 00 40 	add %d4,%d9,%d6
80003a3c:	37 04 70 40 	extr.u %d4,%d4,0,16
80003a40:	26 02       	and %d2,%d0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003a42:	06 61       	sh %d1,6
80003a44:	99 42 30 00 	ld.a %a2,[%a4]48
80003a48:	01 21 00 26 	addsc.a %a2,%a2,%d1,0
    tomCh->SR0.U = shadowZero;
80003a4c:	59 24 04 00 	st.w [%a2]4,%d4
    tomCh->SR1.U = shadowOne;
80003a50:	59 22 08 00 	st.w [%a2]8,%d2
}
80003a54:	1d ff a1 ff 	j 80003996 <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0xc4>
                s = __maxX(s, (x - period) / 2 + 1);
80003a58:	0b 52 80 00 	sub %d0,%d2,%d5
80003a5c:	06 f0       	sh %d0,-1
80003a5e:	c2 10       	add %d0,1
80003a60:	0b 60 b0 61 	max.u %d6,%d0,%d6
80003a64:	1d ff c4 ff 	j 800039ec <IfxGtm_Tom_PwmHl_updateShiftCenterAligned+0x11a>
        }
    }
}
80003a68:	00 90       	ret 

80003a6a <IfxGtm_Tom_PwmHl_init>:
{
80003a6a:	40 ae       	mov.aa %a14,%sp
80003a6c:	20 18       	sub.a %sp,24
80003a6e:	40 4c       	mov.aa %a12,%a4
80003a70:	40 5d       	mov.aa %a13,%a5
    IfxGtm_Tom_Timer *timer        = config->timer;
80003a72:	cc 59       	ld.a %a15,[%a5]36
    driver->base.mode             = Ifx_Pwm_Mode_init;
80003a74:	82 52       	mov %d2,5
80003a76:	59 42 0c 00 	st.w [%a4]12,%d2
    driver->timer                 = timer;
80003a7a:	ec 48       	st.a [%a4]32,%a15
    driver->base.setMode          = 0;
80003a7c:	82 02       	mov %d2,0
80003a7e:	e9 42 10 00 	st.b [%a4]16,%d2
    driver->base.inverted         = FALSE;
80003a82:	e9 42 1c 00 	st.b [%a4]28,%d2
    driver->base.ccxActiveState   = config->base.ccxActiveState;
80003a86:	19 52 1c 00 	ld.w %d2,[%a5]28
80003a8a:	59 42 14 00 	st.w [%a4]20,%d2
    driver->base.coutxActiveState = config->base.coutxActiveState;
80003a8e:	19 52 20 00 	ld.w %d2,[%a5]32
80003a92:	59 42 18 00 	st.w [%a4]24,%d2
    driver->base.channelCount     = config->base.channelCount;
80003a96:	39 52 08 00 	ld.bu %d2,[%a5]8
80003a9a:	e9 42 1d 00 	st.b [%a4]29,%d2
    IfxGtm_Tom_PwmHl_setDeadtime(driver, config->base.deadtime);
80003a9e:	54 54       	ld.w %d4,[%a5]
80003aa0:	6d ff aa fb 	call 800031f4 <IfxGtm_Tom_PwmHl_setDeadtime>
    IfxGtm_Tom_PwmHl_setMinPulse(driver, config->base.minPulse);
80003aa4:	19 d4 04 00 	ld.w %d4,[%a13]4
80003aa8:	40 c4       	mov.aa %a4,%a12
80003aaa:	6d ff b1 fb 	call 8000320c <IfxGtm_Tom_PwmHl_setMinPulse>
    driver->tom = &(timer->gtm->TOM[config->tom]);
80003aae:	19 d2 28 00 	ld.w %d2,[%a13]40
80003ab2:	1b 02 01 20 	addi %d2,%d2,16
80003ab6:	8f b2 00 20 	sh %d2,%d2,11
80003aba:	48 43       	ld.w %d3,[%a15]16
80003abc:	42 23       	add %d3,%d2
80003abe:	59 c3 30 00 	st.w [%a12]48,%d3
    if (config->ccx[0]->channel <= 7)
80003ac2:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003ac6:	d4 22       	ld.a %a2,[%a2]
80003ac8:	19 22 04 00 	ld.w %d2,[%a2]4
80003acc:	8b 82 80 22 	ge %d2,%d2,8
80003ad0:	df 02 1c 80 	jne %d2,0,80003b08 <IfxGtm_Tom_PwmHl_init+0x9e>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC0_GLB_CTRL;
80003ad4:	1b 03 03 20 	addi %d2,%d3,48
        driver->tgc = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 0);
80003ad8:	59 c2 34 00 	st.w [%a12]52,%d2
    maskShift = (config->ccx[0]->channel <= 7) ? 0 : 8;
80003adc:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003ae0:	d4 22       	ld.a %a2,[%a2]
80003ae2:	19 22 04 00 	ld.w %d2,[%a2]4
80003ae6:	8b 82 80 22 	ge %d2,%d2,8
80003aea:	df 02 15 80 	jne %d2,0,80003b14 <IfxGtm_Tom_PwmHl_init+0xaa>
80003aee:	82 0f       	mov %d15,0
    IfxGtm_Tom_Ch_ClkSrc clock = IfxGtm_Tom_Ch_getClockSource(timer->tom, timer->timerChannel);
80003af0:	48 92       	ld.w %d2,[%a15]36
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003af2:	06 62       	sh %d2,6
80003af4:	c8 52       	ld.a %a2,[%a15]20
80003af6:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
    clk = (IfxGtm_Tom_Ch_ClkSrc)tomCh->CTRL.B.CLK_SRC_SR;
80003afa:	54 2e       	ld.w %d14,[%a2]
80003afc:	37 0e 63 e6 	extr.u %d14,%d14,12,3
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
80003b00:	82 08       	mov %d8,0
    uint16            channelsMask = 0;
80003b02:	82 09       	mov %d9,0
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
80003b04:	1d 00 af 00 	j 80003c62 <IfxGtm_Tom_PwmHl_init+0x1f8>
        pointer = (Ifx_GTM_TOM_TGC *)&tom->TGC1_GLB_CTRL;
80003b08:	1b 03 23 20 	addi %d2,%d3,560
        driver->tgc = IfxGtm_Tom_Ch_getTgcPointer(driver->tom, 1);
80003b0c:	59 c2 34 00 	st.w [%a12]52,%d2
80003b10:	1d ff e6 ff 	j 80003adc <IfxGtm_Tom_PwmHl_init+0x72>
    maskShift = (config->ccx[0]->channel <= 7) ? 0 : 8;
80003b14:	da 08       	mov %d15,8
80003b16:	1d ff ed ff 	j 80003af0 <IfxGtm_Tom_PwmHl_init+0x86>
            : IfxGtm_Tom_PwmHl_invertActiveState(config->base.ccxActiveState));
80003b1a:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80003b1e:	8b 02 00 22 	eq %d2,%d2,0
80003b22:	1d 00 cf 00 	j 80003cc0 <IfxGtm_Tom_PwmHl_init+0x256>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003b26:	82 13       	mov %d3,1
80003b28:	1d 00 d2 00 	j 80003ccc <IfxGtm_Tom_PwmHl_init+0x262>
            : IfxGtm_Tom_PwmHl_invertActiveState(config->base.ccxActiveState));
80003b2c:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80003b30:	8b 02 00 22 	eq %d2,%d2,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003b34:	60 92       	mov.a %a2,%d9
80003b36:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003b3a:	df 12 f1 00 	jeq %d2,1,80003d1c <IfxGtm_Tom_PwmHl_init+0x2b2>
80003b3e:	82 03       	mov %d3,0
80003b40:	54 22       	ld.w %d2,[%a2]
80003b42:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
80003b46:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003b48:	99 c2 30 00 	ld.a %a2,[%a12]48
80003b4c:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
80003b50:	54 22       	ld.w %d2,[%a2]
80003b52:	b7 12 01 2a 	insert %d2,%d2,1,20,1
80003b56:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003b58:	99 c2 30 00 	ld.a %a2,[%a12]48
80003b5c:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
80003b60:	54 22       	ld.w %d2,[%a2]
80003b62:	b7 02 01 2c 	insert %d2,%d2,0,24,1
80003b66:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, channel, IfxGtm_Tom_Timer_getOffset(driver->timer));
80003b68:	19 ca 30 00 	ld.w %d10,[%a12]48
80003b6c:	99 c4 20 00 	ld.a %a4,[%a12]32
80003b70:	6d ff e0 f8 	call 80002d30 <IfxGtm_Tom_Timer_getOffset>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003b74:	60 92       	mov.a %a2,%d9
80003b76:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CN0.U = value;
80003b7a:	59 22 14 00 	st.w [%a2]20,%d2
        if (config->initPins == TRUE)
80003b7e:	39 d2 34 00 	ld.bu %d2,[%a13]52
80003b82:	df 12 d0 00 	jeq %d2,1,80003d22 <IfxGtm_Tom_PwmHl_init+0x2b8>
        channel                     = config->coutx[channelIndex]->channel;
80003b86:	99 d2 30 00 	ld.a %a2,[%a13]48
80003b8a:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003b8e:	d4 22       	ld.a %a2,[%a2]
80003b90:	19 2a 04 00 	ld.w %d10,[%a2]4
        driver->coutx[channelIndex] = channel;
80003b94:	1b 18 01 30 	addi %d3,%d8,17
80003b98:	06 23       	sh %d3,2
80003b9a:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80003b9e:	74 2a       	st.w [%a2],%d10
        channelMask                 = 1 << (channel - maskShift);
80003ba0:	19 e2 ec ff 	ld.w %d2,[%a14]-20
80003ba4:	0b 2a 80 30 	sub %d3,%d10,%d2
80003ba8:	82 1b       	mov %d11,1
80003baa:	0f 3b 00 b0 	sh %d11,%d11,%d3
80003bae:	37 0b 70 90 	extr.u %d9,%d11,0,16
        channelsMask               |= channelMask;
80003bb2:	a6 d9       	or %d9,%d13
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003bb4:	06 6a       	sh %d10,6
80003bb6:	99 c2 30 00 	ld.a %a2,[%a12]48
80003bba:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
80003bbe:	54 22       	ld.w %d2,[%a2]
80003bc0:	37 e2 03 26 	insert %d2,%d2,%d14,12,3
80003bc4:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
80003bc6:	19 c3 30 00 	ld.w %d3,[%a12]48
80003bca:	39 c2 1c 00 	ld.bu %d2,[%a12]28
80003bce:	df 02 cd 00 	jeq %d2,0,80003d68 <IfxGtm_Tom_PwmHl_init+0x2fe>
            ? IfxGtm_Tom_PwmHl_invertActiveState(config->base.coutxActiveState)
80003bd2:	19 d2 20 00 	ld.w %d2,[%a13]32
    return activeState == Ifx_ActiveState_low ? Ifx_ActiveState_high : Ifx_ActiveState_low;
80003bd6:	8b 02 00 22 	eq %d2,%d2,0
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003bda:	60 a2       	mov.a %a2,%d10
80003bdc:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003be0:	df 12 c8 00 	jeq %d2,1,80003d70 <IfxGtm_Tom_PwmHl_init+0x306>
80003be4:	82 03       	mov %d3,0
80003be6:	54 22       	ld.w %d2,[%a2]
80003be8:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
80003bec:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_enableChannels(driver->tgc, channelMask, 0, TRUE);
80003bee:	19 cd 34 00 	ld.w %d13,[%a12]52
80003bf2:	37 0b 70 b0 	extr.u %d11,%d11,0,16
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80003bf6:	82 06       	mov %d6,0
80003bf8:	82 05       	mov %d5,0
80003bfa:	02 b4       	mov %d4,%d11
80003bfc:	6d 00 f0 02 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80003c00:	60 d2       	mov.a %a2,%d13
80003c02:	59 22 00 10 	st.w [%a2]64,%d2
        tgc->ENDIS_STAT.U = value;
80003c06:	59 22 04 10 	st.w [%a2]68,%d2
        IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc, channelMask, 0, TRUE);
80003c0a:	19 cd 34 00 	ld.w %d13,[%a12]52
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
80003c0e:	82 06       	mov %d6,0
80003c10:	82 05       	mov %d5,0
80003c12:	02 b4       	mov %d4,%d11
80003c14:	6d 00 e4 02 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
80003c18:	60 d2       	mov.a %a2,%d13
80003c1a:	59 22 08 10 	st.w [%a2]72,%d2
        tgc->OUTEN_STAT.U = value;
80003c1e:	59 22 0c 10 	st.w [%a2]76,%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003c22:	99 c2 30 00 	ld.a %a2,[%a12]48
80003c26:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.RST_CCU0 = (uint8)event;
80003c2a:	54 22       	ld.w %d2,[%a2]
80003c2c:	b7 12 01 2a 	insert %d2,%d2,1,20,1
80003c30:	74 22       	st.w [%a2],%d2
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003c32:	99 c2 30 00 	ld.a %a2,[%a12]48
80003c36:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
    tomCh->CTRL.B.TRIGOUT = (uint8)trigger;
80003c3a:	54 22       	ld.w %d2,[%a2]
80003c3c:	b7 02 01 2c 	insert %d2,%d2,0,24,1
80003c40:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setCounterValue(driver->tom, channel, IfxGtm_Tom_Timer_getOffset(driver->timer));
80003c42:	19 cb 30 00 	ld.w %d11,[%a12]48
80003c46:	99 c4 20 00 	ld.a %a4,[%a12]32
80003c4a:	6d ff 73 f8 	call 80002d30 <IfxGtm_Tom_Timer_getOffset>
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003c4e:	60 a2       	mov.a %a2,%d10
80003c50:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
    tomCh->CN0.U = value;
80003c54:	59 22 14 00 	st.w [%a2]20,%d2
        if (config->initPins == TRUE)
80003c58:	39 d2 34 00 	ld.bu %d2,[%a13]52
80003c5c:	df 12 8d 00 	jeq %d2,1,80003d76 <IfxGtm_Tom_PwmHl_init+0x30c>
    for (channelIndex = 0; channelIndex < config->base.channelCount; channelIndex++)
80003c60:	c2 18       	add %d8,1
80003c62:	39 d2 08 00 	ld.bu %d2,[%a13]8
80003c66:	7f 28 ab 80 	jge.u %d8,%d2,80003dbc <IfxGtm_Tom_PwmHl_init+0x352>
        channel                   = config->ccx[channelIndex]->channel;
80003c6a:	8f 28 00 c0 	sh %d12,%d8,2
80003c6e:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003c72:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003c76:	d4 22       	ld.a %a2,[%a2]
80003c78:	19 22 04 00 	ld.w %d2,[%a2]4
        driver->ccx[channelIndex] = channel;
80003c7c:	1b e8 00 30 	addi %d3,%d8,14
80003c80:	06 23       	sh %d3,2
80003c82:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80003c86:	74 22       	st.w [%a2],%d2
        channelMask               = 1 << (channel - maskShift);
80003c88:	59 ef ec ff 	st.w [%a14]-20,%d15
80003c8c:	0b f2 80 30 	sub %d3,%d2,%d15
80003c90:	82 1a       	mov %d10,1
80003c92:	0f 3a 00 a0 	sh %d10,%d10,%d3
80003c96:	37 0a 70 d0 	extr.u %d13,%d10,0,16
        channelsMask             |= channelMask;
80003c9a:	a6 9d       	or %d13,%d9
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003c9c:	8f 62 00 90 	sh %d9,%d2,6
80003ca0:	99 c2 30 00 	ld.a %a2,[%a12]48
80003ca4:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    tomCh->CTRL.B.CLK_SRC_SR = (uint8)clock;
80003ca8:	54 22       	ld.w %d2,[%a2]
80003caa:	37 e2 03 26 	insert %d2,%d2,%d14,12,3
80003cae:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, !driver->base.inverted
80003cb0:	19 c3 30 00 	ld.w %d3,[%a12]48
80003cb4:	39 c2 1c 00 	ld.bu %d2,[%a12]28
80003cb8:	df 02 31 ff 	jne %d2,0,80003b1a <IfxGtm_Tom_PwmHl_init+0xb0>
80003cbc:	19 d2 1c 00 	ld.w %d2,[%a13]28
    return (Ifx_GTM_TOM_CH *)((uint32)&tom->CH0.CTRL.U + 0x40 * channel);
80003cc0:	60 92       	mov.a %a2,%d9
80003cc2:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003cc6:	df 12 30 7f 	jeq %d2,1,80003b26 <IfxGtm_Tom_PwmHl_init+0xbc>
80003cca:	82 03       	mov %d3,0
80003ccc:	54 22       	ld.w %d2,[%a2]
80003cce:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
80003cd2:	74 22       	st.w [%a2],%d2
        IfxGtm_Tom_Tgc_enableChannels(driver->tgc, channelMask, 0, TRUE); /* Write the SOUR outout with !SL */
80003cd4:	19 cb 34 00 	ld.w %d11,[%a12]52
80003cd8:	37 0a 70 a0 	extr.u %d10,%d10,0,16
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_ENDIS_CTRL_ENDIS_CTRL0_OFF);
80003cdc:	82 06       	mov %d6,0
80003cde:	82 05       	mov %d5,0
80003ce0:	02 a4       	mov %d4,%d10
80003ce2:	6d 00 7d 02 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
        tgc->ENDIS_CTRL.U = value;
80003ce6:	60 b2       	mov.a %a2,%d11
80003ce8:	59 22 00 10 	st.w [%a2]64,%d2
        tgc->ENDIS_STAT.U = value;
80003cec:	59 22 04 10 	st.w [%a2]68,%d2
        IfxGtm_Tom_Tgc_enableChannelsOutput(driver->tgc, channelMask, 0, TRUE);
80003cf0:	19 cb 34 00 	ld.w %d11,[%a12]52
    value = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_OUTEN_CTRL_OUTEN_CTRL0_OFF);
80003cf4:	82 06       	mov %d6,0
80003cf6:	82 05       	mov %d5,0
80003cf8:	02 a4       	mov %d4,%d10
80003cfa:	6d 00 71 02 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
        tgc->OUTEN_CTRL.U = value;
80003cfe:	60 b2       	mov.a %a2,%d11
80003d00:	59 22 08 10 	st.w [%a2]72,%d2
        tgc->OUTEN_STAT.U = value;
80003d04:	59 22 0c 10 	st.w [%a2]76,%d2
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
80003d08:	19 c3 30 00 	ld.w %d3,[%a12]48
80003d0c:	39 c2 1c 00 	ld.bu %d2,[%a12]28
80003d10:	df 02 0e 7f 	jeq %d2,0,80003b2c <IfxGtm_Tom_PwmHl_init+0xc2>
80003d14:	19 d2 1c 00 	ld.w %d2,[%a13]28
80003d18:	1d ff 0e ff 	j 80003b34 <IfxGtm_Tom_PwmHl_init+0xca>
    tomCh->CTRL.B.SL = (activeState == Ifx_ActiveState_high) ? 1u : 0u;
80003d1c:	82 13       	mov %d3,1
80003d1e:	1d ff 11 ff 	j 80003b40 <IfxGtm_Tom_PwmHl_init+0xd6>
            IfxGtm_PinMap_setTomTout(config->ccx[channelIndex],
80003d22:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003d26:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003d2a:	19 d5 10 00 	ld.w %d5,[%a13]16
80003d2e:	19 d4 0c 00 	ld.w %d4,[%a13]12
80003d32:	d4 24       	ld.a %a4,[%a2]
80003d34:	6d ff 58 e7 	call 80000be4 <IfxGtm_PinMap_setTomTout>
            IfxPort_setPinState(config->ccx[channelIndex]->pin.port, config->ccx[channelIndex]->pin.pinIndex, config->base.ccxActiveState ? IfxPort_State_low : IfxPort_State_high);
80003d38:	99 d2 2c 00 	ld.a %a2,[%a13]44
80003d3c:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003d40:	d4 22       	ld.a %a2,[%a2]
80003d42:	99 23 10 00 	ld.a %a3,[%a2]16
80003d46:	39 22 14 00 	ld.bu %d2,[%a2]20
80003d4a:	19 d3 1c 00 	ld.w %d3,[%a13]28
80003d4e:	df 03 0a 00 	jeq %d3,0,80003d62 <IfxGtm_Tom_PwmHl_init+0x2f8>
80003d52:	7b 10 00 30 	movh %d3,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80003d56:	0f 23 00 20 	sh %d2,%d3,%d2
80003d5a:	59 32 04 00 	st.w [%a3]4,%d2
}
80003d5e:	1d ff 14 ff 	j 80003b86 <IfxGtm_Tom_PwmHl_init+0x11c>
80003d62:	82 13       	mov %d3,1
80003d64:	1d ff f9 ff 	j 80003d56 <IfxGtm_Tom_PwmHl_init+0x2ec>
        IfxGtm_Tom_Ch_setSignalLevel(driver->tom, channel, driver->base.inverted
80003d68:	19 d2 20 00 	ld.w %d2,[%a13]32
80003d6c:	1d ff 37 ff 	j 80003bda <IfxGtm_Tom_PwmHl_init+0x170>
80003d70:	82 13       	mov %d3,1
80003d72:	1d ff 3a ff 	j 80003be6 <IfxGtm_Tom_PwmHl_init+0x17c>
            IfxGtm_PinMap_setTomTout(config->coutx[channelIndex],
80003d76:	99 d2 30 00 	ld.a %a2,[%a13]48
80003d7a:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003d7e:	19 d5 10 00 	ld.w %d5,[%a13]16
80003d82:	19 d4 0c 00 	ld.w %d4,[%a13]12
80003d86:	d4 24       	ld.a %a4,[%a2]
80003d88:	6d ff 2e e7 	call 80000be4 <IfxGtm_PinMap_setTomTout>
            IfxPort_setPinState(config->coutx[channelIndex]->pin.port, config->coutx[channelIndex]->pin.pinIndex, config->base.coutxActiveState ? IfxPort_State_low : IfxPort_State_high);
80003d8c:	99 d2 30 00 	ld.a %a2,[%a13]48
80003d90:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80003d94:	d4 22       	ld.a %a2,[%a2]
80003d96:	99 23 10 00 	ld.a %a3,[%a2]16
80003d9a:	39 22 14 00 	ld.bu %d2,[%a2]20
80003d9e:	19 d3 20 00 	ld.w %d3,[%a13]32
80003da2:	df 03 0a 00 	jeq %d3,0,80003db6 <IfxGtm_Tom_PwmHl_init+0x34c>
80003da6:	7b 10 00 30 	movh %d3,1
    port->OMR.U = action << pinIndex;
80003daa:	0f 23 00 20 	sh %d2,%d3,%d2
80003dae:	59 32 04 00 	st.w [%a3]4,%d2
}
80003db2:	1d ff 57 ff 	j 80003c60 <IfxGtm_Tom_PwmHl_init+0x1f6>
80003db6:	82 13       	mov %d3,1
80003db8:	1d ff f9 ff 	j 80003daa <IfxGtm_Tom_PwmHl_init+0x340>
    IfxGtm_Tom_PwmHl_setMode(driver, Ifx_Pwm_Mode_off);
80003dbc:	82 44       	mov %d4,4
80003dbe:	40 c4       	mov.aa %a4,%a12
80003dc0:	6d ff 3a fa 	call 80003234 <IfxGtm_Tom_PwmHl_setMode>
    Ifx_TimerValue tOn[IFXGTM_TOM_PWMHL_MAX_NUM_CHANNELS] = {0};
80003dc4:	82 02       	mov %d2,0
80003dc6:	59 e2 f4 ff 	st.w [%a14]-12,%d2
80003dca:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003dce:	59 e2 fc ff 	st.w [%a14]-4,%d2
    IfxGtm_Tom_PwmHl_updateOff(driver, tOn);     /* tOn do not need defined values */
80003dd2:	d9 e5 f4 ff 	lea %a5,[%a14]-12
80003dd6:	40 c4       	mov.aa %a4,%a12
80003dd8:	6d ff 3d fc 	call 80003652 <IfxGtm_Tom_PwmHl_updateOff>
    IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc, channelsMask, 0, 0, 0);
80003ddc:	99 cd 34 00 	ld.a %a13,[%a12]52
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
80003de0:	82 06       	mov %d6,0
80003de2:	82 05       	mov %d5,0
80003de4:	02 94       	mov %d4,%d9
80003de6:	6d 00 fb 01 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80003dea:	02 28       	mov %d8,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
80003dec:	3b 00 01 60 	mov %d6,16
80003df0:	82 05       	mov %d5,0
80003df2:	82 04       	mov %d4,0
80003df4:	6d 00 f4 01 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
80003df8:	a6 82       	or %d2,%d8
80003dfa:	59 d2 08 00 	st.w [%a13]8,%d2
    IfxGtm_Tom_Tgc_trigger(driver->tgc);
80003dfe:	99 c2 34 00 	ld.a %a2,[%a12]52
    tgc->GLB_CTRL.U = 1 << IFX_GTM_TOM_TGC0_GLB_CTRL_HOST_TRIG_OFF;
80003e02:	82 12       	mov %d2,1
80003e04:	74 22       	st.w [%a2],%d2
    IfxGtm_Tom_Tgc_setChannelsForceUpdate(driver->tgc, 0, channelsMask, 0, 0);
80003e06:	99 cd 34 00 	ld.a %a13,[%a12]52
    regEnable        = IfxGtm_Tom_Tgc_buildFeature(enableMask, disableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_FUPD_CTRL0_OFF);
80003e0a:	82 06       	mov %d6,0
80003e0c:	02 95       	mov %d5,%d9
80003e0e:	82 04       	mov %d4,0
80003e10:	6d 00 e6 01 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
80003e14:	02 28       	mov %d8,%d2
    regReset         = IfxGtm_Tom_Tgc_buildFeature(resetEnableMask, resetDisableMask, IFX_GTM_TOM_TGC0_FUPD_CTRL_RSTCN0_CH0_OFF);
80003e16:	3b 00 01 60 	mov %d6,16
80003e1a:	82 05       	mov %d5,0
80003e1c:	82 04       	mov %d4,0
80003e1e:	6d 00 df 01 	call 800041dc <IfxGtm_Tom_Tgc_buildFeature>
    tgc->FUPD_CTRL.U = regEnable | regReset;
80003e22:	a6 82       	or %d2,%d8
80003e24:	59 d2 08 00 	st.w [%a13]8,%d2
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003e28:	82 08       	mov %d8,0
80003e2a:	1d 00 15 00 	j 80003e54 <IfxGtm_Tom_PwmHl_init+0x3ea>
        IfxGtm_Tom_Timer_addToChannelMask(timer, driver->ccx[channelIndex]);
80003e2e:	1b e8 00 20 	addi %d2,%d8,14
80003e32:	06 22       	sh %d2,2
80003e34:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003e38:	54 24       	ld.w %d4,[%a2]
80003e3a:	40 f4       	mov.aa %a4,%a15
80003e3c:	6d ff 21 f7 	call 80002c7e <IfxGtm_Tom_Timer_addToChannelMask>
        IfxGtm_Tom_Timer_addToChannelMask(timer, driver->coutx[channelIndex]);
80003e40:	1b 18 01 20 	addi %d2,%d8,17
80003e44:	06 22       	sh %d2,2
80003e46:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003e4a:	54 24       	ld.w %d4,[%a2]
80003e4c:	40 f4       	mov.aa %a4,%a15
80003e4e:	6d ff 18 f7 	call 80002c7e <IfxGtm_Tom_Timer_addToChannelMask>
    for (channelIndex = 0; channelIndex < driver->base.channelCount; channelIndex++)
80003e52:	c2 18       	add %d8,1
80003e54:	39 c2 1d 00 	ld.bu %d2,[%a12]29
80003e58:	3f 28 eb ff 	jlt.u %d8,%d2,80003e2e <IfxGtm_Tom_PwmHl_init+0x3c4>
}
80003e5c:	82 12       	mov %d2,1
80003e5e:	00 90       	ret 

80003e60 <IfxGtm_Tom_PwmHl_initConfig>:
{
80003e60:	40 ae       	mov.aa %a14,%sp
80003e62:	40 4c       	mov.aa %a12,%a4
    IfxStdIf_PwmHl_initConfig(&config->base);
80003e64:	6d 00 96 0d 	call 80005990 <IfxStdIf_PwmHl_initConfig>
    config->timer    = NULL_PTR;
80003e68:	82 02       	mov %d2,0
80003e6a:	59 c2 24 00 	st.w [%a12]36,%d2
    config->tom      = IfxGtm_Tom_0;
80003e6e:	59 c2 28 00 	st.w [%a12]40,%d2
    config->ccx      = NULL_PTR;
80003e72:	59 c2 2c 00 	st.w [%a12]44,%d2
    config->coutx    = NULL_PTR;
80003e76:	59 c2 30 00 	st.w [%a12]48,%d2
    config->initPins = TRUE;
80003e7a:	82 12       	mov %d2,1
80003e7c:	e9 c2 34 00 	st.b [%a12]52,%d2
}
80003e80:	00 90       	ret 

80003e82 <IfxGtm_enable>:
    IfxScuWdt_setCpuEndinit(psw);
}


void IfxGtm_enable(Ifx_GTM *gtm)
{
80003e82:	40 ae       	mov.aa %a14,%sp
80003e84:	80 49       	mov.d %d9,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80003e86:	6d ff 71 f5 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80003e8a:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(psw);
80003e8c:	02 24       	mov %d4,%d2
80003e8e:	6d ff 04 f4 	call 80002696 <IfxScuWdt_clearCpuEndinit>
    gtm->CLC.B.DISR = 0;
80003e92:	7b a0 00 20 	movh %d2,10
80003e96:	1b 02 d0 2f 	addi %d2,%d2,-768
80003e9a:	60 92       	mov.a %a2,%d9
80003e9c:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
80003ea0:	54 43       	ld.w %d3,[%a4]
80003ea2:	8f 13 c0 31 	andn %d3,%d3,1
80003ea6:	74 43       	st.w [%a4],%d3
    IfxScuWdt_setCpuEndinit(psw);
80003ea8:	02 84       	mov %d4,%d8
80003eaa:	6d ff 7c f5 	call 800029a2 <IfxScuWdt_setCpuEndinit>
}
80003eae:	00 90       	ret 

80003eb0 <IfxGtm_getSysClkFrequency>:


float32 IfxGtm_getSysClkFrequency(void)
{
80003eb0:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
80003eb2:	6d ff 61 f1 	call 80002174 <IfxScuCcu_getSourceFrequency>
80003eb6:	91 30 00 2f 	movh.a %a2,61443
80003eba:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80003ebe:	54 23       	ld.w %d3,[%a2]
80003ec0:	37 03 64 36 	extr.u %d3,%d3,12,4
80003ec4:	4b 03 41 31 	itof %d3,%d3
    return IfxScuCcu_getGtmFrequency();
}
80003ec8:	4b 32 51 20 	div.f %d2,%d2,%d3
80003ecc:	00 90       	ret 

80003ece <IfxGtm_Cmu_enableClocks>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxGtm_Cmu_enableClocks(Ifx_GTM *gtm, uint32 clkMask)
{
80003ece:	40 ae       	mov.aa %a14,%sp
    gtm->CMU.CLK_EN.U = clkMask;
80003ed0:	59 44 00 c0 	st.w [%a4]768,%d4
}
80003ed4:	00 90       	ret 

80003ed6 <IfxGtm_Cmu_getModuleFrequency>:
    return IfxGtm_Cmu_getModuleFrequency(gtm) * multiplier;
}


float32 IfxGtm_Cmu_getModuleFrequency(Ifx_GTM *gtm)
{
80003ed6:	40 ae       	mov.aa %a14,%sp
    return IfxGtm_getSysClkFrequency();
80003ed8:	6d ff ec ff 	call 80003eb0 <IfxGtm_getSysClkFrequency>
}
80003edc:	00 90       	ret 

80003ede <IfxGtm_Cmu_getGclkFrequency>:
{
80003ede:	40 ae       	mov.aa %a14,%sp
    float32 N          = gtm->CMU.GCLK_DEN.B.GCLK_DEN;
80003ee0:	19 42 08 c0 	ld.w %d2,[%a4]776
80003ee4:	37 02 78 20 	extr.u %d2,%d2,0,24
80003ee8:	4b 02 61 81 	utof %d8,%d2
    float32 Z          = gtm->CMU.GCLK_NUM.B.GCLK_NUM;
80003eec:	19 42 04 c0 	ld.w %d2,[%a4]772
80003ef0:	37 02 78 20 	extr.u %d2,%d2,0,24
80003ef4:	4b 02 61 21 	utof %d2,%d2
    float32 multiplier = N / Z;
80003ef8:	4b 28 51 80 	div.f %d8,%d8,%d2
    return IfxGtm_Cmu_getModuleFrequency(gtm) * multiplier;
80003efc:	6d ff ed ff 	call 80003ed6 <IfxGtm_Cmu_getModuleFrequency>
}
80003f00:	4b 82 41 20 	mul.f %d2,%d2,%d8
80003f04:	00 90       	ret 

80003f06 <IfxGtm_Cmu_isClkClockEnabled>:


boolean IfxGtm_Cmu_isClkClockEnabled(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex)
{
80003f06:	40 ae       	mov.aa %a14,%sp
    return ((gtm->CMU.CLK_EN.U >> (2 * clkIndex)) & IFX_GTM_CMU_CLK_EN_EN_CLK0_MSK) == 0x3;
80003f08:	19 43 00 c0 	ld.w %d3,[%a4]768
80003f0c:	8f 14 00 20 	sh %d2,%d4,1
80003f10:	57 03 62 22 	extr.u %d2,%d3,%d2,2
}
80003f14:	8b 32 00 22 	eq %d2,%d2,3
80003f18:	00 90       	ret 

80003f1a <IfxGtm_Cmu_getClkFrequency>:
{
80003f1a:	40 ae       	mov.aa %a14,%sp
80003f1c:	40 4c       	mov.aa %a12,%a4
80003f1e:	02 48       	mov %d8,%d4
80003f20:	8f f5 0f 91 	and %d9,%d5,255
    if ((IfxGtm_Cmu_isClkClockEnabled(gtm, clkIndex) != FALSE) || (assumeEnabled != FALSE))
80003f24:	6d ff f1 ff 	call 80003f06 <IfxGtm_Cmu_isClkClockEnabled>
80003f28:	df 02 04 80 	jne %d2,0,80003f30 <IfxGtm_Cmu_getClkFrequency+0x16>
80003f2c:	df 09 49 00 	jeq %d9,0,80003fbe <IfxGtm_Cmu_getClkFrequency+0xa4>
        switch (clkIndex)
80003f30:	df 68 2c 00 	jeq %d8,6,80003f88 <IfxGtm_Cmu_getClkFrequency+0x6e>
80003f34:	ff 78 15 80 	jge.u %d8,7,80003f5e <IfxGtm_Cmu_getClkFrequency+0x44>
80003f38:	ff 68 45 80 	jge.u %d8,6,80003fc2 <IfxGtm_Cmu_getClkFrequency+0xa8>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK0_5[clkIndex].CTRL.B.CLK_CNT + 1);
80003f3c:	40 c4       	mov.aa %a4,%a12
80003f3e:	6d ff d0 ff 	call 80003ede <IfxGtm_Cmu_getGclkFrequency>
80003f42:	1b 38 0c 30 	addi %d3,%d8,195
80003f46:	06 23       	sh %d3,2
80003f48:	01 c3 00 c6 	addsc.a %a12,%a12,%d3,0
80003f4c:	54 c3       	ld.w %d3,[%a12]
80003f4e:	37 03 78 30 	extr.u %d3,%d3,0,24
80003f52:	c2 13       	add %d3,1
80003f54:	4b 03 41 31 	itof %d3,%d3
80003f58:	4b 32 51 20 	div.f %d2,%d2,%d3
            break;
80003f5c:	00 90       	ret 
        switch (clkIndex)
80003f5e:	df 78 13 80 	jne %d8,7,80003f84 <IfxGtm_Cmu_getClkFrequency+0x6a>
            if (gtm->CMU.CLK_7.CTRL.B.CLK7_SEL == 0)
80003f62:	19 c2 28 c0 	ld.w %d2,[%a12]808
80003f66:	ef 82 27 80 	jnz.t %d2,24,80003fb4 <IfxGtm_Cmu_getClkFrequency+0x9a>
                frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK_7.CTRL.B.CLK_CNT + 1);
80003f6a:	40 c4       	mov.aa %a4,%a12
80003f6c:	6d ff b9 ff 	call 80003ede <IfxGtm_Cmu_getGclkFrequency>
80003f70:	19 c3 28 c0 	ld.w %d3,[%a12]808
80003f74:	37 03 78 30 	extr.u %d3,%d3,0,24
80003f78:	c2 13       	add %d3,1
80003f7a:	4b 03 41 31 	itof %d3,%d3
80003f7e:	4b 32 51 20 	div.f %d2,%d2,%d3
80003f82:	00 90       	ret 
        switch (clkIndex)
80003f84:	82 02       	mov %d2,0
80003f86:	00 90       	ret 
            if (gtm->CMU.CLK_6.CTRL.B.CLK6_SEL == 0)
80003f88:	19 c2 24 c0 	ld.w %d2,[%a12]804
80003f8c:	ef 82 0f 80 	jnz.t %d2,24,80003faa <IfxGtm_Cmu_getClkFrequency+0x90>
                frequency = IfxGtm_Cmu_getGclkFrequency(gtm) / (gtm->CMU.CLK_6.CTRL.B.CLK_CNT + 1);
80003f90:	40 c4       	mov.aa %a4,%a12
80003f92:	6d ff a6 ff 	call 80003ede <IfxGtm_Cmu_getGclkFrequency>
80003f96:	19 c3 24 c0 	ld.w %d3,[%a12]804
80003f9a:	37 03 78 30 	extr.u %d3,%d3,0,24
80003f9e:	c2 13       	add %d3,1
80003fa0:	4b 03 41 31 	itof %d3,%d3
80003fa4:	4b 32 51 20 	div.f %d2,%d2,%d3
80003fa8:	00 90       	ret 
                frequency = IfxGtm_Dpll_getSubIncFrequency(gtm, IfxGtm_Dpll_SubInc_2);
80003faa:	82 14       	mov %d4,1
80003fac:	40 c4       	mov.aa %a4,%a12
80003fae:	6d 00 14 01 	call 800041d6 <IfxGtm_Dpll_getSubIncFrequency>
80003fb2:	00 90       	ret 
                frequency = IfxGtm_Dpll_getSubIncFrequency(gtm, IfxGtm_Dpll_SubInc_1);
80003fb4:	82 04       	mov %d4,0
80003fb6:	40 c4       	mov.aa %a4,%a12
80003fb8:	6d 00 0f 01 	call 800041d6 <IfxGtm_Dpll_getSubIncFrequency>
80003fbc:	00 90       	ret 
        frequency = 0.0f;
80003fbe:	82 02       	mov %d2,0
80003fc0:	00 90       	ret 
        switch (clkIndex)
80003fc2:	82 02       	mov %d2,0
}
80003fc4:	00 90       	ret 

80003fc6 <IfxGtm_Cmu_isFxClockEnabled>:
    return ((gtm->CMU.CLK_EN.U >> (2 * clkIndex + 16)) & IFX_GTM_CMU_CLK_EN_EN_CLK0_MSK) == 0x3;
}


boolean IfxGtm_Cmu_isFxClockEnabled(Ifx_GTM *gtm)
{
80003fc6:	40 ae       	mov.aa %a14,%sp
    return gtm->CMU.CLK_EN.B.EN_FXCLK == 0x3;
80003fc8:	19 42 00 c0 	ld.w %d2,[%a4]768
80003fcc:	37 02 62 2b 	extr.u %d2,%d2,22,2
}
80003fd0:	8b 32 00 22 	eq %d2,%d2,3
80003fd4:	00 90       	ret 

80003fd6 <IfxGtm_Cmu_isFxClockEnabled_end>:
	...

80003fd8 <IfxGtm_Cmu_getFxClkFrequency>:
{
80003fd8:	40 ae       	mov.aa %a14,%sp
80003fda:	40 4c       	mov.aa %a12,%a4
80003fdc:	02 49       	mov %d9,%d4
80003fde:	8f f5 0f 81 	and %d8,%d5,255
    if (IfxGtm_Cmu_isFxClockEnabled(gtm) || (assumeEnabled != FALSE))
80003fe2:	6d ff f2 ff 	call 80003fc6 <IfxGtm_Cmu_isFxClockEnabled>
80003fe6:	df 02 04 80 	jne %d2,0,80003fee <IfxGtm_Cmu_getFxClkFrequency+0x16>
80003fea:	df 08 57 00 	jeq %d8,0,80004098 <IfxGtm_Cmu_getFxClkFrequency+0xc0>
        fxSelect = gtm->CMU.FXCLK.CTRL.B.FXCLK_SEL;
80003fee:	19 c2 04 d0 	ld.w %d2,[%a12]836
80003ff2:	8f f2 00 21 	and %d2,%d2,15
80003ff6:	02 23       	mov %d3,%d2
        if (fxSelect == 0)
80003ff8:	df 02 0f 00 	jeq %d2,0,80004016 <IfxGtm_Cmu_getFxClkFrequency+0x3e>
        else if (fxSelect <= 6)
80003ffc:	bf 72 24 80 	jlt.u %d2,7,80004044 <IfxGtm_Cmu_getFxClkFrequency+0x6c>
        else if (fxSelect == 7)
80004000:	df 72 2a 00 	jeq %d2,7,80004054 <IfxGtm_Cmu_getFxClkFrequency+0x7c>
        else if (fxSelect == 8)
80004004:	3b 80 00 20 	mov %d2,8
80004008:	5f 23 2d 00 	jeq %d3,%d2,80004062 <IfxGtm_Cmu_getFxClkFrequency+0x8a>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm);
8000400c:	40 c4       	mov.aa %a4,%a12
8000400e:	6d ff 68 ff 	call 80003ede <IfxGtm_Cmu_getGclkFrequency>
80004012:	1d 00 05 00 	j 8000401c <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getGclkFrequency(gtm);
80004016:	40 c4       	mov.aa %a4,%a12
80004018:	6d ff 63 ff 	call 80003ede <IfxGtm_Cmu_getGclkFrequency>
        switch (clkIndex)
8000401c:	ff 59 40 80 	jge.u %d9,5,8000409c <IfxGtm_Cmu_getFxClkFrequency+0xc4>
80004020:	91 00 00 28 	movh.a %a2,32768
80004024:	d9 22 30 04 	lea %a2,[%a2]16432 <80004030 <IfxGtm_Cmu_getFxClkFrequency+0x58>>
80004028:	01 29 02 26 	addsc.a %a2,%a2,%d9,2
8000402c:	dc 02       	ji %a2
8000402e:	00 00       	nop 
80004030:	1d 00 37 00 	j 8000409e <IfxGtm_Cmu_getFxClkFrequency+0xc6>
80004034:	1d 00 1e 00 	j 80004070 <IfxGtm_Cmu_getFxClkFrequency+0x98>
80004038:	1d 00 21 00 	j 8000407a <IfxGtm_Cmu_getFxClkFrequency+0xa2>
8000403c:	1d 00 24 00 	j 80004084 <IfxGtm_Cmu_getFxClkFrequency+0xac>
80004040:	1d 00 27 00 	j 8000408e <IfxGtm_Cmu_getFxClkFrequency+0xb6>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, (IfxGtm_Cmu_Clk)(fxSelect - 1), assumeEnabled);
80004044:	02 85       	mov %d5,%d8
80004046:	1b f2 ff 4f 	addi %d4,%d2,-1
8000404a:	40 c4       	mov.aa %a4,%a12
8000404c:	6d ff 67 ff 	call 80003f1a <IfxGtm_Cmu_getClkFrequency>
80004050:	1d ff e6 ff 	j 8000401c <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, IfxGtm_Cmu_Clk_6, assumeEnabled);
80004054:	02 85       	mov %d5,%d8
80004056:	82 64       	mov %d4,6
80004058:	40 c4       	mov.aa %a4,%a12
8000405a:	6d ff 60 ff 	call 80003f1a <IfxGtm_Cmu_getClkFrequency>
8000405e:	1d ff df ff 	j 8000401c <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = IfxGtm_Cmu_getClkFrequency(gtm, IfxGtm_Cmu_Clk_7, assumeEnabled);
80004062:	02 85       	mov %d5,%d8
80004064:	82 74       	mov %d4,7
80004066:	40 c4       	mov.aa %a4,%a12
80004068:	6d ff 59 ff 	call 80003f1a <IfxGtm_Cmu_getClkFrequency>
8000406c:	1d ff d8 ff 	j 8000401c <IfxGtm_Cmu_getFxClkFrequency+0x44>
            frequency = frequency / 16;
80004070:	7b 00 d8 33 	movh %d3,15744
80004074:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
80004078:	00 90       	ret 
            frequency = frequency / 256;
8000407a:	7b 00 b8 33 	movh %d3,15232
8000407e:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
80004082:	00 90       	ret 
            frequency = frequency / 4096;
80004084:	7b 00 98 33 	movh %d3,14720
80004088:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
8000408c:	00 90       	ret 
            frequency = frequency / 65536;
8000408e:	7b 00 78 33 	movh %d3,14208
80004092:	4b 32 41 20 	mul.f %d2,%d2,%d3
            break;
80004096:	00 90       	ret 
        frequency = 0.0f;
80004098:	82 02       	mov %d2,0
8000409a:	00 90       	ret 
            frequency = 0.0f;
8000409c:	82 02       	mov %d2,0
}
8000409e:	00 90       	ret 

800040a0 <IfxGtm_Cmu_setClkFrequency>:
    }
}


void IfxGtm_Cmu_setClkFrequency(Ifx_GTM *gtm, IfxGtm_Cmu_Clk clkIndex, float32 frequency)
{
800040a0:	40 ae       	mov.aa %a14,%sp
800040a2:	40 4c       	mov.aa %a12,%a4
800040a4:	02 48       	mov %d8,%d4
800040a6:	02 59       	mov %d9,%d5
    float32 t   = (IfxGtm_Cmu_getGclkFrequency(gtm) / frequency) - 1;
800040a8:	6d ff 1b ff 	call 80003ede <IfxGtm_Cmu_getGclkFrequency>
800040ac:	4b 92 51 50 	div.f %d5,%d2,%d9
800040b0:	7b 00 f8 23 	movh %d2,16256
800040b4:	6b 02 31 55 	sub.f %d5,%d5,%d2
    uint32  cnt = (uint32)t;
800040b8:	4b 05 71 91 	ftouz %d9,%d5

    if ((t - (float32)cnt) > 0.5f)
800040bc:	4b 09 61 21 	utof %d2,%d9
800040c0:	6b 02 31 25 	sub.f %d2,%d5,%d2
800040c4:	7b 00 f0 33 	movh %d3,16128
800040c8:	4b 32 01 20 	cmp.f %d2,%d2,%d3
800040cc:	6f 22 03 00 	jz.t %d2,2,800040d2 <IfxGtm_Cmu_setClkFrequency+0x32>
    {                           /* Round to nearest */
        cnt++;
800040d0:	c2 19       	add %d9,1
    }

    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
800040d2:	6d ff 4b f4 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
800040d6:	02 2a       	mov %d10,%d2
    IfxScuWdt_clearCpuEndinit(psw);
800040d8:	02 24       	mov %d4,%d2
800040da:	6d ff de f2 	call 80002696 <IfxScuWdt_clearCpuEndinit>

    switch (clkIndex)
800040de:	df 68 1e 00 	jeq %d8,6,8000411a <IfxGtm_Cmu_setClkFrequency+0x7a>
800040e2:	ff 78 11 80 	jge.u %d8,7,80004104 <IfxGtm_Cmu_setClkFrequency+0x64>
800040e6:	ff 68 0b 80 	jge.u %d8,6,800040fc <IfxGtm_Cmu_setClkFrequency+0x5c>
    case IfxGtm_Cmu_Clk_1:
    case IfxGtm_Cmu_Clk_2:
    case IfxGtm_Cmu_Clk_3:
    case IfxGtm_Cmu_Clk_4:
    case IfxGtm_Cmu_Clk_5:
        gtm->CMU.CLK0_5[clkIndex].CTRL.B.CLK_CNT = cnt;
800040ea:	1b 38 0c 20 	addi %d2,%d8,195
800040ee:	06 22       	sh %d2,2
800040f0:	01 c2 00 c6 	addsc.a %a12,%a12,%d2,0
800040f4:	54 c2       	ld.w %d2,[%a12]
800040f6:	37 92 18 20 	insert %d2,%d2,%d9,0,24
800040fa:	74 c2       	st.w [%a12],%d2
        break;
    default:
        break;
    }

    IfxScuWdt_setCpuEndinit(psw);
800040fc:	02 a4       	mov %d4,%d10
800040fe:	6d ff 52 f4 	call 800029a2 <IfxScuWdt_setCpuEndinit>
}
80004102:	00 90       	ret 
    switch (clkIndex)
80004104:	df 78 fc ff 	jne %d8,7,800040fc <IfxGtm_Cmu_setClkFrequency+0x5c>
        gtm->CMU.CLK_7.CTRL.B.CLK_CNT = cnt;
80004108:	d9 c2 28 c0 	lea %a2,[%a12]808
8000410c:	19 c2 28 c0 	ld.w %d2,[%a12]808
80004110:	37 92 18 20 	insert %d2,%d2,%d9,0,24
80004114:	74 22       	st.w [%a2],%d2
        break;
80004116:	1d ff f3 ff 	j 800040fc <IfxGtm_Cmu_setClkFrequency+0x5c>
        gtm->CMU.CLK_6.CTRL.B.CLK_CNT = cnt;
8000411a:	d9 c2 24 c0 	lea %a2,[%a12]804
8000411e:	19 c2 24 c0 	ld.w %d2,[%a12]804
80004122:	37 92 18 20 	insert %d2,%d2,%d9,0,24
80004126:	74 22       	st.w [%a2],%d2
        break;
80004128:	1d ff ea ff 	j 800040fc <IfxGtm_Cmu_setClkFrequency+0x5c>

8000412c <IfxGtm_Cmu_setGclkFrequency>:
    IfxScuWdt_setCpuEndinit(psw);
}


void IfxGtm_Cmu_setGclkFrequency(Ifx_GTM *gtm, float32 frequency)
{
8000412c:	40 ae       	mov.aa %a14,%sp
8000412e:	40 4c       	mov.aa %a12,%a4
80004130:	02 48       	mov %d8,%d4
    float32 f;
    float32 bestDistance = frequency;

    float32 fIn          = IfxGtm_Cmu_getModuleFrequency(gtm);
80004132:	6d ff d2 fe 	call 80003ed6 <IfxGtm_Cmu_getModuleFrequency>
    float32 bestDistance = frequency;
80004136:	02 85       	mov %d5,%d8
    uint32  z, n, nBest = 1, zBest = 1;
80004138:	82 19       	mov %d9,1
8000413a:	02 9a       	mov %d10,%d9
    float32 t;

#if 1

    for (z = 1; z < 0xFFFFFF; z++)
8000413c:	02 94       	mov %d4,%d9
8000413e:	1d 00 22 00 	j 80004182 <IfxGtm_Cmu_setGclkFrequency+0x56>
                bestDistance = distance;
                nBest        = n;
                zBest        = z;
            }

            if (bestDistance < 0.1f)
80004142:	7b d0 dc 63 	movh %d6,15821
80004146:	1b d6 cc 6c 	addi %d6,%d6,-13107
8000414a:	4b 65 01 60 	cmp.f %d6,%d5,%d6
8000414e:	6f 06 16 80 	jnz.t %d6,0,8000417a <IfxGtm_Cmu_setGclkFrequency+0x4e>
        for (n = z; n > 0; n--)
80004152:	c2 f3       	add %d3,-1
80004154:	df 03 14 00 	jeq %d3,0,8000417c <IfxGtm_Cmu_setGclkFrequency+0x50>
            f        = t * n;
80004158:	4b 03 61 61 	utof %d6,%d3
8000415c:	4b 06 41 60 	mul.f %d6,%d6,%d0
            distance = fabsf(frequency - f);
80004160:	6b 06 31 68 	sub.f %d6,%d8,%d6
80004164:	b7 06 81 6f 	insert %d6,%d6,0,31,1
            if (distance < bestDistance)
80004168:	4b 65 01 70 	cmp.f %d7,%d5,%d6
8000416c:	6f 27 eb 7f 	jz.t %d7,2,80004142 <IfxGtm_Cmu_setGclkFrequency+0x16>
                zBest        = z;
80004170:	02 49       	mov %d9,%d4
                nBest        = n;
80004172:	02 3a       	mov %d10,%d3
                bestDistance = distance;
80004174:	02 65       	mov %d5,%d6
80004176:	1d ff e6 ff 	j 80004142 <IfxGtm_Cmu_setGclkFrequency+0x16>
            {
                endLoop = TRUE;
8000417a:	82 13       	mov %d3,1
                break;
            }
        }

        if (endLoop)
8000417c:	df 03 0f 80 	jne %d3,0,8000419a <IfxGtm_Cmu_setGclkFrequency+0x6e>
    for (z = 1; z < 0xFFFFFF; z++)
80004180:	c2 14       	add %d4,1
80004182:	7b 00 10 30 	movh %d3,256
80004186:	c2 e3       	add %d3,-2
80004188:	3f 43 09 80 	jlt.u %d3,%d4,8000419a <IfxGtm_Cmu_setGclkFrequency+0x6e>
        t = fIn / z;
8000418c:	4b 04 61 01 	utof %d0,%d4
80004190:	4b 02 51 00 	div.f %d0,%d2,%d0
        for (n = z; n > 0; n--)
80004194:	02 43       	mov %d3,%d4
80004196:	1d ff df ff 	j 80004154 <IfxGtm_Cmu_setGclkFrequency+0x28>
        }
    }

#endif

    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
8000419a:	6d ff e7 f3 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
8000419e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(psw);
800041a0:	02 24       	mov %d4,%d2
800041a2:	6d ff 7a f2 	call 80002696 <IfxScuWdt_clearCpuEndinit>
    gtm->CMU.GCLK_NUM.B.GCLK_NUM = zBest;
800041a6:	b7 09 08 9c 	insert %d9,%d9,0,24,8
800041aa:	d9 c2 04 c0 	lea %a2,[%a12]772
800041ae:	19 c3 04 c0 	ld.w %d3,[%a12]772
800041b2:	37 93 18 30 	insert %d3,%d3,%d9,0,24
800041b6:	74 23       	st.w [%a2],%d3
    gtm->CMU.GCLK_NUM.B.GCLK_NUM = zBest;   /* write twice to be sure */
800041b8:	54 23       	ld.w %d3,[%a2]
800041ba:	37 93 18 30 	insert %d3,%d3,%d9,0,24
800041be:	74 23       	st.w [%a2],%d3
    gtm->CMU.GCLK_DEN.B.GCLK_DEN = nBest;
800041c0:	d9 c2 08 c0 	lea %a2,[%a12]776
800041c4:	19 c3 08 c0 	ld.w %d3,[%a12]776
800041c8:	37 a3 18 30 	insert %d3,%d3,%d10,0,24
800041cc:	74 23       	st.w [%a2],%d3
    IfxScuWdt_setCpuEndinit(psw);
800041ce:	02 84       	mov %d4,%d8
800041d0:	6d ff e9 f3 	call 800029a2 <IfxScuWdt_setCpuEndinit>
}
800041d4:	00 90       	ret 

800041d6 <IfxGtm_Dpll_getSubIncFrequency>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

float32 IfxGtm_Dpll_getSubIncFrequency(Ifx_GTM *gtm, IfxGtm_Dpll_SubInc index)
{
800041d6:	40 ae       	mov.aa %a14,%sp
    IFX_UNUSED_PARAMETER(gtm)
    IFX_UNUSED_PARAMETER(index)
    return 0.0F;
}
800041d8:	82 02       	mov %d2,0
800041da:	00 90       	ret 

800041dc <IfxGtm_Tom_Tgc_buildFeature>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint32 IfxGtm_Tom_Tgc_buildFeature(uint16 enableMask, uint16 disableMask, uint8 bitfieldOffset)
{
800041dc:	40 ae       	mov.aa %a14,%sp
    uint8  i;
    uint32 reg  = 0;
    uint32 mask = enableMask | (disableMask << 16);
800041de:	8f 05 01 50 	sh %d5,%d5,16
800041e2:	a6 54       	or %d4,%d5
    uint32 reg  = 0;
800041e4:	82 02       	mov %d2,0

    for (i = 0; i < IFXGTM_TOM_NUM_TGC_CHANNELS; i++)
800041e6:	82 03       	mov %d3,0
800041e8:	1d 00 06 00 	j 800041f4 <IfxGtm_Tom_Tgc_buildFeature+0x18>
        if (mask & 0x10000)
        {
            reg |= IfxGtm_FeatureControl_disable << shift;
        }

        mask = mask >> 1;
800041ec:	06 f4       	sh %d4,-1
    for (i = 0; i < IFXGTM_TOM_NUM_TGC_CHANNELS; i++)
800041ee:	c2 13       	add %d3,1
800041f0:	8f f3 0f 31 	and %d3,%d3,255
800041f4:	ff 83 17 80 	jge.u %d3,8,80004222 <IfxGtm_Tom_Tgc_buildFeature+0x46>
        uint8 shift = (i * 2) + bitfieldOffset;
800041f8:	8f 13 00 50 	sh %d5,%d3,1
800041fc:	8f f5 0f 51 	and %d5,%d5,255
80004200:	42 65       	add %d5,%d6
80004202:	8f f5 0f 51 	and %d5,%d5,255
        if (mask & 0x1)
80004206:	6f 04 06 00 	jz.t %d4,0,80004212 <IfxGtm_Tom_Tgc_buildFeature+0x36>
            reg |= IfxGtm_FeatureControl_enable << shift;
8000420a:	82 27       	mov %d7,2
8000420c:	0f 57 00 70 	sh %d7,%d7,%d5
80004210:	a6 72       	or %d2,%d7
        if (mask & 0x10000)
80004212:	ef 04 ed 7f 	jz.t %d4,16,800041ec <IfxGtm_Tom_Tgc_buildFeature+0x10>
            reg |= IfxGtm_FeatureControl_disable << shift;
80004216:	82 17       	mov %d7,1
80004218:	0f 57 00 70 	sh %d7,%d7,%d5
8000421c:	a6 72       	or %d2,%d7
8000421e:	1d ff e7 ff 	j 800041ec <IfxGtm_Tom_Tgc_buildFeature+0x10>
    }

    return reg;
}
80004222:	00 90       	ret 

80004224 <IfxCpu_Trap_memoryManagementError>:
{
80004224:	40 ae       	mov.aa %a14,%sp
80004226:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80004228:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000422a:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
8000422e:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80004232:	8f 72 00 21 	and %d2,%d2,7
80004236:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000423a:	80 22       	mov.d %d2,%a2
8000423c:	0f 54 a0 30 	or %d3,%d4,%d5
80004240:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80004244:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80004248:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000424a:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000424e:	00 80       	rfe 
}
80004250:	00 90       	ret 

80004252 <IfxCpu_Trap_internalProtectionError>:
{
80004252:	40 ae       	mov.aa %a14,%sp
80004254:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80004256:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80004258:	b7 14 18 44 	insert %d4,%d4,1,8,24
8000425c:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80004260:	8f 72 00 21 	and %d2,%d2,7
80004264:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80004268:	80 22       	mov.d %d2,%a2
8000426a:	0f 54 a0 30 	or %d3,%d4,%d5
8000426e:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
80004272:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80004276:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80004278:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000427c:	00 80       	rfe 
}
8000427e:	00 90       	ret 

80004280 <IfxCpu_Trap_instructionError>:
{
80004280:	40 ae       	mov.aa %a14,%sp
80004282:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80004284:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80004286:	b7 24 18 44 	insert %d4,%d4,2,8,24
8000428a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000428e:	8f 72 00 21 	and %d2,%d2,7
80004292:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80004296:	80 22       	mov.d %d2,%a2
80004298:	0f 54 a0 30 	or %d3,%d4,%d5
8000429c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
800042a0:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800042a4:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800042a6:	0d 00 40 02 	rslcx 
    __asm("rfe");
800042aa:	00 80       	rfe 
}
800042ac:	00 90       	ret 

800042ae <IfxCpu_Trap_contextManagementError>:
{
800042ae:	40 ae       	mov.aa %a14,%sp
800042b0:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800042b2:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800042b4:	b7 34 18 44 	insert %d4,%d4,3,8,24
800042b8:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800042bc:	8f 72 00 21 	and %d2,%d2,7
800042c0:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800042c4:	80 22       	mov.d %d2,%a2
800042c6:	0f 54 a0 30 	or %d3,%d4,%d5
800042ca:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
800042ce:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800042d2:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800042d4:	0d 00 40 02 	rslcx 
    __asm("rfe");
800042d8:	00 80       	rfe 
}
800042da:	00 90       	ret 

800042dc <IfxCpu_Trap_busError>:
{
800042dc:	40 ae       	mov.aa %a14,%sp
800042de:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800042e0:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800042e2:	b7 44 18 44 	insert %d4,%d4,4,8,24
800042e6:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800042ea:	8f 72 00 21 	and %d2,%d2,7
800042ee:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800042f2:	80 22       	mov.d %d2,%a2
800042f4:	0f 54 a0 30 	or %d3,%d4,%d5
800042f8:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
800042fc:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80004300:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80004302:	0d 00 40 02 	rslcx 
    __asm("rfe");
80004306:	00 80       	rfe 
}
80004308:	00 90       	ret 

8000430a <IfxCpu_Trap_assertion>:
{
8000430a:	40 ae       	mov.aa %a14,%sp
8000430c:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000430e:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80004310:	8f f4 0f 41 	and %d4,%d4,255
80004314:	3b 00 50 20 	mov %d2,1280
80004318:	a6 24       	or %d4,%d2
8000431a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000431e:	8f 72 00 21 	and %d2,%d2,7
80004322:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80004326:	80 22       	mov.d %d2,%a2
80004328:	0f 54 a0 30 	or %d3,%d4,%d5
8000432c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80004330:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80004334:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80004336:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000433a:	00 80       	rfe 
}
8000433c:	00 90       	ret 

8000433e <IfxCpu_Trap_systemCall_Cpu0>:
{
8000433e:	40 ae       	mov.aa %a14,%sp
80004340:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80004342:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80004344:	b7 64 18 44 	insert %d4,%d4,6,8,24
80004348:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000434c:	8f 72 00 21 	and %d2,%d2,7
80004350:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80004354:	80 22       	mov.d %d2,%a2
80004356:	0f 54 a0 30 	or %d3,%d4,%d5
8000435a:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
8000435e:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80004362:	0d 00 40 02 	rslcx 
    __asm("rfe");
80004366:	00 80       	rfe 
}
80004368:	00 90       	ret 

8000436a <IfxCpu_Trap_systemCall_Cpu1>:
{
8000436a:	40 ae       	mov.aa %a14,%sp
8000436c:	20 08       	sub.a %sp,8
8000436e:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80004370:	b7 64 18 44 	insert %d4,%d4,6,8,24
80004374:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80004378:	8f 72 00 21 	and %d2,%d2,7
8000437c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80004380:	80 22       	mov.d %d2,%a2
80004382:	0f 54 a0 30 	or %d3,%d4,%d5
80004386:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
8000438a:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000438e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80004392:	00 80       	rfe 
}
80004394:	00 90       	ret 

80004396 <IfxCpu_Trap_systemCall_Cpu2>:
{
80004396:	40 ae       	mov.aa %a14,%sp
80004398:	20 08       	sub.a %sp,8
8000439a:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000439c:	b7 64 18 44 	insert %d4,%d4,6,8,24
800043a0:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800043a4:	8f 72 00 21 	and %d2,%d2,7
800043a8:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800043ac:	80 22       	mov.d %d2,%a2
800043ae:	0f 54 a0 30 	or %d3,%d4,%d5
800043b2:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
800043b6:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800043ba:	0d 00 40 02 	rslcx 
    __asm("rfe");
800043be:	00 80       	rfe 
}
800043c0:	00 90       	ret 

800043c2 <IfxCpu_Trap_nonMaskableInterrupt>:
{
800043c2:	40 ae       	mov.aa %a14,%sp
800043c4:	20 08       	sub.a %sp,8
800043c6:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800043c8:	b7 74 18 44 	insert %d4,%d4,7,8,24
800043cc:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800043d0:	8f 72 00 21 	and %d2,%d2,7
800043d4:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800043d8:	80 22       	mov.d %d2,%a2
800043da:	0f 54 a0 30 	or %d3,%d4,%d5
800043de:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
800043e2:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800043e6:	0d 00 40 02 	rslcx 
    __asm("rfe");
800043ea:	00 80       	rfe 
}
800043ec:	00 90       	ret 

800043ee <IfxCpu_getIndex>:
    return cpuMode;
}


IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
{
800043ee:	40 ae       	mov.aa %a14,%sp
    IfxCpu_ResourceCpu result;
    uint32             index;
    result = IfxCpu_ResourceCpu_none;

    for (index = 0; index < IFXCPU_NUM_MODULES; index++)
800043f0:	82 02       	mov %d2,0
800043f2:	1d 00 03 00 	j 800043f8 <IfxCpu_getIndex+0xa>
800043f6:	c2 12       	add %d2,1
800043f8:	ff 32 18 80 	jge.u %d2,3,80004428 <IfxCpu_getIndex+0x3a>
    {
        if (IfxCpu_cfg_indexMap[index].module == cpu)
800043fc:	8f 32 00 30 	sh %d3,%d2,3
80004400:	91 00 00 28 	movh.a %a2,32768
80004404:	d9 22 20 b0 	lea %a2,[%a2]736 <800002e0 <IfxCpu_cfg_indexMap>>
80004408:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000440c:	54 23       	ld.w %d3,[%a2]
8000440e:	80 44       	mov.d %d4,%a4
80004410:	5f 43 f3 ff 	jne %d3,%d4,800043f6 <IfxCpu_getIndex+0x8>
        {
            result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
80004414:	06 32       	sh %d2,3
80004416:	91 00 00 28 	movh.a %a2,32768
8000441a:	d9 22 20 b0 	lea %a2,[%a2]736 <800002e0 <IfxCpu_cfg_indexMap>>
8000441e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004422:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80004426:	00 90       	ret 
    result = IfxCpu_ResourceCpu_none;
80004428:	82 32       	mov %d2,3
        }
    }

    return result;
}
8000442a:	00 90       	ret 

8000442c <IfxCpu_getCoreMode>:
{
8000442c:	40 ae       	mov.aa %a14,%sp
8000442e:	80 48       	mov.d %d8,%a4
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
80004430:	6d ff df ff 	call 800043ee <IfxCpu_getIndex>


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80004434:	4d c0 e1 3f 	mfcr %d3,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004438:	8f 73 00 31 	and %d3,%d3,7
    if (IfxCpu_getCoreIndex() != index)
8000443c:	5f 32 22 00 	jeq %d2,%d3,80004480 <IfxCpu_getCoreMode+0x54>
        dbgsr = cpu->DBGSR;
80004440:	bb 00 d0 3f 	mov.u %d3,64768
80004444:	60 82       	mov.a %a2,%d8
80004446:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000444a:	54 23       	ld.w %d3,[%a2]
    if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
8000444c:	37 03 e2 40 	extr.u %d4,%d3,1,2
80004450:	df 14 1c 00 	jeq %d4,1,80004488 <IfxCpu_getCoreMode+0x5c>
        if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
80004454:	df 04 1c 80 	jne %d4,0,8000448c <IfxCpu_getCoreMode+0x60>
            pmcsr_val = &MODULE_SCU.PMCSR[index];
80004458:	06 22       	sh %d2,2
8000445a:	7b 30 00 3f 	movh %d3,61443
8000445e:	1b 43 0d 36 	addi %d3,%d3,24788
80004462:	60 32       	mov.a %a2,%d3
80004464:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
            if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
80004468:	54 22       	ld.w %d2,[%a2]
8000446a:	37 02 63 24 	extr.u %d2,%d2,8,3
8000446e:	df 12 11 00 	jeq %d2,1,80004490 <IfxCpu_getCoreMode+0x64>
                if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
80004472:	54 22       	ld.w %d2,[%a2]
80004474:	37 02 63 24 	extr.u %d2,%d2,8,3
80004478:	df 32 0e 00 	jeq %d2,3,80004494 <IfxCpu_getCoreMode+0x68>
    cpuMode = IfxCpu_CoreMode_unknown;
8000447c:	82 52       	mov %d2,5
8000447e:	00 90       	ret 
        dbgsr.U = __mfcr(CPU_DBGSR);
80004480:	4d 00 d0 3f 	mfcr %d3,$dbgsr
80004484:	1d ff e4 ff 	j 8000444c <IfxCpu_getCoreMode+0x20>
        cpuMode = IfxCpu_CoreMode_halt;
80004488:	82 02       	mov %d2,0
8000448a:	00 90       	ret 
            cpuMode = IfxCpu_CoreMode_unknown;
8000448c:	82 52       	mov %d2,5
8000448e:	00 90       	ret 
                cpuMode = IfxCpu_CoreMode_run;
80004490:	82 12       	mov %d2,1
80004492:	00 90       	ret 
                    cpuMode = IfxCpu_CoreMode_idle;
80004494:	82 22       	mov %d2,2
}
80004496:	00 90       	ret 

80004498 <IfxCpu_setCoreMode>:
    *lock = 0;
}


boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
{
80004498:	40 ae       	mov.aa %a14,%sp
8000449a:	80 4c       	mov.d %d12,%a4
8000449c:	02 48       	mov %d8,%d4
    uint8              reqslp;
    boolean            retValue;
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
8000449e:	6d ff a8 ff 	call 800043ee <IfxCpu_getIndex>
800044a2:	02 2a       	mov %d10,%d2

    /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
800044a4:	8b 08 20 42 	ne %d4,%d8,0
800044a8:	8b 38 20 32 	ne %d3,%d8,3
800044ac:	26 43       	and %d3,%d4
                || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
800044ae:	df 03 0a 00 	jeq %d3,0,800044c2 <IfxCpu_setCoreMode+0x2a>
800044b2:	df 48 05 00 	jeq %d8,4,800044bc <IfxCpu_setCoreMode+0x24>
800044b6:	82 19       	mov %d9,1
800044b8:	1d 00 06 00 	j 800044c4 <IfxCpu_setCoreMode+0x2c>
800044bc:	82 09       	mov %d9,0
800044be:	1d 00 03 00 	j 800044c4 <IfxCpu_setCoreMode+0x2c>
800044c2:	82 09       	mov %d9,0
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
800044c4:	8f f9 0f 91 	and %d9,%d9,255

    reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
800044c8:	8b 28 00 82 	eq %d8,%d8,2

    if (retValue == TRUE)
800044cc:	df 09 04 80 	jne %d9,0,800044d4 <IfxCpu_setCoreMode+0x3c>
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
        }
    }

    return retValue;
}
800044d0:	02 92       	mov %d2,%d9
800044d2:	00 90       	ret 
    reg.U = __mfcr(CPU_CORE_ID);
800044d4:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800044d8:	8f 72 00 21 	and %d2,%d2,7
        if (IfxCpu_getCoreIndex() != index)
800044dc:	5f 2a 24 00 	jeq %d10,%d2,80004524 <IfxCpu_setCoreMode+0x8c>
            uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
800044e0:	6d ff 56 f2 	call 8000298c <IfxScuWdt_getSafetyWatchdogPassword>
800044e4:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
800044e6:	02 24       	mov %d4,%d2
800044e8:	6d ff fc f0 	call 800026e0 <IfxScuWdt_clearSafetyEndinit>
            MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
800044ec:	1b 5a 03 20 	addi %d2,%d10,53
800044f0:	06 22       	sh %d2,2
800044f2:	7b 30 00 3f 	movh %d3,61443
800044f6:	1b 03 00 36 	addi %d3,%d3,24576
800044fa:	60 32       	mov.a %a2,%d3
800044fc:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004500:	54 23       	ld.w %d3,[%a2]
80004502:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80004506:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setSafetyEndinit(safetyWdtPw);
80004508:	02 b4       	mov %d4,%d11
8000450a:	6d ff 71 f2 	call 800029ec <IfxScuWdt_setSafetyEndinit>
            cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
8000450e:	bb 00 d0 2f 	mov.u %d2,64768
80004512:	60 c2       	mov.a %a2,%d12
80004514:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004518:	54 22       	ld.w %d2,[%a2]
8000451a:	b7 22 82 20 	insert %d2,%d2,2,1,2
8000451e:	74 22       	st.w [%a2],%d2
80004520:	1d ff d8 ff 	j 800044d0 <IfxCpu_setCoreMode+0x38>
            uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
80004524:	6d ff 22 f2 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80004528:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearCpuEndinit(cpuWdtPw);
8000452a:	02 24       	mov %d4,%d2
8000452c:	6d ff b5 f0 	call 80002696 <IfxScuWdt_clearCpuEndinit>
            MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
80004530:	1b 5a 03 20 	addi %d2,%d10,53
80004534:	06 22       	sh %d2,2
80004536:	7b 30 00 3f 	movh %d3,61443
8000453a:	1b 03 00 36 	addi %d3,%d3,24576
8000453e:	60 32       	mov.a %a2,%d3
80004540:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004544:	54 23       	ld.w %d3,[%a2]
80004546:	37 83 02 30 	insert %d3,%d3,%d8,0,2
8000454a:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
8000454c:	02 b4       	mov %d4,%d11
8000454e:	6d ff 2a f2 	call 800029a2 <IfxScuWdt_setCpuEndinit>
80004552:	1d ff bf ff 	j 800044d0 <IfxCpu_setCoreMode+0x38>

80004556 <IfxCpu_setProgramCounter>:


boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
{
80004556:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80004558:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000455c:	8f 72 00 21 	and %d2,%d2,7
    if (cpu < IfxCpu_ResourceCpu_none)
80004560:	ff 32 17 80 	jge.u %d2,3,8000458e <IfxCpu_setProgramCounter+0x38>
        module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
80004564:	06 32       	sh %d2,3
80004566:	91 00 00 28 	movh.a %a2,32768
8000456a:	d9 22 20 b0 	lea %a2,[%a2]736 <800002e0 <IfxCpu_cfg_indexMap>>
8000456e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004572:	54 22       	ld.w %d2,[%a2]
    boolean retVal = TRUE;

    if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
80004574:	80 43       	mov.d %d3,%a4
80004576:	5f 23 0f 00 	jeq %d3,%d2,80004594 <IfxCpu_setProgramCounter+0x3e>
    {
        retVal = FALSE;
    }
    else
    {
        cpu->PC.B.PC = programCounter >> 1;
8000457a:	bb 80 e0 2f 	mov.u %d2,65032
8000457e:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
80004582:	54 42       	ld.w %d2,[%a4]
80004584:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80004588:	74 42       	st.w [%a4],%d2
    boolean retVal = TRUE;
8000458a:	82 12       	mov %d2,1
8000458c:	00 90       	ret 
        module = NULL_PTR;
8000458e:	82 02       	mov %d2,0
80004590:	1d ff f2 ff 	j 80004574 <IfxCpu_setProgramCounter+0x1e>
        retVal = FALSE;
80004594:	82 02       	mov %d2,0
    }

    return retVal;
}
80004596:	00 90       	ret 

80004598 <IfxCpu_startCore>:
    return retVal;
}


boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
{
80004598:	40 ae       	mov.aa %a14,%sp
8000459a:	80 49       	mov.d %d9,%a4
    boolean retVal = TRUE;

    /* Set the PC for Core 1 */
    retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
8000459c:	6d ff dd ff 	call 80004556 <IfxCpu_setProgramCounter>
800045a0:	8f 12 00 81 	and %d8,%d2,1
    /* Get the mode for Core 1 and set it to RUNNING */

    /* Core not running already */
    if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
800045a4:	60 94       	mov.a %a4,%d9
800045a6:	6d ff 43 ff 	call 8000442c <IfxCpu_getCoreMode>
800045aa:	df 02 04 00 	jeq %d2,0,800045b2 <IfxCpu_startCore+0x1a>
    {
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
    }

    return retVal;
}
800045ae:	02 82       	mov %d2,%d8
800045b0:	00 90       	ret 
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
800045b2:	82 14       	mov %d4,1
800045b4:	60 94       	mov.a %a4,%d9
800045b6:	6d ff 71 ff 	call 80004498 <IfxCpu_setCoreMode>
800045ba:	26 28       	and %d8,%d2
800045bc:	1d ff f9 ff 	j 800045ae <IfxCpu_startCore+0x16>

800045c0 <IfxCpu_waitEvent>:


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
800045c0:	40 ae       	mov.aa %a14,%sp
800045c2:	40 4c       	mov.aa %a12,%a4
800045c4:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
800045c6:	80 42       	mov.d %d2,%a4
800045c8:	b7 02 1c 20 	insert %d2,%d2,0,0,28
800045cc:	7b 00 00 3d 	movh %d3,53248
800045d0:	5f 32 28 00 	jeq %d2,%d3,80004620 <IfxCpu_waitEvent+0x60>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
800045d4:	6d ff d0 ed 	call 80002174 <IfxScuCcu_getSourceFrequency>
800045d8:	91 30 00 2f 	movh.a %a2,61443
800045dc:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800045e0:	54 23       	ld.w %d3,[%a2]
800045e2:	37 03 64 34 	extr.u %d3,%d3,8,4
800045e6:	4b 03 41 31 	itof %d3,%d3
800045ea:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
800045ee:	7b a0 47 34 	movh %d3,17530
800045f2:	4b 32 51 20 	div.f %d2,%d2,%d3
800045f6:	4b 08 61 41 	utof %d4,%d8
800045fa:	4b 24 41 40 	mul.f %d4,%d4,%d2
800045fe:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
80004602:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80004606:	54 c2       	ld.w %d2,[%a12]
80004608:	8f 72 00 21 	and %d2,%d2,7
8000460c:	df 72 18 00 	jeq %d2,7,8000463c <IfxCpu_waitEvent+0x7c>
    __asm__ volatile ("nop" : : : "memory");
80004610:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80004612:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80004616:	a2 42       	sub %d2,%d4
80004618:	3f 32 f7 ff 	jlt.u %d2,%d3,80004606 <IfxCpu_waitEvent+0x46>
        {
            errorcnt = 1;
8000461c:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
8000461e:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80004620:	80 42       	mov.d %d2,%a4
80004622:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
80004626:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
8000462a:	4d c0 e1 2f 	mfcr %d2,$core_id
8000462e:	8f c2 01 20 	sh %d2,%d2,28
80004632:	0b 23 80 20 	sub %d2,%d3,%d2
80004636:	60 2c       	mov.a %a12,%d2
80004638:	1d ff ce ff 	j 800045d4 <IfxCpu_waitEvent+0x14>
    boolean          errorcnt      = 0U;
8000463c:	82 02       	mov %d2,0
8000463e:	00 90       	ret 

80004640 <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
80004640:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
80004642:	4d c0 e1 2f 	mfcr %d2,$core_id
80004646:	82 13       	mov %d3,1
80004648:	57 30 21 22 	imask %e2,%d3,%d2,1
8000464c:	49 42 40 08 	ldmst [%a4]0,%e2
}
80004650:	00 90       	ret 

80004652 <Ifx_Cpp_Init>:
#pragma section
#elif defined(__DCC__)
#pragma section CONST
#endif
static void Ifx_Cpp_Init(void)
{
80004652:	40 ae       	mov.aa %a14,%sp
    Ifx_C_Init();           /*Initialization of C runtime variables */
80004654:	6d 00 d9 09 	call 80005a06 <Ifx_C_Init>
#elif defined (__HIGHTEC__)
extern void _init(void); /* cpp initialization */
    _init();
#elif defined (__GNUC__) && !defined(__HIGHTEC__)
    extern void _init(void); /* cpp initialization */
    _init();
80004658:	6d 00 c8 16 	call 800073e8 <_init>
#endif
}
8000465c:	00 90       	ret 

8000465e <hardware_init_hook>:
{}
8000465e:	00 90       	ret 

80004660 <software_init_hook>:
{}
80004660:	00 90       	ret 

80004662 <_Core0_start>:
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80004662:	91 30 00 2f 	movh.a %a2,61443
80004666:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
    __setareg(sp, __USTACK(0));
8000466a:	91 20 00 37 	movh.a %a3,28674
8000466e:	37 02 6e 21 	extr.u %d2,%d2,2,14
80004672:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80004676:	8f f2 83 81 	xor %d8,%d2,63
8000467a:	80 32       	mov.d %d2,%a3
8000467c:	1b 02 60 29 	addi %d2,%d2,-27136
80004680:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80004682:	0d 00 80 04 	dsync 
    __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
80004686:	3b 00 98 20 	mov %d2,2432
8000468a:	cd 42 e0 0f 	mtcr $psw,%d2
    pcxi  = __mfcr(CPU_PCXI);
8000468e:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
80004692:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80004696:	cd 02 e0 0f 	mtcr $pcxi,%d2
    if (enable)
    {                           /* Step 3: Initiate invalidation of current cache contents if any */
        Ifx_CPU_PCON1 pcon1;
        pcon1.U       = 0;
        pcon1.B.PCINV = 1;
        __mtcr(CPU_PCON1, pcon1.U);
8000469a:	82 12       	mov %d2,1
8000469c:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800046a0:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800046a4:	8f 72 00 21 	and %d2,%d2,7
    }

    uint32 coreIndex   = IfxCpu_getCoreIndex();
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800046a8:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
800046ac:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
800046b0:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800046b2:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800046b4:	37 02 6e 21 	extr.u %d2,%d2,2,14
    /*PCACHE enable steps */
    {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800046b8:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800046bc:	6f 13 41 81 	jnz.t %d3,1,8000493e <_Core0_start+0x2dc>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800046c0:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800046c4:	54 22       	ld.w %d2,[%a2]
800046c6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800046ca:	a6 32       	or %d2,%d3
800046cc:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800046d0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800046d2:	54 22       	ld.w %d2,[%a2]
800046d4:	6f 02 ff ff 	jnz.t %d2,0,800046d2 <_Core0_start+0x70>
        Ifx_CPU_PCON0 pcon0;
        pcon0.U       = 0;
        pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
        __mtcr(CPU_PCON0, pcon0.U);
800046d8:	82 02       	mov %d2,0
800046da:	cd c2 20 09 	mtcr $pcon0,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800046de:	54 22       	ld.w %d2,[%a2]
800046e0:	6f 12 09 00 	jz.t %d2,1,800046f2 <_Core0_start+0x90>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800046e4:	54 22       	ld.w %d2,[%a2]
800046e6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800046ea:	a6 32       	or %d2,%d3
800046ec:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800046f0:	74 22       	st.w [%a2],%d2

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800046f2:	54 22       	ld.w %d2,[%a2]
800046f4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800046f8:	a6 32       	or %d2,%d3
800046fa:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800046fe:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80004700:	54 22       	ld.w %d2,[%a2]
80004702:	6f 02 ff 7f 	jz.t %d2,0,80004700 <_Core0_start+0x9e>
    __asm__ volatile ("isync" : : : "memory");
80004706:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
8000470a:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000470e:	7b 30 00 3f 	movh %d3,61443
80004712:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004716:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000471a:	13 c2 20 23 	madd %d2,%d3,%d2,12
8000471e:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80004720:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004722:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004724:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80004728:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
8000472c:	6f 13 fd 80 	jnz.t %d3,1,80004926 <_Core0_start+0x2c4>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004730:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004734:	54 22       	ld.w %d2,[%a2]
80004736:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000473a:	a6 32       	or %d2,%d3
8000473c:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004740:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004742:	54 22       	ld.w %d2,[%a2]
80004744:	6f 02 ff ff 	jnz.t %d2,0,80004742 <_Core0_start+0xe0>
        __mtcr(CPU_DCON0, dcon0.U);
80004748:	82 22       	mov %d2,2
8000474a:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
8000474e:	54 22       	ld.w %d2,[%a2]
80004750:	6f 12 09 00 	jz.t %d2,1,80004762 <_Core0_start+0x100>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004754:	54 22       	ld.w %d2,[%a2]
80004756:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000475a:	a6 32       	or %d2,%d3
8000475c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004760:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004762:	54 22       	ld.w %d2,[%a2]
80004764:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004768:	a6 32       	or %d2,%d3
8000476a:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000476e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004770:	54 22       	ld.w %d2,[%a2]
80004772:	6f 02 ff 7f 	jz.t %d2,0,80004770 <_Core0_start+0x10e>
80004776:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
8000477a:	91 30 00 2f 	movh.a %a2,61443
8000477e:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80004782:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004786:	8f 28 00 30 	sh %d3,%d8,2
    if (watchdog->CON0.B.LCK)
8000478a:	6f 12 09 00 	jz.t %d2,1,8000479c <_Core0_start+0x13a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000478e:	54 22       	ld.w %d2,[%a2]
80004790:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004794:	a6 32       	or %d2,%d3
80004796:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000479a:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000479c:	91 30 00 2f 	movh.a %a2,61443
800047a0:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800047a4:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800047a8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800047ac:	a6 32       	or %d2,%d3
800047ae:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800047b2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800047b4:	54 22       	ld.w %d2,[%a2]
800047b6:	6f 02 ff ff 	jnz.t %d2,0,800047b4 <_Core0_start+0x152>
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
800047ba:	91 00 00 38 	movh.a %a3,32768
800047be:	80 32       	mov.d %d2,%a3
800047c0:	1b 02 10 20 	addi %d2,%d2,256
800047c4:	cd 42 e2 0f 	mtcr $btv,%d2
    __mtcr(CPU_BIV, (uint32)__INTTAB(0));
800047c8:	91 f0 01 38 	movh.a %a3,32799
800047cc:	80 32       	mov.d %d2,%a3
800047ce:	1b 02 00 24 	addi %d2,%d2,16384
800047d2:	cd 02 e2 0f 	mtcr $biv,%d2
    __mtcr(CPU_ISP, (uint32)__ISTACK(0));
800047d6:	91 20 00 37 	movh.a %a3,28674
800047da:	80 32       	mov.d %d2,%a3
800047dc:	1b 02 b0 29 	addi %d2,%d2,-25856
800047e0:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
800047e4:	54 22       	ld.w %d2,[%a2]
800047e6:	6f 12 09 00 	jz.t %d2,1,800047f8 <_Core0_start+0x196>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800047ea:	54 22       	ld.w %d2,[%a2]
800047ec:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800047f0:	a6 32       	or %d2,%d3
800047f2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800047f6:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800047f8:	91 30 00 2f 	movh.a %a2,61443
800047fc:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80004800:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80004804:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004808:	a6 32       	or %d2,%d3
8000480a:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000480e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004810:	54 22       	ld.w %d2,[%a2]
80004812:	6f 02 ff 7f 	jz.t %d2,0,80004810 <_Core0_start+0x1ae>
    __setareg(a0, __SDATA1(0));
80004816:	91 10 00 26 	movh.a %a2,24577
8000481a:	80 22       	mov.d %d2,%a2
8000481c:	1b 02 00 28 	addi %d2,%d2,-32768
80004820:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(0));
80004822:	91 10 00 28 	movh.a %a2,32769
80004826:	80 22       	mov.d %d2,%a2
80004828:	1b 02 00 28 	addi %d2,%d2,-32768
8000482c:	60 21       	mov.a %a1,%d2
    __setareg(a8, __SDATA3(0));
8000482e:	91 10 00 28 	movh.a %a2,32769
80004832:	80 22       	mov.d %d2,%a2
80004834:	1b 02 00 28 	addi %d2,%d2,-32768
80004838:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(0));
8000483a:	91 10 00 29 	movh.a %a2,36865
8000483e:	80 22       	mov.d %d2,%a2
80004840:	1b 02 00 28 	addi %d2,%d2,-32768
80004844:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80004846:	91 20 00 37 	movh.a %a3,28674
8000484a:	91 20 00 27 	movh.a %a2,28674
8000484e:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70019c00 <__CSA0>>
80004852:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7001bc00 <__CSA0_END>>
80004856:	01 32 20 20 	sub.a %a2,%a2,%a3
8000485a:	80 22       	mov.d %d2,%a2
8000485c:	8f a2 1f 70 	sh %d7,%d2,-6
    uint32 *prvCsa      = csaBegin;
80004860:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80004862:	1b d7 ff 0f 	addi %d0,%d7,-3
    for (k = 0U; k < numOfCsa; k++)
80004866:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80004868:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000486a:	7b f0 00 40 	movh %d4,15
    for (k = 0U; k < numOfCsa; k++)
8000486e:	df 07 27 00 	jeq %d7,0,800048bc <_Core0_start+0x25a>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004872:	37 02 70 53 	extr.u %d5,%d2,6,16
80004876:	8f 42 1f 60 	sh %d6,%d2,-12
8000487a:	26 46       	and %d6,%d4
8000487c:	a6 65       	or %d5,%d6
        if (k == 0U)
8000487e:	df 03 16 00 	jeq %d3,0,800048aa <_Core0_start+0x248>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80004882:	74 25       	st.w [%a2],%d5
        if (k == (numOfCsa - 3U))
80004884:	5f 03 04 80 	jne %d3,%d0,8000488c <_Core0_start+0x22a>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80004888:	cd c5 e3 0f 	mtcr $lcx,%d5
    for (k = 0U; k < numOfCsa; k++)
8000488c:	c2 13       	add %d3,1
8000488e:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80004890:	1b 02 04 50 	addi %d5,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80004894:	5f 37 0f 00 	jeq %d7,%d3,800048b2 <_Core0_start+0x250>
        nxtCsa += 16U;           /* next CSA */
80004898:	02 52       	mov %d2,%d5
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000489a:	37 02 70 53 	extr.u %d5,%d2,6,16
8000489e:	8f 42 1f 60 	sh %d6,%d2,-12
800048a2:	26 46       	and %d6,%d4
800048a4:	a6 65       	or %d5,%d6
        if (k == 0U)
800048a6:	df 03 ee ff 	jne %d3,0,80004882 <_Core0_start+0x220>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
800048aa:	cd 85 e3 0f 	mtcr $fcx,%d5
800048ae:	1d ff eb ff 	j 80004884 <_Core0_start+0x222>
800048b2:	1b f7 ff 2f 	addi %d2,%d7,-1
800048b6:	06 62       	sh %d2,6
800048b8:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
800048bc:	82 02       	mov %d2,0
800048be:	74 22       	st.w [%a2],%d2
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
800048c0:	6d ff 66 f0 	call 8000298c <IfxScuWdt_getSafetyWatchdogPassword>
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
800048c4:	02 84       	mov %d4,%d8
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
800048c6:	02 29       	mov %d9,%d2
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
800048c8:	6d ff 34 ef 	call 80002730 <IfxScuWdt_disableCpuWatchdog>
        IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
800048cc:	02 94       	mov %d4,%d9
800048ce:	6d ff 70 ef 	call 800027ae <IfxScuWdt_disableSafetyWatchdog>
       	hardware_init_hook();
800048d2:	6d ff c6 fe 	call 8000465e <hardware_init_hook>
        Ifx_Cpp_Init();
800048d6:	6d ff be fe 	call 80004652 <Ifx_Cpp_Init>
       	software_init_hook();
800048da:	6d ff c3 fe 	call 80004660 <software_init_hook>
        IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
800048de:	02 84       	mov %d4,%d8
800048e0:	6d ff b6 ef 	call 8000284c <IfxScuWdt_enableCpuWatchdog>
        IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
800048e4:	02 94       	mov %d4,%d9
800048e6:	6d ff f2 ef 	call 800028ca <IfxScuWdt_enableSafetyWatchdog>
    IFXCPU_CSTART_CCU_INIT_HOOK();
800048ea:	91 00 00 48 	movh.a %a4,32768
800048ee:	d9 44 30 f0 	lea %a4,[%a4]1008 <800003f0 <IfxScuCcu_defaultClockConfig>>
800048f2:	6d ff 31 ed 	call 80002354 <IfxScuCcu_init>
    (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
800048f6:	91 00 00 28 	movh.a %a2,32768
800048fa:	80 22       	mov.d %d2,%a2
800048fc:	1b 62 95 44 	addi %d4,%d2,18774
80004900:	91 30 88 4f 	movh.a %a4,63619
80004904:	6d ff 4a fe 	call 80004598 <IfxCpu_startCore>
    (void)IfxCpu_startCore(&MODULE_CPU2, (uint32)&_Core2_start);       /*The status returned by function call is ignored */
80004908:	91 00 00 28 	movh.a %a2,32768
8000490c:	80 22       	mov.d %d2,%a2
8000490e:	1b 42 bf 44 	addi %d4,%d2,19444
80004912:	91 50 88 4f 	movh.a %a4,63621
80004916:	6d ff 41 fe 	call 80004598 <IfxCpu_startCore>
    __non_return_call(core0_main);
8000491a:	91 00 00 28 	movh.a %a2,32768
8000491e:	d9 22 de 55 	lea %a2,[%a2]23902 <80005d5e <core0_main>>
80004922:	dc 02       	ji %a2
}
80004924:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004926:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004928:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000492c:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004930:	0f 34 a0 20 	or %d2,%d4,%d3
80004934:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004938:	74 22       	st.w [%a2],%d2
8000493a:	1d ff fd fe 	j 80004734 <_Core0_start+0xd2>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000493e:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004940:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004944:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004948:	0f 34 a0 20 	or %d2,%d4,%d3
8000494c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004950:	74 22       	st.w [%a2],%d2
80004952:	1d ff b9 fe 	j 800046c4 <_Core0_start+0x62>

80004956 <_Core1_start>:
    password  = watchdog->CON0.B.PW;
80004956:	91 30 00 2f 	movh.a %a2,61443
8000495a:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
8000495e:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004962:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[1]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(1);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(1));
80004966:	91 20 00 26 	movh.a %a2,24578
8000496a:	8f f2 83 41 	xor %d4,%d2,63
8000496e:	80 22       	mov.d %d2,%a2
80004970:	1b 02 60 2b 	addi %d2,%d2,-18944
80004974:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80004976:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART1_PSW_DEFAULT);    /* 0x00000980 */
8000497a:	3b 00 98 20 	mov %d2,2432
8000497e:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
80004982:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART1_PCX_O_S_DEFAULT; /*0xfff00000; */
80004986:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
8000498a:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
8000498e:	82 12       	mov %d2,1
80004990:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80004994:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004998:	7b 30 00 3f 	movh %d3,61443
8000499c:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800049a0:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800049a4:	13 c2 20 23 	madd %d2,%d3,%d2,12
800049a8:	60 22       	mov.a %a2,%d2
800049aa:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800049ac:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800049ae:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800049b2:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800049b6:	6f 13 13 81 	jnz.t %d3,1,80004bdc <_Core1_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800049ba:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800049be:	54 22       	ld.w %d2,[%a2]
800049c0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800049c4:	a6 32       	or %d2,%d3
800049c6:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800049ca:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800049cc:	54 22       	ld.w %d2,[%a2]
800049ce:	6f 02 ff ff 	jnz.t %d2,0,800049cc <_Core1_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
800049d2:	82 02       	mov %d2,0
800049d4:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
800049d8:	54 22       	ld.w %d2,[%a2]
800049da:	6f 12 09 00 	jz.t %d2,1,800049ec <_Core1_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800049de:	54 22       	ld.w %d2,[%a2]
800049e0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800049e4:	a6 32       	or %d2,%d3
800049e6:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800049ea:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800049ec:	54 22       	ld.w %d2,[%a2]
800049ee:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800049f2:	a6 32       	or %d2,%d3
800049f4:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800049f8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800049fa:	54 22       	ld.w %d2,[%a2]
800049fc:	6f 02 ff 7f 	jz.t %d2,0,800049fa <_Core1_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
80004a00:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80004a04:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004a08:	7b 30 00 3f 	movh %d3,61443
80004a0c:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004a10:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004a14:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004a18:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80004a1a:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004a1c:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004a1e:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80004a22:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80004a26:	6f 13 cf 80 	jnz.t %d3,1,80004bc4 <_Core1_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004a2a:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004a2e:	54 22       	ld.w %d2,[%a2]
80004a30:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004a34:	a6 32       	or %d2,%d3
80004a36:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004a3a:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004a3c:	54 22       	ld.w %d2,[%a2]
80004a3e:	6f 02 ff ff 	jnz.t %d2,0,80004a3c <_Core1_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
80004a42:	82 02       	mov %d2,0
80004a44:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80004a48:	54 22       	ld.w %d2,[%a2]
80004a4a:	6f 12 09 00 	jz.t %d2,1,80004a5c <_Core1_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004a4e:	54 22       	ld.w %d2,[%a2]
80004a50:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004a54:	a6 32       	or %d2,%d3
80004a56:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004a5a:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004a5c:	54 22       	ld.w %d2,[%a2]
80004a5e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004a62:	a6 32       	or %d2,%d3
80004a64:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004a68:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004a6a:	54 22       	ld.w %d2,[%a2]
80004a6c:	6f 02 ff 7f 	jz.t %d2,0,80004a6a <_Core1_start+0x114>
80004a70:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80004a74:	91 30 00 2f 	movh.a %a2,61443
80004a78:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004a7c:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004a80:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
80004a82:	6f 12 09 00 	jz.t %d2,1,80004a94 <_Core1_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004a86:	54 22       	ld.w %d2,[%a2]
80004a88:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004a8c:	a6 42       	or %d2,%d4
80004a8e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004a92:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004a94:	91 30 00 2f 	movh.a %a2,61443
80004a98:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004a9c:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004aa0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004aa4:	a6 42       	or %d2,%d4
80004aa6:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004aaa:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004aac:	54 22       	ld.w %d2,[%a2]
80004aae:	6f 02 ff ff 	jnz.t %d2,0,80004aac <_Core1_start+0x156>

    /* Clear the ENDINIT bit in the WDT_CON1 register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(1));
80004ab2:	91 f0 01 38 	movh.a %a3,32799
80004ab6:	80 32       	mov.d %d2,%a3
80004ab8:	1b 02 20 26 	addi %d2,%d2,25088
80004abc:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(1));
80004ac0:	91 f0 01 38 	movh.a %a3,32799
80004ac4:	80 32       	mov.d %d2,%a3
80004ac6:	1b 02 00 24 	addi %d2,%d2,16384
80004aca:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(1));
80004ace:	91 20 00 36 	movh.a %a3,24578
80004ad2:	80 32       	mov.d %d2,%a3
80004ad4:	1b 02 b0 2b 	addi %d2,%d2,-17664
80004ad8:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80004adc:	54 22       	ld.w %d2,[%a2]
80004ade:	6f 12 09 00 	jz.t %d2,1,80004af0 <_Core1_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004ae2:	54 22       	ld.w %d2,[%a2]
80004ae4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004ae8:	a6 42       	or %d2,%d4
80004aea:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004aee:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004af0:	91 30 00 2f 	movh.a %a2,61443
80004af4:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004af8:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80004afc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004b00:	a6 42       	or %d2,%d4
80004b02:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004b06:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004b08:	54 22       	ld.w %d2,[%a2]
80004b0a:	6f 02 ff 7f 	jz.t %d2,0,80004b08 <_Core1_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(1));
80004b0e:	91 10 00 26 	movh.a %a2,24577
80004b12:	80 22       	mov.d %d2,%a2
80004b14:	1b 02 00 28 	addi %d2,%d2,-32768
80004b18:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(1));
80004b1a:	91 10 00 28 	movh.a %a2,32769
80004b1e:	80 22       	mov.d %d2,%a2
80004b20:	1b 02 00 28 	addi %d2,%d2,-32768
80004b24:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialised */
    __setareg(a8, __SDATA3(1));
80004b26:	91 10 00 28 	movh.a %a2,32769
80004b2a:	80 22       	mov.d %d2,%a2
80004b2c:	1b 02 00 28 	addi %d2,%d2,-32768
80004b30:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(1));
80004b32:	91 10 00 29 	movh.a %a2,36865
80004b36:	80 22       	mov.d %d2,%a2
80004b38:	1b 02 00 28 	addi %d2,%d2,-32768
80004b3c:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80004b3e:	91 20 00 36 	movh.a %a3,24578
80004b42:	91 20 00 26 	movh.a %a2,24578
80004b46:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <6001bc00 <__CSA1>>
80004b4a:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <6001dc00 <__CSA1_END>>
80004b4e:	01 32 20 20 	sub.a %a2,%a2,%a3
80004b52:	80 22       	mov.d %d2,%a2
80004b54:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80004b58:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80004b5a:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80004b5e:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80004b60:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004b62:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80004b66:	df 06 27 00 	jeq %d6,0,80004bb4 <_Core1_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004b6a:	37 02 70 43 	extr.u %d4,%d2,6,16
80004b6e:	8f 42 1f 50 	sh %d5,%d2,-12
80004b72:	26 75       	and %d5,%d7
80004b74:	a6 54       	or %d4,%d5
        if (k == 0U)
80004b76:	df 03 16 00 	jeq %d3,0,80004ba2 <_Core1_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80004b7a:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80004b7c:	5f 03 04 80 	jne %d3,%d0,80004b84 <_Core1_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80004b80:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80004b84:	c2 13       	add %d3,1
80004b86:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80004b88:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80004b8c:	5f 36 0f 00 	jeq %d6,%d3,80004baa <_Core1_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80004b90:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004b92:	37 02 70 43 	extr.u %d4,%d2,6,16
80004b96:	8f 42 1f 50 	sh %d5,%d2,-12
80004b9a:	26 75       	and %d5,%d7
80004b9c:	a6 54       	or %d4,%d5
        if (k == 0U)
80004b9e:	df 03 ee ff 	jne %d3,0,80004b7a <_Core1_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80004ba2:	cd 84 e3 0f 	mtcr $fcx,%d4
80004ba6:	1d ff eb ff 	j 80004b7c <_Core1_start+0x226>
80004baa:	1b f6 ff 2f 	addi %d2,%d6,-1
80004bae:	06 62       	sh %d2,6
80004bb0:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80004bb4:	82 02       	mov %d2,0
80004bb6:	74 22       	st.w [%a2],%d2

    IfxCpu_initCSA((uint32 *)__CSA(1), (uint32 *)__CSA_END(1));

    /*Call main function of Cpu0 */
    __non_return_call(core1_main);
80004bb8:	91 00 00 28 	movh.a %a2,32768
80004bbc:	d9 22 f8 65 	lea %a2,[%a2]23992 <80005db8 <core1_main>>
80004bc0:	dc 02       	ji %a2
}
80004bc2:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004bc4:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004bc6:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004bca:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004bce:	0f 35 a0 20 	or %d2,%d5,%d3
80004bd2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004bd6:	74 22       	st.w [%a2],%d2
80004bd8:	1d ff 2b ff 	j 80004a2e <_Core1_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004bdc:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004bde:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004be2:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004be6:	0f 35 a0 20 	or %d2,%d5,%d3
80004bea:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004bee:	74 22       	st.w [%a2],%d2
80004bf0:	1d ff e7 fe 	j 800049be <_Core1_start+0x68>

80004bf4 <_Core2_start>:
    password  = watchdog->CON0.B.PW;
80004bf4:	91 30 00 2f 	movh.a %a2,61443
80004bf8:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004bfc:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004c00:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[2]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(2);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(2));
80004c04:	91 20 00 25 	movh.a %a2,20482
80004c08:	8f f2 83 41 	xor %d4,%d2,63
80004c0c:	80 22       	mov.d %d2,%a2
80004c0e:	1b 02 60 2b 	addi %d2,%d2,-18944
80004c12:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80004c14:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART2_PSW_DEFAULT);    /* 0x00000980 */
80004c18:	3b 00 98 20 	mov %d2,2432
80004c1c:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
80004c20:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART2_PCX_O_S_DEFAULT; /*0xfff00000; */
80004c24:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80004c28:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
80004c2c:	82 12       	mov %d2,1
80004c2e:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80004c32:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004c36:	7b 30 00 3f 	movh %d3,61443
80004c3a:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004c3e:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004c42:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004c46:	60 22       	mov.a %a2,%d2
80004c48:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004c4a:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004c4c:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80004c50:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80004c54:	6f 13 13 81 	jnz.t %d3,1,80004e7a <_Core2_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004c58:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004c5c:	54 22       	ld.w %d2,[%a2]
80004c5e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004c62:	a6 32       	or %d2,%d3
80004c64:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004c68:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004c6a:	54 22       	ld.w %d2,[%a2]
80004c6c:	6f 02 ff ff 	jnz.t %d2,0,80004c6a <_Core2_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
80004c70:	82 02       	mov %d2,0
80004c72:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
80004c76:	54 22       	ld.w %d2,[%a2]
80004c78:	6f 12 09 00 	jz.t %d2,1,80004c8a <_Core2_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004c7c:	54 22       	ld.w %d2,[%a2]
80004c7e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004c82:	a6 32       	or %d2,%d3
80004c84:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004c88:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004c8a:	54 22       	ld.w %d2,[%a2]
80004c8c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004c90:	a6 32       	or %d2,%d3
80004c92:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004c96:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004c98:	54 22       	ld.w %d2,[%a2]
80004c9a:	6f 02 ff 7f 	jz.t %d2,0,80004c98 <_Core2_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
80004c9e:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80004ca2:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004ca6:	7b 30 00 3f 	movh %d3,61443
80004caa:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004cae:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80004cb2:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004cb6:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80004cb8:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80004cba:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80004cbc:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80004cc0:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80004cc4:	6f 13 cf 80 	jnz.t %d3,1,80004e62 <_Core2_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004cc8:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004ccc:	54 22       	ld.w %d2,[%a2]
80004cce:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004cd2:	a6 32       	or %d2,%d3
80004cd4:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004cd8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004cda:	54 22       	ld.w %d2,[%a2]
80004cdc:	6f 02 ff ff 	jnz.t %d2,0,80004cda <_Core2_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
80004ce0:	82 02       	mov %d2,0
80004ce2:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80004ce6:	54 22       	ld.w %d2,[%a2]
80004ce8:	6f 12 09 00 	jz.t %d2,1,80004cfa <_Core2_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004cec:	54 22       	ld.w %d2,[%a2]
80004cee:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004cf2:	a6 32       	or %d2,%d3
80004cf4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004cf8:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004cfa:	54 22       	ld.w %d2,[%a2]
80004cfc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004d00:	a6 32       	or %d2,%d3
80004d02:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004d06:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004d08:	54 22       	ld.w %d2,[%a2]
80004d0a:	6f 02 ff 7f 	jz.t %d2,0,80004d08 <_Core2_start+0x114>
80004d0e:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80004d12:	91 30 00 2f 	movh.a %a2,61443
80004d16:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004d1a:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004d1e:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
80004d20:	6f 12 09 00 	jz.t %d2,1,80004d32 <_Core2_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004d24:	54 22       	ld.w %d2,[%a2]
80004d26:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004d2a:	a6 42       	or %d2,%d4
80004d2c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004d30:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004d32:	91 30 00 2f 	movh.a %a2,61443
80004d36:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004d3a:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004d3e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004d42:	a6 42       	or %d2,%d4
80004d44:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004d48:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80004d4a:	54 22       	ld.w %d2,[%a2]
80004d4c:	6f 02 ff ff 	jnz.t %d2,0,80004d4a <_Core2_start+0x156>

    /* Clear the ENDINIT bit in the Password register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(2));
80004d50:	91 f0 01 38 	movh.a %a3,32799
80004d54:	80 32       	mov.d %d2,%a3
80004d56:	1b 02 10 26 	addi %d2,%d2,24832
80004d5a:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(2));
80004d5e:	91 f0 01 38 	movh.a %a3,32799
80004d62:	80 32       	mov.d %d2,%a3
80004d64:	1b 02 00 24 	addi %d2,%d2,16384
80004d68:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(2));
80004d6c:	91 20 00 35 	movh.a %a3,20482
80004d70:	80 32       	mov.d %d2,%a3
80004d72:	1b 02 b0 2b 	addi %d2,%d2,-17664
80004d76:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80004d7a:	54 22       	ld.w %d2,[%a2]
80004d7c:	6f 12 09 00 	jz.t %d2,1,80004d8e <_Core2_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004d80:	54 22       	ld.w %d2,[%a2]
80004d82:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004d86:	a6 42       	or %d2,%d4
80004d88:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004d8c:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004d8e:	91 30 00 2f 	movh.a %a2,61443
80004d92:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004d96:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80004d9a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004d9e:	a6 42       	or %d2,%d4
80004da0:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004da4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80004da6:	54 22       	ld.w %d2,[%a2]
80004da8:	6f 02 ff 7f 	jz.t %d2,0,80004da6 <_Core2_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(2));
80004dac:	91 10 00 26 	movh.a %a2,24577
80004db0:	80 22       	mov.d %d2,%a2
80004db2:	1b 02 00 28 	addi %d2,%d2,-32768
80004db6:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(2));
80004db8:	91 10 00 28 	movh.a %a2,32769
80004dbc:	80 22       	mov.d %d2,%a2
80004dbe:	1b 02 00 28 	addi %d2,%d2,-32768
80004dc2:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialized */
    __setareg(a8, __SDATA3(2));
80004dc4:	91 10 00 28 	movh.a %a2,32769
80004dc8:	80 22       	mov.d %d2,%a2
80004dca:	1b 02 00 28 	addi %d2,%d2,-32768
80004dce:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(2));
80004dd0:	91 10 00 29 	movh.a %a2,36865
80004dd4:	80 22       	mov.d %d2,%a2
80004dd6:	1b 02 00 28 	addi %d2,%d2,-32768
80004dda:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80004ddc:	91 20 00 35 	movh.a %a3,20482
80004de0:	91 20 00 25 	movh.a %a2,20482
80004de4:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <5001bc00 <__CSA2>>
80004de8:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <5001dc00 <__CSA2_END>>
80004dec:	01 32 20 20 	sub.a %a2,%a2,%a3
80004df0:	80 22       	mov.d %d2,%a2
80004df2:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80004df6:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80004df8:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80004dfc:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80004dfe:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004e00:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80004e04:	df 06 27 00 	jeq %d6,0,80004e52 <_Core2_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004e08:	37 02 70 43 	extr.u %d4,%d2,6,16
80004e0c:	8f 42 1f 50 	sh %d5,%d2,-12
80004e10:	26 75       	and %d5,%d7
80004e12:	a6 54       	or %d4,%d5
        if (k == 0U)
80004e14:	df 03 16 00 	jeq %d3,0,80004e40 <_Core2_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80004e18:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80004e1a:	5f 03 04 80 	jne %d3,%d0,80004e22 <_Core2_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80004e1e:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80004e22:	c2 13       	add %d3,1
80004e24:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80004e26:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80004e2a:	5f 36 0f 00 	jeq %d6,%d3,80004e48 <_Core2_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80004e2e:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80004e30:	37 02 70 43 	extr.u %d4,%d2,6,16
80004e34:	8f 42 1f 50 	sh %d5,%d2,-12
80004e38:	26 75       	and %d5,%d7
80004e3a:	a6 54       	or %d4,%d5
        if (k == 0U)
80004e3c:	df 03 ee ff 	jne %d3,0,80004e18 <_Core2_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80004e40:	cd 84 e3 0f 	mtcr $fcx,%d4
80004e44:	1d ff eb ff 	j 80004e1a <_Core2_start+0x226>
80004e48:	1b f6 ff 2f 	addi %d2,%d6,-1
80004e4c:	06 62       	sh %d2,6
80004e4e:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80004e52:	82 02       	mov %d2,0
80004e54:	74 22       	st.w [%a2],%d2
    /* Setup the context save area linked list. */

    IfxCpu_initCSA((uint32 *)__CSA(2), (uint32 *)__CSA_END(2));

    /*Call main function of Cpu0 */
    __non_return_call(core2_main);
80004e56:	91 00 00 28 	movh.a %a2,32768
80004e5a:	d9 22 e6 75 	lea %a2,[%a2]24038 <80005de6 <core2_main>>
80004e5e:	dc 02       	ji %a2
}
80004e60:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004e62:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004e64:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004e68:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004e6c:	0f 35 a0 20 	or %d2,%d5,%d3
80004e70:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004e74:	74 22       	st.w [%a2],%d2
80004e76:	1d ff 2b ff 	j 80004ccc <_Core2_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004e7a:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004e7c:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80004e80:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80004e84:	0f 35 a0 20 	or %d2,%d5,%d3
80004e88:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80004e8c:	74 22       	st.w [%a2],%d2
80004e8e:	1d ff e7 fe 	j 80004c5c <_Core2_start+0x68>

80004e92 <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004e92:	40 ae       	mov.aa %a14,%sp
80004e94:	40 4c       	mov.aa %a12,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004e96:	6d ff 69 ed 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80004e9a:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004e9c:	02 24       	mov %d4,%d2
80004e9e:	6d ff fc eb 	call 80002696 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004ea2:	54 c3       	ld.w %d3,[%a12]
80004ea4:	8f 13 c0 31 	andn %d3,%d3,1
80004ea8:	74 c3       	st.w [%a12],%d3
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004eaa:	02 84       	mov %d4,%d8
80004eac:	6d ff 7b ed 	call 800029a2 <IfxScuWdt_setCpuEndinit>
}
80004eb0:	00 90       	ret 

80004eb2 <IfxAsclin_enableModule_end>:
	...

80004eb4 <IfxAsclin_getFaFrequency>:
    return module;
}


float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
80004eb4:	40 ae       	mov.aa %a14,%sp
    return asclin->CSR.B.CLKSEL;
80004eb6:	19 42 0c 10 	ld.w %d2,[%a4]76
80004eba:	8f f2 01 21 	and %d2,%d2,31
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004ebe:	1b f2 ff 3f 	addi %d3,%d2,-1
80004ec2:	8b 03 a1 22 	ge.u %d2,%d3,16
80004ec6:	df 02 38 80 	jne %d2,0,80004f36 <IfxAsclin_getFaFrequency+0x82>
80004eca:	91 00 00 28 	movh.a %a2,32768
80004ece:	d9 22 d8 b4 	lea %a2,[%a2]20184 <80004ed8 <IfxAsclin_getFaFrequency+0x24>>
80004ed2:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
80004ed6:	dc 02       	ji %a2
80004ed8:	1d 00 20 00 	j 80004f18 <IfxAsclin_getFaFrequency+0x64>
80004edc:	1d 00 21 00 	j 80004f1e <IfxAsclin_getFaFrequency+0x6a>
80004ee0:	1d 00 2b 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004ee4:	1d 00 20 00 	j 80004f24 <IfxAsclin_getFaFrequency+0x70>
80004ee8:	1d 00 27 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004eec:	1d 00 25 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004ef0:	1d 00 23 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004ef4:	1d 00 1b 00 	j 80004f2a <IfxAsclin_getFaFrequency+0x76>
80004ef8:	1d 00 1f 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004efc:	1d 00 1d 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004f00:	1d 00 1b 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004f04:	1d 00 19 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004f08:	1d 00 17 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004f0c:	1d 00 15 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004f10:	1d 00 13 00 	j 80004f36 <IfxAsclin_getFaFrequency+0x82>
80004f14:	1d 00 0e 00 	j 80004f30 <IfxAsclin_getFaFrequency+0x7c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0f;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004f18:	6d ff d6 e9 	call 800022c4 <IfxScuCcu_getSpbFrequency>
        break;
80004f1c:	00 90       	ret 
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004f1e:	6d ff 5c e8 	call 80001fd6 <IfxScuCcu_getOsc0Frequency>
        break;
80004f22:	00 90       	ret 
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004f24:	6d ff 7e e8 	call 80002020 <IfxScuCcu_getPllErayFrequency>
        break;
80004f28:	00 90       	ret 
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004f2a:	6d ff b5 e9 	call 80002294 <IfxScuCcu_getBaud2Frequency>
        break;
80004f2e:	00 90       	ret 
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004f30:	6d ff 9a e9 	call 80002264 <IfxScuCcu_getBaud1Frequency>
        break;
80004f34:	00 90       	ret 
    switch (clockSource)
80004f36:	82 02       	mov %d2,0
        frequency = 0.0f;
        break;
    }

    return frequency;
}
80004f38:	00 90       	ret 

80004f3a <IfxAsclin_getFaFrequency_end>:
	...

80004f3c <IfxAsclin_getIndex>:


IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
80004f3c:	40 ae       	mov.aa %a14,%sp
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004f3e:	82 02       	mov %d2,0
80004f40:	ff 42 1b 80 	jge.u %d2,4,80004f76 <IfxAsclin_getIndex+0x3a>
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004f44:	8f 32 00 30 	sh %d3,%d2,3
80004f48:	91 00 00 28 	movh.a %a2,32768
80004f4c:	d9 22 00 b0 	lea %a2,[%a2]704 <800002c0 <IfxAsclin_cfg_indexMap>>
80004f50:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80004f54:	54 23       	ld.w %d3,[%a2]
80004f56:	80 44       	mov.d %d4,%a4
80004f58:	5f 43 05 00 	jeq %d3,%d4,80004f62 <IfxAsclin_getIndex+0x26>
    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004f5c:	c2 12       	add %d2,1
80004f5e:	1d ff f1 ff 	j 80004f40 <IfxAsclin_getIndex+0x4>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004f62:	06 32       	sh %d2,3
80004f64:	91 00 00 28 	movh.a %a2,32768
80004f68:	d9 22 00 b0 	lea %a2,[%a2]704 <800002c0 <IfxAsclin_cfg_indexMap>>
80004f6c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004f70:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80004f74:	00 90       	ret 
    result = IfxAsclin_Index_none;
80004f76:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
80004f78:	00 90       	ret 

80004f7a <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004f7a:	40 ae       	mov.aa %a14,%sp
80004f7c:	40 4c       	mov.aa %a12,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004f7e:	6d ff 9b ff 	call 80004eb4 <IfxAsclin_getFaFrequency>
80004f82:	19 c3 14 00 	ld.w %d3,[%a12]20
80004f86:	b7 03 14 36 	insert %d3,%d3,0,12,20
80004f8a:	c2 13       	add %d3,1
80004f8c:	4b 03 41 31 	itof %d3,%d3
}
80004f90:	4b 32 51 20 	div.f %d2,%d2,%d3
80004f94:	00 90       	ret 

80004f96 <IfxAsclin_getSrcPointerEr>:
    return IfxAsclin_getOvsFrequency(asclin) / (asclin->BITCON.B.OVERSAMPLING + 1);
}


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
80004f96:	40 ae       	mov.aa %a14,%sp
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004f98:	6d ff d2 ff 	call 80004f3c <IfxAsclin_getIndex>
80004f9c:	53 c2 20 20 	mul %d2,%d2,12
80004fa0:	1b 82 00 20 	addi %d2,%d2,8
}
80004fa4:	91 40 00 2f 	movh.a %a2,61444
80004fa8:	d9 22 00 28 	lea %a2,[%a2]-32640 <f0038080 <_SMALL_DATA4_+0x60030080>>
80004fac:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004fb0:	00 90       	ret 

80004fb2 <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
80004fb2:	40 ae       	mov.aa %a14,%sp
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004fb4:	6d ff c4 ff 	call 80004f3c <IfxAsclin_getIndex>
80004fb8:	53 c2 20 20 	mul %d2,%d2,12
80004fbc:	c2 42       	add %d2,4
}
80004fbe:	91 40 00 2f 	movh.a %a2,61444
80004fc2:	d9 22 00 28 	lea %a2,[%a2]-32640 <f0038080 <_SMALL_DATA4_+0x60030080>>
80004fc6:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80004fca:	00 90       	ret 

80004fcc <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
80004fcc:	40 ae       	mov.aa %a14,%sp
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004fce:	6d ff b7 ff 	call 80004f3c <IfxAsclin_getIndex>
}
80004fd2:	91 40 00 2f 	movh.a %a2,61444
80004fd6:	d9 22 00 28 	lea %a2,[%a2]-32640 <f0038080 <_SMALL_DATA4_+0x60030080>>
80004fda:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
80004fde:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
80004fe2:	00 90       	ret 

80004fe4 <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004fe4:	40 ae       	mov.aa %a14,%sp
80004fe6:	80 55       	mov.d %d5,%a5
80004fe8:	02 42       	mov %d2,%d4
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
80004fea:	1d 00 08 00 	j 80004ffa <IfxAsclin_read8+0x16>
    {
        *data++ = (uint8)rxData->U;
80004fee:	19 43 08 10 	ld.w %d3,[%a4]72
80004ff2:	60 55       	mov.a %a5,%d5
80004ff4:	24 53       	st.b [%a5+],%d3
        count--;
80004ff6:	c2 f2       	add %d2,-1
        *data++ = (uint8)rxData->U;
80004ff8:	80 55       	mov.d %d5,%a5
    while (count > 0)
80004ffa:	df 02 fa ff 	jne %d2,0,80004fee <IfxAsclin_read8+0xa>
    }

    return count;
}
80004ffe:	00 90       	ret 

80005000 <IfxAsclin_setClockSource>:
    return TRUE;
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
80005000:	40 ae       	mov.aa %a14,%sp
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80005002:	d9 42 0c 10 	lea %a2,[%a4]76
80005006:	19 42 0c 10 	ld.w %d2,[%a4]76
8000500a:	37 42 05 20 	insert %d2,%d2,%d4,0,5
8000500e:	74 22       	st.w [%a2],%d2

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80005010:	df 04 07 80 	jne %d4,0,8000501e <IfxAsclin_setClockSource+0x1e>
    return asclin->CSR.B.CON;
80005014:	19 42 0c 10 	ld.w %d2,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80005018:	bf 02 fe 7f 	jlt %d2,0,80005014 <IfxAsclin_setClockSource+0x14>
8000501c:	00 90       	ret 
8000501e:	19 42 0c 10 	ld.w %d2,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80005022:	ff 02 fe 7f 	jge %d2,0,8000501e <IfxAsclin_setClockSource+0x1e>
        {}
    }
}
80005026:	00 90       	ret 

80005028 <IfxAsclin_setBitTiming>:
{
80005028:	40 ae       	mov.aa %a14,%sp
8000502a:	20 10       	sub.a %sp,16
8000502c:	40 4c       	mov.aa %a12,%a4
8000502e:	02 48       	mov %d8,%d4
80005030:	02 5a       	mov %d10,%d5
80005032:	02 69       	mov %d9,%d6
80005034:	59 e7 f4 ff 	st.w [%a14]-12,%d7
    return asclin->CSR.B.CLKSEL;
80005038:	19 42 0c 10 	ld.w %d2,[%a4]76
8000503c:	8f f2 01 21 	and %d2,%d2,31
80005040:	60 2f       	mov.a %a15,%d2
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80005042:	6d ff 9c ff 	call 80004f7a <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80005046:	c2 1a       	add %d10,1
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80005048:	82 43       	mov %d3,4
8000504a:	0b 3a b0 31 	max.u %d3,%d10,%d3
8000504e:	60 3d       	mov.a %a13,%d3
80005050:	82 13       	mov %d3,1
80005052:	0b 39 b0 31 	max.u %d3,%d9,%d3
80005056:	59 e3 f8 ff 	st.w [%a14]-8,%d3
    fOvs         = baudrate * oversampling;
8000505a:	80 d3       	mov.d %d3,%a13
8000505c:	4b 03 61 41 	utof %d4,%d3
80005060:	4b 84 41 40 	mul.f %d4,%d4,%d8
    float32               limit      = 0.001f * fOvs;                    // save the error limit
80005064:	7b 30 a8 e3 	movh %d14,14979
80005068:	1b fe 26 e1 	addi %d14,%d14,4719
8000506c:	4b e4 41 e0 	mul.f %d14,%d4,%d14
    d = (uint32)(fpd / fOvs);
80005070:	4b 42 51 c0 	div.f %d12,%d2,%d4
80005074:	4b 0c 71 c1 	ftouz %d12,%d12
    f              = (fpd * n) / d;
80005078:	4b 0c 61 31 	utof %d3,%d12
8000507c:	4b 32 51 30 	div.f %d3,%d2,%d3
    relError       = __absf(fOvs - f);
80005080:	6b 03 31 14 	sub.f %d1,%d4,%d3
80005084:	82 03       	mov %d3,0
80005086:	4b 31 01 30 	cmp.f %d3,%d1,%d3
8000508a:	6f 03 10 80 	jnz.t %d3,0,800050aa <IfxAsclin_setBitTiming+0x82>
    if (relError <= limit)
8000508e:	4b e1 01 30 	cmp.f %d3,%d1,%d14
80005092:	87 33 a0 30 	or.t %d3,%d3,0,%d3,1
80005096:	df 03 0e 80 	jne %d3,0,800050b2 <IfxAsclin_setBitTiming+0x8a>
    boolean               terminated = FALSE;
8000509a:	82 0f       	mov %d15,0
    dBest          = d;
8000509c:	59 ec fc ff 	st.w [%a14]-4,%d12
    adder_facL_min = 0;
800050a0:	82 06       	mov %d6,0
    nBest          = n;
800050a2:	82 1d       	mov %d13,1
    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
800050a4:	82 20       	mov %d0,2
800050a6:	1d 00 37 00 	j 80005114 <IfxAsclin_setBitTiming+0xec>
    relError       = __absf(fOvs - f);
800050aa:	9b 01 00 18 	addih %d1,%d1,32768
800050ae:	1d ff f0 ff 	j 8000508e <IfxAsclin_setBitTiming+0x66>
        terminated = TRUE;
800050b2:	82 1f       	mov %d15,1
800050b4:	1d ff f4 ff 	j 8000509c <IfxAsclin_setBitTiming+0x74>
            adder_facH = 1;
800050b8:	82 19       	mov %d9,1
            adder_facL = 1;
800050ba:	02 95       	mov %d5,%d9
        for (count = adder_facL; count <= adder_facH; count++)
800050bc:	1d 00 07 00 	j 800050ca <IfxAsclin_setBitTiming+0xa2>
            newRelError = __absf(fOvs - f);
800050c0:	9b 03 00 38 	addih %d3,%d3,32768
800050c4:	1d 00 16 00 	j 800050f0 <IfxAsclin_setBitTiming+0xc8>
        for (count = adder_facL; count <= adder_facH; count++)
800050c8:	c2 15       	add %d5,1
800050ca:	3f 59 1e 80 	jlt.u %d9,%d5,80005106 <IfxAsclin_setBitTiming+0xde>
            f           = (fpd * n) / (n * d + count);
800050ce:	4b 00 61 81 	utof %d8,%d0
800050d2:	4b 28 41 80 	mul.f %d8,%d8,%d2
800050d6:	0b 5b 00 a0 	add %d10,%d11,%d5
800050da:	4b 0a 61 31 	utof %d3,%d10
800050de:	4b 38 51 30 	div.f %d3,%d8,%d3
            newRelError = __absf(fOvs - f);
800050e2:	6b 03 31 34 	sub.f %d3,%d4,%d3
800050e6:	82 08       	mov %d8,0
800050e8:	4b 83 01 80 	cmp.f %d8,%d3,%d8
800050ec:	6f 08 ea ff 	jnz.t %d8,0,800050c0 <IfxAsclin_setBitTiming+0x98>
            if (relError > (newRelError))
800050f0:	4b 31 01 80 	cmp.f %d8,%d1,%d3
800050f4:	6f 28 ea 7f 	jz.t %d8,2,800050c8 <IfxAsclin_setBitTiming+0xa0>
                adder_facL_min = count;
800050f8:	02 56       	mov %d6,%d5
                relError       = newRelError;
800050fa:	02 31       	mov %d1,%d3
                nBest          = n;
800050fc:	02 0d       	mov %d13,%d0
                dBest          = (n * d + count);
800050fe:	59 ea fc ff 	st.w [%a14]-4,%d10
80005102:	1d ff e3 ff 	j 800050c8 <IfxAsclin_setBitTiming+0xa0>
        if (relError <= limit)
80005106:	4b e1 01 30 	cmp.f %d3,%d1,%d14
8000510a:	87 33 a0 30 	or.t %d3,%d3,0,%d3,1
8000510e:	df 03 16 80 	jne %d3,0,8000513a <IfxAsclin_setBitTiming+0x112>
    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80005112:	c2 10       	add %d0,1
80005114:	df 0f 13 80 	jne %d15,0,8000513a <IfxAsclin_setBitTiming+0x112>
80005118:	73 c0 0a b0 	mul %d11,%d0,%d12
8000511c:	3b 00 00 31 	mov %d3,4096
80005120:	7f 3b 0d 80 	jge.u %d11,%d3,8000513a <IfxAsclin_setBitTiming+0x112>
        if (n == 2)
80005124:	df 20 ca 7f 	jeq %d0,2,800050b8 <IfxAsclin_setBitTiming+0x90>
            adder_facL = (adder_facL_min * n) / nBest;
80005128:	73 60 0a 80 	mul %d8,%d0,%d6
8000512c:	4b d8 11 82 	div.u %e8,%d8,%d13
80005130:	02 85       	mov %d5,%d8
            adder_facH = adder_facL + 1;
80005132:	1b 18 00 90 	addi %d9,%d8,1
80005136:	1d ff ca ff 	j 800050ca <IfxAsclin_setBitTiming+0xa2>
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
8000513a:	82 04       	mov %d4,0
8000513c:	40 c4       	mov.aa %a4,%a12
8000513e:	6d ff 61 ff 	call 80005000 <IfxAsclin_setClockSource>
    asclin->BRG.B.DENOMINATOR = dBest;
80005142:	d9 c2 20 00 	lea %a2,[%a12]32
80005146:	19 c2 20 00 	ld.w %d2,[%a12]32
8000514a:	19 e3 fc ff 	ld.w %d3,[%a14]-4
8000514e:	37 32 0c 20 	insert %d2,%d2,%d3,0,12
80005152:	74 22       	st.w [%a2],%d2
    asclin->BRG.B.NUMERATOR   = nBest;
80005154:	54 22       	ld.w %d2,[%a2]
80005156:	37 d2 0c 28 	insert %d2,%d2,%d13,16,12
8000515a:	74 22       	st.w [%a2],%d2
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
8000515c:	80 d3       	mov.d %d3,%a13
8000515e:	c2 f3       	add %d3,-1
80005160:	d9 c2 14 00 	lea %a2,[%a12]20
80005164:	19 c2 14 00 	ld.w %d2,[%a12]20
80005168:	37 32 04 28 	insert %d2,%d2,%d3,16,4
8000516c:	74 22       	st.w [%a2],%d2
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
8000516e:	54 22       	ld.w %d2,[%a2]
80005170:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
80005174:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
80005178:	74 22       	st.w [%a2],%d2
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000517a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8000517e:	8b 02 20 72 	ne %d7,%d2,0
80005182:	54 22       	ld.w %d2,[%a2]
80005184:	67 72 1f 20 	ins.t %d2,%d2,31,%d7,0
80005188:	74 22       	st.w [%a2],%d2
    IfxAsclin_setClockSource(asclin, source);
8000518a:	80 f4       	mov.d %d4,%a15
8000518c:	40 c4       	mov.aa %a4,%a12
8000518e:	6d ff 39 ff 	call 80005000 <IfxAsclin_setClockSource>
}
80005192:	82 12       	mov %d2,1
80005194:	00 90       	ret 

80005196 <IfxAsclin_write8>:
    return count;
}


uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80005196:	40 ae       	mov.aa %a14,%sp
80005198:	80 53       	mov.d %d3,%a5
8000519a:	02 42       	mov %d2,%d4
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
8000519c:	1d 00 08 00 	j 800051ac <IfxAsclin_write8+0x16>
    {
        txData->U = *data++;
800051a0:	60 35       	mov.a %a5,%d3
800051a2:	04 53       	ld.bu %d3,[%a5+]
800051a4:	59 43 04 10 	st.w [%a4]68,%d3
        count--;
800051a8:	c2 f2       	add %d2,-1
        txData->U = *data++;
800051aa:	80 53       	mov.d %d3,%a5
    while ((count > 0))
800051ac:	df 02 fa ff 	jne %d2,0,800051a0 <IfxAsclin_write8+0xa>
    }

    return count;
}
800051b0:	00 90       	ret 

800051b2 <IfxAsclin_Asc_read>:
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800051b2:	40 ae       	mov.aa %a14,%sp
800051b4:	40 6c       	mov.aa %a12,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800051b6:	0b 45 10 68 	mov %e6,%d5,%d4
800051ba:	94 64       	ld.h %d4,[%a6]
800051bc:	99 44 08 00 	ld.a %a4,[%a4]8
800051c0:	6d ff 68 de 	call 80000e90 <Ifx_Fifo_read>

    *count -= left;
800051c4:	94 c3       	ld.h %d3,[%a12]
800051c6:	a2 23       	sub %d3,%d2
800051c8:	b4 c3       	st.h [%a12],%d3

    return left == 0;
}
800051ca:	8b 02 00 22 	eq %d2,%d2,0
800051ce:	00 90       	ret 

800051d0 <IfxAsclin_Asc_isrTransmit>:
{
800051d0:	40 ae       	mov.aa %a14,%sp
800051d2:	20 18       	sub.a %sp,24
800051d4:	40 4c       	mov.aa %a12,%a4
    reg.U = __mfcr(CPU_ICR);
800051d6:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800051da:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
800051de:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
800051e2:	00 00       	nop 
    result  = stm->TIM0.U;
800051e4:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
800051e8:	19 26 10 00 	ld.w %d6,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
800051ec:	19 22 2c 00 	ld.w %d2,[%a2]44
800051f0:	02 25       	mov %d5,%d2
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800051f2:	02 62       	mov %d2,%d6
800051f4:	b7 05 81 3f 	insert %d3,%d5,0,31,1
    if (enabled != FALSE)
800051f8:	df 04 04 00 	jeq %d4,0,80005200 <IfxAsclin_Asc_isrTransmit+0x30>
        __enable();
800051fc:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80005200:	89 c2 58 09 	st.d [%a12]24,%e2
    asclin->sendCount++;
80005204:	d9 c2 14 00 	lea %a2,[%a12]20
80005208:	19 c2 14 00 	ld.w %d2,[%a12]20
8000520c:	c2 12       	add %d2,1
8000520e:	74 22       	st.w [%a2],%d2
    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005210:	99 c4 04 00 	ld.a %a4,[%a12]4
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80005214:	c9 48 04 00 	ld.h %d8,[%a4]4
80005218:	df 08 3e 00 	jeq %d8,0,80005294 <IfxAsclin_Asc_isrTransmit+0xc4>
        switch (asclin->dataBufferMode)
8000521c:	19 c2 10 00 	ld.w %d2,[%a12]16
80005220:	df 02 05 00 	jeq %d2,0,8000522a <IfxAsclin_Asc_isrTransmit+0x5a>
80005224:	df 12 26 00 	jeq %d2,1,80005270 <IfxAsclin_Asc_isrTransmit+0xa0>
80005228:	00 90       	ret 
            volatile uint8 hw_tx_fill_level = 0;
8000522a:	82 02       	mov %d2,0
8000522c:	e9 e2 ef ff 	st.b [%a14]-17,%d2
            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005230:	37 08 70 80 	extr.u %d8,%d8,0,16
            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005234:	d4 c2       	ld.a %a2,[%a12]
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
80005236:	19 22 0c 00 	ld.w %d2,[%a2]12
8000523a:	37 02 65 28 	extr.u %d2,%d2,16,5
8000523e:	e9 e2 ef ff 	st.b [%a14]-17,%d2
            i_count          = (16 - hw_tx_fill_level);
80005242:	39 e2 ef ff 	ld.bu %d2,[%a14]-17
80005246:	8b 02 01 21 	rsub %d2,%d2,16
8000524a:	37 02 70 20 	extr.u %d2,%d2,0,16
            if (i_count > count)
8000524e:	3f 28 03 80 	jlt.u %d8,%d2,80005254 <IfxAsclin_Asc_isrTransmit+0x84>
            i_count          = (16 - hw_tx_fill_level);
80005252:	02 28       	mov %d8,%d2
            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
80005254:	d2 06       	mov %e6,0
80005256:	37 08 50 40 	extr %d4,%d8,0,16
8000525a:	d9 e5 f0 ff 	lea %a5,[%a14]-16
8000525e:	6d ff 19 de 	call 80000e90 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
80005262:	02 84       	mov %d4,%d8
80005264:	d9 e5 f0 ff 	lea %a5,[%a14]-16
80005268:	d4 c4       	ld.a %a4,[%a12]
8000526a:	6d ff 96 ff 	call 80005196 <IfxAsclin_write8>
        break;
8000526e:	00 90       	ret 
            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005270:	d2 06       	mov %e6,0
80005272:	3b c0 00 40 	mov %d4,12
80005276:	d9 e5 f0 ff 	lea %a5,[%a14]-16
8000527a:	6d ff 0b de 	call 80000e90 <Ifx_Fifo_read>
            ascData = packedData.data;
8000527e:	39 e2 f8 ff 	ld.bu %d2,[%a14]-8
80005282:	e9 e2 ef ff 	st.b [%a14]-17,%d2
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
80005286:	82 14       	mov %d4,1
80005288:	d9 e5 ef ff 	lea %a5,[%a14]-17
8000528c:	d4 c4       	ld.a %a4,[%a12]
8000528e:	6d ff 84 ff 	call 80005196 <IfxAsclin_write8>
        break;
80005292:	00 90       	ret 
        asclin->txInProgress = FALSE;
80005294:	82 02       	mov %d2,0
80005296:	e9 c2 0c 00 	st.b [%a12]12,%d2
}
8000529a:	00 90       	ret 

8000529c <IfxAsclin_Asc_isrReceive>:
{
8000529c:	40 ae       	mov.aa %a14,%sp
8000529e:	20 20       	sub.a %sp,32
800052a0:	40 4c       	mov.aa %a12,%a4
    switch (asclin->dataBufferMode)
800052a2:	19 42 10 00 	ld.w %d2,[%a4]16
800052a6:	df 02 05 00 	jeq %d2,0,800052b0 <IfxAsclin_Asc_isrReceive+0x14>
800052aa:	df 12 34 00 	jeq %d2,1,80005312 <IfxAsclin_Asc_isrReceive+0x76>
800052ae:	00 90       	ret 
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
800052b0:	d4 44       	ld.a %a4,[%a4]
    return asclin->RXFIFOCON.B.FILL;
800052b2:	19 48 10 00 	ld.w %d8,[%a4]16
800052b6:	37 08 65 88 	extr.u %d8,%d8,16,5
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
800052ba:	02 84       	mov %d4,%d8
800052bc:	d9 e5 f0 ff 	lea %a5,[%a14]-16
800052c0:	6d ff 92 fe 	call 80004fe4 <IfxAsclin_read8>
        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
800052c4:	d2 06       	mov %e6,0
800052c6:	02 84       	mov %d4,%d8
800052c8:	d9 e5 f0 ff 	lea %a5,[%a14]-16
800052cc:	99 c4 08 00 	ld.a %a4,[%a12]8
800052d0:	6d ff 99 de 	call 80001002 <Ifx_Fifo_write>
800052d4:	df 02 42 00 	jeq %d2,0,80005358 <IfxAsclin_Asc_isrReceive+0xbc>
            asclin->rxSwFifoOverflow = TRUE;
800052d8:	82 12       	mov %d2,1
800052da:	e9 c2 0d 00 	st.b [%a12]13,%d2
800052de:	00 90       	ret 
            packedData.timestamp = IfxStm_now();
800052e0:	59 e5 e4 ff 	st.w [%a14]-28,%d5
800052e4:	59 e2 e8 ff 	st.w [%a14]-24,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
800052e8:	82 14       	mov %d4,1
800052ea:	d9 e5 f0 ff 	lea %a5,[%a14]-16
800052ee:	d4 c4       	ld.a %a4,[%a12]
800052f0:	6d ff 7a fe 	call 80004fe4 <IfxAsclin_read8>
            packedData.data      = ascData[0];
800052f4:	39 e2 f0 ff 	ld.bu %d2,[%a14]-16
800052f8:	e9 e2 ec ff 	st.b [%a14]-20,%d2
            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800052fc:	d2 06       	mov %e6,0
800052fe:	3b c0 00 40 	mov %d4,12
80005302:	d9 e5 e4 ff 	lea %a5,[%a14]-28
80005306:	99 c4 08 00 	ld.a %a4,[%a12]8
8000530a:	6d ff 7c de 	call 80001002 <Ifx_Fifo_write>
8000530e:	df 02 20 80 	jne %d2,0,8000534e <IfxAsclin_Asc_isrReceive+0xb2>
        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
80005312:	d4 c2       	ld.a %a2,[%a12]
80005314:	19 22 10 00 	ld.w %d2,[%a2]16
80005318:	37 02 65 28 	extr.u %d2,%d2,16,5
8000531c:	df 02 1e 00 	jeq %d2,0,80005358 <IfxAsclin_Asc_isrReceive+0xbc>
    reg.U = __mfcr(CPU_ICR);
80005320:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80005324:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
80005328:	0d 00 40 03 	disable 
8000532c:	00 00       	nop 
    result  = stm->TIM0.U;
8000532e:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
80005332:	19 25 10 00 	ld.w %d5,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
80005336:	19 22 2c 00 	ld.w %d2,[%a2]44
8000533a:	8f 05 40 51 	or %d5,%d5,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000533e:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
80005342:	df 04 cf 7f 	jeq %d4,0,800052e0 <IfxAsclin_Asc_isrReceive+0x44>
        __enable();
80005346:	0d 00 00 03 	enable 
8000534a:	1d ff cb ff 	j 800052e0 <IfxAsclin_Asc_isrReceive+0x44>
                asclin->rxSwFifoOverflow = TRUE;
8000534e:	82 12       	mov %d2,1
80005350:	e9 c2 0d 00 	st.b [%a12]13,%d2
80005354:	1d ff df ff 	j 80005312 <IfxAsclin_Asc_isrReceive+0x76>
}
80005358:	00 90       	ret 

8000535a <IfxAsclin_Asc_blockingRead>:
{
8000535a:	40 ae       	mov.aa %a14,%sp
8000535c:	20 08       	sub.a %sp,8
8000535e:	80 48       	mov.d %d8,%a4
    Ifx_SizeT count = 1;
80005360:	82 12       	mov %d2,1
80005362:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
80005366:	82 f4       	mov %d4,-1
80005368:	82 f5       	mov %d5,-1
8000536a:	06 f5       	sh %d5,-1
8000536c:	d9 e6 fe ff 	lea %a6,[%a14]-2
80005370:	d9 e5 fd ff 	lea %a5,[%a14]-3
80005374:	60 84       	mov.a %a4,%d8
80005376:	6d ff 1e ff 	call 800051b2 <IfxAsclin_Asc_read>
8000537a:	df 12 f6 ff 	jne %d2,1,80005366 <IfxAsclin_Asc_blockingRead+0xc>
}
8000537e:	39 e2 fd ff 	ld.bu %d2,[%a14]-3
80005382:	00 90       	ret 

80005384 <IfxAsclin_Asc_initModule>:
{
80005384:	40 ae       	mov.aa %a14,%sp
80005386:	40 4f       	mov.aa %a15,%a4
80005388:	40 5d       	mov.aa %a13,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
8000538a:	d4 5c       	ld.a %a12,[%a5]
    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
8000538c:	f4 4c       	st.a [%a4],%a12
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
8000538e:	40 c4       	mov.aa %a4,%a12
80005390:	6d ff 81 fd 	call 80004e92 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
80005394:	82 04       	mov %d4,0
80005396:	40 c4       	mov.aa %a4,%a12
80005398:	6d ff 34 fe 	call 80005000 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
8000539c:	d9 c2 18 00 	lea %a2,[%a12]24
800053a0:	19 c2 18 00 	ld.w %d2,[%a12]24
800053a4:	b7 02 02 28 	insert %d2,%d2,0,16,2
800053a8:	74 22       	st.w [%a2],%d2
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
800053aa:	b9 d3 08 00 	ld.hu %d3,[%a13]8
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
800053ae:	c2 f3       	add %d3,-1
800053b0:	d9 c2 14 00 	lea %a2,[%a12]20
800053b4:	19 c2 14 00 	ld.w %d2,[%a12]20
800053b8:	37 32 0c 20 	insert %d2,%d2,%d3,0,12
800053bc:	74 22       	st.w [%a2],%d2
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
800053be:	19 d4 18 10 	ld.w %d4,[%a13]88
800053c2:	40 c4       	mov.aa %a4,%a12
800053c4:	6d ff 1e fe 	call 80005000 <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
800053c8:	19 d7 10 00 	ld.w %d7,[%a13]16
800053cc:	19 d6 14 00 	ld.w %d6,[%a13]20
800053d0:	19 d5 0c 00 	ld.w %d5,[%a13]12
800053d4:	19 d4 04 00 	ld.w %d4,[%a13]4
800053d8:	40 c4       	mov.aa %a4,%a12
800053da:	6d ff 27 fe 	call 80005028 <IfxAsclin_setBitTiming>
800053de:	02 2a       	mov %d10,%d2
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
800053e0:	82 04       	mov %d4,0
800053e2:	40 c4       	mov.aa %a4,%a12
800053e4:	6d ff 0e fe 	call 80005000 <IfxAsclin_setClockSource>
    IfxAsclin_enableLoopBackMode(asclinSFR, config->loopBack);                       /* selecting the loopback mode */
800053e8:	39 d4 2c 10 	ld.bu %d4,[%a13]108
    asclin->IOCR.B.LB = enable ? 1 : 0;
800053ec:	8b 04 20 42 	ne %d4,%d4,0
800053f0:	d9 c2 04 00 	lea %a2,[%a12]4
800053f4:	19 c3 04 00 	ld.w %d3,[%a12]4
800053f8:	67 43 1c 30 	ins.t %d3,%d3,28,%d4,0
800053fc:	74 23       	st.w [%a2],%d3
    IfxAsclin_enableParity(asclinSFR, config->frame.parityBit);                      /* setting parity enable */
800053fe:	39 d4 30 00 	ld.bu %d4,[%a13]48
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
80005402:	8b 04 20 42 	ne %d4,%d4,0
80005406:	d9 c2 18 00 	lea %a2,[%a12]24
8000540a:	19 c3 18 00 	ld.w %d3,[%a12]24
8000540e:	67 43 1e 30 	ins.t %d3,%d3,30,%d4,0
80005412:	74 23       	st.w [%a2],%d3
    IfxAsclin_setParityType(asclinSFR, config->frame.parityType);                    /* setting parity type (odd/even)*/
80005414:	19 d2 28 00 	ld.w %d2,[%a13]40
    asclin->FRAMECON.B.ODD = type;
80005418:	d9 c2 18 00 	lea %a2,[%a12]24
8000541c:	19 c3 18 00 	ld.w %d3,[%a12]24
80005420:	67 23 1f 30 	ins.t %d3,%d3,31,%d2,0
80005424:	74 23       	st.w [%a2],%d3
    IfxAsclin_setStopBit(asclinSFR, config->frame.stopBit);                          /* setting the stop bit */
80005426:	19 d2 1c 00 	ld.w %d2,[%a13]28
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
8000542a:	d9 c2 18 00 	lea %a2,[%a12]24
8000542e:	19 c3 18 00 	ld.w %d3,[%a12]24
80005432:	37 23 83 34 	insert %d3,%d3,%d2,9,3
80005436:	74 23       	st.w [%a2],%d3
    IfxAsclin_setShiftDirection(asclinSFR, config->frame.shiftDir);                  /* setting the shift direction */
80005438:	19 d2 24 00 	ld.w %d2,[%a13]36
    asclin->FRAMECON.B.MSB = dir;
8000543c:	d9 c2 18 00 	lea %a2,[%a12]24
80005440:	19 c3 18 00 	ld.w %d3,[%a12]24
80005444:	67 23 1c 30 	ins.t %d3,%d3,28,%d2,0
80005448:	74 23       	st.w [%a2],%d3
    IfxAsclin_setDataLength(asclinSFR, config->frame.dataLength);                    /* setting the data length */
8000544a:	19 d2 2c 00 	ld.w %d2,[%a13]44
    asclin->DATCON.B.DATLEN = length;
8000544e:	d9 c2 1c 00 	lea %a2,[%a12]28
80005452:	19 c3 1c 00 	ld.w %d3,[%a12]28
80005456:	37 23 04 30 	insert %d3,%d3,%d2,0,4
8000545a:	74 23       	st.w [%a2],%d3
    IfxAsclin_setTxFifoInletWidth(asclinSFR, config->fifo.inWidth);                  /* setting Tx FIFO inlet width */
8000545c:	19 d2 34 00 	ld.w %d2,[%a13]52
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
80005460:	d9 c2 0c 00 	lea %a2,[%a12]12
80005464:	19 c3 0c 00 	ld.w %d3,[%a12]12
80005468:	37 23 02 33 	insert %d3,%d3,%d2,6,2
8000546c:	74 23       	st.w [%a2],%d3
    IfxAsclin_setRxFifoOutletWidth(asclinSFR, config->fifo.outWidth);                /* setting Rx FIFO outlet width */
8000546e:	19 d2 38 00 	ld.w %d2,[%a13]56
    asclin->RXFIFOCON.B.OUTW = width;
80005472:	d9 c2 10 00 	lea %a2,[%a12]16
80005476:	19 c3 10 00 	ld.w %d3,[%a12]16
8000547a:	37 23 02 33 	insert %d3,%d3,%d2,6,2
8000547e:	74 23       	st.w [%a2],%d3
    IfxAsclin_setIdleDelay(asclinSFR, config->frame.idleDelay);                      /* setting idle delay */
80005480:	19 d2 18 00 	ld.w %d2,[%a13]24
    asclin->FRAMECON.B.IDLE = delay;
80005484:	d9 c2 18 00 	lea %a2,[%a12]24
80005488:	19 c3 18 00 	ld.w %d3,[%a12]24
8000548c:	37 23 03 33 	insert %d3,%d3,%d2,6,3
80005490:	74 23       	st.w [%a2],%d3
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
80005492:	19 d2 3c 00 	ld.w %d2,[%a13]60
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80005496:	3b f0 00 40 	mov %d4,15
8000549a:	0b 42 90 21 	min.u %d2,%d2,%d4
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
8000549e:	d9 c2 0c 00 	lea %a2,[%a12]12
800054a2:	19 c3 0c 00 	ld.w %d3,[%a12]12
800054a6:	37 23 04 34 	insert %d3,%d3,%d2,8,4
800054aa:	74 23       	st.w [%a2],%d3
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
800054ac:	19 d2 00 10 	ld.w %d2,[%a13]64
800054b0:	0b 42 90 41 	min.u %d4,%d2,%d4
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
800054b4:	d9 c2 10 00 	lea %a2,[%a12]16
800054b8:	19 c3 10 00 	ld.w %d3,[%a12]16
800054bc:	37 43 04 34 	insert %d3,%d3,%d4,8,4
800054c0:	74 23       	st.w [%a2],%d3
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/
800054c2:	19 d2 20 00 	ld.w %d2,[%a13]32
    asclin->FRAMECON.B.MODE = mode;
800054c6:	d9 c2 18 00 	lea %a2,[%a12]24
800054ca:	19 c3 18 00 	ld.w %d3,[%a12]24
800054ce:	37 23 02 38 	insert %d3,%d3,%d2,16,2
800054d2:	74 23       	st.w [%a2],%d3
    const IfxAsclin_Asc_Pins *pins = config->pins;
800054d4:	19 d8 14 10 	ld.w %d8,[%a13]84
    if (pins != NULL_PTR)
800054d8:	df 08 8c 00 	jeq %d8,0,800055f0 <IfxAsclin_Asc_initModule+0x26c>
        IfxAsclin_Cts_In *cts = pins->cts;
800054dc:	60 82       	mov.a %a2,%d8
800054de:	54 29       	ld.w %d9,[%a2]
        if (cts != NULL_PTR)
800054e0:	df 09 2c 00 	jeq %d9,0,80005538 <IfxAsclin_Asc_initModule+0x1b4>
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
800054e4:	19 25 04 00 	ld.w %d5,[%a2]4
800054e8:	19 2b 20 00 	ld.w %d11,[%a2]32
    if (cts->pin.port != NULL_PTR)
800054ec:	60 92       	mov.a %a2,%d9
800054ee:	99 24 04 00 	ld.a %a4,[%a2]4
800054f2:	bd 04 23 00 	jz.a %a4,80005538 <IfxAsclin_Asc_initModule+0x1b4>
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
800054f6:	39 24 08 00 	ld.bu %d4,[%a2]8
800054fa:	6d ff a1 ea 	call 80002a3c <IfxPort_setPinMode>
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
800054fe:	02 b5       	mov %d5,%d11
80005500:	60 92       	mov.a %a2,%d9
80005502:	39 24 08 00 	ld.bu %d4,[%a2]8
80005506:	99 24 04 00 	ld.a %a4,[%a2]4
8000550a:	6d ff d0 ea 	call 80002aaa <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
8000550e:	60 92       	mov.a %a2,%d9
80005510:	d4 22       	ld.a %a2,[%a2]
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
80005512:	d9 23 04 00 	lea %a3,[%a2]4
80005516:	19 23 04 00 	ld.w %d3,[%a2]4
8000551a:	b7 13 81 3e 	insert %d3,%d3,1,29,1
8000551e:	74 33       	st.w [%a3],%d3
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
80005520:	60 92       	mov.a %a2,%d9
80005522:	d4 22       	ld.a %a2,[%a2]
80005524:	60 93       	mov.a %a3,%d9
80005526:	19 32 0c 00 	ld.w %d2,[%a3]12
    asclin->IOCR.B.CTS = ctsi;
8000552a:	d9 23 04 00 	lea %a3,[%a2]4
8000552e:	19 23 04 00 	ld.w %d3,[%a2]4
80005532:	37 23 02 38 	insert %d3,%d3,%d2,16,2
80005536:	74 33       	st.w [%a3],%d3
        IfxAsclin_Rx_In *rx = pins->rx;
80005538:	60 82       	mov.a %a2,%d8
8000553a:	19 29 08 00 	ld.w %d9,[%a2]8
        if (rx != NULL_PTR)
8000553e:	df 09 23 00 	jeq %d9,0,80005584 <IfxAsclin_Asc_initModule+0x200>
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
80005542:	19 25 0c 00 	ld.w %d5,[%a2]12
80005546:	19 2b 20 00 	ld.w %d11,[%a2]32
    if (rx->pin.port != NULL_PTR)
8000554a:	60 92       	mov.a %a2,%d9
8000554c:	99 24 04 00 	ld.a %a4,[%a2]4
80005550:	bd 04 1a 00 	jz.a %a4,80005584 <IfxAsclin_Asc_initModule+0x200>
80005554:	39 24 08 00 	ld.bu %d4,[%a2]8
80005558:	6d ff 72 ea 	call 80002a3c <IfxPort_setPinMode>
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
8000555c:	02 b5       	mov %d5,%d11
8000555e:	60 92       	mov.a %a2,%d9
80005560:	39 24 08 00 	ld.bu %d4,[%a2]8
80005564:	99 24 04 00 	ld.a %a4,[%a2]4
80005568:	6d ff a1 ea 	call 80002aaa <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
8000556c:	60 92       	mov.a %a2,%d9
8000556e:	d4 22       	ld.a %a2,[%a2]
80005570:	60 93       	mov.a %a3,%d9
80005572:	19 32 0c 00 	ld.w %d2,[%a3]12
    asclin->IOCR.B.ALTI = alti;
80005576:	d9 23 04 00 	lea %a3,[%a2]4
8000557a:	19 23 04 00 	ld.w %d3,[%a2]4
8000557e:	37 23 03 30 	insert %d3,%d3,%d2,0,3
80005582:	74 33       	st.w [%a3],%d3
        IfxAsclin_Rts_Out *rts = pins->rts;
80005584:	60 82       	mov.a %a2,%d8
80005586:	19 29 10 00 	ld.w %d9,[%a2]16
        if (rts != NULL_PTR)
8000558a:	df 09 18 00 	jeq %d9,0,800055ba <IfxAsclin_Asc_initModule+0x236>
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
8000558e:	19 25 14 00 	ld.w %d5,[%a2]20
80005592:	19 2b 20 00 	ld.w %d11,[%a2]32
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
80005596:	60 92       	mov.a %a2,%d9
80005598:	19 22 0c 00 	ld.w %d2,[%a2]12
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
8000559c:	a6 25       	or %d5,%d2
8000559e:	39 24 08 00 	ld.bu %d4,[%a2]8
800055a2:	99 24 04 00 	ld.a %a4,[%a2]4
800055a6:	6d ff 4b ea 	call 80002a3c <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
800055aa:	02 b5       	mov %d5,%d11
800055ac:	60 92       	mov.a %a2,%d9
800055ae:	39 24 08 00 	ld.bu %d4,[%a2]8
800055b2:	99 24 04 00 	ld.a %a4,[%a2]4
800055b6:	6d ff 7a ea 	call 80002aaa <IfxPort_setPinPadDriver>
        IfxAsclin_Tx_Out *tx = pins->tx;
800055ba:	60 82       	mov.a %a2,%d8
800055bc:	19 29 18 00 	ld.w %d9,[%a2]24
        if (tx != NULL_PTR)
800055c0:	df 09 18 00 	jeq %d9,0,800055f0 <IfxAsclin_Asc_initModule+0x26c>
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800055c4:	19 22 1c 00 	ld.w %d2,[%a2]28
800055c8:	19 28 20 00 	ld.w %d8,[%a2]32
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
800055cc:	60 92       	mov.a %a2,%d9
800055ce:	19 25 0c 00 	ld.w %d5,[%a2]12
800055d2:	a6 25       	or %d5,%d2
800055d4:	39 24 08 00 	ld.bu %d4,[%a2]8
800055d8:	99 24 04 00 	ld.a %a4,[%a2]4
800055dc:	6d ff 30 ea 	call 80002a3c <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
800055e0:	02 85       	mov %d5,%d8
800055e2:	60 92       	mov.a %a2,%d9
800055e4:	39 24 08 00 	ld.bu %d4,[%a2]8
800055e8:	99 24 04 00 	ld.a %a4,[%a2]4
800055ec:	6d ff 5f ea 	call 80002aaa <IfxPort_setPinPadDriver>
    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
800055f0:	19 d4 18 10 	ld.w %d4,[%a13]88
800055f4:	40 c4       	mov.aa %a4,%a12
800055f6:	6d ff 05 fd 	call 80005000 <IfxAsclin_setClockSource>
    asclin->FLAGSENABLE.U = 0x00000000;
800055fa:	82 03       	mov %d3,0
800055fc:	59 c3 00 10 	st.w [%a12]64,%d3
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
80005600:	82 f2       	mov %d2,-1
80005602:	59 c2 3c 00 	st.w [%a12]60,%d2
    asclin->errorFlags.ALL = 0;
80005606:	28 e3       	st.b [%a15]14,%d3
    if (config->errorFlags.flags.parityError)
80005608:	39 d3 1c 10 	ld.bu %d3,[%a13]92
8000560c:	6f 03 09 00 	jz.t %d3,0,8000561e <IfxAsclin_Asc_initModule+0x29a>
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005610:	d9 c2 00 10 	lea %a2,[%a12]64
80005614:	19 c3 00 10 	ld.w %d3,[%a12]64
80005618:	b7 13 01 38 	insert %d3,%d3,1,16,1
8000561c:	74 23       	st.w [%a2],%d3
    if (config->errorFlags.flags.frameError)
8000561e:	39 d3 1c 10 	ld.bu %d3,[%a13]92
80005622:	6f 13 09 00 	jz.t %d3,1,80005634 <IfxAsclin_Asc_initModule+0x2b0>
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
80005626:	d9 c2 00 10 	lea %a2,[%a12]64
8000562a:	19 c3 00 10 	ld.w %d3,[%a12]64
8000562e:	b7 13 01 39 	insert %d3,%d3,1,18,1
80005632:	74 23       	st.w [%a2],%d3
    if (config->errorFlags.flags.rxFifoOverflow)
80005634:	39 d3 1c 10 	ld.bu %d3,[%a13]92
80005638:	6f 23 09 00 	jz.t %d3,2,8000564a <IfxAsclin_Asc_initModule+0x2c6>
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
8000563c:	d9 c2 00 10 	lea %a2,[%a12]64
80005640:	19 c3 00 10 	ld.w %d3,[%a12]64
80005644:	b7 13 01 3d 	insert %d3,%d3,1,26,1
80005648:	74 23       	st.w [%a2],%d3
    if (config->errorFlags.flags.rxFifoUnderflow)
8000564a:	39 d3 1c 10 	ld.bu %d3,[%a13]92
8000564e:	6f 33 09 00 	jz.t %d3,3,80005660 <IfxAsclin_Asc_initModule+0x2dc>
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
80005652:	d9 c2 00 10 	lea %a2,[%a12]64
80005656:	19 c3 00 10 	ld.w %d3,[%a12]64
8000565a:	b7 13 81 3d 	insert %d3,%d3,1,27,1
8000565e:	74 23       	st.w [%a2],%d3
    if (config->errorFlags.flags.txFifoOverflow)
80005660:	39 d3 1c 10 	ld.bu %d3,[%a13]92
80005664:	6f 43 09 00 	jz.t %d3,4,80005676 <IfxAsclin_Asc_initModule+0x2f2>
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
80005668:	d9 c2 00 10 	lea %a2,[%a12]64
8000566c:	19 c3 00 10 	ld.w %d3,[%a12]64
80005670:	b7 13 01 3f 	insert %d3,%d3,1,30,1
80005674:	74 23       	st.w [%a2],%d3
    asclin->rxSwFifoOverflow = FALSE;
80005676:	82 03       	mov %d3,0
80005678:	28 d3       	st.b [%a15]13,%d3
    asclin->txInProgress     = FALSE;
8000567a:	28 c3       	st.b [%a15]12,%d3
    asclin->dataBufferMode = config->dataBufferMode;
8000567c:	19 d3 30 10 	ld.w %d3,[%a13]112
80005680:	68 43       	st.w [%a15]16,%d3
    asclin->txTimestamp    = 0;
80005682:	d2 04       	mov %e4,0
80005684:	89 f4 58 09 	st.d [%a15]24,%e4
    asclin->sendCount      = 0;
80005688:	82 02       	mov %d2,0
8000568a:	68 52       	st.w [%a15]20,%d2
    switch (asclin->dataBufferMode)
8000568c:	df 03 82 00 	jeq %d3,0,80005790 <IfxAsclin_Asc_initModule+0x40c>
80005690:	df 13 83 80 	jne %d3,1,80005796 <IfxAsclin_Asc_initModule+0x412>
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
80005694:	3b c0 00 80 	mov %d8,12
    if (config->txBuffer != NULL_PTR)
80005698:	99 d4 20 10 	ld.a %a4,[%a13]96
8000569c:	bd 04 80 00 	jz.a %a4,8000579c <IfxAsclin_Asc_initModule+0x418>
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056a0:	02 85       	mov %d5,%d8
800056a2:	c9 d4 1e 10 	ld.h %d4,[%a13]94
800056a6:	6d ff ba db 	call 80000e1a <Ifx_Fifo_init>
800056aa:	e8 12       	st.a [%a15]4,%a2
    if (config->rxBuffer != NULL_PTR)
800056ac:	99 d4 28 10 	ld.a %a4,[%a13]104
800056b0:	bd 04 7e 00 	jz.a %a4,800057ac <IfxAsclin_Asc_initModule+0x428>
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800056b4:	02 85       	mov %d5,%d8
800056b6:	c9 d4 24 10 	ld.h %d4,[%a13]100
800056ba:	6d ff b0 db 	call 80000e1a <Ifx_Fifo_init>
800056be:	e8 22       	st.a [%a15]8,%a2
    IfxSrc_Tos tos = config->interrupt.typeOfService;
800056c0:	19 d8 10 10 	ld.w %d8,[%a13]80
    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800056c4:	b9 d3 0a 10 	ld.hu %d3,[%a13]74
800056c8:	df 03 04 80 	jne %d3,0,800056d0 <IfxAsclin_Asc_initModule+0x34c>
800056cc:	df 38 1e 80 	jne %d8,3,80005708 <IfxAsclin_Asc_initModule+0x384>
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
800056d0:	40 c4       	mov.aa %a4,%a12
800056d2:	6d ff 70 fc 	call 80004fb2 <IfxAsclin_getSrcPointerRx>
    src->B.SRPN = priority;
800056d6:	39 d2 0a 10 	ld.bu %d2,[%a13]74
800056da:	54 23       	ld.w %d3,[%a2]
800056dc:	37 23 08 30 	insert %d3,%d3,%d2,0,8
800056e0:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
800056e2:	54 23       	ld.w %d3,[%a2]
800056e4:	37 83 82 35 	insert %d3,%d3,%d8,11,2
800056e8:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
800056ea:	54 23       	ld.w %d3,[%a2]
800056ec:	b7 13 81 3c 	insert %d3,%d3,1,25,1
800056f0:	74 23       	st.w [%a2],%d3
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
800056f2:	d9 c3 00 10 	lea %a3,[%a12]64
800056f6:	19 c3 00 10 	ld.w %d3,[%a12]64
800056fa:	b7 13 01 3e 	insert %d3,%d3,1,28,1
800056fe:	74 33       	st.w [%a3],%d3
    src->B.SRE = 1;
80005700:	54 23       	ld.w %d3,[%a2]
80005702:	b7 13 01 35 	insert %d3,%d3,1,10,1
80005706:	74 23       	st.w [%a2],%d3
    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
80005708:	b9 d3 08 10 	ld.hu %d3,[%a13]72
8000570c:	df 03 04 80 	jne %d3,0,80005714 <IfxAsclin_Asc_initModule+0x390>
80005710:	df 38 1e 80 	jne %d8,3,8000574c <IfxAsclin_Asc_initModule+0x3c8>
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
80005714:	40 c4       	mov.aa %a4,%a12
80005716:	6d ff 5b fc 	call 80004fcc <IfxAsclin_getSrcPointerTx>
    src->B.SRPN = priority;
8000571a:	39 d2 08 10 	ld.bu %d2,[%a13]72
8000571e:	54 23       	ld.w %d3,[%a2]
80005720:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80005724:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80005726:	54 23       	ld.w %d3,[%a2]
80005728:	37 83 82 35 	insert %d3,%d3,%d8,11,2
8000572c:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
8000572e:	54 23       	ld.w %d3,[%a2]
80005730:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80005734:	74 23       	st.w [%a2],%d3
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
80005736:	d9 c3 00 10 	lea %a3,[%a12]64
8000573a:	19 c3 00 10 	ld.w %d3,[%a12]64
8000573e:	b7 13 81 3f 	insert %d3,%d3,1,31,1
80005742:	74 33       	st.w [%a3],%d3
    src->B.SRE = 1;
80005744:	54 23       	ld.w %d3,[%a2]
80005746:	b7 13 01 35 	insert %d3,%d3,1,10,1
8000574a:	74 23       	st.w [%a2],%d3
    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
8000574c:	b9 d3 0c 10 	ld.hu %d3,[%a13]76
80005750:	df 03 36 80 	jne %d3,0,800057bc <IfxAsclin_Asc_initModule+0x438>
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
80005754:	d9 c2 10 00 	lea %a2,[%a12]16
80005758:	19 c3 10 00 	ld.w %d3,[%a12]16
8000575c:	b7 13 81 30 	insert %d3,%d3,1,1,1
80005760:	74 23       	st.w [%a2],%d3
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
80005762:	d9 c2 0c 00 	lea %a2,[%a12]12
80005766:	19 c3 0c 00 	ld.w %d3,[%a12]12
8000576a:	b7 13 81 30 	insert %d3,%d3,1,1,1
8000576e:	74 23       	st.w [%a2],%d3
    asclin->RXFIFOCON.B.FLUSH = 1;
80005770:	d9 c2 10 00 	lea %a2,[%a12]16
80005774:	19 c3 10 00 	ld.w %d3,[%a12]16
80005778:	b7 13 01 30 	insert %d3,%d3,1,0,1
8000577c:	74 23       	st.w [%a2],%d3
    asclin->TXFIFOCON.B.FLUSH = 1;
8000577e:	d9 c2 0c 00 	lea %a2,[%a12]12
80005782:	19 c3 0c 00 	ld.w %d3,[%a12]12
80005786:	b7 13 01 30 	insert %d3,%d3,1,0,1
8000578a:	74 23       	st.w [%a2],%d3
}
8000578c:	02 a2       	mov %d2,%d10
8000578e:	00 90       	ret 
    switch (asclin->dataBufferMode)
80005790:	82 18       	mov %d8,1
80005792:	1d ff 83 ff 	j 80005698 <IfxAsclin_Asc_initModule+0x314>
        elementSize = 0;
80005796:	82 08       	mov %d8,0
80005798:	1d ff 80 ff 	j 80005698 <IfxAsclin_Asc_initModule+0x314>
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
8000579c:	02 85       	mov %d5,%d8
8000579e:	c9 d4 1e 10 	ld.h %d4,[%a13]94
800057a2:	6d ff 62 db 	call 80000e66 <Ifx_Fifo_create>
800057a6:	e8 12       	st.a [%a15]4,%a2
800057a8:	1d ff 82 ff 	j 800056ac <IfxAsclin_Asc_initModule+0x328>
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
800057ac:	02 85       	mov %d5,%d8
800057ae:	c9 d4 24 10 	ld.h %d4,[%a13]100
800057b2:	6d ff 5a db 	call 80000e66 <Ifx_Fifo_create>
800057b6:	e8 22       	st.a [%a15]8,%a2
800057b8:	1d ff 84 ff 	j 800056c0 <IfxAsclin_Asc_initModule+0x33c>
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
800057bc:	40 c4       	mov.aa %a4,%a12
800057be:	6d ff ec fb 	call 80004f96 <IfxAsclin_getSrcPointerEr>
    src->B.SRPN = priority;
800057c2:	39 d2 0c 10 	ld.bu %d2,[%a13]76
800057c6:	54 23       	ld.w %d3,[%a2]
800057c8:	37 23 08 30 	insert %d3,%d3,%d2,0,8
800057cc:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
800057ce:	54 23       	ld.w %d3,[%a2]
800057d0:	37 83 82 35 	insert %d3,%d3,%d8,11,2
800057d4:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
800057d6:	54 23       	ld.w %d3,[%a2]
800057d8:	b7 13 81 3c 	insert %d3,%d3,1,25,1
800057dc:	74 23       	st.w [%a2],%d3
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
800057de:	d9 c3 00 10 	lea %a3,[%a12]64
800057e2:	19 c3 00 10 	ld.w %d3,[%a12]64
800057e6:	b7 13 01 38 	insert %d3,%d3,1,16,1
800057ea:	74 33       	st.w [%a3],%d3
    src->B.SRE = 1;
800057ec:	54 23       	ld.w %d3,[%a2]
800057ee:	b7 13 01 35 	insert %d3,%d3,1,10,1
800057f2:	74 23       	st.w [%a2],%d3
}
800057f4:	1d ff b0 ff 	j 80005754 <IfxAsclin_Asc_initModule+0x3d0>

800057f8 <IfxAsclin_Asc_initModuleConfig>:
{
800057f8:	40 ae       	mov.aa %a14,%sp
    config->asclin = asclin;
800057fa:	f4 45       	st.a [%a4],%a5
    config->loopBack = FALSE;                                                  /* no loop back*/
800057fc:	82 02       	mov %d2,0
800057fe:	e9 42 2c 10 	st.b [%a4]108,%d2
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005802:	82 13       	mov %d3,1
80005804:	59 43 18 10 	st.w [%a4]88,%d3
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
80005808:	f9 43 08 00 	st.h [%a4]8,%d3
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
8000580c:	7b 10 7e 24 	movh %d2,18401
80005810:	59 42 04 00 	st.w [%a4]4,%d2
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
80005814:	82 34       	mov %d4,3
80005816:	59 44 0c 00 	st.w [%a4]12,%d4
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
8000581a:	82 02       	mov %d2,0
8000581c:	59 42 10 00 	st.w [%a4]16,%d2
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
80005820:	59 44 14 00 	st.w [%a4]20,%d4
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
80005824:	59 42 18 00 	st.w [%a4]24,%d2
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
80005828:	59 43 1c 00 	st.w [%a4]28,%d3
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
8000582c:	59 43 20 00 	st.w [%a4]32,%d3
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
80005830:	59 42 24 00 	st.w [%a4]36,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
80005834:	e9 42 30 00 	st.b [%a4]48,%d2
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
80005838:	59 42 28 00 	st.w [%a4]40,%d2
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
8000583c:	82 74       	mov %d4,7
8000583e:	59 44 2c 00 	st.w [%a4]44,%d4
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
80005842:	59 43 34 00 	st.w [%a4]52,%d3
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005846:	59 43 38 00 	st.w [%a4]56,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
8000584a:	59 42 3c 00 	st.w [%a4]60,%d2
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
8000584e:	59 42 00 10 	st.w [%a4]64,%d2
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
80005852:	59 42 04 10 	st.w [%a4]68,%d2
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
80005856:	f9 42 0a 10 	st.h [%a4]74,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
8000585a:	f9 42 08 10 	st.h [%a4]72,%d2
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
8000585e:	f9 42 0c 10 	st.h [%a4]76,%d2
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
80005862:	59 42 10 10 	st.w [%a4]80,%d2
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
80005866:	82 f3       	mov %d3,-1
80005868:	e9 43 1c 10 	st.b [%a4]92,%d3
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
8000586c:	59 42 14 10 	st.w [%a4]84,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
80005870:	59 42 28 10 	st.w [%a4]104,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
80005874:	59 42 20 10 	st.w [%a4]96,%d2
    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
80005878:	f9 42 1e 10 	st.h [%a4]94,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
8000587c:	f9 42 24 10 	st.h [%a4]100,%d2
    config->dataBufferMode = Ifx_DataBufferMode_normal;
80005880:	59 42 30 10 	st.w [%a4]112,%d2
}
80005884:	00 90       	ret 

80005886 <IfxAsclin_Asc_initiateTransmission>:
{
80005886:	40 ae       	mov.aa %a14,%sp
80005888:	20 10       	sub.a %sp,16
8000588a:	40 4c       	mov.aa %a12,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
8000588c:	39 42 0c 00 	ld.bu %d2,[%a4]12
80005890:	df 02 17 80 	jne %d2,0,800058be <IfxAsclin_Asc_initiateTransmission+0x38>
        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005894:	99 44 04 00 	ld.a %a4,[%a4]4
80005898:	c9 42 04 00 	ld.h %d2,[%a4]4
8000589c:	df 02 11 00 	jeq %d2,0,800058be <IfxAsclin_Asc_initiateTransmission+0x38>
            asclin->txInProgress = TRUE;
800058a0:	82 12       	mov %d2,1
800058a2:	e9 c2 0c 00 	st.b [%a12]12,%d2
            switch (asclin->dataBufferMode)
800058a6:	19 c2 10 00 	ld.w %d2,[%a12]16
800058aa:	df 02 0b 00 	jeq %d2,0,800058c0 <IfxAsclin_Asc_initiateTransmission+0x3a>
800058ae:	df 12 11 00 	jeq %d2,1,800058d0 <IfxAsclin_Asc_initiateTransmission+0x4a>
            IfxAsclin_write8(asclin->asclin, &data, 1);
800058b2:	82 14       	mov %d4,1
800058b4:	d9 e5 f3 ff 	lea %a5,[%a14]-13
800058b8:	d4 c4       	ld.a %a4,[%a12]
800058ba:	6d ff 6e fc 	call 80005196 <IfxAsclin_write8>
}
800058be:	00 90       	ret 
                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
800058c0:	d2 06       	mov %e6,0
800058c2:	82 14       	mov %d4,1
800058c4:	d9 e5 f3 ff 	lea %a5,[%a14]-13
800058c8:	6d ff e4 da 	call 80000e90 <Ifx_Fifo_read>
            break;
800058cc:	1d ff f3 ff 	j 800058b2 <IfxAsclin_Asc_initiateTransmission+0x2c>
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
800058d0:	d2 06       	mov %e6,0
800058d2:	3b c0 00 40 	mov %d4,12
800058d6:	d9 e5 f4 ff 	lea %a5,[%a14]-12
800058da:	6d ff db da 	call 80000e90 <Ifx_Fifo_read>
                data = packedData.data;
800058de:	39 e2 fc ff 	ld.bu %d2,[%a14]-4
800058e2:	e9 e2 f3 ff 	st.b [%a14]-13,%d2
            break;
800058e6:	1d ff e6 ff 	j 800058b2 <IfxAsclin_Asc_initiateTransmission+0x2c>

800058ea <IfxAsclin_Asc_write>:
    return TRUE;
}


boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800058ea:	40 ae       	mov.aa %a14,%sp
800058ec:	40 4c       	mov.aa %a12,%a4
800058ee:	80 5b       	mov.d %d11,%a5
800058f0:	40 6d       	mov.aa %a13,%a6
800058f2:	02 4a       	mov %d10,%d4
800058f4:	02 59       	mov %d9,%d5
    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
800058f6:	39 43 0c 00 	ld.bu %d3,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058fa:	99 44 04 00 	ld.a %a4,[%a4]4
800058fe:	c9 42 18 00 	ld.h %d2,[%a4]24
80005902:	b9 48 18 00 	ld.hu %d8,[%a4]24

    if (*count != 0)
80005906:	94 64       	ld.h %d4,[%a6]
80005908:	df 04 31 00 	jeq %d4,0,8000596a <IfxAsclin_Asc_write+0x80>
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
8000590c:	df 03 04 80 	jne %d3,0,80005914 <IfxAsclin_Asc_write+0x2a>
80005910:	3f 48 11 00 	jlt %d8,%d4,80005932 <IfxAsclin_Asc_write+0x48>
            IfxAsclin_Asc_initiateTransmission(asclin); /*Will initiate transmission only if txInProgress is False, otherwise interrupts will continue to push data to H/W FIFO*/
        }

        else
        {
            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005914:	02 a6       	mov %d6,%d10
80005916:	02 97       	mov %d7,%d9
80005918:	60 b5       	mov.a %a5,%d11
8000591a:	6d ff 74 db 	call 80001002 <Ifx_Fifo_write>
8000591e:	02 28       	mov %d8,%d2
            IfxAsclin_Asc_initiateTransmission(asclin);
80005920:	40 c4       	mov.aa %a4,%a12
80005922:	6d ff b2 ff 	call 80005886 <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
80005926:	94 d2       	ld.h %d2,[%a13]
80005928:	a2 82       	sub %d2,%d8
8000592a:	b4 d2       	st.h [%a13],%d2
        result  = left == 0;
8000592c:	8b 08 00 22 	eq %d2,%d8,0
80005930:	00 90       	ret 
            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
80005932:	02 a6       	mov %d6,%d10
80005934:	02 57       	mov %d7,%d5
80005936:	02 24       	mov %d4,%d2
80005938:	6d ff 65 db 	call 80001002 <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
8000593c:	40 c4       	mov.aa %a4,%a12
8000593e:	6d ff a4 ff 	call 80005886 <IfxAsclin_Asc_initiateTransmission>
            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80005942:	b9 d4 00 00 	ld.hu %d4,[%a13]0
80005946:	a2 84       	sub %d4,%d8
80005948:	02 a6       	mov %d6,%d10
8000594a:	02 97       	mov %d7,%d9
8000594c:	37 04 50 40 	extr %d4,%d4,0,16
80005950:	60 b2       	mov.a %a2,%d11
80005952:	01 28 00 56 	addsc.a %a5,%a2,%d8,0
80005956:	99 c4 04 00 	ld.a %a4,[%a12]4
8000595a:	6d ff 54 db 	call 80001002 <Ifx_Fifo_write>
8000595e:	02 28       	mov %d8,%d2
            IfxAsclin_Asc_initiateTransmission(asclin); /*Will initiate transmission only if txInProgress is False, otherwise interrupts will continue to push data to H/W FIFO*/
80005960:	40 c4       	mov.aa %a4,%a12
80005962:	6d ff 92 ff 	call 80005886 <IfxAsclin_Asc_initiateTransmission>
80005966:	1d ff e0 ff 	j 80005926 <IfxAsclin_Asc_write+0x3c>
    boolean   result       = TRUE;
8000596a:	82 12       	mov %d2,1
    }

    return result;
}
8000596c:	00 90       	ret 

8000596e <IfxAsclin_Asc_blockingWrite>:
{
8000596e:	40 ae       	mov.aa %a14,%sp
80005970:	20 10       	sub.a %sp,16
80005972:	e9 e4 f4 ff 	st.b [%a14]-12,%d4
    Ifx_SizeT count = 1;
80005976:	82 12       	mov %d2,1
80005978:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
8000597c:	82 f4       	mov %d4,-1
8000597e:	82 f5       	mov %d5,-1
80005980:	06 f5       	sh %d5,-1
80005982:	d9 e6 fe ff 	lea %a6,[%a14]-2
80005986:	d9 e5 f4 ff 	lea %a5,[%a14]-12
8000598a:	6d ff b0 ff 	call 800058ea <IfxAsclin_Asc_write>
}
8000598e:	00 90       	ret 

80005990 <IfxStdIf_PwmHl_initConfig>:
 */

#include "IfxStdIf_PwmHl.h"

void IfxStdIf_PwmHl_initConfig(IfxStdIf_PwmHl_Config *config)
{
80005990:	40 ae       	mov.aa %a14,%sp
    config->deadtime         = 0;
80005992:	82 02       	mov %d2,0
80005994:	74 42       	st.w [%a4],%d2
    config->minPulse         = 0;
80005996:	59 42 04 00 	st.w [%a4]4,%d2
    config->channelCount     = 0;
8000599a:	82 02       	mov %d2,0
8000599c:	e9 42 08 00 	st.b [%a4]8,%d2
    config->emergencyEnabled = FALSE;
800059a0:	e9 42 09 00 	st.b [%a4]9,%d2
    config->outputMode       = IfxPort_OutputMode_pushPull;
800059a4:	3b 00 08 20 	mov %d2,128
800059a8:	59 42 0c 00 	st.w [%a4]12,%d2
    config->outputDriver     = IfxPort_PadDriver_cmosAutomotiveSpeed1;
800059ac:	82 02       	mov %d2,0
800059ae:	59 42 10 00 	st.w [%a4]16,%d2
    config->ccxActiveState   = Ifx_ActiveState_high;
800059b2:	82 12       	mov %d2,1
800059b4:	59 42 1c 00 	st.w [%a4]28,%d2
    config->coutxActiveState = Ifx_ActiveState_high;
800059b8:	59 42 20 00 	st.w [%a4]32,%d2
}
800059bc:	00 90       	ret 

800059be <IfxStdIf_Timer_initConfig>:
 */

#include "IfxStdIf_Timer.h"

void IfxStdIf_Timer_initConfig(IfxStdIf_Timer_Config *config)
{
800059be:	40 ae       	mov.aa %a14,%sp
    config->frequency                  = 1000;
800059c0:	7b a0 47 24 	movh %d2,17530
800059c4:	74 42       	st.w [%a4],%d2
    config->isrPriority                = 0;
800059c6:	82 02       	mov %d2,0
800059c8:	f9 42 04 00 	st.h [%a4]4,%d2
    config->isrProvider                = IfxSrc_Tos_cpu0;
800059cc:	82 03       	mov %d3,0
800059ce:	59 43 08 00 	st.w [%a4]8,%d3
    config->minResolution              = 0;
800059d2:	82 04       	mov %d4,0
800059d4:	59 44 0c 00 	st.w [%a4]12,%d4
    config->trigger.outputMode         = IfxPort_OutputMode_pushPull;
800059d8:	3b 00 08 50 	mov %d5,128
800059dc:	59 45 20 00 	st.w [%a4]32,%d5
    config->trigger.outputDriver       = IfxPort_PadDriver_cmosAutomotiveSpeed1;
800059e0:	59 43 24 00 	st.w [%a4]36,%d3
    config->trigger.risingEdgeAtPeriod = FALSE;
800059e4:	e9 42 28 00 	st.b [%a4]40,%d2
    config->trigger.outputEnabled      = FALSE;
800059e8:	e9 42 29 00 	st.b [%a4]41,%d2
    config->trigger.enabled            = FALSE;
800059ec:	e9 42 10 00 	st.b [%a4]16,%d2
    config->trigger.triggerPoint       = 0;
800059f0:	59 43 14 00 	st.w [%a4]20,%d3
    config->trigger.isrPriority        = 0;
800059f4:	f9 43 18 00 	st.h [%a4]24,%d3
    config->trigger.isrProvider        = IfxSrc_Tos_cpu0;
800059f8:	59 43 1c 00 	st.w [%a4]28,%d3
    config->countDir                   = IfxStdIf_Timer_CountDir_up;
800059fc:	59 43 2c 00 	st.w [%a4]44,%d3
    config->startOffset 					   = 0.0;
80005a00:	59 44 30 00 	st.w [%a4]48,%d4
}
80005a04:	00 90       	ret 

80005a06 <Ifx_C_Init>:
 *
 * Parameters: Nil
 * Return: Nil
 */
void Ifx_C_Init(void)
{
80005a06:	40 ae       	mov.aa %a14,%sp
80005a08:	20 08       	sub.a %sp,8
    IfxStart_CTablePtr pBlockDest, pBlockSrc;
    uint32             uiLength, uiCnt;
    uint32            *pTable;
    /* clear table */
    pTable = (uint32 *)&__clear_table;
80005a0a:	91 00 00 28 	movh.a %a2,32768
80005a0e:	d9 22 4c 30 	lea %a2,[%a2]1228 <800004cc <__clear_table>>

    while (pTable)
80005a12:	1d 00 32 00 	j 80005a76 <Ifx_C_Init+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
80005a16:	91 00 00 28 	movh.a %a2,32768
80005a1a:	d9 22 74 40 	lea %a2,[%a2]1332 <80000534 <__copy_table>>
80005a1e:	1d 00 7c 00 	j 80005b16 <Ifx_C_Init+0x110>
            *pBlockDest.ullPtr++ = 0;
80005a22:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80005a26:	80 22       	mov.d %d2,%a2
80005a28:	1b 82 00 20 	addi %d2,%d2,8
80005a2c:	59 e2 fc ff 	st.w [%a14]-4,%d2
80005a30:	d2 02       	mov %e2,0
80005a32:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80005a36:	02 52       	mov %d2,%d5
80005a38:	1b f2 ff 5f 	addi %d5,%d2,-1
80005a3c:	df 02 f3 ff 	jne %d2,0,80005a22 <Ifx_C_Init+0x1c>
        if (uiLength & 0x4)
80005a40:	6f 24 0a 00 	jz.t %d4,2,80005a54 <Ifx_C_Init+0x4e>
            *pBlockDest.uiPtr++ = 0;
80005a44:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80005a48:	80 22       	mov.d %d2,%a2
80005a4a:	c2 42       	add %d2,4
80005a4c:	59 e2 fc ff 	st.w [%a14]-4,%d2
80005a50:	82 02       	mov %d2,0
80005a52:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
80005a54:	6f 14 0a 00 	jz.t %d4,1,80005a68 <Ifx_C_Init+0x62>
            *pBlockDest.usPtr++ = 0;
80005a58:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80005a5c:	80 22       	mov.d %d2,%a2
80005a5e:	c2 22       	add %d2,2
80005a60:	59 e2 fc ff 	st.w [%a14]-4,%d2
80005a64:	82 02       	mov %d2,0
80005a66:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
80005a68:	6f 04 06 00 	jz.t %d4,0,80005a74 <Ifx_C_Init+0x6e>
            *pBlockDest.ucPtr = 0;
80005a6c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80005a70:	82 02       	mov %d2,0
80005a72:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80005a74:	40 32       	mov.aa %a2,%a3
    while (pTable)
80005a76:	bd 02 d0 7f 	jz.a %a2,80005a16 <Ifx_C_Init+0x10>
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80005a7a:	d9 23 08 00 	lea %a3,[%a2]8
80005a7e:	54 22       	ld.w %d2,[%a2]
80005a80:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80005a84:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
80005a88:	df f4 c7 7f 	jeq %d4,-1,80005a16 <Ifx_C_Init+0x10>
        uiCnt = uiLength / 8;
80005a8c:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
80005a90:	1d ff d4 ff 	j 80005a38 <Ifx_C_Init+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
80005a94:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80005a98:	80 22       	mov.d %d2,%a2
80005a9a:	1b 82 00 20 	addi %d2,%d2,8
80005a9e:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80005aa2:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80005aa6:	80 32       	mov.d %d2,%a3
80005aa8:	1b 82 00 20 	addi %d2,%d2,8
80005aac:	59 e2 fc ff 	st.w [%a14]-4,%d2
80005ab0:	09 26 40 09 	ld.d %e6,[%a2]
80005ab4:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80005ab8:	02 42       	mov %d2,%d4
80005aba:	1b f2 ff 4f 	addi %d4,%d2,-1
80005abe:	df 02 eb ff 	jne %d2,0,80005a94 <Ifx_C_Init+0x8e>
        }

        if (uiLength & 0x4)
80005ac2:	6f 23 10 00 	jz.t %d3,2,80005ae2 <Ifx_C_Init+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80005ac6:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80005aca:	80 22       	mov.d %d2,%a2
80005acc:	c2 42       	add %d2,4
80005ace:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80005ad2:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80005ad6:	80 32       	mov.d %d2,%a3
80005ad8:	c2 42       	add %d2,4
80005ada:	59 e2 fc ff 	st.w [%a14]-4,%d2
80005ade:	54 22       	ld.w %d2,[%a2]
80005ae0:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
80005ae2:	6f 13 11 00 	jz.t %d3,1,80005b04 <Ifx_C_Init+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80005ae6:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80005aea:	80 32       	mov.d %d2,%a3
80005aec:	c2 22       	add %d2,2
80005aee:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80005af2:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80005af6:	80 22       	mov.d %d2,%a2
80005af8:	c2 22       	add %d2,2
80005afa:	59 e2 fc ff 	st.w [%a14]-4,%d2
80005afe:	b9 32 00 00 	ld.hu %d2,[%a3]0
80005b02:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80005b04:	6f 03 08 00 	jz.t %d3,0,80005b14 <Ifx_C_Init+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80005b08:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80005b0c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80005b10:	14 32       	ld.bu %d2,[%a3]
80005b12:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80005b14:	60 52       	mov.a %a2,%d5
    while (pTable)
80005b16:	bd 02 14 00 	jz.a %a2,80005b3e <Ifx_C_Init+0x138>
        pBlockSrc.uiPtr  = (uint32 *)*pTable++;
80005b1a:	54 22       	ld.w %d2,[%a2]
80005b1c:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80005b20:	19 22 04 00 	ld.w %d2,[%a2]4
80005b24:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80005b28:	80 22       	mov.d %d2,%a2
80005b2a:	1b c2 00 50 	addi %d5,%d2,12
80005b2e:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
80005b32:	df f3 06 00 	jeq %d3,-1,80005b3e <Ifx_C_Init+0x138>
        uiCnt = uiLength / 8;
80005b36:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80005b3a:	1d ff c0 ff 	j 80005aba <Ifx_C_Init+0xb4>
        }
    }
}
80005b3e:	00 90       	ret 

80005b40 <init_GPIO>:
#include "GPIO.h"



void init_GPIO(void)
{
80005b40:	40 ae       	mov.aa %a14,%sp
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80005b42:	3b 80 00 50 	mov %d5,8
80005b46:	82 34       	mov %d4,3
80005b48:	91 40 00 4f 	movh.a %a4,61444
80005b4c:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
80005b50:	6d ff 76 e7 	call 80002a3c <IfxPort_setPinMode>
80005b54:	3b 80 00 50 	mov %d5,8
80005b58:	82 44       	mov %d4,4
80005b5a:	91 40 00 4f 	movh.a %a4,61444
80005b5e:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
80005b62:	6d ff 6d e7 	call 80002a3c <IfxPort_setPinMode>
    IfxPort_setPinModeInput(PORT_023, IfxPort_InputMode_pullDown);
    IfxPort_setPinModeInput(PORT_024, IfxPort_InputMode_pullDown);
}
80005b66:	00 90       	ret 

80005b68 <Encoder>:
 */
#include "GPIO.h"
#include "Encoder.h"

void Encoder(void)
{
80005b68:	40 ae       	mov.aa %a14,%sp
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
80005b6a:	91 40 00 2f 	movh.a %a2,61444
80005b6e:	d9 22 00 8a 	lea %a2,[%a2]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
80005b72:	d9 23 24 00 	lea %a3,[%a2]36 <f0040024 <_SMALL_DATA4_+0x60038024>>
80005b76:	19 23 24 00 	ld.w %d3,[%a2]36 <f0040024 <_SMALL_DATA4_+0x60038024>>
80005b7a:	37 03 e1 51 	extr.u %d5,%d3,3,1
80005b7e:	54 38       	ld.w %d8,[%a3]
80005b80:	37 08 61 42 	extr.u %d4,%d8,4,1
   uint8 A = IfxPort_getPinState(PORT_023);
   uint8 B = IfxPort_getPinState(PORT_024);

   uint8 state = 0;

   if       (A == 0 && B == 0) {state = 0;}
80005b84:	87 83 23 82 	or.t %d8,%d3,3,%d8,4
80005b88:	df 08 14 00 	jeq %d8,0,80005bb0 <Encoder+0x48>
   else if  (A == 1 && B == 0) {state = 1;}
80005b8c:	02 53       	mov %d3,%d5
80005b8e:	8f 14 80 21 	xor %d2,%d4,1
80005b92:	26 52       	and %d2,%d5
80005b94:	df 02 0d 80 	jne %d2,0,80005bae <Encoder+0x46>
   else if  (A == 1 && B == 1) {state = 2;}
80005b98:	26 43       	and %d3,%d4
80005b9a:	df 03 4d 80 	jne %d3,0,80005c34 <Encoder+0xcc>
   else if  (A == 0 && B == 1) {state = 3;}
80005b9e:	8f 15 80 21 	xor %d2,%d5,1
80005ba2:	26 42       	and %d2,%d4
80005ba4:	df 02 4b 80 	jne %d2,0,80005c3a <Encoder+0xd2>
   uint8 state = 0;
80005ba8:	82 08       	mov %d8,0
80005baa:	1d 00 03 00 	j 80005bb0 <Encoder+0x48>
   else if  (A == 1 && B == 0) {state = 1;}
80005bae:	82 18       	mov %d8,1

   if       (state-state_old==1 || state-state_old==-3) {encoderCNT++; encoderDir = 1;}
80005bb0:	91 00 00 26 	movh.a %a2,24576
80005bb4:	39 22 88 90 	ld.bu %d2,[%a2]2632 <60000a48 <state_old>>
80005bb8:	0b 28 80 20 	sub %d2,%d8,%d2
80005bbc:	8b 12 00 32 	eq %d3,%d2,1
80005bc0:	8b d2 ff 34 	or.eq %d3,%d2,-3
80005bc4:	df 03 3e 00 	jeq %d3,0,80005c40 <Encoder+0xd8>
80005bc8:	91 00 00 26 	movh.a %a2,24576
80005bcc:	d9 23 84 90 	lea %a3,[%a2]2628 <60000a44 <encoderCNT>>
80005bd0:	54 32       	ld.w %d2,[%a3]
80005bd2:	c2 12       	add %d2,1
80005bd4:	59 22 84 90 	st.w [%a2]2628 <60000a44 <encoderCNT>>,%d2
80005bd8:	91 00 00 26 	movh.a %a2,24576
80005bdc:	82 12       	mov %d2,1
80005bde:	59 22 80 90 	st.w [%a2]2624 <60000a40 <encoderDir>>,%d2
   else if  (state-state_old==-1 || state-state_old==3) {encoderCNT--; encoderDir = -1;}

   theta = encoderCNT*1/16*0.25*360;    //한바퀴 1/16
80005be2:	91 00 00 26 	movh.a %a2,24576
80005be6:	19 22 84 90 	ld.w %d2,[%a2]2628 <60000a44 <encoderCNT>>
80005bea:	8b 02 40 42 	lt %d4,%d2,0
80005bee:	ab f2 00 44 	cadd %d4,%d4,%d2,15
80005bf2:	86 c4       	sha %d4,-4
80005bf4:	6d 00 33 04 	call 8000645a <__floatsidf>
80005bf8:	82 06       	mov %d6,0
80005bfa:	7b 00 fd 73 	movh %d7,16336
80005bfe:	0b 23 10 48 	mov %e4,%d3,%d2
80005c02:	6d 00 72 02 	call 800060e6 <__muldf3>
80005c06:	82 06       	mov %d6,0
80005c08:	7b 70 07 74 	movh %d7,16503
80005c0c:	1b 07 00 78 	addi %d7,%d7,-32768
80005c10:	0b 23 10 48 	mov %e4,%d3,%d2
80005c14:	6d 00 69 02 	call 800060e6 <__muldf3>
80005c18:	0b 23 10 48 	mov %e4,%d3,%d2
80005c1c:	6d 00 6a 04 	call 800064f0 <__truncdfsf2>
80005c20:	91 00 00 26 	movh.a %a2,24576
80005c24:	d9 22 bc 80 	lea %a2,[%a2]2620 <60000a3c <theta>>
80005c28:	74 22       	st.w [%a2],%d2

   state_old = state;
80005c2a:	91 00 00 26 	movh.a %a2,24576
80005c2e:	e9 28 88 90 	st.b [%a2]2632 <60000a48 <state_old>>,%d8
}
80005c32:	00 90       	ret 
   else if  (A == 1 && B == 1) {state = 2;}
80005c34:	82 28       	mov %d8,2
80005c36:	1d ff bd ff 	j 80005bb0 <Encoder+0x48>
   else if  (A == 0 && B == 1) {state = 3;}
80005c3a:	82 38       	mov %d8,3
80005c3c:	1d ff ba ff 	j 80005bb0 <Encoder+0x48>
   else if  (state-state_old==-1 || state-state_old==3) {encoderCNT--; encoderDir = -1;}
80005c40:	8b f2 1f 32 	eq %d3,%d2,-1
80005c44:	8b 32 e0 34 	or.eq %d3,%d2,3
80005c48:	df 03 cd 7f 	jeq %d3,0,80005be2 <Encoder+0x7a>
80005c4c:	91 00 00 26 	movh.a %a2,24576
80005c50:	d9 23 84 90 	lea %a3,[%a2]2628 <60000a44 <encoderCNT>>
80005c54:	54 32       	ld.w %d2,[%a3]
80005c56:	c2 f2       	add %d2,-1
80005c58:	59 22 84 90 	st.w [%a2]2628 <60000a44 <encoderCNT>>,%d2
80005c5c:	91 00 00 26 	movh.a %a2,24576
80005c60:	82 f2       	mov %d2,-1
80005c62:	59 22 80 90 	st.w [%a2]2624 <60000a40 <encoderDir>>,%d2
80005c66:	1d ff be ff 	j 80005be2 <Encoder+0x7a>

80005c6a <init_ADC_Group>:
#include "ADC.h"
#include "STM.h"
#include "GPIO.h"

void init_ADC_Group(void)
{
80005c6a:	40 ae       	mov.aa %a14,%sp
80005c6c:	20 a8       	sub.a %sp,168
    IfxVadc_Adc_Config      adcConf;                        /* Define a configuration structure for the VADC module */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);   /* adcConf 값을 디폴트 값(MODULE_VADC)오로 초기화 */
80005c6e:	91 20 00 5f 	movh.a %a5,61442
80005c72:	d9 e4 d8 ff 	lea %a4,[%a14]-40
80005c76:	6d ff 20 e0 	call 80001cb6 <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&Vadc, &adcConf);                /* Vadc를 adcConf 값으로 초기화 */
80005c7a:	91 00 00 c6 	movh.a %a12,24576
80005c7e:	d9 cc b8 a0 	lea %a12,[%a12]2744 <60000ab8 <Vadc>>
80005c82:	d9 e5 d8 ff 	lea %a5,[%a14]-40 <60000ab8 <Vadc>>
80005c86:	40 c4       	mov.aa %a4,%a12
80005c88:	6d ff 8d df 	call 80001ba2 <IfxVadc_Adc_initModule>

    IfxVadc_Adc_GroupConfig     adcGroupConf;               /* Define a configuration structure for the VADC group */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &Vadc);      /* adc 그룹 구조체 초기화 및 Vadc 값 반영 */
80005c8c:	40 c5       	mov.aa %a5,%a12
80005c8e:	d9 e4 dc df 	lea %a4,[%a14]-164
80005c92:	6d ff 6d df 	call 80001b6c <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_3;               /* Select the group 다른 아이디로는 그룹2, 그룹3으로 지정*/
80005c96:	82 32       	mov %d2,3
80005c98:	59 e2 e0 df 	st.w [%a14]-160,%d2
    adcGroupConf.master = adcGroupConf.groupId;             /* Select the master group */
80005c9c:	59 e2 e4 df 	st.w [%a14]-156,%d2

    adcGroupConf.arbiter.requestSlotScanEnabled = TRUE;     /* Enabled scan source 별도의 설정없이 ADC변환*/
80005ca0:	82 12       	mov %d2,1
80005ca2:	e9 e2 d5 ff 	st.b [%a14]-43,%d2
    adcGroupConf.scanRequest.autoscanEnabled    = TRUE;     /* Enabled auto scan mode */
80005ca6:	e9 e2 f8 df 	st.b [%a14]-136,%d2

    adcGroupConf.scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;  /* 특정 트리거 조건 없이 항상 변환 수행/인터럽트일 때는 다른 모드 */
80005caa:	82 12       	mov %d2,1
80005cac:	59 e2 c4 ef 	st.w [%a14]-124,%d2

    IfxVadc_Adc_initGroup(&adcGroup3, &adcGroupConf);       /* adc 그룹 설정 값 반영 */
80005cb0:	d9 e5 dc df 	lea %a5,[%a14]-164
80005cb4:	91 00 00 46 	movh.a %a4,24576
80005cb8:	d9 44 ac a0 	lea %a4,[%a4]2732 <60000aac <adcGroup3>>
80005cbc:	6d ff 16 dd 	call 800016e8 <IfxVadc_Adc_initGroup>
}
80005cc0:	00 90       	ret 

80005cc2 <init_ADC_G3_SingleCh>:

void init_ADC_G3_SingleCh(uint8 Channel)
{
80005cc2:	40 ae       	mov.aa %a14,%sp
80005cc4:	20 40       	sub.a %sp,64
80005cc6:	8f f4 0f 81 	and %d8,%d4,255
    IfxVadc_Adc_ChannelConfig   adcChannelConfigInfo;
    uint32 ulTemp = ((uint32)1u << Channel);
80005cca:	82 19       	mov %d9,1
80005ccc:	0f 89 00 90 	sh %d9,%d9,%d8

    IfxVadc_Adc_initChannelConfig(&adcChannelConfigInfo, &adcGroup3);           /* Fill it with default values */
80005cd0:	91 00 00 c6 	movh.a %a12,24576
80005cd4:	d9 cc ac a0 	lea %a12,[%a12]2732 <60000aac <adcGroup3>>
80005cd8:	40 c5       	mov.aa %a5,%a12
80005cda:	d9 e4 c4 ff 	lea %a4,[%a14]-60
80005cde:	6d ff fa dc 	call 800016d2 <IfxVadc_Adc_initChannelConfig>

    adcChannelConfigInfo.channelId      = (IfxVadc_ChannelId) Channel;          /* Select the channel ID */
80005ce2:	59 e8 dc ff 	st.w [%a14]-36,%d8
    adcChannelConfigInfo.resultRegister = (IfxVadc_ChannelResult) (Channel);    /* Use dedicated result register */
80005ce6:	59 e8 e8 ff 	st.w [%a14]-24,%d8

    /* Initialize the channel */
    IfxVadc_Adc_initChannel(&adcG3Channel[Channel], &adcChannelConfigInfo);     /* 채널 초기화 */
80005cea:	d9 e5 c4 ff 	lea %a5,[%a14]-60
80005cee:	91 00 00 46 	movh.a %a4,24576
80005cf2:	d9 44 8c 90 	lea %a4,[%a4]2636 <60000a4c <adcG3Channel>>
80005cf6:	01 48 03 46 	addsc.a %a4,%a4,%d8,3
80005cfa:	01 48 02 46 	addsc.a %a4,%a4,%d8,2
80005cfe:	6d ff d8 db 	call 800014ae <IfxVadc_Adc_initChannel>
}


IFX_INLINE void IfxVadc_Adc_setScan(IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setScan(group->group, channels, mask);
80005d02:	02 95       	mov %d5,%d9
80005d04:	02 94       	mov %d4,%d9
80005d06:	99 c4 04 00 	ld.a %a4,[%a12]4 <60000004 <LCF_DSPR1_START+0x4>>
80005d0a:	6d ff 9e db 	call 80001446 <IfxVadc_setScan>

    /* Add the channel to the scan sequence */
    IfxVadc_Adc_setScan(&adcGroup3, ulTemp, ulTemp);                            /* the background scan sequence */
}
80005d0e:	00 90       	ret 

80005d10 <init_ADC_G3_Channel>:

void init_ADC_G3_Channel(void)
{
80005d10:	40 ae       	mov.aa %a14,%sp
    init_ADC_G3_SingleCh(ADC_G3_CH0);   /* 각 채널 초기화 */
80005d12:	82 04       	mov %d4,0
80005d14:	6d ff d7 ff 	call 80005cc2 <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH1);   //litekit A0(가변저항)
80005d18:	82 14       	mov %d4,1
80005d1a:	6d ff d4 ff 	call 80005cc2 <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH2);
80005d1e:	82 24       	mov %d4,2
80005d20:	6d ff d1 ff 	call 80005cc2 <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH3);
80005d24:	82 34       	mov %d4,3
80005d26:	6d ff ce ff 	call 80005cc2 <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH4);
80005d2a:	82 44       	mov %d4,4
80005d2c:	6d ff cb ff 	call 80005cc2 <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH5);
80005d30:	82 54       	mov %d4,5
80005d32:	6d ff c8 ff 	call 80005cc2 <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH6);
80005d36:	82 64       	mov %d4,6
80005d38:	6d ff c5 ff 	call 80005cc2 <init_ADC_G3_SingleCh>
    init_ADC_G3_SingleCh(ADC_G3_CH7);   //가변저항
80005d3c:	82 74       	mov %d4,7
80005d3e:	6d ff c2 ff 	call 80005cc2 <init_ADC_G3_SingleCh>
}


IFX_INLINE void IfxVadc_Adc_startScan(IfxVadc_Adc_Group *group)
{
    IfxVadc_startScan(group->group);
80005d42:	91 00 00 26 	movh.a %a2,24576
80005d46:	d9 22 ac a0 	lea %a2,[%a2]2732 <60000aac <adcGroup3>>
80005d4a:	b0 42       	add.a %a2,4
80005d4c:	d4 22       	ld.a %a2,[%a2]
    group->ASMR.B.LDEV = 1;     /* set Load event. Channels stored in ASSEL will be copied into pending register and conversion will start */
80005d4e:	d9 23 24 20 	lea %a3,[%a2]164
80005d52:	19 22 24 20 	ld.w %d2,[%a2]164
80005d56:	b7 12 81 24 	insert %d2,%d2,1,9,1
80005d5a:	74 32       	st.w [%a3],%d2

    IfxVadc_Adc_startScan(&adcGroup3);  //아날로그값이 실제값으로 변환
    }
80005d5c:	00 90       	ret 

80005d5e <core0_main>:

IfxCpu_syncEvent g_cpuSyncEvent = 0;


void core0_main(void)
{
80005d5e:	40 ae       	mov.aa %a14,%sp
    __enable();
80005d60:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80005d64:	6d ff 02 e6 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80005d68:	02 24       	mov %d4,%d2
80005d6a:	6d ff e3 e4 	call 80002730 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80005d6e:	6d ff 0f e6 	call 8000298c <IfxScuWdt_getSafetyWatchdogPassword>
80005d72:	02 24       	mov %d4,%d2
80005d74:	6d ff 1d e5 	call 800027ae <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80005d78:	91 00 00 c6 	movh.a %a12,24576
80005d7c:	d9 cc 88 60 	lea %a12,[%a12]2440 <60000988 <g_cpuSyncEvent>>
80005d80:	40 c4       	mov.aa %a4,%a12
80005d82:	6d ff 5f f4 	call 80004640 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80005d86:	82 14       	mov %d4,1
80005d88:	40 c4       	mov.aa %a4,%a12
80005d8a:	6d ff 1b f4 	call 800045c0 <IfxCpu_waitEvent>

    init_GPIO();
80005d8e:	6d ff d9 fe 	call 80005b40 <init_GPIO>
    init_STM();
80005d92:	6d ff 6a d5 	call 80000866 <init_STM>
    init_ADC_Group(); init_ADC_G3_Channel();
80005d96:	6d ff 6a ff 	call 80005c6a <init_ADC_Group>
80005d9a:	6d ff bb ff 	call 80005d10 <init_ADC_G3_Channel>
    init_GTM();
80005d9e:	6d ff f5 d6 	call 80000b88 <init_GTM>
    init_UART();
80005da2:	6d ff 92 d4 	call 800006c6 <init_UART>
    direction = 1;
80005da6:	91 00 00 26 	movh.a %a2,24576
80005daa:	82 12       	mov %d2,1
80005dac:	59 22 94 60 	st.w [%a2]2452 <60000994 <direction>>,%d2

    while(1)
    {
        AppScheduling();
80005db0:	6d ff 34 d5 	call 80000818 <AppScheduling>
    while(1)
80005db4:	1d ff fe ff 	j 80005db0 <core0_main+0x52>

80005db8 <core1_main>:
#include "Header_USER.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
80005db8:	40 ae       	mov.aa %a14,%sp
80005dba:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80005dbe:	6d ff d5 e5 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80005dc2:	02 24       	mov %d4,%d2
80005dc4:	6d ff b6 e4 	call 80002730 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80005dc8:	91 00 00 c6 	movh.a %a12,24576
80005dcc:	d9 cc 88 60 	lea %a12,[%a12]2440 <60000988 <g_cpuSyncEvent>>
80005dd0:	40 c4       	mov.aa %a4,%a12
80005dd2:	6d ff 37 f4 	call 80004640 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80005dd6:	82 14       	mov %d4,1
80005dd8:	40 c4       	mov.aa %a4,%a12
80005dda:	6d ff f3 f3 	call 800045c0 <IfxCpu_waitEvent>
    
    while(1)
    {
        Encoder();
80005dde:	6d ff c5 fe 	call 80005b68 <Encoder>
    while(1)
80005de2:	1d ff fe ff 	j 80005dde <core1_main+0x26>

80005de6 <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
80005de6:	40 ae       	mov.aa %a14,%sp
80005de8:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80005dec:	6d ff be e5 	call 80002968 <IfxScuWdt_getCpuWatchdogPassword>
80005df0:	02 24       	mov %d4,%d2
80005df2:	6d ff 9f e4 	call 80002730 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80005df6:	91 00 00 c6 	movh.a %a12,24576
80005dfa:	d9 cc 88 60 	lea %a12,[%a12]2440 <60000988 <g_cpuSyncEvent>>
80005dfe:	40 c4       	mov.aa %a4,%a12
80005e00:	6d ff 20 f4 	call 80004640 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80005e04:	82 14       	mov %d4,1
80005e06:	40 c4       	mov.aa %a4,%a12
80005e08:	6d ff dc f3 	call 800045c0 <IfxCpu_waitEvent>
    
    while(1)
80005e0c:	1d 00 00 00 	j 80005e0c <core2_main+0x26>

80005e10 <memset>:
80005e10:	40 42       	mov.aa %a2,%a4
80005e12:	df 05 07 00 	jeq %d5,0,80005e20 <memset+0x10>
80005e16:	60 53       	mov.a %a3,%d5
80005e18:	b0 f3       	add.a %a3,-1
80005e1a:	24 44       	st.b [%a4+],%d4
80005e1c:	fd 30 ff 7f 	loop %a3,80005e1a <memset+0xa>
80005e20:	00 90       	ret 

80005e22 <__extendsfdf2>:
80005e22:	20 20       	sub.a %sp,32
80005e24:	d9 a5 10 00 	lea %a5,[%sp]16
80005e28:	d9 a4 0c 00 	lea %a4,[%sp]12
80005e2c:	59 a4 0c 00 	st.w [%sp]12,%d4
80005e30:	6d 00 7f 03 	call 8000652e <__unpack_f>
80005e34:	19 a2 1c 00 	ld.w %d2,[%sp]28
80005e38:	19 a6 18 00 	ld.w %d6,[%sp]24
80005e3c:	53 12 40 40 	mul.u %e4,%d2,1
80005e40:	77 45 00 3f 	dextr %d3,%d5,%d4,30
80005e44:	8f e4 01 20 	sh %d2,%d4,30
80005e48:	19 a5 14 00 	ld.w %d5,[%sp]20
80005e4c:	19 a4 10 00 	ld.w %d4,[%sp]16
80005e50:	74 a2       	st.w [%sp],%d2
80005e52:	59 a3 04 00 	st.w [%sp]4,%d3
80005e56:	6d 00 3d 03 	call 800064d0 <__make_dp>
80005e5a:	00 90       	ret 

80005e5c <_fpadd_parts>:
80005e5c:	54 42       	ld.w %d2,[%a4]
80005e5e:	40 42       	mov.aa %a2,%a4
80005e60:	bf 22 c2 80 	jlt.u %d2,2,80005fe4 <_fpadd_parts+0x188>
80005e64:	54 53       	ld.w %d3,[%a5]
80005e66:	40 52       	mov.aa %a2,%a5
80005e68:	bf 23 be 80 	jlt.u %d3,2,80005fe4 <_fpadd_parts+0x188>
80005e6c:	df 42 e3 00 	jeq %d2,4,80006032 <_fpadd_parts+0x1d6>
80005e70:	df 43 ba 00 	jeq %d3,4,80005fe4 <_fpadd_parts+0x188>
80005e74:	df 23 b9 00 	jeq %d3,2,80005fe6 <_fpadd_parts+0x18a>
80005e78:	df 22 b6 00 	jeq %d2,2,80005fe4 <_fpadd_parts+0x188>
80005e7c:	19 40 08 00 	ld.w %d0,[%a4]8
80005e80:	19 57 08 00 	ld.w %d7,[%a5]8
80005e84:	09 44 4c 09 	ld.d %e4,[%a4]12
80005e88:	0b 70 80 60 	sub %d6,%d0,%d7
80005e8c:	09 52 4c 09 	ld.d %e2,[%a5]12
80005e90:	bf 06 c2 00 	jlt %d6,0,80006014 <_fpadd_parts+0x1b8>
80005e94:	8b 06 84 12 	ge %d1,%d6,64
80005e98:	df 01 c4 80 	jne %d1,0,80006020 <_fpadd_parts+0x1c4>
80005e9c:	df 06 2a 00 	jeq %d6,0,80005ef0 <_fpadd_parts+0x94>
80005ea0:	8b 06 82 72 	ge %d7,%d6,32
80005ea4:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
80005ea8:	ab 03 a0 87 	seln %d8,%d7,%d3,0
80005eac:	8f f6 01 71 	and %d7,%d6,31
80005eb0:	8b 07 02 11 	rsub %d1,%d7,32
80005eb4:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80005eb8:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
80005ebc:	8b 06 82 a2 	ge %d10,%d6,32
80005ec0:	32 57       	rsub %d7
80005ec2:	02 19       	mov %d9,%d1
80005ec4:	8f f6 01 61 	and %d6,%d6,31
80005ec8:	82 f1       	mov %d1,-1
80005eca:	0f 78 00 80 	sh %d8,%d8,%d7
80005ece:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
80005ed2:	0f 61 00 60 	sh %d6,%d1,%d6
80005ed6:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
80005eda:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80005ede:	0f 62 e0 10 	andn %d1,%d2,%d6
80005ee2:	0f 73 e0 60 	andn %d6,%d3,%d7
80005ee6:	a6 16       	or %d6,%d1
80005ee8:	8b 06 00 95 	or.ne %d9,%d6,0
80005eec:	0b 98 10 28 	mov %e2,%d8,%d9
80005ef0:	19 41 04 00 	ld.w %d1,[%a4]4
80005ef4:	19 56 04 00 	ld.w %d6,[%a5]4
80005ef8:	5f 61 4c 00 	jeq %d1,%d6,80005f90 <_fpadd_parts+0x134>
80005efc:	0b 24 c0 60 	subx %d6,%d4,%d2
80005f00:	0b 35 d0 70 	subc %d7,%d5,%d3
80005f04:	df 01 06 00 	jeq %d1,0,80005f10 <_fpadd_parts+0xb4>
80005f08:	0b 42 c0 60 	subx %d6,%d2,%d4
80005f0c:	0b 53 d0 70 	subc %d7,%d3,%d5
80005f10:	8b 07 00 31 	rsub %d3,%d7,0
80005f14:	8b 06 00 91 	rsub %d9,%d6,0
80005f18:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
80005f1c:	82 12       	mov %d2,1
80005f1e:	bf 07 05 00 	jlt %d7,0,80005f28 <_fpadd_parts+0xcc>
80005f22:	02 69       	mov %d9,%d6
80005f24:	02 73       	mov %d3,%d7
80005f26:	82 02       	mov %d2,0
80005f28:	8b f9 9f 70 	addx %d7,%d9,-1
80005f2c:	82 f5       	mov %d5,-1
80005f2e:	8b f3 bf 60 	addc %d6,%d3,-1
80005f32:	06 c5       	sh %d5,-4
80005f34:	59 62 04 00 	st.w [%a6]4,%d2
80005f38:	82 e1       	mov %d1,-2
80005f3a:	0b 56 00 21 	eq %d2,%d6,%d5
80005f3e:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
80005f42:	59 60 08 00 	st.w [%a6]8,%d0
80005f46:	59 69 0c 00 	st.w [%a6]12,%d9
80005f4a:	59 63 10 00 	st.w [%a6]16,%d3
80005f4e:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
80005f52:	df 02 2b 80 	jne %d2,0,80005fa8 <_fpadd_parts+0x14c>
80005f56:	1b f0 ff 7f 	addi %d7,%d0,-1
80005f5a:	77 93 80 30 	dextr %d3,%d3,%d9,1
80005f5e:	06 19       	sh %d9,1
80005f60:	8b f9 9f 00 	addx %d0,%d9,-1
80005f64:	8b f3 bf 60 	addc %d6,%d3,-1
80005f68:	0b 56 00 21 	eq %d2,%d6,%d5
80005f6c:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
80005f70:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
80005f74:	02 78       	mov %d8,%d7
80005f76:	c2 f7       	add %d7,-1
80005f78:	df 02 f1 ff 	jne %d2,0,80005f5a <_fpadd_parts+0xfe>
80005f7c:	82 32       	mov %d2,3
80005f7e:	59 69 0c 00 	st.w [%a6]12,%d9
80005f82:	59 63 10 00 	st.w [%a6]16,%d3
80005f86:	59 68 08 00 	st.w [%a6]8,%d8
80005f8a:	74 62       	st.w [%a6],%d2
80005f8c:	40 62       	mov.aa %a2,%a6
80005f8e:	00 90       	ret 
80005f90:	0b 24 40 90 	addx %d9,%d4,%d2
80005f94:	0b 35 50 30 	addc %d3,%d5,%d3
80005f98:	59 61 04 00 	st.w [%a6]4,%d1
80005f9c:	59 60 08 00 	st.w [%a6]8,%d0
80005fa0:	59 69 0c 00 	st.w [%a6]12,%d9
80005fa4:	59 63 10 00 	st.w [%a6]16,%d3
80005fa8:	82 32       	mov %d2,3
80005faa:	7b 00 00 52 	movh %d5,8192
80005fae:	40 62       	mov.aa %a2,%a6
80005fb0:	74 62       	st.w [%a6],%d2
80005fb2:	0b 53 00 21 	eq %d2,%d3,%d5
80005fb6:	b7 02 01 20 	insert %d2,%d2,0,0,1
80005fba:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
80005fbe:	df 02 13 80 	jne %d2,0,80005fe4 <_fpadd_parts+0x188>
80005fc2:	8f f3 1f 20 	sh %d2,%d3,-1
80005fc6:	77 93 80 5f 	dextr %d5,%d3,%d9,31
80005fca:	8f 19 00 31 	and %d3,%d9,1
80005fce:	59 62 10 00 	st.w [%a6]16,%d2
80005fd2:	19 62 08 00 	ld.w %d2,[%a6]8
80005fd6:	a6 53       	or %d3,%d5
80005fd8:	c2 12       	add %d2,1
80005fda:	d9 63 08 00 	lea %a3,[%a6]8
80005fde:	59 63 0c 00 	st.w [%a6]12,%d3
80005fe2:	74 32       	st.w [%a3],%d2
80005fe4:	00 90       	ret 
80005fe6:	40 42       	mov.aa %a2,%a4
80005fe8:	df 22 fe ff 	jne %d2,2,80005fe4 <_fpadd_parts+0x188>
80005fec:	40 63       	mov.aa %a3,%a6
80005fee:	09 44 48 01 	ld.d %e4,[%a4+]8
80005ff2:	89 34 48 01 	st.d [%a3+]8,%e4
80005ff6:	09 44 48 01 	ld.d %e4,[%a4+]8
80005ffa:	89 34 48 01 	st.d [%a3+]8,%e4
80005ffe:	44 44       	ld.w %d4,[%a4+]
80006000:	64 34       	st.w [%a3+],%d4
80006002:	19 23 04 00 	ld.w %d3,[%a2]4
80006006:	19 52 04 00 	ld.w %d2,[%a5]4
8000600a:	40 62       	mov.aa %a2,%a6
8000600c:	26 32       	and %d2,%d3
8000600e:	59 62 04 00 	st.w [%a6]4,%d2
80006012:	00 90       	ret 
80006014:	0b 07 80 60 	sub %d6,%d7,%d0
80006018:	8b 06 44 12 	lt %d1,%d6,64
8000601c:	df 01 1d 80 	jne %d1,0,80006056 <_fpadd_parts+0x1fa>
80006020:	3f 07 06 00 	jlt %d7,%d0,8000602c <_fpadd_parts+0x1d0>
80006024:	d2 04       	mov %e4,0
80006026:	02 70       	mov %d0,%d7
80006028:	1d ff 64 ff 	j 80005ef0 <_fpadd_parts+0x94>
8000602c:	d2 02       	mov %e2,0
8000602e:	1d ff 61 ff 	j 80005ef0 <_fpadd_parts+0x94>
80006032:	40 42       	mov.aa %a2,%a4
80006034:	df 43 d8 ff 	jne %d3,4,80005fe4 <_fpadd_parts+0x188>
80006038:	19 43 04 00 	ld.w %d3,[%a4]4
8000603c:	19 52 04 00 	ld.w %d2,[%a5]4
80006040:	7b 00 00 48 	movh %d4,32768
80006044:	0b 23 10 21 	ne %d2,%d3,%d2
80006048:	1b 04 20 40 	addi %d4,%d4,512
8000604c:	80 43       	mov.d %d3,%a4
8000604e:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
80006052:	60 22       	mov.a %a2,%d2
80006054:	00 90       	ret 
80006056:	8b 06 82 02 	ge %d0,%d6,32
8000605a:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
8000605e:	ab 05 a0 80 	seln %d8,%d0,%d5,0
80006062:	8f f6 01 01 	and %d0,%d6,31
80006066:	8b 00 02 11 	rsub %d1,%d0,32
8000606a:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
8000606e:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
80006072:	8b 06 82 a2 	ge %d10,%d6,32
80006076:	32 50       	rsub %d0
80006078:	02 19       	mov %d9,%d1
8000607a:	8f f6 01 61 	and %d6,%d6,31
8000607e:	82 f1       	mov %d1,-1
80006080:	0f 08 00 80 	sh %d8,%d8,%d0
80006084:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
80006088:	0f 61 00 60 	sh %d6,%d1,%d6
8000608c:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
80006090:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80006094:	0f 64 e0 10 	andn %d1,%d4,%d6
80006098:	0f 05 e0 60 	andn %d6,%d5,%d0
8000609c:	a6 16       	or %d6,%d1
8000609e:	8b 06 00 95 	or.ne %d9,%d6,0
800060a2:	0b 98 10 48 	mov %e4,%d8,%d9
800060a6:	02 70       	mov %d0,%d7
800060a8:	1d ff 24 ff 	j 80005ef0 <_fpadd_parts+0x94>

800060ac <__adddf3>:
800060ac:	20 50       	sub.a %sp,80
800060ae:	d9 a5 14 00 	lea %a5,[%sp]20
800060b2:	d9 a4 04 00 	lea %a4,[%sp]4
800060b6:	89 a4 44 09 	st.d [%sp]4,%e4
800060ba:	89 a6 4c 09 	st.d [%sp]12,%e6
800060be:	6d 00 57 03 	call 8000676c <__unpack_d>
800060c2:	d9 a5 28 00 	lea %a5,[%sp]40
800060c6:	d9 a4 0c 00 	lea %a4,[%sp]12
800060ca:	6d 00 51 03 	call 8000676c <__unpack_d>
800060ce:	d9 a4 14 00 	lea %a4,[%sp]20
800060d2:	d9 a6 3c 00 	lea %a6,[%sp]60
800060d6:	d9 a5 28 00 	lea %a5,[%sp]40
800060da:	6d ff c1 fe 	call 80005e5c <_fpadd_parts>
800060de:	40 24       	mov.aa %a4,%a2
800060e0:	6d 00 77 02 	call 800065ce <__pack_d>
800060e4:	00 90       	ret 

800060e6 <__muldf3>:
800060e6:	20 50       	sub.a %sp,80
800060e8:	d9 a5 14 00 	lea %a5,[%sp]20
800060ec:	d9 a4 04 00 	lea %a4,[%sp]4
800060f0:	89 a4 44 09 	st.d [%sp]4,%e4
800060f4:	89 a6 4c 09 	st.d [%sp]12,%e6
800060f8:	6d 00 3a 03 	call 8000676c <__unpack_d>
800060fc:	d9 a5 28 00 	lea %a5,[%sp]40
80006100:	d9 a4 0c 00 	lea %a4,[%sp]12
80006104:	6d 00 34 03 	call 8000676c <__unpack_d>
80006108:	19 a2 14 00 	ld.w %d2,[%sp]20
8000610c:	ff 22 0f 80 	jge.u %d2,2,8000612a <__muldf3+0x44>
80006110:	19 a3 18 00 	ld.w %d3,[%sp]24
80006114:	19 a2 2c 00 	ld.w %d2,[%sp]44
80006118:	d9 a4 14 00 	lea %a4,[%sp]20
8000611c:	0b 23 10 21 	ne %d2,%d3,%d2
80006120:	59 a2 18 00 	st.w [%sp]24,%d2
80006124:	6d 00 55 02 	call 800065ce <__pack_d>
80006128:	00 90       	ret 
8000612a:	19 a3 28 00 	ld.w %d3,[%sp]40
8000612e:	bf 23 14 80 	jlt.u %d3,2,80006156 <__muldf3+0x70>
80006132:	df 42 0a 80 	jne %d2,4,80006146 <__muldf3+0x60>
80006136:	91 00 00 48 	movh.a %a4,32768
8000613a:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
8000613e:	df 23 f3 7f 	jeq %d3,2,80006124 <__muldf3+0x3e>
80006142:	1d ff e7 ff 	j 80006110 <__muldf3+0x2a>
80006146:	df 43 15 80 	jne %d3,4,80006170 <__muldf3+0x8a>
8000614a:	91 00 00 48 	movh.a %a4,32768
8000614e:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80006152:	df 22 e9 7f 	jeq %d2,2,80006124 <__muldf3+0x3e>
80006156:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000615a:	19 a3 18 00 	ld.w %d3,[%sp]24
8000615e:	d9 a4 28 00 	lea %a4,[%sp]40
80006162:	0b 23 10 21 	ne %d2,%d3,%d2
80006166:	59 a2 2c 00 	st.w [%sp]44,%d2
8000616a:	6d 00 32 02 	call 800065ce <__pack_d>
8000616e:	00 90       	ret 
80006170:	19 a5 2c 00 	ld.w %d5,[%sp]44
80006174:	19 a4 18 00 	ld.w %d4,[%sp]24
80006178:	0b 45 10 a1 	ne %d10,%d5,%d4
8000617c:	df 22 aa 00 	jeq %d2,2,800062d0 <__muldf3+0x1ea>
80006180:	df 23 ae 00 	jeq %d3,2,800062dc <__muldf3+0x1f6>
80006184:	19 a6 34 00 	ld.w %d6,[%sp]52
80006188:	19 a4 20 00 	ld.w %d4,[%sp]32
8000618c:	82 03       	mov %d3,0
8000618e:	73 46 68 00 	mul.u %e0,%d6,%d4
80006192:	19 a2 38 00 	ld.w %d2,[%sp]56
80006196:	82 0b       	mov %d11,0
80006198:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
8000619c:	02 48       	mov %d8,%d4
8000619e:	19 a7 24 00 	ld.w %d7,[%sp]36
800061a2:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
800061a6:	73 42 68 40 	mul.u %e4,%d2,%d4
800061aa:	82 0d       	mov %d13,0
800061ac:	82 0c       	mov %d12,0
800061ae:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
800061b2:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
800061b6:	73 27 68 80 	mul.u %e8,%d7,%d2
800061ba:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
800061be:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
800061c2:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
800061c6:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
800061ca:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
800061ce:	0b 35 00 61 	eq %d6,%d5,%d3
800061d2:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
800061d6:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
800061da:	02 67       	mov %d7,%d6
800061dc:	82 06       	mov %d6,0
800061de:	0b 06 40 60 	addx %d6,%d6,%d0
800061e2:	0b 12 50 50 	addc %d5,%d2,%d1
800061e6:	0b 51 00 41 	eq %d4,%d1,%d5
800061ea:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
800061ee:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
800061f2:	df 04 06 80 	jne %d4,0,800061fe <__muldf3+0x118>
800061f6:	8b 1b 80 b0 	addx %d11,%d11,1
800061fa:	8b 07 a0 70 	addc %d7,%d7,0
800061fe:	82 04       	mov %d4,0
80006200:	0b 83 40 30 	addx %d3,%d3,%d8
80006204:	0b 94 50 20 	addc %d2,%d4,%d9
80006208:	0b b3 40 30 	addx %d3,%d3,%d11
8000620c:	0b 72 50 20 	addc %d2,%d2,%d7
80006210:	19 a4 1c 00 	ld.w %d4,[%sp]28
80006214:	19 a7 30 00 	ld.w %d7,[%sp]48
80006218:	59 aa 00 10 	st.w [%sp]64,%d10
8000621c:	0b 74 00 10 	add %d1,%d4,%d7
80006220:	7b 00 00 42 	movh %d4,8192
80006224:	1b 41 00 00 	addi %d0,%d1,4
80006228:	0b 42 00 71 	eq %d7,%d2,%d4
8000622c:	b7 07 01 70 	insert %d7,%d7,0,0,1
80006230:	59 a0 04 10 	st.w [%sp]68,%d0
80006234:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
80006238:	df 07 2b 80 	jne %d7,0,8000628e <__muldf3+0x1a8>
8000623c:	1b 51 00 70 	addi %d7,%d1,5
80006240:	8f 13 00 01 	and %d0,%d3,1
80006244:	02 71       	mov %d1,%d7
80006246:	df 00 07 00 	jeq %d0,0,80006254 <__muldf3+0x16e>
8000624a:	77 65 80 6f 	dextr %d6,%d5,%d6,31
8000624e:	06 f5       	sh %d5,-1
80006250:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
80006254:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80006258:	06 f2       	sh %d2,-1
8000625a:	0b 24 30 01 	lt.u %d0,%d4,%d2
8000625e:	0b 24 70 02 	or.eq %d0,%d4,%d2
80006262:	c2 17       	add %d7,1
80006264:	df 00 ee ff 	jne %d0,0,80006240 <__muldf3+0x15a>
80006268:	59 a1 04 10 	st.w [%sp]68,%d1
8000626c:	8f f3 0f 41 	and %d4,%d3,255
80006270:	8b 04 28 42 	ne %d4,%d4,128
80006274:	df 04 3a 00 	jeq %d4,0,800062e8 <__muldf3+0x202>
80006278:	59 a2 0c 10 	st.w [%sp]76,%d2
8000627c:	82 32       	mov %d2,3
8000627e:	59 a3 08 10 	st.w [%sp]72,%d3
80006282:	d9 a4 3c 00 	lea %a4,[%sp]60
80006286:	59 a2 3c 00 	st.w [%sp]60,%d2
8000628a:	1d ff 4d ff 	j 80006124 <__muldf3+0x3e>
8000628e:	7b 00 00 71 	movh %d7,4096
80006292:	0b 27 30 41 	lt.u %d4,%d7,%d2
80006296:	0b 27 70 42 	or.eq %d4,%d7,%d2
8000629a:	df 04 e9 ff 	jne %d4,0,8000626c <__muldf3+0x186>
8000629e:	77 32 80 20 	dextr %d2,%d2,%d3,1
800062a2:	c2 f0       	add %d0,-1
800062a4:	06 13       	sh %d3,1
800062a6:	ff 05 06 00 	jge %d5,0,800062b2 <__muldf3+0x1cc>
800062aa:	8f 13 40 11 	or %d1,%d3,1
800062ae:	0b 21 10 28 	mov %e2,%d1,%d2
800062b2:	0b 72 00 41 	eq %d4,%d2,%d7
800062b6:	b7 04 01 40 	insert %d4,%d4,0,0,1
800062ba:	77 65 80 50 	dextr %d5,%d5,%d6,1
800062be:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
800062c2:	06 16       	sh %d6,1
800062c4:	df 04 ed ff 	jne %d4,0,8000629e <__muldf3+0x1b8>
800062c8:	59 a0 04 10 	st.w [%sp]68,%d0
800062cc:	1d ff d0 ff 	j 8000626c <__muldf3+0x186>
800062d0:	59 aa 18 00 	st.w [%sp]24,%d10
800062d4:	d9 a4 14 00 	lea %a4,[%sp]20
800062d8:	1d ff 26 ff 	j 80006124 <__muldf3+0x3e>
800062dc:	59 aa 2c 00 	st.w [%sp]44,%d10
800062e0:	d9 a4 28 00 	lea %a4,[%sp]40
800062e4:	1d ff 20 ff 	j 80006124 <__muldf3+0x3e>
800062e8:	77 32 00 4c 	dextr %d4,%d2,%d3,24
800062ec:	a6 65       	or %d5,%d6
800062ee:	8b 05 20 52 	ne %d5,%d5,0
800062f2:	0f 45 e0 40 	andn %d4,%d5,%d4
800062f6:	df 04 c1 7f 	jeq %d4,0,80006278 <__muldf3+0x192>
800062fa:	8b 03 88 30 	addx %d3,%d3,128
800062fe:	8b 02 a0 20 	addc %d2,%d2,0
80006302:	8f f3 cf 31 	andn %d3,%d3,255
80006306:	1d ff b9 ff 	j 80006278 <__muldf3+0x192>

8000630a <__divdf3>:
8000630a:	20 38       	sub.a %sp,56
8000630c:	d9 a5 10 00 	lea %a5,[%sp]16
80006310:	40 a4       	mov.aa %a4,%sp
80006312:	89 a4 40 09 	st.d [%sp],%e4
80006316:	89 a6 48 09 	st.d [%sp]8,%e6
8000631a:	6d 00 29 02 	call 8000676c <__unpack_d>
8000631e:	d9 a5 24 00 	lea %a5,[%sp]36
80006322:	d9 a4 08 00 	lea %a4,[%sp]8
80006326:	6d 00 23 02 	call 8000676c <__unpack_d>
8000632a:	19 a2 10 00 	ld.w %d2,[%sp]16
8000632e:	ff 22 07 80 	jge.u %d2,2,8000633c <__divdf3+0x32>
80006332:	d9 a4 10 00 	lea %a4,[%sp]16
80006336:	6d 00 4c 01 	call 800065ce <__pack_d>
8000633a:	00 90       	ret 
8000633c:	19 a3 24 00 	ld.w %d3,[%sp]36
80006340:	d9 a4 24 00 	lea %a4,[%sp]36
80006344:	bf 23 f9 ff 	jlt.u %d3,2,80006336 <__divdf3+0x2c>
80006348:	19 a5 14 00 	ld.w %d5,[%sp]20
8000634c:	19 a4 28 00 	ld.w %d4,[%sp]40
80006350:	c6 54       	xor %d4,%d5
80006352:	59 a4 14 00 	st.w [%sp]20,%d4
80006356:	1b e2 ff 4f 	addi %d4,%d2,-2
8000635a:	8f 24 c0 41 	andn %d4,%d4,2
8000635e:	df 04 0a 80 	jne %d4,0,80006372 <__divdf3+0x68>
80006362:	91 00 00 48 	movh.a %a4,32768
80006366:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
8000636a:	5f 32 e4 ff 	jne %d2,%d3,80006332 <__divdf3+0x28>
8000636e:	1d ff e4 ff 	j 80006336 <__divdf3+0x2c>
80006372:	df 43 51 00 	jeq %d3,4,80006414 <__divdf3+0x10a>
80006376:	df 23 5a 00 	jeq %d3,2,8000642a <__divdf3+0x120>
8000637a:	19 a3 18 00 	ld.w %d3,[%sp]24
8000637e:	19 a2 2c 00 	ld.w %d2,[%sp]44
80006382:	09 a4 70 09 	ld.d %e4,[%sp]48
80006386:	0b 23 80 00 	sub %d0,%d3,%d2
8000638a:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000638e:	0b 53 00 61 	eq %d6,%d3,%d5
80006392:	02 67       	mov %d7,%d6
80006394:	0b 42 50 72 	and.ge.u %d7,%d2,%d4
80006398:	59 a0 18 00 	st.w [%sp]24,%d0
8000639c:	0b 35 a0 72 	or.lt.u %d7,%d5,%d3
800063a0:	df 07 0b 80 	jne %d7,0,800063b6 <__divdf3+0xac>
800063a4:	1b f0 ff 6f 	addi %d6,%d0,-1
800063a8:	77 23 80 30 	dextr %d3,%d3,%d2,1
800063ac:	06 12       	sh %d2,1
800063ae:	59 a6 18 00 	st.w [%sp]24,%d6
800063b2:	0b 53 00 61 	eq %d6,%d3,%d5
800063b6:	3b d0 03 10 	mov %d1,61
800063ba:	d2 08       	mov %e8,0
800063bc:	82 00       	mov %d0,0
800063be:	7b 00 00 71 	movh %d7,4096
800063c2:	1d 00 04 00 	j 800063ca <__divdf3+0xc0>
800063c6:	0b 53 00 61 	eq %d6,%d3,%d5
800063ca:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
800063ce:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
800063d2:	df 06 0c 80 	jne %d6,0,800063ea <__divdf3+0xe0>
800063d6:	0f 08 a0 a0 	or %d10,%d8,%d0
800063da:	0f 79 a0 60 	or %d6,%d9,%d7
800063de:	0b 42 c0 20 	subx %d2,%d2,%d4
800063e2:	0b a6 10 88 	mov %e8,%d6,%d10
800063e6:	0b 53 d0 30 	subc %d3,%d3,%d5
800063ea:	c2 f1       	add %d1,-1
800063ec:	77 07 80 0f 	dextr %d0,%d7,%d0,31
800063f0:	77 23 80 30 	dextr %d3,%d3,%d2,1
800063f4:	06 f7       	sh %d7,-1
800063f6:	06 12       	sh %d2,1
800063f8:	df 01 e7 ff 	jne %d1,0,800063c6 <__divdf3+0xbc>
800063fc:	8f f8 0f 41 	and %d4,%d8,255
80006400:	8b 04 28 42 	ne %d4,%d4,128
80006404:	df 04 1a 00 	jeq %d4,0,80006438 <__divdf3+0x12e>
80006408:	59 a8 1c 00 	st.w [%sp]28,%d8
8000640c:	59 a9 20 00 	st.w [%sp]32,%d9
80006410:	1d ff 91 ff 	j 80006332 <__divdf3+0x28>
80006414:	82 02       	mov %d2,0
80006416:	a0 02       	mov.a %a2,0
80006418:	a0 03       	mov.a %a3,0
8000641a:	89 a2 dc 09 	st.da [%sp]28,%a2
8000641e:	59 a2 18 00 	st.w [%sp]24,%d2
80006422:	d9 a4 10 00 	lea %a4,[%sp]16
80006426:	1d ff 88 ff 	j 80006336 <__divdf3+0x2c>
8000642a:	82 42       	mov %d2,4
8000642c:	d9 a4 10 00 	lea %a4,[%sp]16
80006430:	59 a2 10 00 	st.w [%sp]16,%d2
80006434:	1d ff 81 ff 	j 80006336 <__divdf3+0x2c>
80006438:	a6 32       	or %d2,%d3
8000643a:	77 89 00 4c 	dextr %d4,%d9,%d8,24
8000643e:	8b 02 20 32 	ne %d3,%d2,0
80006442:	0f 43 e0 20 	andn %d2,%d3,%d4
80006446:	df 02 e1 7f 	jeq %d2,0,80006408 <__divdf3+0xfe>
8000644a:	8b 08 88 80 	addx %d8,%d8,128
8000644e:	8b 09 a0 90 	addc %d9,%d9,0
80006452:	8f f8 cf 81 	andn %d8,%d8,255
80006456:	1d ff d9 ff 	j 80006408 <__divdf3+0xfe>

8000645a <__floatsidf>:
8000645a:	82 32       	mov %d2,3
8000645c:	20 18       	sub.a %sp,24
8000645e:	59 a2 04 00 	st.w [%sp]4,%d2
80006462:	8f 14 1e 20 	sh %d2,%d4,-31
80006466:	59 a2 08 00 	st.w [%sp]8,%d2
8000646a:	df 04 0e 80 	jne %d4,0,80006486 <__floatsidf+0x2c>
8000646e:	82 22       	mov %d2,2
80006470:	59 a2 04 00 	st.w [%sp]4,%d2
80006474:	d9 a4 04 00 	lea %a4,[%sp]4
80006478:	6d 00 ab 00 	call 800065ce <__pack_d>
8000647c:	60 25       	mov.a %a5,%d2
8000647e:	60 34       	mov.a %a4,%d3
80006480:	80 52       	mov.d %d2,%a5
80006482:	80 43       	mov.d %d3,%a4
80006484:	00 90       	ret 
80006486:	ff 04 0a 00 	jge %d4,0,8000649a <__floatsidf+0x40>
8000648a:	7b 00 00 28 	movh %d2,32768
8000648e:	a0 05       	mov.a %a5,0
80006490:	91 00 1e 4c 	movh.a %a4,49632
80006494:	5f 24 f6 7f 	jeq %d4,%d2,80006480 <__floatsidf+0x26>
80006498:	32 54       	rsub %d4
8000649a:	0f 04 b0 61 	clz %d6,%d4
8000649e:	1b d6 01 60 	addi %d6,%d6,29
800064a2:	8f f6 01 21 	and %d2,%d6,31
800064a6:	82 05       	mov %d5,0
800064a8:	8b 06 82 72 	ge %d7,%d6,32
800064ac:	17 45 80 32 	dextr %d3,%d5,%d4,%d2
800064b0:	0f 24 00 20 	sh %d2,%d4,%d2
800064b4:	2b 23 50 37 	seln %d3,%d7,%d3,%d2
800064b8:	8b c6 03 61 	rsub %d6,%d6,60
800064bc:	ab 02 a0 27 	seln %d2,%d7,%d2,0
800064c0:	59 a3 14 00 	st.w [%sp]20,%d3
800064c4:	59 a6 0c 00 	st.w [%sp]12,%d6
800064c8:	59 a2 10 00 	st.w [%sp]16,%d2
800064cc:	1d ff d4 ff 	j 80006474 <__floatsidf+0x1a>

800064d0 <__make_dp>:
800064d0:	20 18       	sub.a %sp,24
800064d2:	09 a2 d8 09 	ld.da %a2,[%sp]24
800064d6:	d9 a4 04 00 	lea %a4,[%sp]4
800064da:	59 a4 04 00 	st.w [%sp]4,%d4
800064de:	59 a5 08 00 	st.w [%sp]8,%d5
800064e2:	59 a6 0c 00 	st.w [%sp]12,%d6
800064e6:	89 a2 d0 09 	st.da [%sp]16,%a2
800064ea:	6d 00 72 00 	call 800065ce <__pack_d>
800064ee:	00 90       	ret 

800064f0 <__truncdfsf2>:
800064f0:	20 20       	sub.a %sp,32
800064f2:	d9 a5 0c 00 	lea %a5,[%sp]12
800064f6:	d9 a4 04 00 	lea %a4,[%sp]4
800064fa:	89 a4 44 09 	st.d [%sp]4,%e4
800064fe:	6d 00 37 01 	call 8000676c <__unpack_d>
80006502:	19 a3 18 00 	ld.w %d3,[%sp]24
80006506:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000650a:	77 32 00 21 	dextr %d2,%d2,%d3,2
8000650e:	b7 03 02 3f 	insert %d3,%d3,0,30,2
80006512:	02 27       	mov %d7,%d2
80006514:	df 03 04 00 	jeq %d3,0,8000651c <__truncdfsf2+0x2c>
80006518:	8f 12 40 71 	or %d7,%d2,1
8000651c:	19 a6 14 00 	ld.w %d6,[%sp]20
80006520:	19 a5 10 00 	ld.w %d5,[%sp]16
80006524:	19 a4 0c 00 	ld.w %d4,[%sp]12
80006528:	6d 00 47 00 	call 800065b6 <__make_fp>
8000652c:	00 90       	ret 

8000652e <__unpack_f>:
8000652e:	54 42       	ld.w %d2,[%a4]
80006530:	8f 12 1e 50 	sh %d5,%d2,-31
80006534:	37 02 e8 3b 	extr.u %d3,%d2,23,8
80006538:	b7 02 89 4b 	insert %d4,%d2,0,23,9
8000653c:	59 55 04 00 	st.w [%a5]4,%d5
80006540:	df 03 16 80 	jne %d3,0,8000656c <__unpack_f+0x3e>
80006544:	df 04 25 00 	jeq %d4,0,8000658e <__unpack_f+0x60>
80006548:	82 33       	mov %d3,3
8000654a:	8f 74 00 20 	sh %d2,%d4,7
8000654e:	7b 00 00 54 	movh %d5,16384
80006552:	74 53       	st.w [%a5],%d3
80006554:	3b 10 f8 3f 	mov %d3,-127
80006558:	06 12       	sh %d2,1
8000655a:	02 34       	mov %d4,%d3
8000655c:	c2 f3       	add %d3,-1
8000655e:	3f 52 fd ff 	jlt.u %d2,%d5,80006558 <__unpack_f+0x2a>
80006562:	59 54 08 00 	st.w [%a5]8,%d4
80006566:	59 52 0c 00 	st.w [%a5]12,%d2
8000656a:	00 90       	ret 
8000656c:	8b f3 2f 52 	ne %d5,%d3,255
80006570:	df 05 12 00 	jeq %d5,0,80006594 <__unpack_f+0x66>
80006574:	82 32       	mov %d2,3
80006576:	1b 13 f8 3f 	addi %d3,%d3,-127
8000657a:	74 52       	st.w [%a5],%d2
8000657c:	8f 74 00 20 	sh %d2,%d4,7
80006580:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
80006584:	59 53 08 00 	st.w [%a5]8,%d3
80006588:	59 52 0c 00 	st.w [%a5]12,%d2
8000658c:	00 90       	ret 
8000658e:	82 22       	mov %d2,2
80006590:	74 52       	st.w [%a5],%d2
80006592:	00 90       	ret 
80006594:	df 04 05 80 	jne %d4,0,8000659e <__unpack_f+0x70>
80006598:	82 42       	mov %d2,4
8000659a:	74 52       	st.w [%a5],%d2
8000659c:	00 90       	ret 
8000659e:	37 02 61 3b 	extr.u %d3,%d2,22,1
800065a2:	06 72       	sh %d2,7
800065a4:	74 53       	st.w [%a5],%d3
800065a6:	7b 00 00 32 	movh %d3,8192
800065aa:	1b 03 f8 3f 	addi %d3,%d3,-128
800065ae:	26 32       	and %d2,%d3
800065b0:	59 52 0c 00 	st.w [%a5]12,%d2
800065b4:	00 90       	ret 

800065b6 <__make_fp>:
800065b6:	20 10       	sub.a %sp,16
800065b8:	40 a4       	mov.aa %a4,%sp
800065ba:	74 a4       	st.w [%sp],%d4
800065bc:	59 a5 04 00 	st.w [%sp]4,%d5
800065c0:	59 a6 08 00 	st.w [%sp]8,%d6
800065c4:	59 a7 0c 00 	st.w [%sp]12,%d7
800065c8:	6d 00 31 01 	call 8000682a <__pack_f>
800065cc:	00 90       	ret 

800065ce <__pack_d>:
800065ce:	54 44       	ld.w %d4,[%a4]
800065d0:	19 43 0c 00 	ld.w %d3,[%a4]12
800065d4:	19 42 10 00 	ld.w %d2,[%a4]16
800065d8:	19 41 04 00 	ld.w %d1,[%a4]4
800065dc:	bf 24 56 80 	jlt.u %d4,2,80006688 <__pack_d+0xba>
800065e0:	7b 00 ff 57 	movh %d5,32752
800065e4:	d2 06       	mov %e6,0
800065e6:	df 44 0b 00 	jeq %d4,4,800065fc <__pack_d+0x2e>
800065ea:	0f 23 a0 50 	or %d5,%d3,%d2
800065ee:	8b 05 00 02 	eq %d0,%d5,0
800065f2:	8b 24 e0 04 	or.eq %d0,%d4,2
800065f6:	82 05       	mov %d5,0
800065f8:	df 00 0c 00 	jeq %d0,0,80006610 <__pack_d+0x42>
800065fc:	0b 10 00 28 	mov %e2,%d1
80006600:	a6 75       	or %d5,%d7
80006602:	8f f2 01 20 	sh %d2,%d2,31
80006606:	0f 25 a0 40 	or %d4,%d5,%d2
8000660a:	02 43       	mov %d3,%d4
8000660c:	02 62       	mov %d2,%d6
8000660e:	00 90       	ret 
80006610:	19 44 08 00 	ld.w %d4,[%a4]8
80006614:	3b 20 c0 0f 	mov %d0,-1022
80006618:	3f 04 41 00 	jlt %d4,%d0,8000669a <__pack_d+0xcc>
8000661c:	3b 00 40 00 	mov %d0,1024
80006620:	7b 00 ff 57 	movh %d5,32752
80006624:	7f 04 ec 7f 	jge %d4,%d0,800065fc <__pack_d+0x2e>
80006628:	8f f3 0f 51 	and %d5,%d3,255
8000662c:	8b 05 28 52 	ne %d5,%d5,128
80006630:	df 05 1b 00 	jeq %d5,0,80006666 <__pack_d+0x98>
80006634:	8b f3 87 30 	addx %d3,%d3,127
80006638:	8b 02 a0 20 	addc %d2,%d2,0
8000663c:	7b 00 00 52 	movh %d5,8192
80006640:	0b 25 30 61 	lt.u %d6,%d5,%d2
80006644:	0b 25 70 62 	or.eq %d6,%d5,%d2
80006648:	df 06 19 80 	jne %d6,0,8000667a <__pack_d+0xac>
8000664c:	1b f4 3f 40 	addi %d4,%d4,1023
80006650:	0b 40 00 48 	mov %e4,%d4
80006654:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80006658:	06 82       	sh %d2,-8
8000665a:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
8000665e:	8f 44 01 50 	sh %d5,%d4,20
80006662:	1d ff cd ff 	j 800065fc <__pack_d+0x2e>
80006666:	8f 03 10 51 	and %d5,%d3,256
8000666a:	df 05 e9 7f 	jeq %d5,0,8000663c <__pack_d+0x6e>
8000666e:	8b 03 88 30 	addx %d3,%d3,128
80006672:	8b 02 a0 20 	addc %d2,%d2,0
80006676:	1d ff e3 ff 	j 8000663c <__pack_d+0x6e>
8000667a:	77 32 80 3f 	dextr %d3,%d2,%d3,31
8000667e:	1b 04 40 40 	addi %d4,%d4,1024
80006682:	06 f2       	sh %d2,-1
80006684:	1d ff e6 ff 	j 80006650 <__pack_d+0x82>
80006688:	77 32 00 6c 	dextr %d6,%d2,%d3,24
8000668c:	06 82       	sh %d2,-8
8000668e:	b7 12 8d 79 	insert %d7,%d2,1,19,13
80006692:	7b 00 ff 57 	movh %d5,32752
80006696:	1d ff b3 ff 	j 800065fc <__pack_d+0x2e>
8000669a:	0b 40 80 40 	sub %d4,%d0,%d4
8000669e:	8b 94 83 02 	ge %d0,%d4,57
800066a2:	df 00 ad ff 	jne %d0,0,800065fc <__pack_d+0x2e>
800066a6:	8b 04 82 52 	ge %d5,%d4,32
800066aa:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
800066ae:	ab 02 a0 75 	seln %d7,%d5,%d2,0
800066b2:	8f f4 01 51 	and %d5,%d4,31
800066b6:	8b 05 02 61 	rsub %d6,%d5,32
800066ba:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
800066be:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
800066c2:	8b 04 82 82 	ge %d8,%d4,32
800066c6:	32 55       	rsub %d5
800066c8:	02 60       	mov %d0,%d6
800066ca:	8f f4 01 41 	and %d4,%d4,31
800066ce:	82 f6       	mov %d6,-1
800066d0:	0f 57 00 70 	sh %d7,%d7,%d5
800066d4:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
800066d8:	0f 46 00 40 	sh %d4,%d6,%d4
800066dc:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
800066e0:	ab 04 a0 48 	seln %d4,%d8,%d4,0
800066e4:	0f 43 e0 30 	andn %d3,%d3,%d4
800066e8:	0f 52 e0 20 	andn %d2,%d2,%d5
800066ec:	a6 32       	or %d2,%d3
800066ee:	02 03       	mov %d3,%d0
800066f0:	8b 02 00 35 	or.ne %d3,%d2,0
800066f4:	8f f3 0f 51 	and %d5,%d3,255
800066f8:	82 12       	mov %d2,1
800066fa:	8b 05 08 24 	and.eq %d2,%d5,128
800066fe:	02 74       	mov %d4,%d7
80006700:	df 02 14 80 	jne %d2,0,80006728 <__pack_d+0x15a>
80006704:	8b f3 87 30 	addx %d3,%d3,127
80006708:	8b 07 a0 20 	addc %d2,%d7,0
8000670c:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80006710:	7b 00 00 31 	movh %d3,4096
80006714:	8f 82 1f 70 	sh %d7,%d2,-8
80006718:	0b 32 50 21 	ge.u %d2,%d2,%d3
8000671c:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80006720:	8f 42 01 50 	sh %d5,%d2,20
80006724:	1d ff 6c ff 	j 800065fc <__pack_d+0x2e>
80006728:	8b 03 88 60 	addx %d6,%d3,128
8000672c:	8b 07 a0 20 	addc %d2,%d7,0
80006730:	7b 00 00 a1 	movh %d10,4096
80006734:	8f 82 1f 70 	sh %d7,%d2,-8
80006738:	77 62 00 6c 	dextr %d6,%d2,%d6,24
8000673c:	0b a2 50 21 	ge.u %d2,%d2,%d10
80006740:	53 12 40 80 	mul.u %e8,%d2,1
80006744:	8f 03 10 01 	and %d0,%d3,256
80006748:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
8000674c:	8f 48 01 50 	sh %d5,%d8,20
80006750:	df 00 56 ff 	jne %d0,0,800065fc <__pack_d+0x2e>
80006754:	8f 84 1f 70 	sh %d7,%d4,-8
80006758:	0b a4 50 21 	ge.u %d2,%d4,%d10
8000675c:	77 34 00 6c 	dextr %d6,%d4,%d3,24
80006760:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80006764:	8f 42 01 50 	sh %d5,%d2,20
80006768:	1d ff 4a ff 	j 800065fc <__pack_d+0x2e>

8000676c <__unpack_d>:
8000676c:	09 48 40 09 	ld.d %e8,[%a4]
80006770:	3b f0 7f 00 	mov %d0,2047
80006774:	8f 19 1e 70 	sh %d7,%d9,-31
80006778:	37 09 6b 5a 	extr.u %d5,%d9,20,11
8000677c:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
80006780:	59 57 04 00 	st.w [%a5]4,%d7
80006784:	df 05 26 80 	jne %d5,0,800067d0 <__unpack_d+0x64>
80006788:	8b 08 20 22 	ne %d2,%d8,0
8000678c:	8b 06 00 25 	or.ne %d2,%d6,0
80006790:	df 02 33 00 	jeq %d2,0,800067f6 <__unpack_d+0x8a>
80006794:	82 32       	mov %d2,3
80006796:	77 86 00 34 	dextr %d3,%d6,%d8,8
8000679a:	8f 88 00 40 	sh %d4,%d8,8
8000679e:	74 52       	st.w [%a5],%d2
800067a0:	3b 10 c0 5f 	mov %d5,-1023
800067a4:	7b 00 00 61 	movh %d6,4096
800067a8:	77 43 80 30 	dextr %d3,%d3,%d4,1
800067ac:	02 57       	mov %d7,%d5
800067ae:	0b 63 00 21 	eq %d2,%d3,%d6
800067b2:	b7 02 01 20 	insert %d2,%d2,0,0,1
800067b6:	06 14       	sh %d4,1
800067b8:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
800067bc:	c2 f5       	add %d5,-1
800067be:	df 02 f5 ff 	jne %d2,0,800067a8 <__unpack_d+0x3c>
800067c2:	59 57 08 00 	st.w [%a5]8,%d7
800067c6:	59 54 0c 00 	st.w [%a5]12,%d4
800067ca:	59 53 10 00 	st.w [%a5]16,%d3
800067ce:	00 90       	ret 
800067d0:	5f 05 16 00 	jeq %d5,%d0,800067fc <__unpack_d+0x90>
800067d4:	82 32       	mov %d2,3
800067d6:	1b 15 c0 5f 	addi %d5,%d5,-1023
800067da:	8f 88 00 40 	sh %d4,%d8,8
800067de:	74 52       	st.w [%a5],%d2
800067e0:	77 86 00 24 	dextr %d2,%d6,%d8,8
800067e4:	59 55 08 00 	st.w [%a5]8,%d5
800067e8:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800067ec:	59 54 0c 00 	st.w [%a5]12,%d4
800067f0:	59 52 10 00 	st.w [%a5]16,%d2
800067f4:	00 90       	ret 
800067f6:	82 22       	mov %d2,2
800067f8:	74 52       	st.w [%a5],%d2
800067fa:	00 90       	ret 
800067fc:	8b 08 20 52 	ne %d5,%d8,0
80006800:	8b 06 00 55 	or.ne %d5,%d6,0
80006804:	df 05 05 80 	jne %d5,0,8000680e <__unpack_d+0xa2>
80006808:	82 42       	mov %d2,4
8000680a:	74 52       	st.w [%a5],%d2
8000680c:	00 90       	ret 
8000680e:	77 89 00 34 	dextr %d3,%d9,%d8,8
80006812:	37 09 e1 49 	extr.u %d4,%d9,19,1
80006816:	b7 03 85 3d 	insert %d3,%d3,0,27,5
8000681a:	8f 88 00 20 	sh %d2,%d8,8
8000681e:	74 54       	st.w [%a5],%d4
80006820:	59 52 0c 00 	st.w [%a5]12,%d2
80006824:	59 53 10 00 	st.w [%a5]16,%d3
80006828:	00 90       	ret 

8000682a <__pack_f>:
8000682a:	54 44       	ld.w %d4,[%a4]
8000682c:	19 43 0c 00 	ld.w %d3,[%a4]12
80006830:	19 47 04 00 	ld.w %d7,[%a4]4
80006834:	bf 24 3f 80 	jlt.u %d4,2,800068b2 <__pack_f+0x88>
80006838:	7b 00 f8 57 	movh %d5,32640
8000683c:	82 06       	mov %d6,0
8000683e:	df 44 09 00 	jeq %d4,4,80006850 <__pack_f+0x26>
80006842:	8b 03 00 22 	eq %d2,%d3,0
80006846:	8b 24 e0 24 	or.eq %d2,%d4,2
8000684a:	82 05       	mov %d5,0
8000684c:	df 02 08 00 	jeq %d2,0,8000685c <__pack_f+0x32>
80006850:	8f f7 01 70 	sh %d7,%d7,31
80006854:	0f 56 a0 20 	or %d2,%d6,%d5
80006858:	a6 72       	or %d2,%d7
8000685a:	00 90       	ret 
8000685c:	19 42 08 00 	ld.w %d2,[%a4]8
80006860:	8b 22 98 42 	ge %d4,%d2,-126
80006864:	df 04 33 00 	jeq %d4,0,800068ca <__pack_f+0xa0>
80006868:	8b 02 88 42 	ge %d4,%d2,128
8000686c:	7b 00 f8 57 	movh %d5,32640
80006870:	df 04 f0 ff 	jne %d4,0,80006850 <__pack_f+0x26>
80006874:	8f f3 07 51 	and %d5,%d3,127
80006878:	8f 03 08 41 	and %d4,%d3,128
8000687c:	8b 05 24 52 	ne %d5,%d5,64
80006880:	ab 03 04 44 	cadd %d4,%d4,%d3,64
80006884:	1b f3 03 30 	addi %d3,%d3,63
80006888:	2b 43 40 35 	sel %d3,%d5,%d3,%d4
8000688c:	1b f2 07 50 	addi %d5,%d2,127
80006890:	bf 03 0c 00 	jlt %d3,0,800068a8 <__pack_f+0x7e>
80006894:	37 03 f7 63 	extr.u %d6,%d3,7,23
80006898:	8f 75 01 50 	sh %d5,%d5,23
8000689c:	8f f7 01 70 	sh %d7,%d7,31
800068a0:	0f 56 a0 20 	or %d2,%d6,%d5
800068a4:	a6 72       	or %d2,%d7
800068a6:	00 90       	ret 
800068a8:	06 f3       	sh %d3,-1
800068aa:	1b 02 08 50 	addi %d5,%d2,128
800068ae:	1d ff f3 ff 	j 80006894 <__pack_f+0x6a>
800068b2:	37 03 f6 33 	extr.u %d3,%d3,7,22
800068b6:	7b 00 f8 57 	movh %d5,32640
800068ba:	b7 f3 01 6b 	insert %d6,%d3,15,22,1
800068be:	8f f7 01 70 	sh %d7,%d7,31
800068c2:	0f 56 a0 20 	or %d2,%d6,%d5
800068c6:	a6 72       	or %d2,%d7
800068c8:	00 90       	ret 
800068ca:	8b 22 18 21 	rsub %d2,%d2,-126
800068ce:	8b a2 81 42 	ge %d4,%d2,26
800068d2:	df 04 bf ff 	jne %d4,0,80006850 <__pack_f+0x26>
800068d6:	82 f5       	mov %d5,-1
800068d8:	8b 02 00 41 	rsub %d4,%d2,0
800068dc:	0f 25 00 20 	sh %d2,%d5,%d2
800068e0:	0f 43 00 40 	sh %d4,%d3,%d4
800068e4:	0f 23 e0 30 	andn %d3,%d3,%d2
800068e8:	8b 03 00 45 	or.ne %d4,%d3,0
800068ec:	8f f4 07 31 	and %d3,%d4,127
800068f0:	8b 03 04 32 	eq %d3,%d3,64
800068f4:	df 03 0e 80 	jne %d3,0,80006910 <__pack_f+0xe6>
800068f8:	1b f4 03 20 	addi %d2,%d4,63
800068fc:	7b 00 00 34 	movh %d3,16384
80006900:	37 02 f7 63 	extr.u %d6,%d2,7,23
80006904:	0b 32 50 21 	ge.u %d2,%d2,%d3
80006908:	8f 72 01 50 	sh %d5,%d2,23
8000690c:	1d ff a2 ff 	j 80006850 <__pack_f+0x26>
80006910:	1b 04 04 30 	addi %d3,%d4,64
80006914:	7b 00 00 24 	movh %d2,16384
80006918:	37 03 f7 63 	extr.u %d6,%d3,7,23
8000691c:	0b 23 50 31 	ge.u %d3,%d3,%d2
80006920:	8f 73 01 50 	sh %d5,%d3,23
80006924:	6f 74 96 ff 	jnz.t %d4,7,80006850 <__pack_f+0x26>
80006928:	0b 24 50 21 	ge.u %d2,%d4,%d2
8000692c:	37 04 f7 63 	extr.u %d6,%d4,7,23
80006930:	8f 72 01 50 	sh %d5,%d2,23
80006934:	1d ff 8e ff 	j 80006850 <__pack_f+0x26>

80006938 <malloc>:
80006938:	91 00 00 46 	movh.a %a4,24576
8000693c:	99 44 00 10 	ld.a %a4,[%a4]64 <60000040 <_impure_ptr>>
80006940:	6d 00 03 00 	call 80006946 <_malloc_r>
80006944:	00 90       	ret 

80006946 <_malloc_r>:
80006946:	1b b4 00 20 	addi %d2,%d4,11
8000694a:	8b 72 a1 32 	ge.u %d3,%d2,23
8000694e:	40 4e       	mov.aa %a14,%a4
80006950:	df 03 32 80 	jne %d3,0,800069b4 <_malloc_r+0x6e>
80006954:	8b 14 a1 42 	ge.u %d4,%d4,17
80006958:	df 04 db 80 	jne %d4,0,80006b0e <_malloc_r+0x1c8>
8000695c:	6d 00 e0 04 	call 8000731c <__malloc_lock>
80006960:	3b 80 01 30 	mov %d3,24
80006964:	82 26       	mov %d6,2
80006966:	3b 00 01 80 	mov %d8,16
8000696a:	91 00 00 d6 	movh.a %a13,24576
8000696e:	d9 dd 28 50 	lea %a13,[%a13]360 <60000168 <__malloc_av_>>
80006972:	01 d3 00 26 	addsc.a %a2,%a13,%d3,0
80006976:	99 2c 04 00 	ld.a %a12,[%a2]4
8000697a:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000697e:	7d 3c ce 00 	jeq.a %a12,%a3,80006b1a <_malloc_r+0x1d4>
80006982:	99 c2 0c 00 	ld.a %a2,[%a12]12
80006986:	99 c3 08 00 	ld.a %a3,[%a12]8
8000698a:	19 c2 04 00 	ld.w %d2,[%a12]4
8000698e:	b5 32 0c 00 	st.a [%a3]12,%a2
80006992:	8f 32 c0 21 	andn %d2,%d2,3
80006996:	b5 23 08 00 	st.a [%a2]8,%a3
8000699a:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
8000699e:	b7 10 21 20 	imask %e2,1,0,1
800069a2:	40 e4       	mov.aa %a4,%a14
800069a4:	d9 cc 08 00 	lea %a12,[%a12]8
800069a8:	49 22 44 08 	ldmst [%a2]4,%e2
800069ac:	6d 00 b9 04 	call 8000731e <__malloc_unlock>
800069b0:	40 c2       	mov.aa %a2,%a12
800069b2:	00 90       	ret 
800069b4:	8f 72 c0 81 	andn %d8,%d2,7
800069b8:	0b 48 30 31 	lt.u %d3,%d8,%d4
800069bc:	8b 02 20 35 	or.lt %d3,%d2,0
800069c0:	df 03 a7 80 	jne %d3,0,80006b0e <_malloc_r+0x1c8>
800069c4:	6d 00 ac 04 	call 8000731c <__malloc_lock>
800069c8:	8b 88 bf 22 	ge.u %d2,%d8,504
800069cc:	df 02 07 02 	jeq %d2,0,80006dda <_malloc_r+0x494>
800069d0:	8f 78 1f 20 	sh %d2,%d8,-9
800069d4:	3b 00 20 30 	mov %d3,512
800069d8:	3b 00 04 60 	mov %d6,64
800069dc:	3b f0 03 50 	mov %d5,63
800069e0:	df 02 61 81 	jne %d2,0,80006ca2 <_malloc_r+0x35c>
800069e4:	91 00 00 d6 	movh.a %a13,24576
800069e8:	d9 dd 28 50 	lea %a13,[%a13]360 <60000168 <__malloc_av_>>
800069ec:	01 d3 00 36 	addsc.a %a3,%a13,%d3,0
800069f0:	99 3c 04 00 	ld.a %a12,[%a3]4
800069f4:	d9 32 f8 ff 	lea %a2,[%a3]-8
800069f8:	7d c2 0a 80 	jne.a %a2,%a12,80006a0c <_malloc_r+0xc6>
800069fc:	1d 00 13 00 	j 80006a22 <_malloc_r+0xdc>
80006a00:	ff 02 80 01 	jge %d2,0,80006d00 <_malloc_r+0x3ba>
80006a04:	99 cc 0c 00 	ld.a %a12,[%a12]12
80006a08:	7d c2 0d 00 	jeq.a %a2,%a12,80006a22 <_malloc_r+0xdc>
80006a0c:	19 c2 04 00 	ld.w %d2,[%a12]4
80006a10:	8f 32 c0 41 	andn %d4,%d2,3
80006a14:	0b 84 80 20 	sub %d2,%d4,%d8
80006a18:	8b 02 81 32 	ge %d3,%d2,16
80006a1c:	df 03 f2 7f 	jeq %d3,0,80006a00 <_malloc_r+0xba>
80006a20:	02 56       	mov %d6,%d5
80006a22:	99 dc 10 00 	ld.a %a12,[%a13]16 <60000010 <LCF_DSPR1_START+0x10>>
80006a26:	d9 d4 08 00 	lea %a4,[%a13]8 <60000008 <LCF_DSPR1_START+0x8>>
80006a2a:	7d 4c 83 00 	jeq.a %a12,%a4,80006b30 <_malloc_r+0x1ea>
80006a2e:	19 c2 04 00 	ld.w %d2,[%a12]4
80006a32:	8f 32 c0 21 	andn %d2,%d2,3
80006a36:	0b 82 80 30 	sub %d3,%d2,%d8
80006a3a:	8b 03 41 42 	lt %d4,%d3,16
80006a3e:	df 04 d4 01 	jeq %d4,0,80006de6 <_malloc_r+0x4a0>
80006a42:	b5 d4 14 00 	st.a [%a13]20 <60000014 <LCF_DSPR1_START+0x14>>,%a4
80006a46:	b5 d4 10 00 	st.a [%a13]16 <60000010 <LCF_DSPR1_START+0x10>>,%a4
80006a4a:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80006a4e:	ff 03 a8 7f 	jge %d3,0,8000699e <_malloc_r+0x58>
80006a52:	3b 00 20 30 	mov %d3,512
80006a56:	7f 32 6a 81 	jge.u %d2,%d3,80006d2a <_malloc_r+0x3e4>
80006a5a:	19 d4 04 00 	ld.w %d4,[%a13]4 <60000004 <LCF_DSPR1_START+0x4>>
80006a5e:	8f b2 1f 30 	sh %d3,%d2,-5
80006a62:	8f 72 c0 21 	andn %d2,%d2,7
80006a66:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
80006a6a:	1b 82 00 20 	addi %d2,%d2,8
80006a6e:	01 d2 00 36 	addsc.a %a3,%a13,%d2,0
80006a72:	d9 d2 04 00 	lea %a2,[%a13]4 <60000004 <LCF_DSPR1_START+0x4>>
80006a76:	d4 35       	ld.a %a5,[%a3]
80006a78:	74 23       	st.w [%a2],%d3
80006a7a:	40 32       	mov.aa %a2,%a3
80006a7c:	b0 82       	add.a %a2,-8
80006a7e:	b5 c2 0c 00 	st.a [%a12]12,%a2
80006a82:	b5 c5 08 00 	st.a [%a12]8,%a5
80006a86:	f4 3c       	st.a [%a3],%a12
80006a88:	b5 5c 0c 00 	st.a [%a5]12,%a12
80006a8c:	8f e6 3f 40 	sha %d4,%d6,-2
80006a90:	82 12       	mov %d2,1
80006a92:	0f 42 00 20 	sh %d2,%d2,%d4
80006a96:	3f 23 56 80 	jlt.u %d3,%d2,80006b42 <_malloc_r+0x1fc>
80006a9a:	0f 32 80 40 	and %d4,%d2,%d3
80006a9e:	df 04 0a 80 	jne %d4,0,80006ab2 <_malloc_r+0x16c>
80006aa2:	8f 36 c0 61 	andn %d6,%d6,3
80006aa6:	06 12       	sh %d2,1
80006aa8:	0f 32 80 40 	and %d4,%d2,%d3
80006aac:	c2 46       	add %d6,4
80006aae:	df 04 fc 7f 	jeq %d4,0,80006aa6 <_malloc_r+0x160>
80006ab2:	8f 36 00 30 	sh %d3,%d6,3
80006ab6:	01 d3 00 56 	addsc.a %a5,%a13,%d3,0
80006aba:	02 67       	mov %d7,%d6
80006abc:	40 52       	mov.aa %a2,%a5
80006abe:	99 23 0c 00 	ld.a %a3,[%a2]12
80006ac2:	7d 32 62 01 	jeq.a %a2,%a3,80006d86 <_malloc_r+0x440>
80006ac6:	19 33 04 00 	ld.w %d3,[%a3]4
80006aca:	d9 36 04 00 	lea %a6,[%a3]4
80006ace:	8f 33 c0 51 	andn %d5,%d3,3
80006ad2:	0b 85 80 30 	sub %d3,%d5,%d8
80006ad6:	40 3c       	mov.aa %a12,%a3
80006ad8:	8b 03 41 42 	lt %d4,%d3,16
80006adc:	d9 33 0c 00 	lea %a3,[%a3]12
80006ae0:	d4 33       	ld.a %a3,[%a3]
80006ae2:	df 04 5b 01 	jeq %d4,0,80006d98 <_malloc_r+0x452>
80006ae6:	bf 03 ee 7f 	jlt %d3,0,80006ac2 <_malloc_r+0x17c>
80006aea:	b7 10 21 20 	imask %e2,1,0,1
80006aee:	01 c5 00 26 	addsc.a %a2,%a12,%d5,0
80006af2:	d9 cc 08 00 	lea %a12,[%a12]8
80006af6:	40 e4       	mov.aa %a4,%a14
80006af8:	49 22 44 08 	ldmst [%a2]4,%e2
80006afc:	d4 c2       	ld.a %a2,[%a12]
80006afe:	b5 23 0c 00 	st.a [%a2]12,%a3
80006b02:	b5 32 08 00 	st.a [%a3]8,%a2
80006b06:	6d 00 0c 04 	call 8000731e <__malloc_unlock>
80006b0a:	1d 00 06 00 	j 80006b16 <_malloc_r+0x1d0>
80006b0e:	3b c0 00 20 	mov %d2,12
80006b12:	a0 0c       	mov.a %a12,0
80006b14:	74 e2       	st.w [%a14],%d2
80006b16:	40 c2       	mov.aa %a2,%a12
80006b18:	00 90       	ret 
80006b1a:	99 2c 0c 00 	ld.a %a12,[%a2]12
80006b1e:	c2 26       	add %d6,2
80006b20:	7d c2 31 ff 	jne.a %a2,%a12,80006982 <_malloc_r+0x3c>
80006b24:	99 dc 10 00 	ld.a %a12,[%a13]16
80006b28:	d9 d4 08 00 	lea %a4,[%a13]8
80006b2c:	7d 4c 81 ff 	jne.a %a12,%a4,80006a2e <_malloc_r+0xe8>
80006b30:	8f e6 3f 40 	sha %d4,%d6,-2
80006b34:	82 12       	mov %d2,1
80006b36:	19 d3 04 00 	ld.w %d3,[%a13]4
80006b3a:	0f 42 00 20 	sh %d2,%d2,%d4
80006b3e:	7f 23 ae ff 	jge.u %d3,%d2,80006a9a <_malloc_r+0x154>
80006b42:	99 dc 08 00 	ld.a %a12,[%a13]8
80006b46:	19 c2 04 00 	ld.w %d2,[%a12]4
80006b4a:	8f 32 c0 b1 	andn %d11,%d2,3
80006b4e:	0b 8b 80 20 	sub %d2,%d11,%d8
80006b52:	8b 02 41 32 	lt %d3,%d2,16
80006b56:	0b 8b a0 32 	or.lt.u %d3,%d11,%d8
80006b5a:	df 03 c0 00 	jeq %d3,0,80006cda <_malloc_r+0x394>
80006b5e:	80 c2       	mov.d %d2,%a12
80006b60:	91 00 00 26 	movh.a %a2,24576
80006b64:	0b b2 00 c0 	add %d12,%d2,%d11
80006b68:	19 22 78 b0 	ld.w %d2,[%a2]1784 <600006f8 <__malloc_top_pad>>
80006b6c:	91 00 00 f6 	movh.a %a15,24576
80006b70:	19 f4 20 50 	ld.w %d4,[%a15]352 <60000160 <__malloc_sbrk_base>>
80006b74:	42 82       	add %d2,%d8
80006b76:	1b 02 01 a0 	addi %d10,%d2,16
80006b7a:	1b f2 08 20 	addi %d2,%d2,143
80006b7e:	8f f2 c7 21 	andn %d2,%d2,127
80006b82:	8b f4 3f 42 	ne %d4,%d4,-1
80006b86:	2b a2 40 a4 	sel %d10,%d4,%d2,%d10
80006b8a:	02 a4       	mov %d4,%d10
80006b8c:	40 e4       	mov.aa %a4,%a14
80006b8e:	6d 00 ce 03 	call 8000732a <_sbrk_r>
80006b92:	80 29       	mov.d %d9,%a2
80006b94:	df f9 8a 01 	jeq %d9,-1,80006ea8 <_malloc_r+0x562>
80006b98:	80 c3       	mov.d %d3,%a12
80006b9a:	80 d4       	mov.d %d4,%a13
80006b9c:	0b c9 30 21 	lt.u %d2,%d9,%d12
80006ba0:	0b 43 10 22 	and.ne %d2,%d3,%d4
80006ba4:	df 02 82 81 	jne %d2,0,80006ea8 <_malloc_r+0x562>
80006ba8:	7b 00 00 d6 	movh %d13,24576
80006bac:	60 d2       	mov.a %a2,%d13
80006bae:	d9 22 48 b0 	lea %a2,[%a2]1736
80006bb2:	54 22       	ld.w %d2,[%a2]
80006bb4:	60 d2       	mov.a %a2,%d13
80006bb6:	42 a2       	add %d2,%d10
80006bb8:	59 22 48 b0 	st.w [%a2]1736,%d2
80006bbc:	5f 9c 64 01 	jeq %d12,%d9,80006e84 <_malloc_r+0x53e>
80006bc0:	19 f3 20 50 	ld.w %d3,[%a15]352 <60000160 <__malloc_sbrk_base>>
80006bc4:	df f3 6e 01 	jeq %d3,-1,80006ea0 <_malloc_r+0x55a>
80006bc8:	0b c9 80 c0 	sub %d12,%d9,%d12
80006bcc:	42 c2       	add %d2,%d12
80006bce:	60 d2       	mov.a %a2,%d13
80006bd0:	59 22 48 b0 	st.w [%a2]1736,%d2
80006bd4:	8f 79 00 e1 	and %d14,%d9,7
80006bd8:	df 0e 78 01 	jeq %d14,0,80006ec8 <_malloc_r+0x582>
80006bdc:	8b 8e 00 21 	rsub %d2,%d14,8
80006be0:	42 29       	add %d9,%d2
80006be2:	42 9a       	add %d10,%d9
80006be4:	8b 8e 08 21 	rsub %d2,%d14,136
80006be8:	a2 a2       	sub %d2,%d10
80006bea:	8f f2 07 c1 	and %d12,%d2,127
80006bee:	02 c4       	mov %d4,%d12
80006bf0:	40 e4       	mov.aa %a4,%a14
80006bf2:	6d 00 9c 03 	call 8000732a <_sbrk_r>
80006bf6:	80 22       	mov.d %d2,%a2
80006bf8:	df f2 bd 01 	jeq %d2,-1,80006f72 <_malloc_r+0x62c>
80006bfc:	a2 92       	sub %d2,%d9
80006bfe:	0b c2 00 a0 	add %d10,%d2,%d12
80006c02:	60 d2       	mov.a %a2,%d13
80006c04:	8f 1a 40 31 	or %d3,%d10,1
80006c08:	d9 22 48 b0 	lea %a2,[%a2]1736
80006c0c:	54 22       	ld.w %d2,[%a2]
80006c0e:	60 d2       	mov.a %a2,%d13
80006c10:	42 c2       	add %d2,%d12
80006c12:	59 d9 08 00 	st.w [%a13]8,%d9
80006c16:	59 22 48 b0 	st.w [%a2]1736,%d2
80006c1a:	60 92       	mov.a %a2,%d9
80006c1c:	59 23 04 00 	st.w [%a2]4,%d3
80006c20:	7d dc 7f 01 	jeq.a %a12,%a13,80006f1e <_malloc_r+0x5d8>
80006c24:	8b 0b a1 32 	ge.u %d3,%d11,16
80006c28:	df 03 7e 01 	jeq %d3,0,80006f24 <_malloc_r+0x5de>
80006c2c:	19 c4 04 00 	ld.w %d4,[%a12]4
80006c30:	1b 4b ff 3f 	addi %d3,%d11,-12
80006c34:	8f 73 c0 31 	andn %d3,%d3,7
80006c38:	8f 14 00 41 	and %d4,%d4,1
80006c3c:	a6 34       	or %d4,%d3
80006c3e:	d9 c2 04 00 	lea %a2,[%a12]4
80006c42:	74 24       	st.w [%a2],%d4
80006c44:	82 54       	mov %d4,5
80006c46:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80006c4a:	8b 03 a1 32 	ge.u %d3,%d3,16
80006c4e:	59 24 04 00 	st.w [%a2]4,%d4
80006c52:	59 24 08 00 	st.w [%a2]8,%d4
80006c56:	df 03 94 81 	jne %d3,0,80006f7e <_malloc_r+0x638>
80006c5a:	60 92       	mov.a %a2,%d9
80006c5c:	60 9c       	mov.a %a12,%d9
80006c5e:	19 23 04 00 	ld.w %d3,[%a2]4
80006c62:	91 00 00 26 	movh.a %a2,24576
80006c66:	19 24 74 b0 	ld.w %d4,[%a2]1780 <600006f4 <__malloc_max_sbrked_mem>>
80006c6a:	7f 24 04 80 	jge.u %d4,%d2,80006c72 <_malloc_r+0x32c>
80006c6e:	59 22 74 b0 	st.w [%a2]1780 <600006f4 <__malloc_max_sbrked_mem>>,%d2
80006c72:	91 00 00 26 	movh.a %a2,24576
80006c76:	19 24 70 b0 	ld.w %d4,[%a2]1776 <600006f0 <__malloc_max_total_mem>>
80006c7a:	7f 24 04 80 	jge.u %d4,%d2,80006c82 <_malloc_r+0x33c>
80006c7e:	59 22 70 b0 	st.w [%a2]1776 <600006f0 <__malloc_max_total_mem>>,%d2
80006c82:	8f 33 c0 31 	andn %d3,%d3,3
80006c86:	0b 83 80 20 	sub %d2,%d3,%d8
80006c8a:	0b 83 30 41 	lt.u %d4,%d3,%d8
80006c8e:	8b 02 21 45 	or.lt %d4,%d2,16
80006c92:	df 04 24 00 	jeq %d4,0,80006cda <_malloc_r+0x394>
80006c96:	40 e4       	mov.aa %a4,%a14
80006c98:	6d 00 43 03 	call 8000731e <__malloc_unlock>
80006c9c:	a0 0c       	mov.a %a12,0
80006c9e:	1d ff 3c ff 	j 80006b16 <_malloc_r+0x1d0>
80006ca2:	8f a8 1f 60 	sh %d6,%d8,-6
80006ca6:	1b 86 03 50 	addi %d5,%d6,56
80006caa:	1b 96 03 60 	addi %d6,%d6,57
80006cae:	8f 36 00 30 	sh %d3,%d6,3
80006cb2:	bf 52 99 fe 	jlt.u %d2,5,800069e4 <_malloc_r+0x9e>
80006cb6:	8b 52 a1 32 	ge.u %d3,%d2,21
80006cba:	df 03 bc 00 	jeq %d3,0,80006e32 <_malloc_r+0x4ec>
80006cbe:	8b 52 a5 32 	ge.u %d3,%d2,85
80006cc2:	df 03 20 81 	jne %d3,0,80006f02 <_malloc_r+0x5bc>
80006cc6:	8f 48 1f 60 	sh %d6,%d8,-12
80006cca:	1b e6 06 50 	addi %d5,%d6,110
80006cce:	1b f6 06 60 	addi %d6,%d6,111
80006cd2:	8f 36 00 30 	sh %d3,%d6,3
80006cd6:	1d ff 87 fe 	j 800069e4 <_malloc_r+0x9e>
80006cda:	8f 18 40 31 	or %d3,%d8,1
80006cde:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
80006ce2:	8f 12 40 21 	or %d2,%d2,1
80006ce6:	59 c3 04 00 	st.w [%a12]4,%d3
80006cea:	b5 d2 08 00 	st.a [%a13]8,%a2
80006cee:	59 22 04 00 	st.w [%a2]4,%d2
80006cf2:	40 e4       	mov.aa %a4,%a14
80006cf4:	6d 00 15 03 	call 8000731e <__malloc_unlock>
80006cf8:	d9 cc 08 00 	lea %a12,[%a12]8
80006cfc:	40 c2       	mov.aa %a2,%a12
80006cfe:	00 90       	ret 
80006d00:	99 c2 0c 00 	ld.a %a2,[%a12]12
80006d04:	99 c3 08 00 	ld.a %a3,[%a12]8
80006d08:	b7 10 21 20 	imask %e2,1,0,1
80006d0c:	40 e4       	mov.aa %a4,%a14
80006d0e:	b5 32 0c 00 	st.a [%a3]12,%a2
80006d12:	b5 23 08 00 	st.a [%a2]8,%a3
80006d16:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
80006d1a:	d9 cc 08 00 	lea %a12,[%a12]8
80006d1e:	49 22 44 08 	ldmst [%a2]4,%e2
80006d22:	6d 00 fe 02 	call 8000731e <__malloc_unlock>
80006d26:	1d ff 45 fe 	j 800069b0 <_malloc_r+0x6a>
80006d2a:	8f 72 1f 30 	sh %d3,%d2,-9
80006d2e:	bf 53 78 80 	jlt.u %d3,5,80006e1e <_malloc_r+0x4d8>
80006d32:	8b 53 a1 42 	ge.u %d4,%d3,21
80006d36:	df 04 d8 80 	jne %d4,0,80006ee6 <_malloc_r+0x5a0>
80006d3a:	1b b3 05 50 	addi %d5,%d3,91
80006d3e:	1b c3 05 30 	addi %d3,%d3,92
80006d42:	8f 33 00 40 	sh %d4,%d3,3
80006d46:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80006d4a:	40 23       	mov.aa %a3,%a2
80006d4c:	d4 33       	ld.a %a3,[%a3]
80006d4e:	b0 82       	add.a %a2,-8
80006d50:	7d 32 b2 00 	jeq.a %a2,%a3,80006eb4 <_malloc_r+0x56e>
80006d54:	19 33 04 00 	ld.w %d3,[%a3]4
80006d58:	8f 33 c0 31 	andn %d3,%d3,3
80006d5c:	7f 32 07 80 	jge.u %d2,%d3,80006d6a <_malloc_r+0x424>
80006d60:	d9 33 08 00 	lea %a3,[%a3]8
80006d64:	d4 33       	ld.a %a3,[%a3]
80006d66:	7d 32 f7 ff 	jne.a %a2,%a3,80006d54 <_malloc_r+0x40e>
80006d6a:	99 32 0c 00 	ld.a %a2,[%a3]12
80006d6e:	19 d3 04 00 	ld.w %d3,[%a13]4
80006d72:	b5 c2 0c 00 	st.a [%a12]12,%a2
80006d76:	b5 c3 08 00 	st.a [%a12]8,%a3
80006d7a:	b5 2c 08 00 	st.a [%a2]8,%a12
80006d7e:	b5 3c 0c 00 	st.a [%a3]12,%a12
80006d82:	1d ff 85 fe 	j 80006a8c <_malloc_r+0x146>
80006d86:	c2 17       	add %d7,1
80006d88:	8f 37 00 31 	and %d3,%d7,3
80006d8c:	d9 22 08 00 	lea %a2,[%a2]8
80006d90:	df 03 97 fe 	jne %d3,0,80006abe <_malloc_r+0x178>
80006d94:	1d 00 5d 00 	j 80006e4e <_malloc_r+0x508>
80006d98:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
80006d9c:	8f 18 40 81 	or %d8,%d8,1
80006da0:	99 c5 08 00 	ld.a %a5,[%a12]8
80006da4:	8f 13 40 21 	or %d2,%d3,1
80006da8:	74 68       	st.w [%a6],%d8
80006daa:	b5 53 0c 00 	st.a [%a5]12,%a3
80006dae:	b5 35 08 00 	st.a [%a3]8,%a5
80006db2:	b5 d2 14 00 	st.a [%a13]20,%a2
80006db6:	b5 d2 10 00 	st.a [%a13]16,%a2
80006dba:	b5 24 0c 00 	st.a [%a2]12,%a4
80006dbe:	b5 24 08 00 	st.a [%a2]8,%a4
80006dc2:	59 22 04 00 	st.w [%a2]4,%d2
80006dc6:	01 c5 00 26 	addsc.a %a2,%a12,%d5,0
80006dca:	40 e4       	mov.aa %a4,%a14
80006dcc:	74 23       	st.w [%a2],%d3
80006dce:	6d 00 a8 02 	call 8000731e <__malloc_unlock>
80006dd2:	d9 cc 08 00 	lea %a12,[%a12]8
80006dd6:	1d ff a0 fe 	j 80006b16 <_malloc_r+0x1d0>
80006dda:	8f d8 1f 60 	sh %d6,%d8,-3
80006dde:	1b 88 00 30 	addi %d3,%d8,8
80006de2:	1d ff c4 fd 	j 8000696a <_malloc_r+0x24>
80006de6:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
80006dea:	8f 18 40 81 	or %d8,%d8,1
80006dee:	8f 13 40 41 	or %d4,%d3,1
80006df2:	59 c8 04 00 	st.w [%a12]4,%d8
80006df6:	b5 d2 14 00 	st.a [%a13]20,%a2
80006dfa:	b5 d2 10 00 	st.a [%a13]16,%a2
80006dfe:	b5 24 0c 00 	st.a [%a2]12,%a4
80006e02:	b5 24 08 00 	st.a [%a2]8,%a4
80006e06:	59 24 04 00 	st.w [%a2]4,%d4
80006e0a:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80006e0e:	40 e4       	mov.aa %a4,%a14
80006e10:	74 23       	st.w [%a2],%d3
80006e12:	6d 00 86 02 	call 8000731e <__malloc_unlock>
80006e16:	d9 cc 08 00 	lea %a12,[%a12]8
80006e1a:	1d ff 7e fe 	j 80006b16 <_malloc_r+0x1d0>
80006e1e:	8f a2 1f 30 	sh %d3,%d2,-6
80006e22:	1b 83 03 50 	addi %d5,%d3,56
80006e26:	1b 93 03 30 	addi %d3,%d3,57
80006e2a:	8f 33 00 40 	sh %d4,%d3,3
80006e2e:	1d ff 8c ff 	j 80006d46 <_malloc_r+0x400>
80006e32:	1b c2 05 60 	addi %d6,%d2,92
80006e36:	1b b2 05 50 	addi %d5,%d2,91
80006e3a:	8f 36 00 30 	sh %d3,%d6,3
80006e3e:	1d ff d3 fd 	j 800069e4 <_malloc_r+0x9e>
80006e42:	40 52       	mov.aa %a2,%a5
80006e44:	d4 22       	ld.a %a2,[%a2]
80006e46:	b0 85       	add.a %a5,-8
80006e48:	c2 f6       	add %d6,-1
80006e4a:	7d 52 ba 80 	jne.a %a2,%a5,80006fbe <_malloc_r+0x678>
80006e4e:	8f 36 00 31 	and %d3,%d6,3
80006e52:	df 03 f8 ff 	jne %d3,0,80006e42 <_malloc_r+0x4fc>
80006e56:	19 d3 04 00 	ld.w %d3,[%a13]4
80006e5a:	d9 d2 04 00 	lea %a2,[%a13]4
80006e5e:	0f 23 e0 30 	andn %d3,%d3,%d2
80006e62:	74 23       	st.w [%a2],%d3
80006e64:	06 12       	sh %d2,1
80006e66:	1b f2 ff 4f 	addi %d4,%d2,-1
80006e6a:	3f 34 06 80 	jlt.u %d4,%d3,80006e76 <_malloc_r+0x530>
80006e6e:	1d ff 6a fe 	j 80006b42 <_malloc_r+0x1fc>
80006e72:	c2 47       	add %d7,4
80006e74:	06 12       	sh %d2,1
80006e76:	0f 32 80 40 	and %d4,%d2,%d3
80006e7a:	df 04 fc 7f 	jeq %d4,0,80006e72 <_malloc_r+0x52c>
80006e7e:	02 76       	mov %d6,%d7
80006e80:	1d ff 19 fe 	j 80006ab2 <_malloc_r+0x16c>
80006e84:	8f fc 07 31 	and %d3,%d12,127
80006e88:	df 03 9c fe 	jne %d3,0,80006bc0 <_malloc_r+0x27a>
80006e8c:	0b ab 00 30 	add %d3,%d11,%d10
80006e90:	99 dc 08 00 	ld.a %a12,[%a13]8
80006e94:	8f 13 40 31 	or %d3,%d3,1
80006e98:	59 c3 04 00 	st.w [%a12]4,%d3
80006e9c:	1d ff e3 fe 	j 80006c62 <_malloc_r+0x31c>
80006ea0:	59 f9 20 50 	st.w [%a15]352,%d9
80006ea4:	1d ff 98 fe 	j 80006bd4 <_malloc_r+0x28e>
80006ea8:	99 dc 08 00 	ld.a %a12,[%a13]8
80006eac:	19 c3 04 00 	ld.w %d3,[%a12]4
80006eb0:	1d ff e9 fe 	j 80006c82 <_malloc_r+0x33c>
80006eb4:	19 d3 04 00 	ld.w %d3,[%a13]4
80006eb8:	86 e5       	sha %d5,-2
80006eba:	d7 13 01 35 	insert %d3,%d3,1,%d5,1
80006ebe:	d9 d5 04 00 	lea %a5,[%a13]4
80006ec2:	74 53       	st.w [%a5],%d3
80006ec4:	1d ff 57 ff 	j 80006d72 <_malloc_r+0x42c>
80006ec8:	0b a9 00 20 	add %d2,%d9,%d10
80006ecc:	32 52       	rsub %d2
80006ece:	8f f2 07 c1 	and %d12,%d2,127
80006ed2:	02 c4       	mov %d4,%d12
80006ed4:	40 e4       	mov.aa %a4,%a14
80006ed6:	6d 00 2a 02 	call 8000732a <_sbrk_r>
80006eda:	80 22       	mov.d %d2,%a2
80006edc:	df f2 90 fe 	jne %d2,-1,80006bfc <_malloc_r+0x2b6>
80006ee0:	82 0c       	mov %d12,0
80006ee2:	1d ff 90 fe 	j 80006c02 <_malloc_r+0x2bc>
80006ee6:	8b 53 a5 42 	ge.u %d4,%d3,85
80006eea:	df 04 22 80 	jne %d4,0,80006f2e <_malloc_r+0x5e8>
80006eee:	8f 42 1f 30 	sh %d3,%d2,-12
80006ef2:	1b e3 06 50 	addi %d5,%d3,110
80006ef6:	1b f3 06 30 	addi %d3,%d3,111
80006efa:	8f 33 00 40 	sh %d4,%d3,3
80006efe:	1d ff 24 ff 	j 80006d46 <_malloc_r+0x400>
80006f02:	8b 52 b5 32 	ge.u %d3,%d2,341
80006f06:	df 03 22 80 	jne %d3,0,80006f4a <_malloc_r+0x604>
80006f0a:	8f 18 1f 60 	sh %d6,%d8,-15
80006f0e:	1b 76 07 50 	addi %d5,%d6,119
80006f12:	1b 86 07 60 	addi %d6,%d6,120
80006f16:	8f 36 00 30 	sh %d3,%d6,3
80006f1a:	1d ff 65 fd 	j 800069e4 <_malloc_r+0x9e>
80006f1e:	60 9c       	mov.a %a12,%d9
80006f20:	1d ff a1 fe 	j 80006c62 <_malloc_r+0x31c>
80006f24:	82 12       	mov %d2,1
80006f26:	59 22 04 00 	st.w [%a2]4,%d2
80006f2a:	1d ff b6 fe 	j 80006c96 <_malloc_r+0x350>
80006f2e:	8b 53 b5 42 	ge.u %d4,%d3,341
80006f32:	df 04 34 80 	jne %d4,0,80006f9a <_malloc_r+0x654>
80006f36:	8f 12 1f 30 	sh %d3,%d2,-15
80006f3a:	1b 73 07 50 	addi %d5,%d3,119
80006f3e:	1b 83 07 30 	addi %d3,%d3,120
80006f42:	8f 33 00 40 	sh %d4,%d3,3
80006f46:	1d ff 00 ff 	j 80006d46 <_malloc_r+0x400>
80006f4a:	3b 50 55 40 	mov %d4,1365
80006f4e:	3b 80 3f 30 	mov %d3,1016
80006f52:	3b f0 07 60 	mov %d6,127
80006f56:	3b e0 07 50 	mov %d5,126
80006f5a:	7f 42 45 fd 	jge.u %d2,%d4,800069e4 <_malloc_r+0x9e>
80006f5e:	8f e8 1e 60 	sh %d6,%d8,-18
80006f62:	1b c6 07 50 	addi %d5,%d6,124
80006f66:	1b d6 07 60 	addi %d6,%d6,125
80006f6a:	8f 36 00 30 	sh %d3,%d6,3
80006f6e:	1d ff 3b fd 	j 800069e4 <_malloc_r+0x9e>
80006f72:	c2 8e       	add %d14,-8
80006f74:	42 ea       	add %d10,%d14
80006f76:	a2 9a       	sub %d10,%d9
80006f78:	82 0c       	mov %d12,0
80006f7a:	1d ff 44 fe 	j 80006c02 <_malloc_r+0x2bc>
80006f7e:	d9 c5 08 00 	lea %a5,[%a12]8
80006f82:	40 e4       	mov.aa %a4,%a14
80006f84:	6d 00 85 00 	call 8000708e <_free_r>
80006f88:	99 dc 08 00 	ld.a %a12,[%a13]8
80006f8c:	60 d2       	mov.a %a2,%d13
80006f8e:	19 c3 04 00 	ld.w %d3,[%a12]4
80006f92:	19 22 48 b0 	ld.w %d2,[%a2]1736
80006f96:	1d ff 66 fe 	j 80006c62 <_malloc_r+0x31c>
80006f9a:	3b 50 55 70 	mov %d7,1365
80006f9e:	3b 80 3f 40 	mov %d4,1016
80006fa2:	3b e0 07 50 	mov %d5,126
80006fa6:	7f 73 d0 fe 	jge.u %d3,%d7,80006d46 <_malloc_r+0x400>
80006faa:	8f e2 1e 30 	sh %d3,%d2,-18
80006fae:	1b c3 07 50 	addi %d5,%d3,124
80006fb2:	1b d3 07 30 	addi %d3,%d3,125
80006fb6:	8f 33 00 40 	sh %d4,%d3,3
80006fba:	1d ff c6 fe 	j 80006d46 <_malloc_r+0x400>
80006fbe:	19 d3 04 00 	ld.w %d3,[%a13]4
80006fc2:	1d ff 51 ff 	j 80006e64 <_malloc_r+0x51e>

80006fc6 <_malloc_trim_r>:
80006fc6:	91 00 00 c6 	movh.a %a12,24576
80006fca:	02 49       	mov %d9,%d4
80006fcc:	80 48       	mov.d %d8,%a4
80006fce:	d9 cc 28 50 	lea %a12,[%a12]360 <60000168 <__malloc_av_>>
80006fd2:	6d 00 a5 01 	call 8000731c <__malloc_lock>
80006fd6:	99 c2 08 00 	ld.a %a2,[%a12]8 <60000008 <LCF_DSPR1_START+0x8>>
80006fda:	8b f9 06 21 	rsub %d2,%d9,111
80006fde:	19 2a 04 00 	ld.w %d10,[%a2]4
80006fe2:	8f 3a c0 a1 	andn %d10,%d10,3
80006fe6:	42 a2       	add %d2,%d10
80006fe8:	8f f2 c7 21 	andn %d2,%d2,127
80006fec:	1b 02 f8 9f 	addi %d9,%d2,-128
80006ff0:	8b 09 88 22 	ge %d2,%d9,128
80006ff4:	df 02 0c 00 	jeq %d2,0,8000700c <_malloc_trim_r+0x46>
80006ff8:	60 84       	mov.a %a4,%d8
80006ffa:	82 04       	mov %d4,0
80006ffc:	6d 00 97 01 	call 8000732a <_sbrk_r>
80007000:	19 c2 08 00 	ld.w %d2,[%a12]8 <60000008 <LCF_DSPR1_START+0x8>>
80007004:	80 23       	mov.d %d3,%a2
80007006:	42 a2       	add %d2,%d10
80007008:	5f 23 07 00 	jeq %d3,%d2,80007016 <_malloc_trim_r+0x50>
8000700c:	60 84       	mov.a %a4,%d8
8000700e:	6d 00 88 01 	call 8000731e <__malloc_unlock>
80007012:	82 02       	mov %d2,0
80007014:	00 90       	ret 
80007016:	60 84       	mov.a %a4,%d8
80007018:	8b 09 00 41 	rsub %d4,%d9,0
8000701c:	6d 00 87 01 	call 8000732a <_sbrk_r>
80007020:	80 22       	mov.d %d2,%a2
80007022:	df f2 18 00 	jeq %d2,-1,80007052 <_malloc_trim_r+0x8c>
80007026:	0b 9a 80 20 	sub %d2,%d10,%d9
8000702a:	99 c2 08 00 	ld.a %a2,[%a12]8
8000702e:	8f 12 40 21 	or %d2,%d2,1
80007032:	60 84       	mov.a %a4,%d8
80007034:	59 22 04 00 	st.w [%a2]4,%d2
80007038:	91 00 00 26 	movh.a %a2,24576
8000703c:	d9 23 48 b0 	lea %a3,[%a2]1736 <600006c8 <__malloc_current_mallinfo>>
80007040:	54 32       	ld.w %d2,[%a3]
80007042:	0b 92 80 90 	sub %d9,%d2,%d9
80007046:	59 29 48 b0 	st.w [%a2]1736 <600006c8 <__malloc_current_mallinfo>>,%d9
8000704a:	6d 00 6a 01 	call 8000731e <__malloc_unlock>
8000704e:	82 12       	mov %d2,1
80007050:	00 90       	ret 
80007052:	60 84       	mov.a %a4,%d8
80007054:	82 04       	mov %d4,0
80007056:	6d 00 6a 01 	call 8000732a <_sbrk_r>
8000705a:	80 24       	mov.d %d4,%a2
8000705c:	99 c2 08 00 	ld.a %a2,[%a12]8
80007060:	80 22       	mov.d %d2,%a2
80007062:	0b 24 80 30 	sub %d3,%d4,%d2
80007066:	8b 03 41 22 	lt %d2,%d3,16
8000706a:	df 02 d1 ff 	jne %d2,0,8000700c <_malloc_trim_r+0x46>
8000706e:	91 00 00 36 	movh.a %a3,24576
80007072:	19 32 20 50 	ld.w %d2,[%a3]352 <60000160 <__malloc_sbrk_base>>
80007076:	8f 13 40 31 	or %d3,%d3,1
8000707a:	0b 24 80 20 	sub %d2,%d4,%d2
8000707e:	91 00 00 36 	movh.a %a3,24576
80007082:	59 23 04 00 	st.w [%a2]4,%d3
80007086:	59 32 48 b0 	st.w [%a3]1736 <600006c8 <__malloc_current_mallinfo>>,%d2
8000708a:	1d ff c1 ff 	j 8000700c <_malloc_trim_r+0x46>

8000708e <_free_r>:
8000708e:	80 48       	mov.d %d8,%a4
80007090:	40 5c       	mov.aa %a12,%a5
80007092:	bd 05 5c 00 	jz.a %a5,8000714a <_free_r+0xbc>
80007096:	6d 00 43 01 	call 8000731c <__malloc_lock>
8000709a:	19 c3 fc ff 	ld.w %d3,[%a12]-4
8000709e:	d9 c3 f8 ff 	lea %a3,[%a12]-8
800070a2:	8f 13 c0 21 	andn %d2,%d3,1
800070a6:	91 00 00 66 	movh.a %a6,24576
800070aa:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
800070ae:	d9 66 28 50 	lea %a6,[%a6]360 <60000168 <__malloc_av_>>
800070b2:	99 64 08 00 	ld.a %a4,[%a6]8 <60000008 <LCF_DSPR1_START+0x8>>
800070b6:	19 24 04 00 	ld.w %d4,[%a2]4 <60000008 <LCF_DSPR1_START+0x8>>
800070ba:	8f 34 c0 41 	andn %d4,%d4,3
800070be:	7d 24 ae 00 	jeq.a %a4,%a2,8000721a <_free_r+0x18c>
800070c2:	59 24 04 00 	st.w [%a2]4,%d4
800070c6:	01 24 00 56 	addsc.a %a5,%a2,%d4,0
800070ca:	6f 03 41 80 	jnz.t %d3,0,8000714c <_free_r+0xbe>
800070ce:	19 c3 f8 ff 	ld.w %d3,[%a12]-8
800070d2:	60 34       	mov.a %a4,%d3
800070d4:	42 32       	add %d2,%d3
800070d6:	01 43 20 30 	sub.a %a3,%a3,%a4
800070da:	99 34 08 00 	ld.a %a4,[%a3]8
800070de:	19 53 04 00 	ld.w %d3,[%a5]4
800070e2:	d9 65 08 00 	lea %a5,[%a6]8 <60000008 <LCF_DSPR1_START+0x8>>
800070e6:	8f 13 00 31 	and %d3,%d3,1
800070ea:	7d 54 81 00 	jeq.a %a4,%a5,800071ec <_free_r+0x15e>
800070ee:	99 37 0c 00 	ld.a %a7,[%a3]12
800070f2:	b5 47 0c 00 	st.a [%a4]12,%a7
800070f6:	b5 74 08 00 	st.a [%a7]8,%a4
800070fa:	df 03 c7 00 	jeq %d3,0,80007288 <_free_r+0x1fa>
800070fe:	8f 12 40 31 	or %d3,%d2,1
80007102:	59 33 04 00 	st.w [%a3]4,%d3
80007106:	74 22       	st.w [%a2],%d2
80007108:	3b 00 20 30 	mov %d3,512
8000710c:	7f 32 44 80 	jge.u %d2,%d3,80007194 <_free_r+0x106>
80007110:	19 64 04 00 	ld.w %d4,[%a6]4 <60000004 <LCF_DSPR1_START+0x4>>
80007114:	8f b2 1f 30 	sh %d3,%d2,-5
80007118:	8f 72 c0 21 	andn %d2,%d2,7
8000711c:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
80007120:	1b 82 00 20 	addi %d2,%d2,8
80007124:	d9 62 04 00 	lea %a2,[%a6]4 <60000004 <LCF_DSPR1_START+0x4>>
80007128:	01 62 00 66 	addsc.a %a6,%a6,%d2,0
8000712c:	74 23       	st.w [%a2],%d3
8000712e:	d4 65       	ld.a %a5,[%a6]
80007130:	40 62       	mov.aa %a2,%a6
80007132:	b0 82       	add.a %a2,-8
80007134:	b5 32 0c 00 	st.a [%a3]12,%a2
80007138:	b5 35 08 00 	st.a [%a3]8,%a5
8000713c:	f4 63       	st.a [%a6],%a3
8000713e:	b5 53 0c 00 	st.a [%a5]12,%a3
80007142:	60 84       	mov.a %a4,%d8
80007144:	6d 00 ed 00 	call 8000731e <__malloc_unlock>
80007148:	00 90       	ret 
8000714a:	00 90       	ret 
8000714c:	19 53 04 00 	ld.w %d3,[%a5]4
80007150:	6f 03 19 80 	jnz.t %d3,0,80007182 <_free_r+0xf4>
80007154:	42 42       	add %d2,%d4
80007156:	d9 65 08 00 	lea %a5,[%a6]8
8000715a:	99 24 08 00 	ld.a %a4,[%a2]8
8000715e:	01 32 00 76 	addsc.a %a7,%a3,%d2,0
80007162:	8f 12 40 31 	or %d3,%d2,1
80007166:	7d 54 9c 00 	jeq.a %a4,%a5,8000729e <_free_r+0x210>
8000716a:	d9 22 0c 00 	lea %a2,[%a2]12
8000716e:	d4 22       	ld.a %a2,[%a2]
80007170:	b5 42 0c 00 	st.a [%a4]12,%a2
80007174:	b5 24 08 00 	st.a [%a2]8,%a4
80007178:	59 33 04 00 	st.w [%a3]4,%d3
8000717c:	74 72       	st.w [%a7],%d2
8000717e:	1d ff c5 ff 	j 80007108 <_free_r+0x7a>
80007182:	8f 12 40 31 	or %d3,%d2,1
80007186:	59 c3 fc ff 	st.w [%a12]-4,%d3
8000718a:	74 22       	st.w [%a2],%d2
8000718c:	3b 00 20 30 	mov %d3,512
80007190:	3f 32 c0 ff 	jlt.u %d2,%d3,80007110 <_free_r+0x82>
80007194:	8f 72 1f 30 	sh %d3,%d2,-9
80007198:	ff 53 66 80 	jge.u %d3,5,80007264 <_free_r+0x1d6>
8000719c:	8f a2 1f 30 	sh %d3,%d2,-6
800071a0:	1b 83 03 50 	addi %d5,%d3,56
800071a4:	1b 93 03 30 	addi %d3,%d3,57
800071a8:	8f 33 00 40 	sh %d4,%d3,3
800071ac:	01 64 00 56 	addsc.a %a5,%a6,%d4,0
800071b0:	40 52       	mov.aa %a2,%a5
800071b2:	d4 22       	ld.a %a2,[%a2]
800071b4:	b0 85       	add.a %a5,-8
800071b6:	7d 25 81 00 	jeq.a %a5,%a2,800072b8 <_free_r+0x22a>
800071ba:	19 23 04 00 	ld.w %d3,[%a2]4
800071be:	8f 33 c0 31 	andn %d3,%d3,3
800071c2:	7f 32 07 80 	jge.u %d2,%d3,800071d0 <_free_r+0x142>
800071c6:	d9 22 08 00 	lea %a2,[%a2]8
800071ca:	d4 22       	ld.a %a2,[%a2]
800071cc:	7d 25 f7 ff 	jne.a %a5,%a2,800071ba <_free_r+0x12c>
800071d0:	99 25 0c 00 	ld.a %a5,[%a2]12
800071d4:	b5 35 0c 00 	st.a [%a3]12,%a5
800071d8:	b5 32 08 00 	st.a [%a3]8,%a2
800071dc:	b5 53 08 00 	st.a [%a5]8,%a3
800071e0:	60 84       	mov.a %a4,%d8
800071e2:	b5 23 0c 00 	st.a [%a2]12,%a3
800071e6:	6d 00 9c 00 	call 8000731e <__malloc_unlock>
800071ea:	00 90       	ret 
800071ec:	df 03 91 80 	jne %d3,0,8000730e <_free_r+0x280>
800071f0:	99 24 0c 00 	ld.a %a4,[%a2]12
800071f4:	d9 22 08 00 	lea %a2,[%a2]8
800071f8:	d4 22       	ld.a %a2,[%a2]
800071fa:	42 42       	add %d2,%d4
800071fc:	8f 12 40 31 	or %d3,%d2,1
80007200:	b5 24 0c 00 	st.a [%a2]12,%a4
80007204:	b5 42 08 00 	st.a [%a4]8,%a2
80007208:	59 33 04 00 	st.w [%a3]4,%d3
8000720c:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
80007210:	60 84       	mov.a %a4,%d8
80007212:	74 32       	st.w [%a3],%d2
80007214:	6d 00 85 00 	call 8000731e <__malloc_unlock>
80007218:	00 90       	ret 
8000721a:	42 42       	add %d2,%d4
8000721c:	6f 03 0f 80 	jnz.t %d3,0,8000723a <_free_r+0x1ac>
80007220:	54 33       	ld.w %d3,[%a3]
80007222:	60 32       	mov.a %a2,%d3
80007224:	42 32       	add %d2,%d3
80007226:	01 23 20 30 	sub.a %a3,%a3,%a2
8000722a:	99 32 0c 00 	ld.a %a2,[%a3]12
8000722e:	99 34 08 00 	ld.a %a4,[%a3]8
80007232:	b5 42 0c 00 	st.a [%a4]12,%a2
80007236:	b5 24 08 00 	st.a [%a2]8,%a4
8000723a:	8f 12 40 31 	or %d3,%d2,1
8000723e:	91 00 00 26 	movh.a %a2,24576
80007242:	59 33 04 00 	st.w [%a3]4,%d3
80007246:	19 23 24 50 	ld.w %d3,[%a2]356 <60000164 <__malloc_trim_threshold>>
8000724a:	b5 63 08 00 	st.a [%a6]8 <60000164 <__malloc_trim_threshold>>,%a3
8000724e:	3f 32 7a ff 	jlt.u %d2,%d3,80007142 <_free_r+0xb4>
80007252:	91 00 00 26 	movh.a %a2,24576
80007256:	19 24 78 b0 	ld.w %d4,[%a2]1784 <600006f8 <__malloc_top_pad>>
8000725a:	60 84       	mov.a %a4,%d8
8000725c:	6d ff b5 fe 	call 80006fc6 <_malloc_trim_r>
80007260:	1d ff 71 ff 	j 80007142 <_free_r+0xb4>
80007264:	8b 53 a1 42 	ge.u %d4,%d3,21
80007268:	df 04 13 00 	jeq %d4,0,8000728e <_free_r+0x200>
8000726c:	8b 53 a5 42 	ge.u %d4,%d3,85
80007270:	df 04 2f 80 	jne %d4,0,800072ce <_free_r+0x240>
80007274:	8f 42 1f 30 	sh %d3,%d2,-12
80007278:	1b e3 06 50 	addi %d5,%d3,110
8000727c:	1b f3 06 30 	addi %d3,%d3,111
80007280:	8f 33 00 40 	sh %d4,%d3,3
80007284:	1d ff 94 ff 	j 800071ac <_free_r+0x11e>
80007288:	42 42       	add %d2,%d4
8000728a:	1d ff 68 ff 	j 8000715a <_free_r+0xcc>
8000728e:	1b b3 05 50 	addi %d5,%d3,91
80007292:	1b c3 05 30 	addi %d3,%d3,92
80007296:	8f 33 00 40 	sh %d4,%d3,3
8000729a:	1d ff 89 ff 	j 800071ac <_free_r+0x11e>
8000729e:	b5 63 14 00 	st.a [%a6]20,%a3
800072a2:	b5 63 10 00 	st.a [%a6]16,%a3
800072a6:	b5 35 0c 00 	st.a [%a3]12,%a5
800072aa:	b5 35 08 00 	st.a [%a3]8,%a5
800072ae:	59 33 04 00 	st.w [%a3]4,%d3
800072b2:	74 72       	st.w [%a7],%d2
800072b4:	1d ff 47 ff 	j 80007142 <_free_r+0xb4>
800072b8:	19 63 04 00 	ld.w %d3,[%a6]4
800072bc:	8f e5 3f 20 	sha %d2,%d5,-2
800072c0:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
800072c4:	d9 64 04 00 	lea %a4,[%a6]4
800072c8:	74 42       	st.w [%a4],%d2
800072ca:	1d ff 85 ff 	j 800071d4 <_free_r+0x146>
800072ce:	8b 53 b5 42 	ge.u %d4,%d3,341
800072d2:	df 04 0c 80 	jne %d4,0,800072ea <_free_r+0x25c>
800072d6:	8f 12 1f 30 	sh %d3,%d2,-15
800072da:	1b 73 07 50 	addi %d5,%d3,119
800072de:	1b 83 07 30 	addi %d3,%d3,120
800072e2:	8f 33 00 40 	sh %d4,%d3,3
800072e6:	1d ff 63 ff 	j 800071ac <_free_r+0x11e>
800072ea:	3b 50 55 60 	mov %d6,1365
800072ee:	3b 80 3f 40 	mov %d4,1016
800072f2:	3b e0 07 50 	mov %d5,126
800072f6:	7f 63 5b ff 	jge.u %d3,%d6,800071ac <_free_r+0x11e>
800072fa:	8f e2 1e 30 	sh %d3,%d2,-18
800072fe:	1b c3 07 50 	addi %d5,%d3,124
80007302:	1b d3 07 30 	addi %d3,%d3,125
80007306:	8f 33 00 40 	sh %d4,%d3,3
8000730a:	1d ff 51 ff 	j 800071ac <_free_r+0x11e>
8000730e:	8f 12 40 31 	or %d3,%d2,1
80007312:	59 33 04 00 	st.w [%a3]4,%d3
80007316:	74 22       	st.w [%a2],%d2
80007318:	1d ff 15 ff 	j 80007142 <_free_r+0xb4>

8000731c <__malloc_lock>:
8000731c:	00 90       	ret 

8000731e <__malloc_unlock>:
8000731e:	00 90       	ret 

80007320 <__errno>:
80007320:	91 00 00 26 	movh.a %a2,24576
80007324:	99 22 00 10 	ld.a %a2,[%a2]64 <60000040 <_impure_ptr>>
80007328:	00 90       	ret 

8000732a <_sbrk_r>:
8000732a:	82 02       	mov %d2,0
8000732c:	91 00 00 c6 	movh.a %a12,24576
80007330:	40 4d       	mov.aa %a13,%a4
80007332:	59 c2 40 c0 	st.w [%a12]1792 <60000700 <errno>>,%d2
80007336:	6d 00 24 00 	call 8000737e <sbrk>
8000733a:	80 22       	mov.d %d2,%a2
8000733c:	df f2 04 00 	jeq %d2,-1,80007344 <_sbrk_r+0x1a>
80007340:	60 22       	mov.a %a2,%d2
80007342:	00 90       	ret 
80007344:	19 c3 40 c0 	ld.w %d3,[%a12]1792
80007348:	df 03 fc 7f 	jeq %d3,0,80007340 <_sbrk_r+0x16>
8000734c:	60 22       	mov.a %a2,%d2
8000734e:	74 d3       	st.w [%a13],%d3
80007350:	00 90       	ret 

80007352 <abort>:
80007352:	00 a0       	debug 
80007354:	7b e0 ea 2d 	movh %d2,57006
80007358:	1b f2 ee 2b 	addi %d2,%d2,-16657
8000735c:	60 2e       	mov.a %a14,%d2
8000735e:	1d 00 04 00 	j 80007366 <_exit>
80007362:	1d 00 00 00 	j 80007362 <abort+0x10>

80007366 <_exit>:
80007366:	df 04 06 00 	jeq %d4,0,80007372 <_exit+0xc>
8000736a:	60 4e       	mov.a %a14,%d4
8000736c:	00 a0       	debug 
8000736e:	1d 00 00 00 	j 8000736e <_exit+0x8>
80007372:	bb d0 00 29 	mov.u %d2,36877
80007376:	60 2e       	mov.a %a14,%d2
80007378:	00 a0       	debug 
8000737a:	1d ff fa ff 	j 8000736e <_exit+0x8>

8000737e <sbrk>:
8000737e:	91 00 00 36 	movh.a %a3,24576
80007382:	99 32 70 50 	ld.a %a2,[%a3]1392 <60000570 <heap_top.0>>
80007386:	91 00 00 46 	movh.a %a4,24576
8000738a:	80 22       	mov.d %d2,%a2
8000738c:	42 24       	add %d4,%d2
8000738e:	80 42       	mov.d %d2,%a4
80007390:	1b 42 ae 21 	addi %d2,%d2,6884
80007394:	3f 42 0c 80 	jlt.u %d2,%d4,800073ac <sbrk+0x2e>
80007398:	91 00 00 46 	movh.a %a4,24576
8000739c:	80 42       	mov.d %d2,%a4
8000739e:	1b 42 ae 20 	addi %d2,%d2,2788
800073a2:	3f 24 0d 80 	jlt.u %d4,%d2,800073bc <sbrk+0x3e>
800073a6:	59 34 70 50 	st.w [%a3]1392 <60000570 <heap_top.0>>,%d4
800073aa:	00 90       	ret 
800073ac:	6d ff ba ff 	call 80007320 <__errno>
800073b0:	3b c0 00 20 	mov %d2,12
800073b4:	74 22       	st.w [%a2],%d2
800073b6:	a0 02       	mov.a %a2,0
800073b8:	b0 f2       	add.a %a2,-1
800073ba:	00 90       	ret 
800073bc:	6d ff cb ff 	call 80007352 <abort>

800073c0 <__do_global_ctors_aux>:
800073c0:	91 00 00 28 	movh.a %a2,32768
800073c4:	d9 22 48 07 	lea %a2,[%a2]29704 <80007408 <__CTOR_END__>>
800073c8:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
800073cc:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
800073d0:	df f2 0a 00 	jeq %d2,-1,800073e4 <__do_global_ctors_aux+0x24>
800073d4:	40 3c       	mov.aa %a12,%a3
800073d6:	60 22       	mov.a %a2,%d2
800073d8:	b0 cc       	add.a %a12,-4
800073da:	2d 02 00 00 	calli %a2
800073de:	54 c2       	ld.w %d2,[%a12]
800073e0:	df f2 fb ff 	jne %d2,-1,800073d6 <__do_global_ctors_aux+0x16>
800073e4:	00 90       	ret 
	...

Disassembly of section .init:

800073e8 <_init>:
800073e8:	6d ff 6c c9 	call 800006c0 <frame_dummy>
800073ec:	6d ff ea ff 	call 800073c0 <__do_global_ctors_aux>
800073f0:	00 90       	ret 
800073f2:	00 00       	nop 
800073f4:	00 00       	nop 
	...

Disassembly of section .fini:

800073f8 <_fini>:
800073f8:	6d ff 32 c9 	call 8000065c <__do_global_dtors_aux>
800073fc:	00 90       	ret 
	...

Disassembly of section .traptab_tc2:

801f6100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6100:	0d 00 00 02 	svlcx 
801f6104:	02 f4       	mov %d4,%d15
801f6106:	91 00 00 28 	movh.a %a2,32768
801f610a:	d9 22 24 84 	lea %a2,[%a2]16932 <80004224 <IfxCpu_Trap_memoryManagementError>>
801f610e:	dc 02       	ji %a2
801f6110:	00 80       	rfe 
	...
801f611e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6120:	0d 00 00 02 	svlcx 
801f6124:	02 f4       	mov %d4,%d15
801f6126:	91 00 00 28 	movh.a %a2,32768
801f612a:	d9 22 12 94 	lea %a2,[%a2]16978 <80004252 <IfxCpu_Trap_internalProtectionError>>
801f612e:	dc 02       	ji %a2
801f6130:	00 80       	rfe 
	...
801f613e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6140:	0d 00 00 02 	svlcx 
801f6144:	02 f4       	mov %d4,%d15
801f6146:	91 00 00 28 	movh.a %a2,32768
801f614a:	d9 22 00 a4 	lea %a2,[%a2]17024 <80004280 <IfxCpu_Trap_instructionError>>
801f614e:	dc 02       	ji %a2
801f6150:	00 80       	rfe 
	...
801f615e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6160:	02 f4       	mov %d4,%d15
801f6162:	91 00 00 28 	movh.a %a2,32768
801f6166:	d9 22 2e a4 	lea %a2,[%a2]17070 <800042ae <IfxCpu_Trap_contextManagementError>>
801f616a:	dc 02       	ji %a2
801f616c:	00 80       	rfe 
	...
801f617e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6180:	0d 00 00 02 	svlcx 
801f6184:	02 f4       	mov %d4,%d15
801f6186:	91 00 00 28 	movh.a %a2,32768
801f618a:	d9 22 1c b4 	lea %a2,[%a2]17116 <800042dc <IfxCpu_Trap_busError>>
801f618e:	dc 02       	ji %a2
801f6190:	00 80       	rfe 
	...
801f619e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f61a0:	0d 00 00 02 	svlcx 
801f61a4:	02 f4       	mov %d4,%d15
801f61a6:	91 00 00 28 	movh.a %a2,32768
801f61aa:	d9 22 0a c4 	lea %a2,[%a2]17162 <8000430a <IfxCpu_Trap_assertion>>
801f61ae:	dc 02       	ji %a2
801f61b0:	00 80       	rfe 
	...
801f61be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
801f61c0:	0d 00 00 02 	svlcx 
801f61c4:	02 f4       	mov %d4,%d15
801f61c6:	91 00 00 28 	movh.a %a2,32768
801f61ca:	d9 22 16 e4 	lea %a2,[%a2]17302 <80004396 <IfxCpu_Trap_systemCall_Cpu2>>
801f61ce:	dc 02       	ji %a2
801f61d0:	00 80       	rfe 
	...
801f61de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f61e0:	0d 00 00 02 	svlcx 
801f61e4:	02 f4       	mov %d4,%d15
801f61e6:	91 00 00 28 	movh.a %a2,32768
801f61ea:	d9 22 02 f4 	lea %a2,[%a2]17346 <800043c2 <IfxCpu_Trap_nonMaskableInterrupt>>
801f61ee:	dc 02       	ji %a2
801f61f0:	00 80       	rfe 
}
801f61f2:	00 90       	ret 

801f61f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc1:

801f6200 <IfxCpu_Trap_vectorTable1>:
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6200:	0d 00 00 02 	svlcx 
801f6204:	02 f4       	mov %d4,%d15
801f6206:	91 00 00 28 	movh.a %a2,32768
801f620a:	d9 22 24 84 	lea %a2,[%a2]16932 <80004224 <IfxCpu_Trap_memoryManagementError>>
801f620e:	dc 02       	ji %a2
801f6210:	00 80       	rfe 
	...
801f621e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6220:	0d 00 00 02 	svlcx 
801f6224:	02 f4       	mov %d4,%d15
801f6226:	91 00 00 28 	movh.a %a2,32768
801f622a:	d9 22 12 94 	lea %a2,[%a2]16978 <80004252 <IfxCpu_Trap_internalProtectionError>>
801f622e:	dc 02       	ji %a2
801f6230:	00 80       	rfe 
	...
801f623e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6240:	0d 00 00 02 	svlcx 
801f6244:	02 f4       	mov %d4,%d15
801f6246:	91 00 00 28 	movh.a %a2,32768
801f624a:	d9 22 00 a4 	lea %a2,[%a2]17024 <80004280 <IfxCpu_Trap_instructionError>>
801f624e:	dc 02       	ji %a2
801f6250:	00 80       	rfe 
	...
801f625e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6260:	02 f4       	mov %d4,%d15
801f6262:	91 00 00 28 	movh.a %a2,32768
801f6266:	d9 22 2e a4 	lea %a2,[%a2]17070 <800042ae <IfxCpu_Trap_contextManagementError>>
801f626a:	dc 02       	ji %a2
801f626c:	00 80       	rfe 
	...
801f627e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6280:	0d 00 00 02 	svlcx 
801f6284:	02 f4       	mov %d4,%d15
801f6286:	91 00 00 28 	movh.a %a2,32768
801f628a:	d9 22 1c b4 	lea %a2,[%a2]17116 <800042dc <IfxCpu_Trap_busError>>
801f628e:	dc 02       	ji %a2
801f6290:	00 80       	rfe 
	...
801f629e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f62a0:	0d 00 00 02 	svlcx 
801f62a4:	02 f4       	mov %d4,%d15
801f62a6:	91 00 00 28 	movh.a %a2,32768
801f62aa:	d9 22 0a c4 	lea %a2,[%a2]17162 <8000430a <IfxCpu_Trap_assertion>>
801f62ae:	dc 02       	ji %a2
801f62b0:	00 80       	rfe 
	...
801f62be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
801f62c0:	0d 00 00 02 	svlcx 
801f62c4:	02 f4       	mov %d4,%d15
801f62c6:	91 00 00 28 	movh.a %a2,32768
801f62ca:	d9 22 2a d4 	lea %a2,[%a2]17258 <8000436a <IfxCpu_Trap_systemCall_Cpu1>>
801f62ce:	dc 02       	ji %a2
801f62d0:	00 80       	rfe 
	...
801f62de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f62e0:	0d 00 00 02 	svlcx 
801f62e4:	02 f4       	mov %d4,%d15
801f62e6:	91 00 00 28 	movh.a %a2,32768
801f62ea:	d9 22 02 f4 	lea %a2,[%a2]17346 <800043c2 <IfxCpu_Trap_nonMaskableInterrupt>>
801f62ee:	dc 02       	ji %a2
801f62f0:	00 80       	rfe 
}
801f62f2:	00 90       	ret 

801f62f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .inttab_tc0_004:

801f4080 <__intvec_tc0_4>:
801f4080:	0d 00 00 02 	svlcx 
801f4084:	91 00 00 e8 	movh.a %a14,32768
801f4088:	d9 ee 56 e0 	lea %a14,[%a14]1942 <80000796 <asc0RxISR>>
801f408c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_008:

801f4100 <__intvec_tc0_8>:
801f4100:	0d 00 00 02 	svlcx 
801f4104:	91 00 00 e8 	movh.a %a14,32768
801f4108:	d9 ee 42 e0 	lea %a14,[%a14]1922 <80000782 <asc0TxISR>>
801f410c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_00C:

801f4180 <__intvec_tc0_12>:
801f4180:	0d 00 00 02 	svlcx 
801f4184:	91 00 00 e8 	movh.a %a14,32768
801f4188:	d9 ee 4e f0 	lea %a14,[%a14]1998 <800007ce <asc0ErrISR>>
801f418c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_064:

801f4c80 <__intvec_tc0_100>:
801f4c80:	0d 00 00 02 	svlcx 
801f4c84:	91 00 00 e8 	movh.a %a14,32768
801f4c88:	d9 ee ba 20 	lea %a14,[%a14]2234 <800008ba <ISR_STM>>
801f4c8c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_0C8:

801f5900 <__intvec_tc0_200>:
801f5900:	0d 00 00 02 	svlcx 
801f5904:	91 00 00 e8 	movh.a %a14,32768
801f5908:	d9 ee 8c 50 	lea %a14,[%a14]2380 <8000094c <ISR_PWM_GTM>>
801f590c:	dc 0e       	ji %a14
