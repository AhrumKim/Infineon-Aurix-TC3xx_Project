
00_TesT.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bmhd_0       00000020  80000000  80000000  00000234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .bmhd_1       00000020  80020000  80020000  000026a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .startup      00000010  80000020  80000020  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .interface_const 00000000  80000040  80000040  000028c4  2**0
                  CONTENTS
  4 .traptab_tc0  00000100  80000100  80000100  00000280  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .rodata       000001d0  80000200  80000200  00000380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .CPU2.zbss    00000000  50000000  50000000  000028c4  2**0
                  CONTENTS
  7 .CPU2.bss     00000000  50000000  50000000  000028c4  2**0
                  CONTENTS
  8 .CPU1.zbss    00000000  60000000  60000000  000028c4  2**0
                  CONTENTS
  9 .CPU1.bss     00000000  60001018  60001018  000028c4  2**0
                  CONTENTS
 10 .CPU0.zbss    00000000  70000000  70000000  000028c4  2**0
                  CONTENTS
 11 .CPU0.bss     00000000  70000000  70000000  000028c4  2**0
                  CONTENTS
 12 .zbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC
 13 .sbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC, SMALL_DATA
 14 .bss          00000010  60000008  801f6304  000028c8  2**3
                  ALLOC
 15 .CPU2.zdata   00000000  50000000  50000000  000028c4  2**0
                  CONTENTS
 16 .CPU2.data    00000000  50000000  50000000  000028c4  2**0
                  CONTENTS
 17 .CPU1.zdata   00000000  60000000  60000000  000028c4  2**0
                  CONTENTS
 18 .CPU1.data    00000000  60001018  60001018  000028c4  2**0
                  CONTENTS
 19 .CPU0.zdata   00000000  70000000  70000000  000028c4  2**0
                  CONTENTS
 20 .CPU0.data    00000000  70000000  70000000  000028c4  2**0
                  CONTENTS
 21 .zdata        00000000  60000000  801f6304  000028c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .sdata        00000000  60000000  801f6304  000028c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
 23 .data         00000004  60000000  801f6300  000028c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 24 .lmu_zdata    00000000  90000000  90000000  000028c4  2**0
                  CONTENTS
 25 .lmu_sdata    00000000  90000000  90000000  000028c4  2**0
                  CONTENTS
 26 .lmu_data     00000000  90000000  90000000  000028c4  2**0
                  CONTENTS
 27 .CPU0.psram_text 00000000  70100000  70100000  000028c4  2**0
                  CONTENTS
 28 .CPU1.psram_text 00000000  60100000  60100000  000028c4  2**0
                  CONTENTS
 29 .CPU2.psram_text 00000000  50100000  50100000  000028c4  2**0
                  CONTENTS
 30 .text         0000211c  800003d0  800003d0  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .init         0000000c  800024ec  800024ec  0000266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .fini         00000008  800024f8  800024f8  00002678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .eh_frame     00000000  80002500  80002500  000028c4  2**0
                  CONTENTS
 34 .gcc_except_table 00000000  80002500  80002500  000028c4  2**0
                  CONTENTS
 35 .ctors        00000010  80002500  80002500  00002680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 36 .dtors        00000010  80002510  80002510  00002690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 37 .traptab_tc2  00000100  801f6100  801f6100  000026c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 38 .traptab_tc1  00000100  801f6200  801f6200  000027c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 39 .heap         00001000  60000018  801f6304  000028c4  2**0
                  ALLOC
 40 .CPU2.ustack  00000800  5001ae00  5001ae00  00000234  2**0
                  ALLOC
 41 .CPU2.istack  00000400  5001b700  5001b700  00000234  2**0
                  ALLOC
 42 .CPU2.csa     00002000  5001bc00  5001bc00  00000234  2**0
                  ALLOC
 43 .CPU1.ustack  00000800  6001ae00  6001ae00  00000234  2**0
                  ALLOC
 44 .CPU1.istack  00000400  6001b700  6001b700  00000234  2**0
                  ALLOC
 45 .CPU1.csa     00002000  6001bc00  6001bc00  00000234  2**0
                  ALLOC
 46 .CPU0.ustack  00000800  70018e00  70018e00  00000234  2**0
                  ALLOC
 47 .CPU0.istack  00000400  70019700  70019700  00000234  2**0
                  ALLOC
 48 .CPU0.csa     00002000  70019c00  70019c00  00000234  2**0
                  ALLOC
 49 .inttab_tc0_000 00000000  801f4000  801f4000  000028c4  2**0
                  CONTENTS
 50 .inttab_tc0_001 00000000  801f4020  801f4020  000028c4  2**0
                  CONTENTS
 51 .inttab_tc0_002 00000000  801f4040  801f4040  000028c4  2**0
                  CONTENTS
 52 .inttab_tc0_003 00000000  801f4060  801f4060  000028c4  2**0
                  CONTENTS
 53 .inttab_tc0_004 00000000  801f4080  801f4080  000028c4  2**0
                  CONTENTS
 54 .inttab_tc0_005 00000000  801f40a0  801f40a0  000028c4  2**0
                  CONTENTS
 55 .inttab_tc0_006 00000000  801f40c0  801f40c0  000028c4  2**0
                  CONTENTS
 56 .inttab_tc0_007 00000000  801f40e0  801f40e0  000028c4  2**0
                  CONTENTS
 57 .inttab_tc0_008 00000000  801f4100  801f4100  000028c4  2**0
                  CONTENTS
 58 .inttab_tc0_009 00000000  801f4120  801f4120  000028c4  2**0
                  CONTENTS
 59 .inttab_tc0_00A 00000000  801f4140  801f4140  000028c4  2**0
                  CONTENTS
 60 .inttab_tc0_00B 00000000  801f4160  801f4160  000028c4  2**0
                  CONTENTS
 61 .inttab_tc0_00C 00000000  801f4180  801f4180  000028c4  2**0
                  CONTENTS
 62 .inttab_tc0_00D 00000000  801f41a0  801f41a0  000028c4  2**0
                  CONTENTS
 63 .inttab_tc0_00E 00000000  801f41c0  801f41c0  000028c4  2**0
                  CONTENTS
 64 .inttab_tc0_00F 00000000  801f41e0  801f41e0  000028c4  2**0
                  CONTENTS
 65 .inttab_tc0_010 00000000  801f4200  801f4200  000028c4  2**0
                  CONTENTS
 66 .inttab_tc0_011 00000000  801f4220  801f4220  000028c4  2**0
                  CONTENTS
 67 .inttab_tc0_012 00000000  801f4240  801f4240  000028c4  2**0
                  CONTENTS
 68 .inttab_tc0_013 00000000  801f4260  801f4260  000028c4  2**0
                  CONTENTS
 69 .inttab_tc0_014 00000000  801f4280  801f4280  000028c4  2**0
                  CONTENTS
 70 .inttab_tc0_015 00000000  801f42a0  801f42a0  000028c4  2**0
                  CONTENTS
 71 .inttab_tc0_016 00000000  801f42c0  801f42c0  000028c4  2**0
                  CONTENTS
 72 .inttab_tc0_017 00000000  801f42e0  801f42e0  000028c4  2**0
                  CONTENTS
 73 .inttab_tc0_018 00000000  801f4300  801f4300  000028c4  2**0
                  CONTENTS
 74 .inttab_tc0_019 00000000  801f4320  801f4320  000028c4  2**0
                  CONTENTS
 75 .inttab_tc0_01A 00000000  801f4340  801f4340  000028c4  2**0
                  CONTENTS
 76 .inttab_tc0_01B 00000000  801f4360  801f4360  000028c4  2**0
                  CONTENTS
 77 .inttab_tc0_01C 00000000  801f4380  801f4380  000028c4  2**0
                  CONTENTS
 78 .inttab_tc0_01D 00000000  801f43a0  801f43a0  000028c4  2**0
                  CONTENTS
 79 .inttab_tc0_01E 00000000  801f43c0  801f43c0  000028c4  2**0
                  CONTENTS
 80 .inttab_tc0_01F 00000000  801f43e0  801f43e0  000028c4  2**0
                  CONTENTS
 81 .inttab_tc0_020 00000000  801f4400  801f4400  000028c4  2**0
                  CONTENTS
 82 .inttab_tc0_021 00000000  801f4420  801f4420  000028c4  2**0
                  CONTENTS
 83 .inttab_tc0_022 00000000  801f4440  801f4440  000028c4  2**0
                  CONTENTS
 84 .inttab_tc0_023 00000000  801f4460  801f4460  000028c4  2**0
                  CONTENTS
 85 .inttab_tc0_024 00000000  801f4480  801f4480  000028c4  2**0
                  CONTENTS
 86 .inttab_tc0_025 00000000  801f44a0  801f44a0  000028c4  2**0
                  CONTENTS
 87 .inttab_tc0_026 00000000  801f44c0  801f44c0  000028c4  2**0
                  CONTENTS
 88 .inttab_tc0_027 00000000  801f44e0  801f44e0  000028c4  2**0
                  CONTENTS
 89 .inttab_tc0_028 00000000  801f4500  801f4500  000028c4  2**0
                  CONTENTS
 90 .inttab_tc0_029 00000000  801f4520  801f4520  000028c4  2**0
                  CONTENTS
 91 .inttab_tc0_02A 00000000  801f4540  801f4540  000028c4  2**0
                  CONTENTS
 92 .inttab_tc0_02B 00000000  801f4560  801f4560  000028c4  2**0
                  CONTENTS
 93 .inttab_tc0_02C 00000000  801f4580  801f4580  000028c4  2**0
                  CONTENTS
 94 .inttab_tc0_02D 00000000  801f45a0  801f45a0  000028c4  2**0
                  CONTENTS
 95 .inttab_tc0_02E 00000000  801f45c0  801f45c0  000028c4  2**0
                  CONTENTS
 96 .inttab_tc0_02F 00000000  801f45e0  801f45e0  000028c4  2**0
                  CONTENTS
 97 .inttab_tc0_030 00000000  801f4600  801f4600  000028c4  2**0
                  CONTENTS
 98 .inttab_tc0_031 00000000  801f4620  801f4620  000028c4  2**0
                  CONTENTS
 99 .inttab_tc0_032 00000000  801f4640  801f4640  000028c4  2**0
                  CONTENTS
100 .inttab_tc0_033 00000000  801f4660  801f4660  000028c4  2**0
                  CONTENTS
101 .inttab_tc0_034 00000000  801f4680  801f4680  000028c4  2**0
                  CONTENTS
102 .inttab_tc0_035 00000000  801f46a0  801f46a0  000028c4  2**0
                  CONTENTS
103 .inttab_tc0_036 00000000  801f46c0  801f46c0  000028c4  2**0
                  CONTENTS
104 .inttab_tc0_037 00000000  801f46e0  801f46e0  000028c4  2**0
                  CONTENTS
105 .inttab_tc0_038 00000000  801f4700  801f4700  000028c4  2**0
                  CONTENTS
106 .inttab_tc0_039 00000000  801f4720  801f4720  000028c4  2**0
                  CONTENTS
107 .inttab_tc0_03A 00000000  801f4740  801f4740  000028c4  2**0
                  CONTENTS
108 .inttab_tc0_03B 00000000  801f4760  801f4760  000028c4  2**0
                  CONTENTS
109 .inttab_tc0_03C 00000000  801f4780  801f4780  000028c4  2**0
                  CONTENTS
110 .inttab_tc0_03D 00000000  801f47a0  801f47a0  000028c4  2**0
                  CONTENTS
111 .inttab_tc0_03E 00000000  801f47c0  801f47c0  000028c4  2**0
                  CONTENTS
112 .inttab_tc0_03F 00000000  801f47e0  801f47e0  000028c4  2**0
                  CONTENTS
113 .inttab_tc0_040 00000000  801f4800  801f4800  000028c4  2**0
                  CONTENTS
114 .inttab_tc0_041 00000000  801f4820  801f4820  000028c4  2**0
                  CONTENTS
115 .inttab_tc0_042 00000000  801f4840  801f4840  000028c4  2**0
                  CONTENTS
116 .inttab_tc0_043 00000000  801f4860  801f4860  000028c4  2**0
                  CONTENTS
117 .inttab_tc0_044 00000000  801f4880  801f4880  000028c4  2**0
                  CONTENTS
118 .inttab_tc0_045 00000000  801f48a0  801f48a0  000028c4  2**0
                  CONTENTS
119 .inttab_tc0_046 00000000  801f48c0  801f48c0  000028c4  2**0
                  CONTENTS
120 .inttab_tc0_047 00000000  801f48e0  801f48e0  000028c4  2**0
                  CONTENTS
121 .inttab_tc0_048 00000000  801f4900  801f4900  000028c4  2**0
                  CONTENTS
122 .inttab_tc0_049 00000000  801f4920  801f4920  000028c4  2**0
                  CONTENTS
123 .inttab_tc0_04A 00000000  801f4940  801f4940  000028c4  2**0
                  CONTENTS
124 .inttab_tc0_04B 00000000  801f4960  801f4960  000028c4  2**0
                  CONTENTS
125 .inttab_tc0_04C 00000000  801f4980  801f4980  000028c4  2**0
                  CONTENTS
126 .inttab_tc0_04D 00000000  801f49a0  801f49a0  000028c4  2**0
                  CONTENTS
127 .inttab_tc0_04E 00000000  801f49c0  801f49c0  000028c4  2**0
                  CONTENTS
128 .inttab_tc0_04F 00000000  801f49e0  801f49e0  000028c4  2**0
                  CONTENTS
129 .inttab_tc0_050 00000000  801f4a00  801f4a00  000028c4  2**0
                  CONTENTS
130 .inttab_tc0_051 00000000  801f4a20  801f4a20  000028c4  2**0
                  CONTENTS
131 .inttab_tc0_052 00000000  801f4a40  801f4a40  000028c4  2**0
                  CONTENTS
132 .inttab_tc0_053 00000000  801f4a60  801f4a60  000028c4  2**0
                  CONTENTS
133 .inttab_tc0_054 00000000  801f4a80  801f4a80  000028c4  2**0
                  CONTENTS
134 .inttab_tc0_055 00000000  801f4aa0  801f4aa0  000028c4  2**0
                  CONTENTS
135 .inttab_tc0_056 00000000  801f4ac0  801f4ac0  000028c4  2**0
                  CONTENTS
136 .inttab_tc0_057 00000000  801f4ae0  801f4ae0  000028c4  2**0
                  CONTENTS
137 .inttab_tc0_058 00000000  801f4b00  801f4b00  000028c4  2**0
                  CONTENTS
138 .inttab_tc0_059 00000000  801f4b20  801f4b20  000028c4  2**0
                  CONTENTS
139 .inttab_tc0_05A 00000000  801f4b40  801f4b40  000028c4  2**0
                  CONTENTS
140 .inttab_tc0_05B 00000000  801f4b60  801f4b60  000028c4  2**0
                  CONTENTS
141 .inttab_tc0_05C 00000000  801f4b80  801f4b80  000028c4  2**0
                  CONTENTS
142 .inttab_tc0_05D 00000000  801f4ba0  801f4ba0  000028c4  2**0
                  CONTENTS
143 .inttab_tc0_05E 00000000  801f4bc0  801f4bc0  000028c4  2**0
                  CONTENTS
144 .inttab_tc0_05F 00000000  801f4be0  801f4be0  000028c4  2**0
                  CONTENTS
145 .inttab_tc0_060 00000000  801f4c00  801f4c00  000028c4  2**0
                  CONTENTS
146 .inttab_tc0_061 00000000  801f4c20  801f4c20  000028c4  2**0
                  CONTENTS
147 .inttab_tc0_062 00000000  801f4c40  801f4c40  000028c4  2**0
                  CONTENTS
148 .inttab_tc0_063 00000000  801f4c60  801f4c60  000028c4  2**0
                  CONTENTS
149 .inttab_tc0_064 00000000  801f4c80  801f4c80  000028c4  2**0
                  CONTENTS
150 .inttab_tc0_065 00000000  801f4ca0  801f4ca0  000028c4  2**0
                  CONTENTS
151 .inttab_tc0_066 00000000  801f4cc0  801f4cc0  000028c4  2**0
                  CONTENTS
152 .inttab_tc0_067 00000000  801f4ce0  801f4ce0  000028c4  2**0
                  CONTENTS
153 .inttab_tc0_068 00000000  801f4d00  801f4d00  000028c4  2**0
                  CONTENTS
154 .inttab_tc0_069 00000000  801f4d20  801f4d20  000028c4  2**0
                  CONTENTS
155 .inttab_tc0_06A 00000000  801f4d40  801f4d40  000028c4  2**0
                  CONTENTS
156 .inttab_tc0_06B 00000000  801f4d60  801f4d60  000028c4  2**0
                  CONTENTS
157 .inttab_tc0_06C 00000000  801f4d80  801f4d80  000028c4  2**0
                  CONTENTS
158 .inttab_tc0_06D 00000000  801f4da0  801f4da0  000028c4  2**0
                  CONTENTS
159 .inttab_tc0_06E 00000000  801f4dc0  801f4dc0  000028c4  2**0
                  CONTENTS
160 .inttab_tc0_06F 00000000  801f4de0  801f4de0  000028c4  2**0
                  CONTENTS
161 .inttab_tc0_070 00000000  801f4e00  801f4e00  000028c4  2**0
                  CONTENTS
162 .inttab_tc0_071 00000000  801f4e20  801f4e20  000028c4  2**0
                  CONTENTS
163 .inttab_tc0_072 00000000  801f4e40  801f4e40  000028c4  2**0
                  CONTENTS
164 .inttab_tc0_073 00000000  801f4e60  801f4e60  000028c4  2**0
                  CONTENTS
165 .inttab_tc0_074 00000000  801f4e80  801f4e80  000028c4  2**0
                  CONTENTS
166 .inttab_tc0_075 00000000  801f4ea0  801f4ea0  000028c4  2**0
                  CONTENTS
167 .inttab_tc0_076 00000000  801f4ec0  801f4ec0  000028c4  2**0
                  CONTENTS
168 .inttab_tc0_077 00000000  801f4ee0  801f4ee0  000028c4  2**0
                  CONTENTS
169 .inttab_tc0_078 00000000  801f4f00  801f4f00  000028c4  2**0
                  CONTENTS
170 .inttab_tc0_079 00000000  801f4f20  801f4f20  000028c4  2**0
                  CONTENTS
171 .inttab_tc0_07A 00000000  801f4f40  801f4f40  000028c4  2**0
                  CONTENTS
172 .inttab_tc0_07B 00000000  801f4f60  801f4f60  000028c4  2**0
                  CONTENTS
173 .inttab_tc0_07C 00000000  801f4f80  801f4f80  000028c4  2**0
                  CONTENTS
174 .inttab_tc0_07D 00000000  801f4fa0  801f4fa0  000028c4  2**0
                  CONTENTS
175 .inttab_tc0_07E 00000000  801f4fc0  801f4fc0  000028c4  2**0
                  CONTENTS
176 .inttab_tc0_07F 00000000  801f4fe0  801f4fe0  000028c4  2**0
                  CONTENTS
177 .inttab_tc0_080 00000000  801f5000  801f5000  000028c4  2**0
                  CONTENTS
178 .inttab_tc0_081 00000000  801f5020  801f5020  000028c4  2**0
                  CONTENTS
179 .inttab_tc0_082 00000000  801f5040  801f5040  000028c4  2**0
                  CONTENTS
180 .inttab_tc0_083 00000000  801f5060  801f5060  000028c4  2**0
                  CONTENTS
181 .inttab_tc0_084 00000000  801f5080  801f5080  000028c4  2**0
                  CONTENTS
182 .inttab_tc0_085 00000000  801f50a0  801f50a0  000028c4  2**0
                  CONTENTS
183 .inttab_tc0_086 00000000  801f50c0  801f50c0  000028c4  2**0
                  CONTENTS
184 .inttab_tc0_087 00000000  801f50e0  801f50e0  000028c4  2**0
                  CONTENTS
185 .inttab_tc0_088 00000000  801f5100  801f5100  000028c4  2**0
                  CONTENTS
186 .inttab_tc0_089 00000000  801f5120  801f5120  000028c4  2**0
                  CONTENTS
187 .inttab_tc0_08A 00000000  801f5140  801f5140  000028c4  2**0
                  CONTENTS
188 .inttab_tc0_08B 00000000  801f5160  801f5160  000028c4  2**0
                  CONTENTS
189 .inttab_tc0_08C 00000000  801f5180  801f5180  000028c4  2**0
                  CONTENTS
190 .inttab_tc0_08D 00000000  801f51a0  801f51a0  000028c4  2**0
                  CONTENTS
191 .inttab_tc0_08E 00000000  801f51c0  801f51c0  000028c4  2**0
                  CONTENTS
192 .inttab_tc0_08F 00000000  801f51e0  801f51e0  000028c4  2**0
                  CONTENTS
193 .inttab_tc0_090 00000000  801f5200  801f5200  000028c4  2**0
                  CONTENTS
194 .inttab_tc0_091 00000000  801f5220  801f5220  000028c4  2**0
                  CONTENTS
195 .inttab_tc0_092 00000000  801f5240  801f5240  000028c4  2**0
                  CONTENTS
196 .inttab_tc0_093 00000000  801f5260  801f5260  000028c4  2**0
                  CONTENTS
197 .inttab_tc0_094 00000000  801f5280  801f5280  000028c4  2**0
                  CONTENTS
198 .inttab_tc0_095 00000000  801f52a0  801f52a0  000028c4  2**0
                  CONTENTS
199 .inttab_tc0_096 00000000  801f52c0  801f52c0  000028c4  2**0
                  CONTENTS
200 .inttab_tc0_097 00000000  801f52e0  801f52e0  000028c4  2**0
                  CONTENTS
201 .inttab_tc0_098 00000000  801f5300  801f5300  000028c4  2**0
                  CONTENTS
202 .inttab_tc0_099 00000000  801f5320  801f5320  000028c4  2**0
                  CONTENTS
203 .inttab_tc0_09A 00000000  801f5340  801f5340  000028c4  2**0
                  CONTENTS
204 .inttab_tc0_09B 00000000  801f5360  801f5360  000028c4  2**0
                  CONTENTS
205 .inttab_tc0_09C 00000000  801f5380  801f5380  000028c4  2**0
                  CONTENTS
206 .inttab_tc0_09D 00000000  801f53a0  801f53a0  000028c4  2**0
                  CONTENTS
207 .inttab_tc0_09E 00000000  801f53c0  801f53c0  000028c4  2**0
                  CONTENTS
208 .inttab_tc0_09F 00000000  801f53e0  801f53e0  000028c4  2**0
                  CONTENTS
209 .inttab_tc0_0A0 00000000  801f5400  801f5400  000028c4  2**0
                  CONTENTS
210 .inttab_tc0_0A1 00000000  801f5420  801f5420  000028c4  2**0
                  CONTENTS
211 .inttab_tc0_0A2 00000000  801f5440  801f5440  000028c4  2**0
                  CONTENTS
212 .inttab_tc0_0A3 00000000  801f5460  801f5460  000028c4  2**0
                  CONTENTS
213 .inttab_tc0_0A4 00000000  801f5480  801f5480  000028c4  2**0
                  CONTENTS
214 .inttab_tc0_0A5 00000000  801f54a0  801f54a0  000028c4  2**0
                  CONTENTS
215 .inttab_tc0_0A6 00000000  801f54c0  801f54c0  000028c4  2**0
                  CONTENTS
216 .inttab_tc0_0A7 00000000  801f54e0  801f54e0  000028c4  2**0
                  CONTENTS
217 .inttab_tc0_0A8 00000000  801f5500  801f5500  000028c4  2**0
                  CONTENTS
218 .inttab_tc0_0A9 00000000  801f5520  801f5520  000028c4  2**0
                  CONTENTS
219 .inttab_tc0_0AA 00000000  801f5540  801f5540  000028c4  2**0
                  CONTENTS
220 .inttab_tc0_0AB 00000000  801f5560  801f5560  000028c4  2**0
                  CONTENTS
221 .inttab_tc0_0AC 00000000  801f5580  801f5580  000028c4  2**0
                  CONTENTS
222 .inttab_tc0_0AD 00000000  801f55a0  801f55a0  000028c4  2**0
                  CONTENTS
223 .inttab_tc0_0AE 00000000  801f55c0  801f55c0  000028c4  2**0
                  CONTENTS
224 .inttab_tc0_0AF 00000000  801f55e0  801f55e0  000028c4  2**0
                  CONTENTS
225 .inttab_tc0_0B0 00000000  801f5600  801f5600  000028c4  2**0
                  CONTENTS
226 .inttab_tc0_0B1 00000000  801f5620  801f5620  000028c4  2**0
                  CONTENTS
227 .inttab_tc0_0B2 00000000  801f5640  801f5640  000028c4  2**0
                  CONTENTS
228 .inttab_tc0_0B3 00000000  801f5660  801f5660  000028c4  2**0
                  CONTENTS
229 .inttab_tc0_0B4 00000000  801f5680  801f5680  000028c4  2**0
                  CONTENTS
230 .inttab_tc0_0B5 00000000  801f56a0  801f56a0  000028c4  2**0
                  CONTENTS
231 .inttab_tc0_0B6 00000000  801f56c0  801f56c0  000028c4  2**0
                  CONTENTS
232 .inttab_tc0_0B7 00000000  801f56e0  801f56e0  000028c4  2**0
                  CONTENTS
233 .inttab_tc0_0B8 00000000  801f5700  801f5700  000028c4  2**0
                  CONTENTS
234 .inttab_tc0_0B9 00000000  801f5720  801f5720  000028c4  2**0
                  CONTENTS
235 .inttab_tc0_0BA 00000000  801f5740  801f5740  000028c4  2**0
                  CONTENTS
236 .inttab_tc0_0BB 00000000  801f5760  801f5760  000028c4  2**0
                  CONTENTS
237 .inttab_tc0_0BC 00000000  801f5780  801f5780  000028c4  2**0
                  CONTENTS
238 .inttab_tc0_0BD 00000000  801f57a0  801f57a0  000028c4  2**0
                  CONTENTS
239 .inttab_tc0_0BE 00000000  801f57c0  801f57c0  000028c4  2**0
                  CONTENTS
240 .inttab_tc0_0BF 00000000  801f57e0  801f57e0  000028c4  2**0
                  CONTENTS
241 .inttab_tc0_0C0 00000000  801f5800  801f5800  000028c4  2**0
                  CONTENTS
242 .inttab_tc0_0C1 00000000  801f5820  801f5820  000028c4  2**0
                  CONTENTS
243 .inttab_tc0_0C2 00000000  801f5840  801f5840  000028c4  2**0
                  CONTENTS
244 .inttab_tc0_0C3 00000000  801f5860  801f5860  000028c4  2**0
                  CONTENTS
245 .inttab_tc0_0C4 00000000  801f5880  801f5880  000028c4  2**0
                  CONTENTS
246 .inttab_tc0_0C5 00000000  801f58a0  801f58a0  000028c4  2**0
                  CONTENTS
247 .inttab_tc0_0C6 00000000  801f58c0  801f58c0  000028c4  2**0
                  CONTENTS
248 .inttab_tc0_0C7 00000000  801f58e0  801f58e0  000028c4  2**0
                  CONTENTS
249 .inttab_tc0_0C8 00000000  801f5900  801f5900  000028c4  2**0
                  CONTENTS
250 .inttab_tc0_0C9 00000000  801f5920  801f5920  000028c4  2**0
                  CONTENTS
251 .inttab_tc0_0CA 00000000  801f5940  801f5940  000028c4  2**0
                  CONTENTS
252 .inttab_tc0_0CB 00000000  801f5960  801f5960  000028c4  2**0
                  CONTENTS
253 .inttab_tc0_0CC 00000000  801f5980  801f5980  000028c4  2**0
                  CONTENTS
254 .inttab_tc0_0CD 00000000  801f59a0  801f59a0  000028c4  2**0
                  CONTENTS
255 .inttab_tc0_0CE 00000000  801f59c0  801f59c0  000028c4  2**0
                  CONTENTS
256 .inttab_tc0_0CF 00000000  801f59e0  801f59e0  000028c4  2**0
                  CONTENTS
257 .inttab_tc0_0D0 00000000  801f5a00  801f5a00  000028c4  2**0
                  CONTENTS
258 .inttab_tc0_0D1 00000000  801f5a20  801f5a20  000028c4  2**0
                  CONTENTS
259 .inttab_tc0_0D2 00000000  801f5a40  801f5a40  000028c4  2**0
                  CONTENTS
260 .inttab_tc0_0D3 00000000  801f5a60  801f5a60  000028c4  2**0
                  CONTENTS
261 .inttab_tc0_0D4 00000000  801f5a80  801f5a80  000028c4  2**0
                  CONTENTS
262 .inttab_tc0_0D5 00000000  801f5aa0  801f5aa0  000028c4  2**0
                  CONTENTS
263 .inttab_tc0_0D6 00000000  801f5ac0  801f5ac0  000028c4  2**0
                  CONTENTS
264 .inttab_tc0_0D7 00000000  801f5ae0  801f5ae0  000028c4  2**0
                  CONTENTS
265 .inttab_tc0_0D8 00000000  801f5b00  801f5b00  000028c4  2**0
                  CONTENTS
266 .inttab_tc0_0D9 00000000  801f5b20  801f5b20  000028c4  2**0
                  CONTENTS
267 .inttab_tc0_0DA 00000000  801f5b40  801f5b40  000028c4  2**0
                  CONTENTS
268 .inttab_tc0_0DB 00000000  801f5b60  801f5b60  000028c4  2**0
                  CONTENTS
269 .inttab_tc0_0DC 00000000  801f5b80  801f5b80  000028c4  2**0
                  CONTENTS
270 .inttab_tc0_0DD 00000000  801f5ba0  801f5ba0  000028c4  2**0
                  CONTENTS
271 .inttab_tc0_0DE 00000000  801f5bc0  801f5bc0  000028c4  2**0
                  CONTENTS
272 .inttab_tc0_0DF 00000000  801f5be0  801f5be0  000028c4  2**0
                  CONTENTS
273 .inttab_tc0_0E0 00000000  801f5c00  801f5c00  000028c4  2**0
                  CONTENTS
274 .inttab_tc0_0E1 00000000  801f5c20  801f5c20  000028c4  2**0
                  CONTENTS
275 .inttab_tc0_0E2 00000000  801f5c40  801f5c40  000028c4  2**0
                  CONTENTS
276 .inttab_tc0_0E3 00000000  801f5c60  801f5c60  000028c4  2**0
                  CONTENTS
277 .inttab_tc0_0E4 00000000  801f5c80  801f5c80  000028c4  2**0
                  CONTENTS
278 .inttab_tc0_0E5 00000000  801f5ca0  801f5ca0  000028c4  2**0
                  CONTENTS
279 .inttab_tc0_0E6 00000000  801f5cc0  801f5cc0  000028c4  2**0
                  CONTENTS
280 .inttab_tc0_0E7 00000000  801f5ce0  801f5ce0  000028c4  2**0
                  CONTENTS
281 .inttab_tc0_0E8 00000000  801f5d00  801f5d00  000028c4  2**0
                  CONTENTS
282 .inttab_tc0_0E9 00000000  801f5d20  801f5d20  000028c4  2**0
                  CONTENTS
283 .inttab_tc0_0EA 00000000  801f5d40  801f5d40  000028c4  2**0
                  CONTENTS
284 .inttab_tc0_0EB 00000000  801f5d60  801f5d60  000028c4  2**0
                  CONTENTS
285 .inttab_tc0_0EC 00000000  801f5d80  801f5d80  000028c4  2**0
                  CONTENTS
286 .inttab_tc0_0ED 00000000  801f5da0  801f5da0  000028c4  2**0
                  CONTENTS
287 .inttab_tc0_0EE 00000000  801f5dc0  801f5dc0  000028c4  2**0
                  CONTENTS
288 .inttab_tc0_0EF 00000000  801f5de0  801f5de0  000028c4  2**0
                  CONTENTS
289 .inttab_tc0_0F0 00000000  801f5e00  801f5e00  000028c4  2**0
                  CONTENTS
290 .inttab_tc0_0F1 00000000  801f5e20  801f5e20  000028c4  2**0
                  CONTENTS
291 .inttab_tc0_0F2 00000000  801f5e40  801f5e40  000028c4  2**0
                  CONTENTS
292 .inttab_tc0_0F3 00000000  801f5e60  801f5e60  000028c4  2**0
                  CONTENTS
293 .inttab_tc0_0F4 00000000  801f5e80  801f5e80  000028c4  2**0
                  CONTENTS
294 .inttab_tc0_0F5 00000000  801f5ea0  801f5ea0  000028c4  2**0
                  CONTENTS
295 .inttab_tc0_0F6 00000000  801f5ec0  801f5ec0  000028c4  2**0
                  CONTENTS
296 .inttab_tc0_0F7 00000000  801f5ee0  801f5ee0  000028c4  2**0
                  CONTENTS
297 .inttab_tc0_0F8 00000000  801f5f00  801f5f00  000028c4  2**0
                  CONTENTS
298 .inttab_tc0_0F9 00000000  801f5f20  801f5f20  000028c4  2**0
                  CONTENTS
299 .inttab_tc0_0FA 00000000  801f5f40  801f5f40  000028c4  2**0
                  CONTENTS
300 .inttab_tc0_0FB 00000000  801f5f60  801f5f60  000028c4  2**0
                  CONTENTS
301 .inttab_tc0_0FC 00000000  801f5f80  801f5f80  000028c4  2**0
                  CONTENTS
302 .inttab_tc0_0FD 00000000  801f5fa0  801f5fa0  000028c4  2**0
                  CONTENTS
303 .inttab_tc0_0FE 00000000  801f5fc0  801f5fc0  000028c4  2**0
                  CONTENTS
304 .inttab_tc0_0FF 00000000  801f5fe0  801f5fe0  000028c4  2**0
                  CONTENTS
305 .comment      0000001b  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY
306 .debug_aranges 000005a8  00000000  00000000  000028e0  2**3
                  CONTENTS, READONLY, DEBUGGING
307 .debug_info   00040fb6  00000000  00000000  00002e88  2**0
                  CONTENTS, READONLY, DEBUGGING
308 .debug_abbrev 0000321a  00000000  00000000  00043e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
309 .debug_line   000090ae  00000000  00000000  00047058  2**0
                  CONTENTS, READONLY, DEBUGGING
310 .debug_frame  00000ab8  00000000  00000000  00050108  2**2
                  CONTENTS, READONLY, DEBUGGING
311 .debug_str    00000d34  00000000  00000000  00050bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
312 .debug_loc    00003513  00000000  00000000  000518f4  2**0
                  CONTENTS, READONLY, DEBUGGING
313 .debug_ranges 00000920  00000000  00000000  00054e08  2**3
                  CONTENTS, READONLY, DEBUGGING
314 .debug_macro  0000dc69  00000000  00000000  00055728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startup:

80000020 <_START>:
#elif defined(__DCC__)
#pragma section CODE ".start" X
#endif

void _START(void)
{
80000020:	40 ae       	mov.aa %a14,%sp
    __non_return_call(_Core0_start);
80000022:	91 00 00 28 	movh.a %a2,32768
80000026:	d9 22 2c 61 	lea %a2,[%a2]4524 <800011ac <_Core0_start>>
8000002a:	dc 02       	ji %a2
}
8000002c:	00 90       	ret 

8000002e <_START_end>:
8000002e:	08 00       	ld.bu %d0,[%a15]0

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 ee 50 	lea %a2,[%a2]3438 <80000d6e <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 dc 60 	lea %a2,[%a2]3484 <80000d9c <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 ca 70 	lea %a2,[%a2]3530 <80000dca <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 f8 70 	lea %a2,[%a2]3576 <80000df8 <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 e6 80 	lea %a2,[%a2]3622 <80000e26 <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 d4 90 	lea %a2,[%a2]3668 <80000e54 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 c8 a0 	lea %a2,[%a2]3720 <80000e88 <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 cc c0 	lea %a2,[%a2]3852 <80000f0c <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .text:

800003d0 <deregister_tm_clones>:
800003d0:	7b 00 00 26 	movh %d2,24576
800003d4:	1b 42 00 20 	addi %d2,%d2,4
800003d8:	91 00 00 46 	movh.a %a4,24576
800003dc:	60 22       	mov.a %a2,%d2
800003de:	d9 44 04 00 	lea %a4,[%a4]4 <60000004 <__TMC_END__>>
800003e2:	7d 42 0a 00 	jeq.a %a2,%a4,800003f6 <deregister_tm_clones+0x26>
800003e6:	91 00 00 20 	movh.a %a2,0
800003ea:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
800003ee:	bd 02 04 00 	jz.a %a2,800003f6 <deregister_tm_clones+0x26>
800003f2:	2d 02 00 00 	calli %a2
800003f6:	00 90       	ret 

800003f8 <register_tm_clones>:
800003f8:	7b 00 00 26 	movh %d2,24576
800003fc:	1b 42 00 20 	addi %d2,%d2,4
80000400:	91 00 00 46 	movh.a %a4,24576
80000404:	60 22       	mov.a %a2,%d2
80000406:	d9 44 04 00 	lea %a4,[%a4]4 <60000004 <__TMC_END__>>
8000040a:	01 42 20 20 	sub.a %a2,%a2,%a4
8000040e:	80 22       	mov.d %d2,%a2
80000410:	8f e2 3f 30 	sha %d3,%d2,-2
80000414:	8f 12 1e 20 	sh %d2,%d2,-31
80000418:	42 32       	add %d2,%d3
8000041a:	8f f2 3f 40 	sha %d4,%d2,-1
8000041e:	df 04 0a 00 	jeq %d4,0,80000432 <register_tm_clones+0x3a>
80000422:	91 00 00 20 	movh.a %a2,0
80000426:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
8000042a:	bd 02 04 00 	jz.a %a2,80000432 <register_tm_clones+0x3a>
8000042e:	2d 02 00 00 	calli %a2
80000432:	00 90       	ret 

80000434 <__do_global_dtors_aux>:
80000434:	91 00 00 e6 	movh.a %a14,24576
80000438:	39 e2 08 00 	ld.bu %d2,[%a14]8 <60000008 <completed.1>>
8000043c:	df 02 2d 80 	jne %d2,0,80000496 <__do_global_dtors_aux+0x62>
80000440:	91 00 00 38 	movh.a %a3,32768
80000444:	91 00 00 28 	movh.a %a2,32768
80000448:	d9 33 60 42 	lea %a3,[%a3]9504 <80002520 <__DTOR_END__>>
8000044c:	d9 22 54 42 	lea %a2,[%a2]9492 <80002514 <__DTOR_LIST__>>
80000450:	01 23 20 20 	sub.a %a2,%a3,%a2
80000454:	80 22       	mov.d %d2,%a2
80000456:	86 e2       	sha %d2,-2
80000458:	1b f2 ff 8f 	addi %d8,%d2,-1
8000045c:	91 00 00 c6 	movh.a %a12,24576
80000460:	7b 00 00 28 	movh %d2,32768
80000464:	1b 42 51 22 	addi %d2,%d2,9492
80000468:	60 2d       	mov.a %a13,%d2
8000046a:	19 c2 0c 00 	ld.w %d2,[%a12]12 <6000000c <dtor_idx.0>>
8000046e:	7f 82 0f 80 	jge.u %d2,%d8,8000048c <__do_global_dtors_aux+0x58>
80000472:	d9 cc 0c 00 	lea %a12,[%a12]12 <6000000c <dtor_idx.0>>
80000476:	c2 12       	add %d2,1
80000478:	74 c2       	st.w [%a12],%d2
8000047a:	06 22       	sh %d2,2
8000047c:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000480:	d4 22       	ld.a %a2,[%a2]
80000482:	2d 02 00 00 	calli %a2
80000486:	54 c2       	ld.w %d2,[%a12]
80000488:	3f 82 f7 ff 	jlt.u %d2,%d8,80000476 <__do_global_dtors_aux+0x42>
8000048c:	6d ff a2 ff 	call 800003d0 <deregister_tm_clones>
80000490:	82 12       	mov %d2,1
80000492:	e9 e2 08 00 	st.b [%a14]8 <60000008 <completed.1>>,%d2
80000496:	00 90       	ret 

80000498 <frame_dummy>:
80000498:	6d ff b0 ff 	call 800003f8 <register_tm_clones>
8000049c:	00 90       	ret 

8000049e <IfxScuCcu_isOscillatorStable>:
    *cfg = IfxScuCcu_defaultErayPllConfig;
}


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
8000049e:	40 ae       	mov.aa %a14,%sp
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
800004a0:	6d 00 fd 03 	call 80000c9a <IfxScuWdt_getCpuWatchdogPassword>
800004a4:	02 28       	mov %d8,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800004a6:	91 30 00 2f 	movh.a %a2,61443
800004aa:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
800004ae:	54 23       	ld.w %d3,[%a2]
800004b0:	8f 03 c6 31 	andn %d3,%d3,96
800004b4:	74 23       	st.w [%a2],%d3

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
800004b6:	91 00 00 36 	movh.a %a3,24576
800004ba:	19 33 00 00 	ld.w %d3,[%a3]0 <60000000 <IfxScuCcu_xtalFrequency>>
800004be:	7b 00 b6 26 	movh %d2,27488
800004c2:	1b b2 a6 2c 	addi %d2,%d2,-13717
800004c6:	73 23 68 20 	mul.u %e2,%d3,%d2
800004ca:	8f c3 1e 20 	sh %d2,%d3,-20
800004ce:	c2 f2       	add %d2,-1
800004d0:	54 23       	ld.w %d3,[%a2]
800004d2:	37 23 05 38 	insert %d3,%d3,%d2,16,5
800004d6:	74 23       	st.w [%a2],%d3

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
800004d8:	54 23       	ld.w %d3,[%a2]
800004da:	b7 13 01 31 	insert %d3,%d3,1,2,1
800004de:	74 23       	st.w [%a2],%d3
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
800004e0:	3b 00 28 30 	mov %d3,640

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800004e4:	1d 00 05 00 	j 800004ee <IfxScuCcu_isOscillatorStable+0x50>
    {
        TimeoutCtr--;
800004e8:	c2 f3       	add %d3,-1

        if (TimeoutCtr == 0)
800004ea:	df 03 25 00 	jeq %d3,0,80000534 <IfxScuCcu_isOscillatorStable+0x96>
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800004ee:	91 30 00 2f 	movh.a %a2,61443
800004f2:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
800004f6:	54 25       	ld.w %d5,[%a2]
800004f8:	6f 15 f8 7f 	jz.t %d5,1,800004e8 <IfxScuCcu_isOscillatorStable+0x4a>
800004fc:	54 25       	ld.w %d5,[%a2]
800004fe:	6f 85 f5 7f 	jz.t %d5,8,800004e8 <IfxScuCcu_isOscillatorStable+0x4a>
    boolean status     = 0;
80000502:	82 09       	mov %d9,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80000504:	02 84       	mov %d4,%d8
80000506:	6d 00 61 02 	call 800009c8 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000050a:	91 30 00 2f 	movh.a %a2,61443
8000050e:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80000512:	54 23       	ld.w %d3,[%a2]
80000514:	b7 13 81 31 	insert %d3,%d3,1,3,1
80000518:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000051a:	91 30 00 2f 	movh.a %a2,61443
8000051e:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80000522:	54 23       	ld.w %d3,[%a2]
80000524:	b7 13 81 31 	insert %d3,%d3,1,3,1
80000528:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinitPw);
8000052a:	02 84       	mov %d4,%d8
8000052c:	6d 00 d4 03 	call 80000cd4 <IfxScuWdt_setCpuEndinit>
    }

    return status;
}
80000530:	02 92       	mov %d2,%d9
80000532:	00 90       	ret 
            status = 1;
80000534:	82 19       	mov %d9,1
80000536:	1d ff e7 ff 	j 80000504 <IfxScuCcu_isOscillatorStable+0x66>

8000053a <IfxScuCcu_getOscFrequency>:
{
8000053a:	40 ae       	mov.aa %a14,%sp
    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
8000053c:	91 30 00 2f 	movh.a %a2,61443
80000540:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80000544:	54 22       	ld.w %d2,[%a2]
80000546:	37 02 62 2e 	extr.u %d2,%d2,28,2
8000054a:	df 02 10 00 	jeq %d2,0,8000056a <IfxScuCcu_getOscFrequency+0x30>
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
8000054e:	54 22       	ld.w %d2,[%a2]
80000550:	37 02 62 2e 	extr.u %d2,%d2,28,2
80000554:	df 12 04 00 	jeq %d2,1,8000055c <IfxScuCcu_getOscFrequency+0x22>
        freq = 0.0f;
80000558:	82 02       	mov %d2,0
}
8000055a:	00 90       	ret 
        freq = (float32)IfxScuCcu_xtalFrequency;
8000055c:	91 00 00 26 	movh.a %a2,24576
80000560:	19 22 00 00 	ld.w %d2,[%a2]0 <60000000 <IfxScuCcu_xtalFrequency>>
80000564:	4b 02 61 21 	utof %d2,%d2
80000568:	00 90       	ret 
        freq = IFXSCU_EVR_OSC_FREQUENCY;
8000056a:	7b f0 cb 24 	movh %d2,19647
8000056e:	1b 02 c2 2b 	addi %d2,%d2,-17376
80000572:	00 90       	ret 

80000574 <IfxScuCcu_getPllFrequency>:
{
80000574:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
80000576:	6d ff e2 ff 	call 8000053a <IfxScuCcu_getOscFrequency>
8000057a:	02 24       	mov %d4,%d2
    if (scu->PLLSTAT.B.VCOBYST == 1)
8000057c:	91 30 00 2f 	movh.a %a2,61443
80000580:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80000584:	19 23 14 00 	ld.w %d3,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
80000588:	6f 03 27 80 	jnz.t %d3,0,800005d6 <IfxScuCcu_getPllFrequency+0x62>
    else if (scu->PLLSTAT.B.FINDIS == 1)
8000058c:	91 30 00 2f 	movh.a %a2,61443
80000590:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80000594:	19 22 14 00 	ld.w %d2,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
80000598:	6f 32 2d 80 	jnz.t %d2,3,800005f2 <IfxScuCcu_getPllFrequency+0x7e>
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
8000059c:	91 30 00 2f 	movh.a %a2,61443
800005a0:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800005a4:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
800005a8:	37 02 e7 24 	extr.u %d2,%d2,9,7
800005ac:	c2 12       	add %d2,1
800005ae:	4b 02 41 21 	itof %d2,%d2
800005b2:	4b 42 41 30 	mul.f %d3,%d2,%d4
800005b6:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
800005ba:	8f f4 07 41 	and %d4,%d4,127
800005be:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
800005c2:	37 02 64 2c 	extr.u %d2,%d2,24,4
800005c6:	c2 12       	add %d2,1
800005c8:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
800005cc:	4b 02 41 21 	itof %d2,%d2
800005d0:	4b 23 51 20 	div.f %d2,%d3,%d2
}
800005d4:	00 90       	ret 
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
800005d6:	91 30 00 2f 	movh.a %a2,61443
800005da:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800005de:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
800005e2:	37 02 67 28 	extr.u %d2,%d2,16,7
800005e6:	c2 12       	add %d2,1
800005e8:	4b 02 41 21 	itof %d2,%d2
800005ec:	4b 24 51 20 	div.f %d2,%d4,%d2
800005f0:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
800005f2:	91 30 00 2f 	movh.a %a2,61443
800005f6:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800005fa:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
800005fe:	8f f4 07 41 	and %d4,%d4,127
80000602:	c2 14       	add %d4,1
80000604:	6d 00 f1 0c 	call 80001fe6 <__floatsidf>
80000608:	0b 23 10 68 	mov %e6,%d3,%d2
8000060c:	82 04       	mov %d4,0
8000060e:	7b 80 19 54 	movh %d5,16792
80000612:	1b 45 78 5d 	addi %d5,%d5,-10364
80000616:	6d 00 40 0c 	call 80001e96 <__divdf3>
8000061a:	0b 23 10 48 	mov %e4,%d3,%d2
8000061e:	6d 00 2f 0d 	call 8000207c <__truncdfsf2>
80000622:	00 90       	ret 

80000624 <IfxScuCcu_getSourceFrequency>:
{
80000624:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON0.B.CLKSEL)
80000626:	91 30 00 2f 	movh.a %a2,61443
8000062a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
8000062e:	54 22       	ld.w %d2,[%a2]
80000630:	37 02 62 2e 	extr.u %d2,%d2,28,2
80000634:	df 02 07 00 	jeq %d2,0,80000642 <IfxScuCcu_getSourceFrequency+0x1e>
80000638:	df 12 0a 80 	jne %d2,1,8000064c <IfxScuCcu_getSourceFrequency+0x28>
        sourcefreq = IfxScuCcu_getPllFrequency();
8000063c:	6d ff 9c ff 	call 80000574 <IfxScuCcu_getPllFrequency>
        break;
80000640:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
80000642:	7b f0 cb 24 	movh %d2,19647
80000646:	1b 02 c2 2b 	addi %d2,%d2,-17376
8000064a:	00 90       	ret 
        sourcefreq = 0;
8000064c:	82 02       	mov %d2,0
}
8000064e:	00 90       	ret 

80000650 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80000650:	40 ae       	mov.aa %a14,%sp
80000652:	02 48       	mov %d8,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80000654:	6d ff e8 ff 	call 80000624 <IfxScuCcu_getSourceFrequency>
80000658:	91 30 00 2f 	movh.a %a2,61443
8000065c:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80000660:	54 23       	ld.w %d3,[%a2]
80000662:	37 03 64 34 	extr.u %d3,%d3,8,4
80000666:	4b 03 41 31 	itof %d3,%d3
8000066a:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
8000066e:	4b 28 41 40 	mul.f %d4,%d8,%d2
80000672:	4b 04 71 41 	ftouz %d4,%d4
    uint32 stmCountBegin = STM0_TIM0.U;
80000676:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
8000067a:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
8000067e:	a2 32       	sub %d2,%d3
80000680:	3f 42 fd ff 	jlt.u %d2,%d4,8000067a <IfxScuCcu_wait+0x2a>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80000684:	00 90       	ret 

80000686 <IfxScuCcu_init>:
{
80000686:	40 ae       	mov.aa %a14,%sp
80000688:	40 4c       	mov.aa %a12,%a4
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
8000068a:	19 42 10 10 	ld.w %d2,[%a4]80
8000068e:	91 00 00 26 	movh.a %a2,24576
80000692:	59 22 00 00 	st.w [%a2]0 <60000000 <IfxScuCcu_xtalFrequency>>,%d2
    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80000696:	6d 00 02 03 	call 80000c9a <IfxScuWdt_getCpuWatchdogPassword>
8000069a:	02 2a       	mov %d10,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
8000069c:	6d 00 11 03 	call 80000cbe <IfxScuWdt_getSafetyWatchdogPassword>
800006a0:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800006a2:	02 a4       	mov %d4,%d10
800006a4:	6d 00 92 01 	call 800009c8 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800006a8:	91 30 00 2f 	movh.a %a2,61443
800006ac:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
800006b0:	54 2d       	ld.w %d13,[%a2]
800006b2:	37 0d e1 d1 	extr.u %d13,%d13,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
800006b6:	54 22       	ld.w %d2,[%a2]
800006b8:	b7 12 81 21 	insert %d2,%d2,1,3,1
800006bc:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
800006be:	02 a4       	mov %d4,%d10
800006c0:	6d 00 0a 03 	call 80000cd4 <IfxScuWdt_setCpuEndinit>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800006c4:	02 84       	mov %d4,%d8
800006c6:	6d 00 a6 01 	call 80000a12 <IfxScuWdt_clearSafetyEndinit>
        while (SCU_CCUCON0.B.LCK != 0U)
800006ca:	91 30 00 2f 	movh.a %a2,61443
800006ce:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800006d2:	54 23       	ld.w %d3,[%a2]
800006d4:	bf 03 fb 7f 	jlt %d3,0,800006ca <IfxScuCcu_init+0x44>
        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
800006d8:	54 22       	ld.w %d2,[%a2]
800006da:	b7 02 02 2e 	insert %d2,%d2,0,28,2
800006de:	74 22       	st.w [%a2],%d2
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
800006e0:	54 22       	ld.w %d2,[%a2]
800006e2:	b7 12 01 2f 	insert %d2,%d2,1,30,1
800006e6:	74 22       	st.w [%a2],%d2
        SCU_PLLCON0.B.SETFINDIS = 1;
800006e8:	91 30 00 2f 	movh.a %a2,61443
800006ec:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
800006f0:	54 22       	ld.w %d2,[%a2]
800006f2:	b7 12 01 22 	insert %d2,%d2,1,4,1
800006f6:	74 22       	st.w [%a2],%d2
        while (SCU_CCUCON1.B.LCK != 0U)
800006f8:	91 30 00 2f 	movh.a %a2,61443
800006fc:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80000700:	54 23       	ld.w %d3,[%a2]
80000702:	bf 03 fb 7f 	jlt %d3,0,800006f8 <IfxScuCcu_init+0x72>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80000706:	54 22       	ld.w %d2,[%a2]
80000708:	b7 12 02 2e 	insert %d2,%d2,1,28,2
8000070c:	74 22       	st.w [%a2],%d2
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
8000070e:	54 22       	ld.w %d2,[%a2]
80000710:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80000714:	74 22       	st.w [%a2],%d2
        status             |= IfxScuCcu_isOscillatorStable();
80000716:	6d ff c4 fe 	call 8000049e <IfxScuCcu_isOscillatorStable>
8000071a:	02 2c       	mov %d12,%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000071c:	02 84       	mov %d4,%d8
8000071e:	6d 00 00 03 	call 80000d1e <IfxScuWdt_setSafetyEndinit>
    if (status == 0)
80000722:	df 0c 28 00 	jeq %d12,0,80000772 <IfxScuCcu_init+0xec>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000726:	02 84       	mov %d4,%d8
80000728:	6d 00 75 01 	call 80000a12 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000072c:	91 30 00 2f 	movh.a %a2,61443
80000730:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80000734:	54 23       	ld.w %d3,[%a2]
80000736:	8f 03 c4 31 	andn %d3,%d3,64
8000073a:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000073c:	02 84       	mov %d4,%d8
8000073e:	6d 00 f0 02 	call 80000d1e <IfxScuWdt_setSafetyEndinit>
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80000742:	02 a4       	mov %d4,%d10
80000744:	6d 00 42 01 	call 800009c8 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80000748:	91 30 00 2f 	movh.a %a2,61443
8000074c:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80000750:	54 23       	ld.w %d3,[%a2]
80000752:	b7 13 81 31 	insert %d3,%d3,1,3,1
80000756:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80000758:	91 30 00 2f 	movh.a %a2,61443
8000075c:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80000760:	54 23       	ld.w %d3,[%a2]
80000762:	67 d3 03 30 	ins.t %d3,%d3,3,%d13,0
80000766:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinit_pw);
80000768:	02 a4       	mov %d4,%d10
8000076a:	6d 00 b5 02 	call 80000cd4 <IfxScuWdt_setCpuEndinit>
}
8000076e:	02 c2       	mov %d2,%d12
80000770:	00 90       	ret 
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000772:	02 84       	mov %d4,%d8
80000774:	6d 00 4f 01 	call 80000a12 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80000778:	91 30 00 2f 	movh.a %a2,61443
8000077c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80000780:	54 23       	ld.w %d3,[%a2]
80000782:	6f 53 fb 7f 	jz.t %d3,5,80000778 <IfxScuCcu_init+0xf2>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80000786:	39 c3 0a 00 	ld.bu %d3,[%a12]10
8000078a:	91 30 00 2f 	movh.a %a2,61443
8000078e:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80000792:	54 22       	ld.w %d2,[%a2]
80000794:	37 32 07 20 	insert %d2,%d2,%d3,0,7
80000798:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
8000079a:	39 c3 08 00 	ld.bu %d3,[%a12]8
8000079e:	91 30 00 2f 	movh.a %a2,61443
800007a2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
800007a6:	54 22       	ld.w %d2,[%a2]
800007a8:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
800007ac:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
800007ae:	39 c3 09 00 	ld.bu %d3,[%a12]9
800007b2:	54 22       	ld.w %d2,[%a2]
800007b4:	37 32 87 24 	insert %d2,%d2,%d3,9,7
800007b8:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
800007ba:	54 22       	ld.w %d2,[%a2]
800007bc:	b7 12 01 23 	insert %d2,%d2,1,6,1
800007c0:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
800007c2:	54 22       	ld.w %d2,[%a2]
800007c4:	b7 02 01 28 	insert %d2,%d2,0,16,1
800007c8:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
800007ca:	54 22       	ld.w %d2,[%a2]
800007cc:	b7 12 81 22 	insert %d2,%d2,1,5,1
800007d0:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
800007d2:	54 22       	ld.w %d2,[%a2]
800007d4:	b7 12 01 28 	insert %d2,%d2,1,16,1
800007d8:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.RESLD = 1;
800007da:	54 22       	ld.w %d2,[%a2]
800007dc:	b7 12 01 29 	insert %d2,%d2,1,18,1
800007e0:	74 22       	st.w [%a2],%d2
                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800007e2:	7b 20 85 43 	movh %d4,14418
800007e6:	1b 74 71 4b 	addi %d4,%d4,-18665
800007ea:	6d ff 33 ff 	call 80000650 <IfxScuCcu_wait>
                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
800007ee:	91 30 00 2f 	movh.a %a2,61443
800007f2:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
800007f6:	54 23       	ld.w %d3,[%a2]
800007f8:	6f 23 fb 7f 	jz.t %d3,2,800007ee <IfxScuCcu_init+0x168>
                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
800007fc:	91 30 00 2f 	movh.a %a2,61443
80000800:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80000804:	54 22       	ld.w %d2,[%a2]
80000806:	8f 12 c0 21 	andn %d2,%d2,1
8000080a:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
8000080c:	91 30 00 2f 	movh.a %a2,61443
80000810:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000814:	54 23       	ld.w %d3,[%a2]
80000816:	bf 03 fb 7f 	jlt %d3,0,8000080c <IfxScuCcu_init+0x186>
                    SCU_CCUCON0.B.CLKSEL = 0x01;
8000081a:	54 22       	ld.w %d2,[%a2]
8000081c:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80000820:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80000822:	91 30 00 2f 	movh.a %a2,61443
80000826:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
8000082a:	54 23       	ld.w %d3,[%a2]
8000082c:	bf 03 fb 7f 	jlt %d3,0,80000822 <IfxScuCcu_init+0x19c>
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80000830:	19 c4 0c 00 	ld.w %d4,[%a12]12
80000834:	6d ff 0e ff 	call 80000650 <IfxScuCcu_wait>
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80000838:	91 30 00 2f 	movh.a %a2,61443
8000083c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000840:	54 23       	ld.w %d3,[%a2]
80000842:	19 c4 14 00 	ld.w %d4,[%a12]20 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80000846:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
8000084a:	19 c2 10 00 	ld.w %d2,[%a12]16
8000084e:	26 42       	and %d2,%d4
80000850:	a6 23       	or %d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80000852:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon0.B.UP     = 1;
80000856:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
8000085a:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON1.B.LCK != 0U)
8000085c:	91 30 00 2f 	movh.a %a2,61443
80000860:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80000864:	54 23       	ld.w %d3,[%a2]
80000866:	bf 03 fb 7f 	jlt %d3,0,8000085c <IfxScuCcu_init+0x1d6>
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
8000086a:	54 23       	ld.w %d3,[%a2]
8000086c:	19 c4 1c 00 	ld.w %d4,[%a12]28
80000870:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80000874:	19 c2 18 00 	ld.w %d2,[%a12]24
80000878:	26 42       	and %d2,%d4
8000087a:	a6 23       	or %d3,%d2
                        ccucon1.B.INSEL = 1;
8000087c:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon1.B.UP    = 1;
80000880:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON1     = ccucon1;
80000884:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON2.B.LCK != 0U)
80000886:	91 30 00 2f 	movh.a %a2,61443
8000088a:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x6002e040>>
8000088e:	54 23       	ld.w %d3,[%a2]
80000890:	bf 03 fb 7f 	jlt %d3,0,80000886 <IfxScuCcu_init+0x200>
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80000894:	54 23       	ld.w %d3,[%a2]
80000896:	19 c4 24 00 	ld.w %d4,[%a12]36
8000089a:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
8000089e:	19 c2 20 00 	ld.w %d2,[%a12]32
800008a2:	26 42       	and %d2,%d4
800008a4:	a6 32       	or %d2,%d3
                        ccucon2.B.UP = 1;
800008a6:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON2  = ccucon2;
800008aa:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON5.B.LCK != 0U)
800008ac:	91 30 00 2f 	movh.a %a2,61443
800008b0:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
800008b4:	54 23       	ld.w %d3,[%a2]
800008b6:	bf 03 fb 7f 	jlt %d3,0,800008ac <IfxScuCcu_init+0x226>
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800008ba:	54 23       	ld.w %d3,[%a2]
800008bc:	19 c4 2c 00 	ld.w %d4,[%a12]44
800008c0:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
800008c4:	19 c2 28 00 	ld.w %d2,[%a12]40
800008c8:	26 42       	and %d2,%d4
800008ca:	a6 32       	or %d2,%d3
                        ccucon5.B.UP = 1;
800008cc:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON5  = ccucon5;
800008d0:	74 22       	st.w [%a2],%d2
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800008d2:	91 30 00 2f 	movh.a %a2,61443
800008d6:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x6002e080>>
800008da:	54 23       	ld.w %d3,[%a2]
800008dc:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036080 <_SMALL_DATA4_+0x6002e080>>
800008e0:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
800008e4:	19 c2 30 00 	ld.w %d2,[%a12]48
800008e8:	26 42       	and %d2,%d4
800008ea:	a6 32       	or %d2,%d3
                        SCU_CCUCON6 = ccucon6;
800008ec:	74 22       	st.w [%a2],%d2
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800008ee:	91 30 00 2f 	movh.a %a2,61443
800008f2:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x6002e084>>
800008f6:	54 23       	ld.w %d3,[%a2]
800008f8:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f0036084 <_SMALL_DATA4_+0x6002e084>>
800008fc:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80000900:	19 c2 38 00 	ld.w %d2,[%a12]56
80000904:	26 42       	and %d2,%d4
80000906:	a6 32       	or %d2,%d3
                        SCU_CCUCON7 = ccucon7;
80000908:	74 22       	st.w [%a2],%d2
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
8000090a:	91 30 00 2f 	movh.a %a2,61443
8000090e:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80000912:	54 23       	ld.w %d3,[%a2]
80000914:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80000918:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000091c:	19 c2 00 10 	ld.w %d2,[%a12]64
80000920:	26 42       	and %d2,%d4
80000922:	a6 32       	or %d2,%d3
                        SCU_CCUCON8 = ccucon8;
80000924:	74 22       	st.w [%a2],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80000926:	02 84       	mov %d4,%d8
80000928:	6d 00 fb 01 	call 80000d1e <IfxScuWdt_setSafetyEndinit>
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
8000092c:	91 00 80 df 	movh.a %a13,63488
80000930:	d9 dd 14 02 	lea %a13,[%a13]8212 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80000934:	54 d9       	ld.w %d9,[%a13]
80000936:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
8000093a:	0f 49 e0 90 	andn %d9,%d9,%d4
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000093e:	19 c2 08 10 	ld.w %d2,[%a12]72
80000942:	26 42       	and %d2,%d4
80000944:	a6 29       	or %d9,%d2
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80000946:	02 a4       	mov %d4,%d10
80000948:	6d 00 40 00 	call 800009c8 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
8000094c:	74 d9       	st.w [%a13],%d9
                IfxScuWdt_setCpuEndinit(endinit_pw);
8000094e:	02 a4       	mov %d4,%d10
80000950:	6d 00 c2 01 	call 80000cd4 <IfxScuWdt_setCpuEndinit>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80000954:	02 c9       	mov %d9,%d12
80000956:	1d 00 0d 00 	j 80000970 <IfxScuCcu_init+0x2ea>
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
8000095a:	99 c2 04 00 	ld.a %a2,[%a12]4
8000095e:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80000962:	19 24 04 00 	ld.w %d4,[%a2]4
80000966:	6d ff 75 fe 	call 80000650 <IfxScuCcu_wait>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
8000096a:	c2 19       	add %d9,1
8000096c:	8f f9 0f 91 	and %d9,%d9,255
80000970:	14 c3       	ld.bu %d3,[%a12]
80000972:	7f 39 da fe 	jge.u %d9,%d3,80000726 <IfxScuCcu_init+0xa0>
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000976:	02 84       	mov %d4,%d8
80000978:	6d 00 4d 00 	call 80000a12 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000097c:	91 30 00 2f 	movh.a %a2,61443
80000980:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80000984:	54 23       	ld.w %d3,[%a2]
80000986:	6f 53 fb 7f 	jz.t %d3,5,8000097c <IfxScuCcu_init+0x2f6>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
8000098a:	53 c9 20 b0 	mul %d11,%d9,12
8000098e:	99 c2 04 00 	ld.a %a2,[%a12]4
80000992:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80000996:	14 24       	ld.bu %d4,[%a2]
80000998:	91 30 00 2f 	movh.a %a2,61443
8000099c:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
800009a0:	54 23       	ld.w %d3,[%a2]
800009a2:	37 43 07 30 	insert %d3,%d3,%d4,0,7
800009a6:	74 23       	st.w [%a2],%d3
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800009a8:	02 84       	mov %d4,%d8
800009aa:	6d 00 ba 01 	call 80000d1e <IfxScuWdt_setSafetyEndinit>
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
800009ae:	99 c2 04 00 	ld.a %a2,[%a12]4
800009b2:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
800009b6:	d9 22 08 00 	lea %a2,[%a2]8
800009ba:	d4 22       	ld.a %a2,[%a2]
800009bc:	bd 02 cf 7f 	jz.a %a2,8000095a <IfxScuCcu_init+0x2d4>
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
800009c0:	2d 02 00 00 	calli %a2
800009c4:	1d ff cb ff 	j 8000095a <IfxScuCcu_init+0x2d4>

800009c8 <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
800009c8:	40 ae       	mov.aa %a14,%sp


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800009ca:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800009ce:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800009d2:	7b 30 00 3f 	movh %d3,61443
800009d6:	1b 03 10 36 	addi %d3,%d3,24832
800009da:	13 c2 20 23 	madd %d2,%d3,%d2,12
800009de:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800009e0:	54 22       	ld.w %d2,[%a2]
800009e2:	6f 12 0b 00 	jz.t %d2,1,800009f8 <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009e6:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800009ea:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800009ee:	54 22       	ld.w %d2,[%a2]
800009f0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009f4:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800009f6:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009f8:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800009fc:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000a00:	54 22       	ld.w %d2,[%a2]
80000a02:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a06:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000a08:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80000a0a:	54 22       	ld.w %d2,[%a2]
80000a0c:	6f 02 ff ff 	jnz.t %d2,0,80000a0a <IfxScuWdt_clearCpuEndinit+0x42>
}
80000a10:	00 90       	ret 

80000a12 <IfxScuWdt_clearSafetyEndinit>:


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
80000a12:	40 ae       	mov.aa %a14,%sp
80000a14:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80000a18:	91 30 00 2f 	movh.a %a2,61443
80000a1c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000a20:	54 22       	ld.w %d2,[%a2]
80000a22:	6f 12 0b 00 	jz.t %d2,1,80000a38 <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000a26:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000a2a:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000a2e:	54 22       	ld.w %d2,[%a2]
80000a30:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000a34:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000a36:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000a38:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000a3c:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000a40:	91 30 00 2f 	movh.a %a2,61443
80000a44:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000a48:	54 22       	ld.w %d2,[%a2]
80000a4a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000a4e:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000a50:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80000a52:	91 30 00 2f 	movh.a %a2,61443
80000a56:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000a5a:	54 22       	ld.w %d2,[%a2]
80000a5c:	6f 02 fb ff 	jnz.t %d2,0,80000a52 <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80000a60:	00 90       	ret 

80000a62 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80000a62:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80000a64:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80000a68:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80000a6c:	7b 30 00 3f 	movh %d3,61443
80000a70:	1b 03 10 36 	addi %d3,%d3,24832
80000a74:	13 c2 20 23 	madd %d2,%d3,%d2,12
80000a78:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80000a7a:	54 22       	ld.w %d2,[%a2]
80000a7c:	6f 12 0b 00 	jz.t %d2,1,80000a92 <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a80:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000a84:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000a88:	54 22       	ld.w %d2,[%a2]
80000a8a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a8e:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000a90:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a92:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000a94:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000a98:	54 22       	ld.w %d2,[%a2]
80000a9a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a9e:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000aa0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80000aa2:	54 22       	ld.w %d2,[%a2]
80000aa4:	6f 02 ff ff 	jnz.t %d2,0,80000aa2 <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80000aa8:	d9 23 04 00 	lea %a3,[%a2]4
80000aac:	19 22 04 00 	ld.w %d2,[%a2]4
80000ab0:	b7 12 81 21 	insert %d2,%d2,1,3,1
80000ab4:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80000ab6:	54 22       	ld.w %d2,[%a2]
80000ab8:	6f 12 09 00 	jz.t %d2,1,80000aca <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000abc:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000ac0:	54 22       	ld.w %d2,[%a2]
80000ac2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000ac6:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000ac8:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000aca:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000ace:	54 22       	ld.w %d2,[%a2]
80000ad0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000ad4:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000ad6:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80000ad8:	54 22       	ld.w %d2,[%a2]
80000ada:	6f 02 ff 7f 	jz.t %d2,0,80000ad8 <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80000ade:	00 90       	ret 

80000ae0 <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
80000ae0:	40 ae       	mov.aa %a14,%sp
80000ae2:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80000ae6:	91 30 00 2f 	movh.a %a2,61443
80000aea:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000aee:	54 22       	ld.w %d2,[%a2]
80000af0:	6f 12 0b 00 	jz.t %d2,1,80000b06 <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000af4:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000af8:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000afc:	54 22       	ld.w %d2,[%a2]
80000afe:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000b02:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000b04:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000b06:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000b08:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000b0c:	91 30 00 2f 	movh.a %a2,61443
80000b10:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000b14:	54 22       	ld.w %d2,[%a2]
80000b16:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000b1a:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000b1c:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80000b1e:	91 30 00 2f 	movh.a %a2,61443
80000b22:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000b26:	54 22       	ld.w %d2,[%a2]
80000b28:	6f 02 fb ff 	jnz.t %d2,0,80000b1e <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80000b2c:	91 30 00 2f 	movh.a %a2,61443
80000b30:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80000b34:	54 22       	ld.w %d2,[%a2]
80000b36:	b7 12 81 21 	insert %d2,%d2,1,3,1
80000b3a:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80000b3c:	91 30 00 2f 	movh.a %a2,61443
80000b40:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000b44:	54 22       	ld.w %d2,[%a2]
80000b46:	6f 12 09 00 	jz.t %d2,1,80000b58 <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000b4a:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000b4e:	54 22       	ld.w %d2,[%a2]
80000b50:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000b54:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000b56:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000b58:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000b5c:	91 30 00 2f 	movh.a %a2,61443
80000b60:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000b64:	54 22       	ld.w %d2,[%a2]
80000b66:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000b6a:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000b6c:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80000b6e:	91 30 00 2f 	movh.a %a2,61443
80000b72:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000b76:	54 22       	ld.w %d2,[%a2]
80000b78:	6f 02 fb 7f 	jz.t %d2,0,80000b6e <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80000b7c:	00 90       	ret 

80000b7e <IfxScuWdt_enableCpuWatchdog>:


void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
80000b7e:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80000b80:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80000b84:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80000b88:	7b 30 00 3f 	movh %d3,61443
80000b8c:	1b 03 10 36 	addi %d3,%d3,24832
80000b90:	13 c2 20 23 	madd %d2,%d3,%d2,12
80000b94:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80000b96:	54 22       	ld.w %d2,[%a2]
80000b98:	6f 12 0b 00 	jz.t %d2,1,80000bae <IfxScuWdt_enableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000b9c:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000ba0:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000ba4:	54 22       	ld.w %d2,[%a2]
80000ba6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000baa:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000bac:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000bae:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000bb0:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000bb4:	54 22       	ld.w %d2,[%a2]
80000bb6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000bba:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000bbc:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80000bbe:	54 22       	ld.w %d2,[%a2]
80000bc0:	6f 02 ff ff 	jnz.t %d2,0,80000bbe <IfxScuWdt_enableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
80000bc4:	d9 23 04 00 	lea %a3,[%a2]4
80000bc8:	19 22 04 00 	ld.w %d2,[%a2]4
80000bcc:	8f 82 c0 21 	andn %d2,%d2,8
80000bd0:	74 32       	st.w [%a3],%d2
    if (watchdog->CON0.B.LCK)
80000bd2:	54 22       	ld.w %d2,[%a2]
80000bd4:	6f 12 09 00 	jz.t %d2,1,80000be6 <IfxScuWdt_enableCpuWatchdog+0x68>
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000bd8:	8f 14 40 31 	or %d3,%d4,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000bdc:	54 22       	ld.w %d2,[%a2]
80000bde:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000be2:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000be4:	74 22       	st.w [%a2],%d2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000be6:	8f 34 40 41 	or %d4,%d4,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000bea:	54 22       	ld.w %d2,[%a2]
80000bec:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000bf0:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000bf2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80000bf4:	54 22       	ld.w %d2,[%a2]
80000bf6:	6f 02 ff 7f 	jz.t %d2,0,80000bf4 <IfxScuWdt_enableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80000bfa:	00 90       	ret 

80000bfc <IfxScuWdt_enableSafetyWatchdog>:


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
80000bfc:	40 ae       	mov.aa %a14,%sp
80000bfe:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80000c02:	91 30 00 2f 	movh.a %a2,61443
80000c06:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000c0a:	54 22       	ld.w %d2,[%a2]
80000c0c:	6f 12 0b 00 	jz.t %d2,1,80000c22 <IfxScuWdt_enableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000c10:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000c14:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000c18:	54 22       	ld.w %d2,[%a2]
80000c1a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000c1e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000c20:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000c22:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000c24:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000c28:	91 30 00 2f 	movh.a %a2,61443
80000c2c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000c30:	54 22       	ld.w %d2,[%a2]
80000c32:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000c36:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000c38:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80000c3a:	91 30 00 2f 	movh.a %a2,61443
80000c3e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000c42:	54 22       	ld.w %d2,[%a2]
80000c44:	6f 02 fb ff 	jnz.t %d2,0,80000c3a <IfxScuWdt_enableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
80000c48:	91 30 00 2f 	movh.a %a2,61443
80000c4c:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80000c50:	54 22       	ld.w %d2,[%a2]
80000c52:	8f 82 c0 21 	andn %d2,%d2,8
80000c56:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
80000c58:	91 30 00 2f 	movh.a %a2,61443
80000c5c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000c60:	54 22       	ld.w %d2,[%a2]
80000c62:	6f 12 09 00 	jz.t %d2,1,80000c74 <IfxScuWdt_enableSafetyWatchdog+0x78>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000c66:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000c6a:	54 22       	ld.w %d2,[%a2]
80000c6c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000c70:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000c72:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000c74:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000c78:	91 30 00 2f 	movh.a %a2,61443
80000c7c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000c80:	54 22       	ld.w %d2,[%a2]
80000c82:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000c86:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000c88:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80000c8a:	91 30 00 2f 	movh.a %a2,61443
80000c8e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000c92:	54 22       	ld.w %d2,[%a2]
80000c94:	6f 02 fb 7f 	jz.t %d2,0,80000c8a <IfxScuWdt_enableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80000c98:	00 90       	ret 

80000c9a <IfxScuWdt_getCpuWatchdogPassword>:


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
80000c9a:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80000c9c:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80000ca0:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80000ca4:	7b 30 00 3f 	movh %d3,61443
80000ca8:	1b 03 10 36 	addi %d3,%d3,24832
80000cac:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
80000cb0:	60 22       	mov.a %a2,%d2
80000cb2:	54 22       	ld.w %d2,[%a2]
80000cb4:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80000cb8:	8f f2 83 21 	xor %d2,%d2,63
80000cbc:	00 90       	ret 

80000cbe <IfxScuWdt_getSafetyWatchdogPassword>:
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
80000cbe:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
80000cc0:	91 30 00 2f 	movh.a %a2,61443
80000cc4:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000cc8:	54 22       	ld.w %d2,[%a2]
80000cca:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80000cce:	8f f2 83 21 	xor %d2,%d2,63
80000cd2:	00 90       	ret 

80000cd4 <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
80000cd4:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80000cd6:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80000cda:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80000cde:	7b 30 00 3f 	movh %d3,61443
80000ce2:	1b 03 10 36 	addi %d3,%d3,24832
80000ce6:	13 c2 20 23 	madd %d2,%d3,%d2,12
80000cea:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80000cec:	54 22       	ld.w %d2,[%a2]
80000cee:	6f 12 0b 00 	jz.t %d2,1,80000d04 <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000cf2:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000cf6:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000cfa:	54 22       	ld.w %d2,[%a2]
80000cfc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000d00:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000d02:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000d04:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80000d08:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000d0c:	54 22       	ld.w %d2,[%a2]
80000d0e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000d12:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000d14:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80000d16:	54 22       	ld.w %d2,[%a2]
80000d18:	6f 02 ff 7f 	jz.t %d2,0,80000d16 <IfxScuWdt_setCpuEndinit+0x42>
}
80000d1c:	00 90       	ret 

80000d1e <IfxScuWdt_setSafetyEndinit>:


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
80000d1e:	40 ae       	mov.aa %a14,%sp
80000d20:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80000d24:	91 30 00 2f 	movh.a %a2,61443
80000d28:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000d2c:	54 22       	ld.w %d2,[%a2]
80000d2e:	6f 12 0b 00 	jz.t %d2,1,80000d44 <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000d32:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000d36:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000d3a:	54 22       	ld.w %d2,[%a2]
80000d3c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000d40:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000d42:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000d44:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000d48:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000d4c:	91 30 00 2f 	movh.a %a2,61443
80000d50:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000d54:	54 22       	ld.w %d2,[%a2]
80000d56:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000d5a:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000d5c:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80000d5e:	91 30 00 2f 	movh.a %a2,61443
80000d62:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80000d66:	54 22       	ld.w %d2,[%a2]
80000d68:	6f 02 fb 7f 	jz.t %d2,0,80000d5e <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80000d6c:	00 90       	ret 

80000d6e <IfxCpu_Trap_memoryManagementError>:
{
80000d6e:	40 ae       	mov.aa %a14,%sp
80000d70:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80000d72:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000d74:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
80000d78:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000d7c:	8f 72 00 21 	and %d2,%d2,7
80000d80:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000d84:	80 22       	mov.d %d2,%a2
80000d86:	0f 54 a0 30 	or %d3,%d4,%d5
80000d8a:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80000d8e:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80000d92:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000d94:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000d98:	00 80       	rfe 
}
80000d9a:	00 90       	ret 

80000d9c <IfxCpu_Trap_internalProtectionError>:
{
80000d9c:	40 ae       	mov.aa %a14,%sp
80000d9e:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80000da0:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000da2:	b7 14 18 44 	insert %d4,%d4,1,8,24
80000da6:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000daa:	8f 72 00 21 	and %d2,%d2,7
80000dae:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000db2:	80 22       	mov.d %d2,%a2
80000db4:	0f 54 a0 30 	or %d3,%d4,%d5
80000db8:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
80000dbc:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80000dc0:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000dc2:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000dc6:	00 80       	rfe 
}
80000dc8:	00 90       	ret 

80000dca <IfxCpu_Trap_instructionError>:
{
80000dca:	40 ae       	mov.aa %a14,%sp
80000dcc:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80000dce:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000dd0:	b7 24 18 44 	insert %d4,%d4,2,8,24
80000dd4:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000dd8:	8f 72 00 21 	and %d2,%d2,7
80000ddc:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000de0:	80 22       	mov.d %d2,%a2
80000de2:	0f 54 a0 30 	or %d3,%d4,%d5
80000de6:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
80000dea:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80000dee:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000df0:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000df4:	00 80       	rfe 
}
80000df6:	00 90       	ret 

80000df8 <IfxCpu_Trap_contextManagementError>:
{
80000df8:	40 ae       	mov.aa %a14,%sp
80000dfa:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80000dfc:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000dfe:	b7 34 18 44 	insert %d4,%d4,3,8,24
80000e02:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000e06:	8f 72 00 21 	and %d2,%d2,7
80000e0a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000e0e:	80 22       	mov.d %d2,%a2
80000e10:	0f 54 a0 30 	or %d3,%d4,%d5
80000e14:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80000e18:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80000e1c:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000e1e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000e22:	00 80       	rfe 
}
80000e24:	00 90       	ret 

80000e26 <IfxCpu_Trap_busError>:
{
80000e26:	40 ae       	mov.aa %a14,%sp
80000e28:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80000e2a:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000e2c:	b7 44 18 44 	insert %d4,%d4,4,8,24
80000e30:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000e34:	8f 72 00 21 	and %d2,%d2,7
80000e38:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000e3c:	80 22       	mov.d %d2,%a2
80000e3e:	0f 54 a0 30 	or %d3,%d4,%d5
80000e42:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
80000e46:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80000e4a:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000e4c:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000e50:	00 80       	rfe 
}
80000e52:	00 90       	ret 

80000e54 <IfxCpu_Trap_assertion>:
{
80000e54:	40 ae       	mov.aa %a14,%sp
80000e56:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80000e58:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000e5a:	8f f4 0f 41 	and %d4,%d4,255
80000e5e:	3b 00 50 20 	mov %d2,1280
80000e62:	a6 24       	or %d4,%d2
80000e64:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000e68:	8f 72 00 21 	and %d2,%d2,7
80000e6c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000e70:	80 22       	mov.d %d2,%a2
80000e72:	0f 54 a0 30 	or %d3,%d4,%d5
80000e76:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80000e7a:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80000e7e:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000e80:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000e84:	00 80       	rfe 
}
80000e86:	00 90       	ret 

80000e88 <IfxCpu_Trap_systemCall_Cpu0>:
{
80000e88:	40 ae       	mov.aa %a14,%sp
80000e8a:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80000e8c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000e8e:	b7 64 18 44 	insert %d4,%d4,6,8,24
80000e92:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000e96:	8f 72 00 21 	and %d2,%d2,7
80000e9a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000e9e:	80 22       	mov.d %d2,%a2
80000ea0:	0f 54 a0 30 	or %d3,%d4,%d5
80000ea4:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
80000ea8:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000eac:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000eb0:	00 80       	rfe 
}
80000eb2:	00 90       	ret 

80000eb4 <IfxCpu_Trap_systemCall_Cpu1>:
{
80000eb4:	40 ae       	mov.aa %a14,%sp
80000eb6:	20 08       	sub.a %sp,8
80000eb8:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000eba:	b7 64 18 44 	insert %d4,%d4,6,8,24
80000ebe:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000ec2:	8f 72 00 21 	and %d2,%d2,7
80000ec6:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000eca:	80 22       	mov.d %d2,%a2
80000ecc:	0f 54 a0 30 	or %d3,%d4,%d5
80000ed0:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80000ed4:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000ed8:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000edc:	00 80       	rfe 
}
80000ede:	00 90       	ret 

80000ee0 <IfxCpu_Trap_systemCall_Cpu2>:
{
80000ee0:	40 ae       	mov.aa %a14,%sp
80000ee2:	20 08       	sub.a %sp,8
80000ee4:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000ee6:	b7 64 18 44 	insert %d4,%d4,6,8,24
80000eea:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000eee:	8f 72 00 21 	and %d2,%d2,7
80000ef2:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000ef6:	80 22       	mov.d %d2,%a2
80000ef8:	0f 54 a0 30 	or %d3,%d4,%d5
80000efc:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80000f00:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000f04:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000f08:	00 80       	rfe 
}
80000f0a:	00 90       	ret 

80000f0c <IfxCpu_Trap_nonMaskableInterrupt>:
{
80000f0c:	40 ae       	mov.aa %a14,%sp
80000f0e:	20 08       	sub.a %sp,8
80000f10:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80000f12:	b7 74 18 44 	insert %d4,%d4,7,8,24
80000f16:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80000f1a:	8f 72 00 21 	and %d2,%d2,7
80000f1e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80000f22:	80 22       	mov.d %d2,%a2
80000f24:	0f 54 a0 30 	or %d3,%d4,%d5
80000f28:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
80000f2c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80000f30:	0d 00 40 02 	rslcx 
    __asm("rfe");
80000f34:	00 80       	rfe 
}
80000f36:	00 90       	ret 

80000f38 <IfxCpu_getIndex>:
    return cpuMode;
}


IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
{
80000f38:	40 ae       	mov.aa %a14,%sp
    IfxCpu_ResourceCpu result;
    uint32             index;
    result = IfxCpu_ResourceCpu_none;

    for (index = 0; index < IFXCPU_NUM_MODULES; index++)
80000f3a:	82 02       	mov %d2,0
80000f3c:	1d 00 03 00 	j 80000f42 <IfxCpu_getIndex+0xa>
80000f40:	c2 12       	add %d2,1
80000f42:	ff 32 18 80 	jge.u %d2,3,80000f72 <IfxCpu_getIndex+0x3a>
    {
        if (IfxCpu_cfg_indexMap[index].module == cpu)
80000f46:	8f 32 00 30 	sh %d3,%d2,3
80000f4a:	91 00 00 28 	movh.a %a2,32768
80000f4e:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
80000f52:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80000f56:	54 23       	ld.w %d3,[%a2]
80000f58:	80 44       	mov.d %d4,%a4
80000f5a:	5f 43 f3 ff 	jne %d3,%d4,80000f40 <IfxCpu_getIndex+0x8>
        {
            result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
80000f5e:	06 32       	sh %d2,3
80000f60:	91 00 00 28 	movh.a %a2,32768
80000f64:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
80000f68:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80000f6c:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80000f70:	00 90       	ret 
    result = IfxCpu_ResourceCpu_none;
80000f72:	82 32       	mov %d2,3
        }
    }

    return result;
}
80000f74:	00 90       	ret 

80000f76 <IfxCpu_getCoreMode>:
{
80000f76:	40 ae       	mov.aa %a14,%sp
80000f78:	80 48       	mov.d %d8,%a4
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
80000f7a:	6d ff df ff 	call 80000f38 <IfxCpu_getIndex>


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80000f7e:	4d c0 e1 3f 	mfcr %d3,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80000f82:	8f 73 00 31 	and %d3,%d3,7
    if (IfxCpu_getCoreIndex() != index)
80000f86:	5f 32 22 00 	jeq %d2,%d3,80000fca <IfxCpu_getCoreMode+0x54>
        dbgsr = cpu->DBGSR;
80000f8a:	bb 00 d0 3f 	mov.u %d3,64768
80000f8e:	60 82       	mov.a %a2,%d8
80000f90:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80000f94:	54 23       	ld.w %d3,[%a2]
    if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
80000f96:	37 03 e2 40 	extr.u %d4,%d3,1,2
80000f9a:	df 14 1c 00 	jeq %d4,1,80000fd2 <IfxCpu_getCoreMode+0x5c>
        if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
80000f9e:	df 04 1c 80 	jne %d4,0,80000fd6 <IfxCpu_getCoreMode+0x60>
            pmcsr_val = &MODULE_SCU.PMCSR[index];
80000fa2:	06 22       	sh %d2,2
80000fa4:	7b 30 00 3f 	movh %d3,61443
80000fa8:	1b 43 0d 36 	addi %d3,%d3,24788
80000fac:	60 32       	mov.a %a2,%d3
80000fae:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
            if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
80000fb2:	54 22       	ld.w %d2,[%a2]
80000fb4:	37 02 63 24 	extr.u %d2,%d2,8,3
80000fb8:	df 12 11 00 	jeq %d2,1,80000fda <IfxCpu_getCoreMode+0x64>
                if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
80000fbc:	54 22       	ld.w %d2,[%a2]
80000fbe:	37 02 63 24 	extr.u %d2,%d2,8,3
80000fc2:	df 32 0e 00 	jeq %d2,3,80000fde <IfxCpu_getCoreMode+0x68>
    cpuMode = IfxCpu_CoreMode_unknown;
80000fc6:	82 52       	mov %d2,5
80000fc8:	00 90       	ret 
        dbgsr.U = __mfcr(CPU_DBGSR);
80000fca:	4d 00 d0 3f 	mfcr %d3,$dbgsr
80000fce:	1d ff e4 ff 	j 80000f96 <IfxCpu_getCoreMode+0x20>
        cpuMode = IfxCpu_CoreMode_halt;
80000fd2:	82 02       	mov %d2,0
80000fd4:	00 90       	ret 
            cpuMode = IfxCpu_CoreMode_unknown;
80000fd6:	82 52       	mov %d2,5
80000fd8:	00 90       	ret 
                cpuMode = IfxCpu_CoreMode_run;
80000fda:	82 12       	mov %d2,1
80000fdc:	00 90       	ret 
                    cpuMode = IfxCpu_CoreMode_idle;
80000fde:	82 22       	mov %d2,2
}
80000fe0:	00 90       	ret 

80000fe2 <IfxCpu_setCoreMode>:
    *lock = 0;
}


boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
{
80000fe2:	40 ae       	mov.aa %a14,%sp
80000fe4:	80 4c       	mov.d %d12,%a4
80000fe6:	02 48       	mov %d8,%d4
    uint8              reqslp;
    boolean            retValue;
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
80000fe8:	6d ff a8 ff 	call 80000f38 <IfxCpu_getIndex>
80000fec:	02 2a       	mov %d10,%d2

    /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
80000fee:	8b 08 20 42 	ne %d4,%d8,0
80000ff2:	8b 38 20 32 	ne %d3,%d8,3
80000ff6:	26 43       	and %d3,%d4
                || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
80000ff8:	df 03 0a 00 	jeq %d3,0,8000100c <IfxCpu_setCoreMode+0x2a>
80000ffc:	df 48 05 00 	jeq %d8,4,80001006 <IfxCpu_setCoreMode+0x24>
80001000:	82 19       	mov %d9,1
80001002:	1d 00 06 00 	j 8000100e <IfxCpu_setCoreMode+0x2c>
80001006:	82 09       	mov %d9,0
80001008:	1d 00 03 00 	j 8000100e <IfxCpu_setCoreMode+0x2c>
8000100c:	82 09       	mov %d9,0
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
8000100e:	8f f9 0f 91 	and %d9,%d9,255

    reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
80001012:	8b 28 00 82 	eq %d8,%d8,2

    if (retValue == TRUE)
80001016:	df 09 04 80 	jne %d9,0,8000101e <IfxCpu_setCoreMode+0x3c>
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
        }
    }

    return retValue;
}
8000101a:	02 92       	mov %d2,%d9
8000101c:	00 90       	ret 
    reg.U = __mfcr(CPU_CORE_ID);
8000101e:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001022:	8f 72 00 21 	and %d2,%d2,7
        if (IfxCpu_getCoreIndex() != index)
80001026:	5f 2a 24 00 	jeq %d10,%d2,8000106e <IfxCpu_setCoreMode+0x8c>
            uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
8000102a:	6d ff 4a fe 	call 80000cbe <IfxScuWdt_getSafetyWatchdogPassword>
8000102e:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
80001030:	02 24       	mov %d4,%d2
80001032:	6d ff f0 fc 	call 80000a12 <IfxScuWdt_clearSafetyEndinit>
            MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
80001036:	1b 5a 03 20 	addi %d2,%d10,53
8000103a:	06 22       	sh %d2,2
8000103c:	7b 30 00 3f 	movh %d3,61443
80001040:	1b 03 00 36 	addi %d3,%d3,24576
80001044:	60 32       	mov.a %a2,%d3
80001046:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000104a:	54 23       	ld.w %d3,[%a2]
8000104c:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80001050:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setSafetyEndinit(safetyWdtPw);
80001052:	02 b4       	mov %d4,%d11
80001054:	6d ff 65 fe 	call 80000d1e <IfxScuWdt_setSafetyEndinit>
            cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
80001058:	bb 00 d0 2f 	mov.u %d2,64768
8000105c:	60 c2       	mov.a %a2,%d12
8000105e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001062:	54 22       	ld.w %d2,[%a2]
80001064:	b7 22 82 20 	insert %d2,%d2,2,1,2
80001068:	74 22       	st.w [%a2],%d2
8000106a:	1d ff d8 ff 	j 8000101a <IfxCpu_setCoreMode+0x38>
            uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
8000106e:	6d ff 16 fe 	call 80000c9a <IfxScuWdt_getCpuWatchdogPassword>
80001072:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearCpuEndinit(cpuWdtPw);
80001074:	02 24       	mov %d4,%d2
80001076:	6d ff a9 fc 	call 800009c8 <IfxScuWdt_clearCpuEndinit>
            MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
8000107a:	1b 5a 03 20 	addi %d2,%d10,53
8000107e:	06 22       	sh %d2,2
80001080:	7b 30 00 3f 	movh %d3,61443
80001084:	1b 03 00 36 	addi %d3,%d3,24576
80001088:	60 32       	mov.a %a2,%d3
8000108a:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000108e:	54 23       	ld.w %d3,[%a2]
80001090:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80001094:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
80001096:	02 b4       	mov %d4,%d11
80001098:	6d ff 1e fe 	call 80000cd4 <IfxScuWdt_setCpuEndinit>
8000109c:	1d ff bf ff 	j 8000101a <IfxCpu_setCoreMode+0x38>

800010a0 <IfxCpu_setProgramCounter>:


boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
{
800010a0:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800010a2:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800010a6:	8f 72 00 21 	and %d2,%d2,7
    if (cpu < IfxCpu_ResourceCpu_none)
800010aa:	ff 32 17 80 	jge.u %d2,3,800010d8 <IfxCpu_setProgramCounter+0x38>
        module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
800010ae:	06 32       	sh %d2,3
800010b0:	91 00 00 28 	movh.a %a2,32768
800010b4:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
800010b8:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800010bc:	54 22       	ld.w %d2,[%a2]
    boolean retVal = TRUE;

    if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
800010be:	80 43       	mov.d %d3,%a4
800010c0:	5f 23 0f 00 	jeq %d3,%d2,800010de <IfxCpu_setProgramCounter+0x3e>
    {
        retVal = FALSE;
    }
    else
    {
        cpu->PC.B.PC = programCounter >> 1;
800010c4:	bb 80 e0 2f 	mov.u %d2,65032
800010c8:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
800010cc:	54 42       	ld.w %d2,[%a4]
800010ce:	37 24 01 20 	insert %d2,%d4,%d2,0,1
800010d2:	74 42       	st.w [%a4],%d2
    boolean retVal = TRUE;
800010d4:	82 12       	mov %d2,1
800010d6:	00 90       	ret 
        module = NULL_PTR;
800010d8:	82 02       	mov %d2,0
800010da:	1d ff f2 ff 	j 800010be <IfxCpu_setProgramCounter+0x1e>
        retVal = FALSE;
800010de:	82 02       	mov %d2,0
    }

    return retVal;
}
800010e0:	00 90       	ret 

800010e2 <IfxCpu_startCore>:
    return retVal;
}


boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
{
800010e2:	40 ae       	mov.aa %a14,%sp
800010e4:	80 49       	mov.d %d9,%a4
    boolean retVal = TRUE;

    /* Set the PC for Core 1 */
    retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
800010e6:	6d ff dd ff 	call 800010a0 <IfxCpu_setProgramCounter>
800010ea:	8f 12 00 81 	and %d8,%d2,1
    /* Get the mode for Core 1 and set it to RUNNING */

    /* Core not running already */
    if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
800010ee:	60 94       	mov.a %a4,%d9
800010f0:	6d ff 43 ff 	call 80000f76 <IfxCpu_getCoreMode>
800010f4:	df 02 04 00 	jeq %d2,0,800010fc <IfxCpu_startCore+0x1a>
    {
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
    }

    return retVal;
}
800010f8:	02 82       	mov %d2,%d8
800010fa:	00 90       	ret 
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
800010fc:	82 14       	mov %d4,1
800010fe:	60 94       	mov.a %a4,%d9
80001100:	6d ff 71 ff 	call 80000fe2 <IfxCpu_setCoreMode>
80001104:	26 28       	and %d8,%d2
80001106:	1d ff f9 ff 	j 800010f8 <IfxCpu_startCore+0x16>

8000110a <IfxCpu_waitEvent>:


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
8000110a:	40 ae       	mov.aa %a14,%sp
8000110c:	40 4c       	mov.aa %a12,%a4
8000110e:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80001110:	80 42       	mov.d %d2,%a4
80001112:	b7 02 1c 20 	insert %d2,%d2,0,0,28
80001116:	7b 00 00 3d 	movh %d3,53248
8000111a:	5f 32 28 00 	jeq %d2,%d3,8000116a <IfxCpu_waitEvent+0x60>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
8000111e:	6d ff 83 fa 	call 80000624 <IfxScuCcu_getSourceFrequency>
80001122:	91 30 00 2f 	movh.a %a2,61443
80001126:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
8000112a:	54 23       	ld.w %d3,[%a2]
8000112c:	37 03 64 34 	extr.u %d3,%d3,8,4
80001130:	4b 03 41 31 	itof %d3,%d3
80001134:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
80001138:	7b a0 47 34 	movh %d3,17530
8000113c:	4b 32 51 20 	div.f %d2,%d2,%d3
80001140:	4b 08 61 41 	utof %d4,%d8
80001144:	4b 24 41 40 	mul.f %d4,%d4,%d2
80001148:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
8000114c:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80001150:	54 c2       	ld.w %d2,[%a12]
80001152:	8f 72 00 21 	and %d2,%d2,7
80001156:	df 72 18 00 	jeq %d2,7,80001186 <IfxCpu_waitEvent+0x7c>
    __asm__ volatile ("nop" : : : "memory");
8000115a:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
8000115c:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80001160:	a2 42       	sub %d2,%d4
80001162:	3f 32 f7 ff 	jlt.u %d2,%d3,80001150 <IfxCpu_waitEvent+0x46>
        {
            errorcnt = 1;
80001166:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
80001168:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
8000116a:	80 42       	mov.d %d2,%a4
8000116c:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
80001170:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
80001174:	4d c0 e1 2f 	mfcr %d2,$core_id
80001178:	8f c2 01 20 	sh %d2,%d2,28
8000117c:	0b 23 80 20 	sub %d2,%d3,%d2
80001180:	60 2c       	mov.a %a12,%d2
80001182:	1d ff ce ff 	j 8000111e <IfxCpu_waitEvent+0x14>
    boolean          errorcnt      = 0U;
80001186:	82 02       	mov %d2,0
80001188:	00 90       	ret 

8000118a <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
8000118a:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
8000118c:	4d c0 e1 2f 	mfcr %d2,$core_id
80001190:	82 13       	mov %d3,1
80001192:	57 30 21 22 	imask %e2,%d3,%d2,1
80001196:	49 42 40 08 	ldmst [%a4]0,%e2
}
8000119a:	00 90       	ret 

8000119c <Ifx_Cpp_Init>:
#pragma section
#elif defined(__DCC__)
#pragma section CONST
#endif
static void Ifx_Cpp_Init(void)
{
8000119c:	40 ae       	mov.aa %a14,%sp
    Ifx_C_Init();           /*Initialization of C runtime variables */
8000119e:	6d 00 1f 04 	call 800019dc <Ifx_C_Init>
#elif defined (__HIGHTEC__)
extern void _init(void); /* cpp initialization */
    _init();
#elif defined (__GNUC__) && !defined(__HIGHTEC__)
    extern void _init(void); /* cpp initialization */
    _init();
800011a2:	6d 00 a5 09 	call 800024ec <_init>
#endif
}
800011a6:	00 90       	ret 

800011a8 <hardware_init_hook>:
{}
800011a8:	00 90       	ret 

800011aa <software_init_hook>:
{}
800011aa:	00 90       	ret 

800011ac <_Core0_start>:
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
800011ac:	91 30 00 2f 	movh.a %a2,61443
800011b0:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
    __setareg(sp, __USTACK(0));
800011b4:	91 20 00 37 	movh.a %a3,28674
800011b8:	37 02 6e 21 	extr.u %d2,%d2,2,14
800011bc:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800011c0:	8f f2 83 81 	xor %d8,%d2,63
800011c4:	80 32       	mov.d %d2,%a3
800011c6:	1b 02 60 29 	addi %d2,%d2,-27136
800011ca:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
800011cc:	0d 00 80 04 	dsync 
    __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
800011d0:	3b 00 98 20 	mov %d2,2432
800011d4:	cd 42 e0 0f 	mtcr $psw,%d2
    pcxi  = __mfcr(CPU_PCXI);
800011d8:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
800011dc:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
800011e0:	cd 02 e0 0f 	mtcr $pcxi,%d2
    if (enable)
    {                           /* Step 3: Initiate invalidation of current cache contents if any */
        Ifx_CPU_PCON1 pcon1;
        pcon1.U       = 0;
        pcon1.B.PCINV = 1;
        __mtcr(CPU_PCON1, pcon1.U);
800011e4:	82 12       	mov %d2,1
800011e6:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800011ea:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800011ee:	8f 72 00 21 	and %d2,%d2,7
    }

    uint32 coreIndex   = IfxCpu_getCoreIndex();
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800011f2:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
800011f6:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
800011fa:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800011fc:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800011fe:	37 02 6e 21 	extr.u %d2,%d2,2,14
    /*PCACHE enable steps */
    {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80001202:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80001206:	6f 13 41 81 	jnz.t %d3,1,80001488 <_Core0_start+0x2dc>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000120a:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000120e:	54 22       	ld.w %d2,[%a2]
80001210:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001214:	a6 32       	or %d2,%d3
80001216:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000121a:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
8000121c:	54 22       	ld.w %d2,[%a2]
8000121e:	6f 02 ff ff 	jnz.t %d2,0,8000121c <_Core0_start+0x70>
        Ifx_CPU_PCON0 pcon0;
        pcon0.U       = 0;
        pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
        __mtcr(CPU_PCON0, pcon0.U);
80001222:	82 02       	mov %d2,0
80001224:	cd c2 20 09 	mtcr $pcon0,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001228:	54 22       	ld.w %d2,[%a2]
8000122a:	6f 12 09 00 	jz.t %d2,1,8000123c <_Core0_start+0x90>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000122e:	54 22       	ld.w %d2,[%a2]
80001230:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001234:	a6 32       	or %d2,%d3
80001236:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000123a:	74 22       	st.w [%a2],%d2

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000123c:	54 22       	ld.w %d2,[%a2]
8000123e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001242:	a6 32       	or %d2,%d3
80001244:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001248:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000124a:	54 22       	ld.w %d2,[%a2]
8000124c:	6f 02 ff 7f 	jz.t %d2,0,8000124a <_Core0_start+0x9e>
    __asm__ volatile ("isync" : : : "memory");
80001250:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80001254:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001258:	7b 30 00 3f 	movh %d3,61443
8000125c:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001260:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001264:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001268:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
8000126a:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
8000126c:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
8000126e:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80001272:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80001276:	6f 13 fd 80 	jnz.t %d3,1,80001470 <_Core0_start+0x2c4>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000127a:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000127e:	54 22       	ld.w %d2,[%a2]
80001280:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001284:	a6 32       	or %d2,%d3
80001286:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000128a:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
8000128c:	54 22       	ld.w %d2,[%a2]
8000128e:	6f 02 ff ff 	jnz.t %d2,0,8000128c <_Core0_start+0xe0>
        __mtcr(CPU_DCON0, dcon0.U);
80001292:	82 22       	mov %d2,2
80001294:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80001298:	54 22       	ld.w %d2,[%a2]
8000129a:	6f 12 09 00 	jz.t %d2,1,800012ac <_Core0_start+0x100>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000129e:	54 22       	ld.w %d2,[%a2]
800012a0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800012a4:	a6 32       	or %d2,%d3
800012a6:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800012aa:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800012ac:	54 22       	ld.w %d2,[%a2]
800012ae:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800012b2:	a6 32       	or %d2,%d3
800012b4:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800012b8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800012ba:	54 22       	ld.w %d2,[%a2]
800012bc:	6f 02 ff 7f 	jz.t %d2,0,800012ba <_Core0_start+0x10e>
800012c0:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
800012c4:	91 30 00 2f 	movh.a %a2,61443
800012c8:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800012cc:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800012d0:	8f 28 00 30 	sh %d3,%d8,2
    if (watchdog->CON0.B.LCK)
800012d4:	6f 12 09 00 	jz.t %d2,1,800012e6 <_Core0_start+0x13a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800012d8:	54 22       	ld.w %d2,[%a2]
800012da:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800012de:	a6 32       	or %d2,%d3
800012e0:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800012e4:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800012e6:	91 30 00 2f 	movh.a %a2,61443
800012ea:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800012ee:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800012f2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800012f6:	a6 32       	or %d2,%d3
800012f8:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800012fc:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800012fe:	54 22       	ld.w %d2,[%a2]
80001300:	6f 02 ff ff 	jnz.t %d2,0,800012fe <_Core0_start+0x152>
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
80001304:	91 00 00 38 	movh.a %a3,32768
80001308:	80 32       	mov.d %d2,%a3
8000130a:	1b 02 10 20 	addi %d2,%d2,256
8000130e:	cd 42 e2 0f 	mtcr $btv,%d2
    __mtcr(CPU_BIV, (uint32)__INTTAB(0));
80001312:	91 f0 01 38 	movh.a %a3,32799
80001316:	80 32       	mov.d %d2,%a3
80001318:	1b 02 00 24 	addi %d2,%d2,16384
8000131c:	cd 02 e2 0f 	mtcr $biv,%d2
    __mtcr(CPU_ISP, (uint32)__ISTACK(0));
80001320:	91 20 00 37 	movh.a %a3,28674
80001324:	80 32       	mov.d %d2,%a3
80001326:	1b 02 b0 29 	addi %d2,%d2,-25856
8000132a:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
8000132e:	54 22       	ld.w %d2,[%a2]
80001330:	6f 12 09 00 	jz.t %d2,1,80001342 <_Core0_start+0x196>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001334:	54 22       	ld.w %d2,[%a2]
80001336:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000133a:	a6 32       	or %d2,%d3
8000133c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001340:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001342:	91 30 00 2f 	movh.a %a2,61443
80001346:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
8000134a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
8000134e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001352:	a6 32       	or %d2,%d3
80001354:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001358:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8000135a:	54 22       	ld.w %d2,[%a2]
8000135c:	6f 02 ff 7f 	jz.t %d2,0,8000135a <_Core0_start+0x1ae>
    __setareg(a0, __SDATA1(0));
80001360:	91 10 00 26 	movh.a %a2,24577
80001364:	80 22       	mov.d %d2,%a2
80001366:	1b 02 00 28 	addi %d2,%d2,-32768
8000136a:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(0));
8000136c:	91 10 00 28 	movh.a %a2,32769
80001370:	80 22       	mov.d %d2,%a2
80001372:	1b 02 00 28 	addi %d2,%d2,-32768
80001376:	60 21       	mov.a %a1,%d2
    __setareg(a8, __SDATA3(0));
80001378:	91 10 00 28 	movh.a %a2,32769
8000137c:	80 22       	mov.d %d2,%a2
8000137e:	1b 02 00 28 	addi %d2,%d2,-32768
80001382:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(0));
80001384:	91 10 00 29 	movh.a %a2,36865
80001388:	80 22       	mov.d %d2,%a2
8000138a:	1b 02 00 28 	addi %d2,%d2,-32768
8000138e:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80001390:	91 20 00 37 	movh.a %a3,28674
80001394:	91 20 00 27 	movh.a %a2,28674
80001398:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70019c00 <__CSA0>>
8000139c:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7001bc00 <__CSA0_END>>
800013a0:	01 32 20 20 	sub.a %a2,%a2,%a3
800013a4:	80 22       	mov.d %d2,%a2
800013a6:	8f a2 1f 70 	sh %d7,%d2,-6
    uint32 *prvCsa      = csaBegin;
800013aa:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
800013ac:	1b d7 ff 0f 	addi %d0,%d7,-3
    for (k = 0U; k < numOfCsa; k++)
800013b0:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
800013b2:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800013b4:	7b f0 00 40 	movh %d4,15
    for (k = 0U; k < numOfCsa; k++)
800013b8:	df 07 27 00 	jeq %d7,0,80001406 <_Core0_start+0x25a>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800013bc:	37 02 70 53 	extr.u %d5,%d2,6,16
800013c0:	8f 42 1f 60 	sh %d6,%d2,-12
800013c4:	26 46       	and %d6,%d4
800013c6:	a6 65       	or %d5,%d6
        if (k == 0U)
800013c8:	df 03 16 00 	jeq %d3,0,800013f4 <_Core0_start+0x248>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
800013cc:	74 25       	st.w [%a2],%d5
        if (k == (numOfCsa - 3U))
800013ce:	5f 03 04 80 	jne %d3,%d0,800013d6 <_Core0_start+0x22a>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
800013d2:	cd c5 e3 0f 	mtcr $lcx,%d5
    for (k = 0U; k < numOfCsa; k++)
800013d6:	c2 13       	add %d3,1
800013d8:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
800013da:	1b 02 04 50 	addi %d5,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800013de:	5f 37 0f 00 	jeq %d7,%d3,800013fc <_Core0_start+0x250>
        nxtCsa += 16U;           /* next CSA */
800013e2:	02 52       	mov %d2,%d5
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800013e4:	37 02 70 53 	extr.u %d5,%d2,6,16
800013e8:	8f 42 1f 60 	sh %d6,%d2,-12
800013ec:	26 46       	and %d6,%d4
800013ee:	a6 65       	or %d5,%d6
        if (k == 0U)
800013f0:	df 03 ee ff 	jne %d3,0,800013cc <_Core0_start+0x220>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
800013f4:	cd 85 e3 0f 	mtcr $fcx,%d5
800013f8:	1d ff eb ff 	j 800013ce <_Core0_start+0x222>
800013fc:	1b f7 ff 2f 	addi %d2,%d7,-1
80001400:	06 62       	sh %d2,6
80001402:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80001406:	82 02       	mov %d2,0
80001408:	74 22       	st.w [%a2],%d2
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
8000140a:	6d ff 5a fc 	call 80000cbe <IfxScuWdt_getSafetyWatchdogPassword>
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
8000140e:	02 84       	mov %d4,%d8
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
80001410:	02 29       	mov %d9,%d2
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
80001412:	6d ff 28 fb 	call 80000a62 <IfxScuWdt_disableCpuWatchdog>
        IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
80001416:	02 94       	mov %d4,%d9
80001418:	6d ff 64 fb 	call 80000ae0 <IfxScuWdt_disableSafetyWatchdog>
       	hardware_init_hook();
8000141c:	6d ff c6 fe 	call 800011a8 <hardware_init_hook>
        Ifx_Cpp_Init();
80001420:	6d ff be fe 	call 8000119c <Ifx_Cpp_Init>
       	software_init_hook();
80001424:	6d ff c3 fe 	call 800011aa <software_init_hook>
        IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
80001428:	02 84       	mov %d4,%d8
8000142a:	6d ff aa fb 	call 80000b7e <IfxScuWdt_enableCpuWatchdog>
        IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
8000142e:	02 94       	mov %d4,%d9
80001430:	6d ff e6 fb 	call 80000bfc <IfxScuWdt_enableSafetyWatchdog>
    IFXCPU_CSTART_CCU_INIT_HOOK();
80001434:	91 00 00 48 	movh.a %a4,32768
80001438:	d9 44 2c 80 	lea %a4,[%a4]556 <8000022c <IfxScuCcu_defaultClockConfig>>
8000143c:	6d ff 25 f9 	call 80000686 <IfxScuCcu_init>
    (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
80001440:	91 00 00 28 	movh.a %a2,32768
80001444:	80 22       	mov.d %d2,%a2
80001446:	1b 02 4a 41 	addi %d4,%d2,5280
8000144a:	91 30 88 4f 	movh.a %a4,63619
8000144e:	6d ff 4a fe 	call 800010e2 <IfxCpu_startCore>
    (void)IfxCpu_startCore(&MODULE_CPU2, (uint32)&_Core2_start);       /*The status returned by function call is ignored */
80001452:	91 00 00 28 	movh.a %a2,32768
80001456:	80 22       	mov.d %d2,%a2
80001458:	1b e2 73 41 	addi %d4,%d2,5950
8000145c:	91 50 88 4f 	movh.a %a4,63621
80001460:	6d ff 41 fe 	call 800010e2 <IfxCpu_startCore>
    __non_return_call(core0_main);
80001464:	91 00 00 28 	movh.a %a2,32768
80001468:	d9 22 96 c1 	lea %a2,[%a2]6934 <80001b16 <core0_main>>
8000146c:	dc 02       	ji %a2
}
8000146e:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001470:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001472:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001476:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000147a:	0f 34 a0 20 	or %d2,%d4,%d3
8000147e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001482:	74 22       	st.w [%a2],%d2
80001484:	1d ff fd fe 	j 8000127e <_Core0_start+0xd2>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001488:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000148a:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000148e:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001492:	0f 34 a0 20 	or %d2,%d4,%d3
80001496:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000149a:	74 22       	st.w [%a2],%d2
8000149c:	1d ff b9 fe 	j 8000120e <_Core0_start+0x62>

800014a0 <_Core1_start>:
    password  = watchdog->CON0.B.PW;
800014a0:	91 30 00 2f 	movh.a %a2,61443
800014a4:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800014a8:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800014ac:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[1]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(1);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(1));
800014b0:	91 20 00 26 	movh.a %a2,24578
800014b4:	8f f2 83 41 	xor %d4,%d2,63
800014b8:	80 22       	mov.d %d2,%a2
800014ba:	1b 02 60 2b 	addi %d2,%d2,-18944
800014be:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
800014c0:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART1_PSW_DEFAULT);    /* 0x00000980 */
800014c4:	3b 00 98 20 	mov %d2,2432
800014c8:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
800014cc:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART1_PCX_O_S_DEFAULT; /*0xfff00000; */
800014d0:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
800014d4:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
800014d8:	82 12       	mov %d2,1
800014da:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800014de:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800014e2:	7b 30 00 3f 	movh %d3,61443
800014e6:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800014ea:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800014ee:	13 c2 20 23 	madd %d2,%d3,%d2,12
800014f2:	60 22       	mov.a %a2,%d2
800014f4:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800014f6:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800014f8:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800014fc:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80001500:	6f 13 13 81 	jnz.t %d3,1,80001726 <_Core1_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001504:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001508:	54 22       	ld.w %d2,[%a2]
8000150a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000150e:	a6 32       	or %d2,%d3
80001510:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001514:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001516:	54 22       	ld.w %d2,[%a2]
80001518:	6f 02 ff ff 	jnz.t %d2,0,80001516 <_Core1_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
8000151c:	82 02       	mov %d2,0
8000151e:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
80001522:	54 22       	ld.w %d2,[%a2]
80001524:	6f 12 09 00 	jz.t %d2,1,80001536 <_Core1_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001528:	54 22       	ld.w %d2,[%a2]
8000152a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000152e:	a6 32       	or %d2,%d3
80001530:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001534:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001536:	54 22       	ld.w %d2,[%a2]
80001538:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000153c:	a6 32       	or %d2,%d3
8000153e:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001542:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001544:	54 22       	ld.w %d2,[%a2]
80001546:	6f 02 ff 7f 	jz.t %d2,0,80001544 <_Core1_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
8000154a:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
8000154e:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001552:	7b 30 00 3f 	movh %d3,61443
80001556:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000155a:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000155e:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001562:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80001564:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80001566:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80001568:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000156c:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80001570:	6f 13 cf 80 	jnz.t %d3,1,8000170e <_Core1_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001574:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001578:	54 22       	ld.w %d2,[%a2]
8000157a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000157e:	a6 32       	or %d2,%d3
80001580:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001584:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001586:	54 22       	ld.w %d2,[%a2]
80001588:	6f 02 ff ff 	jnz.t %d2,0,80001586 <_Core1_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
8000158c:	82 02       	mov %d2,0
8000158e:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80001592:	54 22       	ld.w %d2,[%a2]
80001594:	6f 12 09 00 	jz.t %d2,1,800015a6 <_Core1_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001598:	54 22       	ld.w %d2,[%a2]
8000159a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000159e:	a6 32       	or %d2,%d3
800015a0:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800015a4:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800015a6:	54 22       	ld.w %d2,[%a2]
800015a8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800015ac:	a6 32       	or %d2,%d3
800015ae:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800015b2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800015b4:	54 22       	ld.w %d2,[%a2]
800015b6:	6f 02 ff 7f 	jz.t %d2,0,800015b4 <_Core1_start+0x114>
800015ba:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
800015be:	91 30 00 2f 	movh.a %a2,61443
800015c2:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800015c6:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800015ca:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
800015cc:	6f 12 09 00 	jz.t %d2,1,800015de <_Core1_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800015d0:	54 22       	ld.w %d2,[%a2]
800015d2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800015d6:	a6 42       	or %d2,%d4
800015d8:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800015dc:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800015de:	91 30 00 2f 	movh.a %a2,61443
800015e2:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800015e6:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800015ea:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800015ee:	a6 42       	or %d2,%d4
800015f0:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800015f4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800015f6:	54 22       	ld.w %d2,[%a2]
800015f8:	6f 02 ff ff 	jnz.t %d2,0,800015f6 <_Core1_start+0x156>

    /* Clear the ENDINIT bit in the WDT_CON1 register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(1));
800015fc:	91 f0 01 38 	movh.a %a3,32799
80001600:	80 32       	mov.d %d2,%a3
80001602:	1b 02 20 26 	addi %d2,%d2,25088
80001606:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(1));
8000160a:	91 f0 01 38 	movh.a %a3,32799
8000160e:	80 32       	mov.d %d2,%a3
80001610:	1b 02 00 24 	addi %d2,%d2,16384
80001614:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(1));
80001618:	91 20 00 36 	movh.a %a3,24578
8000161c:	80 32       	mov.d %d2,%a3
8000161e:	1b 02 b0 2b 	addi %d2,%d2,-17664
80001622:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80001626:	54 22       	ld.w %d2,[%a2]
80001628:	6f 12 09 00 	jz.t %d2,1,8000163a <_Core1_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000162c:	54 22       	ld.w %d2,[%a2]
8000162e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001632:	a6 42       	or %d2,%d4
80001634:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001638:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000163a:	91 30 00 2f 	movh.a %a2,61443
8000163e:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80001642:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80001646:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000164a:	a6 42       	or %d2,%d4
8000164c:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001650:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001652:	54 22       	ld.w %d2,[%a2]
80001654:	6f 02 ff 7f 	jz.t %d2,0,80001652 <_Core1_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(1));
80001658:	91 10 00 26 	movh.a %a2,24577
8000165c:	80 22       	mov.d %d2,%a2
8000165e:	1b 02 00 28 	addi %d2,%d2,-32768
80001662:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(1));
80001664:	91 10 00 28 	movh.a %a2,32769
80001668:	80 22       	mov.d %d2,%a2
8000166a:	1b 02 00 28 	addi %d2,%d2,-32768
8000166e:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialised */
    __setareg(a8, __SDATA3(1));
80001670:	91 10 00 28 	movh.a %a2,32769
80001674:	80 22       	mov.d %d2,%a2
80001676:	1b 02 00 28 	addi %d2,%d2,-32768
8000167a:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(1));
8000167c:	91 10 00 29 	movh.a %a2,36865
80001680:	80 22       	mov.d %d2,%a2
80001682:	1b 02 00 28 	addi %d2,%d2,-32768
80001686:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80001688:	91 20 00 36 	movh.a %a3,24578
8000168c:	91 20 00 26 	movh.a %a2,24578
80001690:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <6001bc00 <__CSA1>>
80001694:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <6001dc00 <__CSA1_END>>
80001698:	01 32 20 20 	sub.a %a2,%a2,%a3
8000169c:	80 22       	mov.d %d2,%a2
8000169e:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
800016a2:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
800016a4:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
800016a8:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
800016aa:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800016ac:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
800016b0:	df 06 27 00 	jeq %d6,0,800016fe <_Core1_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800016b4:	37 02 70 43 	extr.u %d4,%d2,6,16
800016b8:	8f 42 1f 50 	sh %d5,%d2,-12
800016bc:	26 75       	and %d5,%d7
800016be:	a6 54       	or %d4,%d5
        if (k == 0U)
800016c0:	df 03 16 00 	jeq %d3,0,800016ec <_Core1_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
800016c4:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
800016c6:	5f 03 04 80 	jne %d3,%d0,800016ce <_Core1_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
800016ca:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
800016ce:	c2 13       	add %d3,1
800016d0:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
800016d2:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800016d6:	5f 36 0f 00 	jeq %d6,%d3,800016f4 <_Core1_start+0x254>
        nxtCsa += 16U;           /* next CSA */
800016da:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800016dc:	37 02 70 43 	extr.u %d4,%d2,6,16
800016e0:	8f 42 1f 50 	sh %d5,%d2,-12
800016e4:	26 75       	and %d5,%d7
800016e6:	a6 54       	or %d4,%d5
        if (k == 0U)
800016e8:	df 03 ee ff 	jne %d3,0,800016c4 <_Core1_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
800016ec:	cd 84 e3 0f 	mtcr $fcx,%d4
800016f0:	1d ff eb ff 	j 800016c6 <_Core1_start+0x226>
800016f4:	1b f6 ff 2f 	addi %d2,%d6,-1
800016f8:	06 62       	sh %d2,6
800016fa:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
800016fe:	82 02       	mov %d2,0
80001700:	74 22       	st.w [%a2],%d2

    IfxCpu_initCSA((uint32 *)__CSA(1), (uint32 *)__CSA_END(1));

    /*Call main function of Cpu0 */
    __non_return_call(core1_main);
80001702:	91 00 00 28 	movh.a %a2,32768
80001706:	d9 22 be d1 	lea %a2,[%a2]7038 <80001b7e <core1_main>>
8000170a:	dc 02       	ji %a2
}
8000170c:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000170e:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001710:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001714:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001718:	0f 35 a0 20 	or %d2,%d5,%d3
8000171c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001720:	74 22       	st.w [%a2],%d2
80001722:	1d ff 2b ff 	j 80001578 <_Core1_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001726:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001728:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000172c:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001730:	0f 35 a0 20 	or %d2,%d5,%d3
80001734:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001738:	74 22       	st.w [%a2],%d2
8000173a:	1d ff e7 fe 	j 80001508 <_Core1_start+0x68>

8000173e <_Core2_start>:
    password  = watchdog->CON0.B.PW;
8000173e:	91 30 00 2f 	movh.a %a2,61443
80001742:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001746:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
8000174a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[2]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(2);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(2));
8000174e:	91 20 00 25 	movh.a %a2,20482
80001752:	8f f2 83 41 	xor %d4,%d2,63
80001756:	80 22       	mov.d %d2,%a2
80001758:	1b 02 60 2b 	addi %d2,%d2,-18944
8000175c:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
8000175e:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART2_PSW_DEFAULT);    /* 0x00000980 */
80001762:	3b 00 98 20 	mov %d2,2432
80001766:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
8000176a:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART2_PCX_O_S_DEFAULT; /*0xfff00000; */
8000176e:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80001772:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
80001776:	82 12       	mov %d2,1
80001778:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000177c:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80001780:	7b 30 00 3f 	movh %d3,61443
80001784:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001788:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000178c:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001790:	60 22       	mov.a %a2,%d2
80001792:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80001794:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80001796:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000179a:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
8000179e:	6f 13 13 81 	jnz.t %d3,1,800019c4 <_Core2_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800017a2:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800017a6:	54 22       	ld.w %d2,[%a2]
800017a8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800017ac:	a6 32       	or %d2,%d3
800017ae:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800017b2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800017b4:	54 22       	ld.w %d2,[%a2]
800017b6:	6f 02 ff ff 	jnz.t %d2,0,800017b4 <_Core2_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
800017ba:	82 02       	mov %d2,0
800017bc:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
800017c0:	54 22       	ld.w %d2,[%a2]
800017c2:	6f 12 09 00 	jz.t %d2,1,800017d4 <_Core2_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800017c6:	54 22       	ld.w %d2,[%a2]
800017c8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800017cc:	a6 32       	or %d2,%d3
800017ce:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800017d2:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800017d4:	54 22       	ld.w %d2,[%a2]
800017d6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800017da:	a6 32       	or %d2,%d3
800017dc:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800017e0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800017e2:	54 22       	ld.w %d2,[%a2]
800017e4:	6f 02 ff 7f 	jz.t %d2,0,800017e2 <_Core2_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
800017e8:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
800017ec:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800017f0:	7b 30 00 3f 	movh %d3,61443
800017f4:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800017f8:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800017fc:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001800:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80001802:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80001804:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80001806:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000180a:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
8000180e:	6f 13 cf 80 	jnz.t %d3,1,800019ac <_Core2_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001812:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001816:	54 22       	ld.w %d2,[%a2]
80001818:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000181c:	a6 32       	or %d2,%d3
8000181e:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001822:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001824:	54 22       	ld.w %d2,[%a2]
80001826:	6f 02 ff ff 	jnz.t %d2,0,80001824 <_Core2_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
8000182a:	82 02       	mov %d2,0
8000182c:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80001830:	54 22       	ld.w %d2,[%a2]
80001832:	6f 12 09 00 	jz.t %d2,1,80001844 <_Core2_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001836:	54 22       	ld.w %d2,[%a2]
80001838:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000183c:	a6 32       	or %d2,%d3
8000183e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001842:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001844:	54 22       	ld.w %d2,[%a2]
80001846:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000184a:	a6 32       	or %d2,%d3
8000184c:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001850:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001852:	54 22       	ld.w %d2,[%a2]
80001854:	6f 02 ff 7f 	jz.t %d2,0,80001852 <_Core2_start+0x114>
80001858:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
8000185c:	91 30 00 2f 	movh.a %a2,61443
80001860:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001864:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001868:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
8000186a:	6f 12 09 00 	jz.t %d2,1,8000187c <_Core2_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000186e:	54 22       	ld.w %d2,[%a2]
80001870:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001874:	a6 42       	or %d2,%d4
80001876:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000187a:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000187c:	91 30 00 2f 	movh.a %a2,61443
80001880:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001884:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80001888:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000188c:	a6 42       	or %d2,%d4
8000188e:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001892:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001894:	54 22       	ld.w %d2,[%a2]
80001896:	6f 02 ff ff 	jnz.t %d2,0,80001894 <_Core2_start+0x156>

    /* Clear the ENDINIT bit in the Password register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(2));
8000189a:	91 f0 01 38 	movh.a %a3,32799
8000189e:	80 32       	mov.d %d2,%a3
800018a0:	1b 02 10 26 	addi %d2,%d2,24832
800018a4:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(2));
800018a8:	91 f0 01 38 	movh.a %a3,32799
800018ac:	80 32       	mov.d %d2,%a3
800018ae:	1b 02 00 24 	addi %d2,%d2,16384
800018b2:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(2));
800018b6:	91 20 00 35 	movh.a %a3,20482
800018ba:	80 32       	mov.d %d2,%a3
800018bc:	1b 02 b0 2b 	addi %d2,%d2,-17664
800018c0:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
800018c4:	54 22       	ld.w %d2,[%a2]
800018c6:	6f 12 09 00 	jz.t %d2,1,800018d8 <_Core2_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018ca:	54 22       	ld.w %d2,[%a2]
800018cc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018d0:	a6 42       	or %d2,%d4
800018d2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800018d6:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018d8:	91 30 00 2f 	movh.a %a2,61443
800018dc:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800018e0:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800018e4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018e8:	a6 42       	or %d2,%d4
800018ea:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800018ee:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800018f0:	54 22       	ld.w %d2,[%a2]
800018f2:	6f 02 ff 7f 	jz.t %d2,0,800018f0 <_Core2_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(2));
800018f6:	91 10 00 26 	movh.a %a2,24577
800018fa:	80 22       	mov.d %d2,%a2
800018fc:	1b 02 00 28 	addi %d2,%d2,-32768
80001900:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(2));
80001902:	91 10 00 28 	movh.a %a2,32769
80001906:	80 22       	mov.d %d2,%a2
80001908:	1b 02 00 28 	addi %d2,%d2,-32768
8000190c:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialized */
    __setareg(a8, __SDATA3(2));
8000190e:	91 10 00 28 	movh.a %a2,32769
80001912:	80 22       	mov.d %d2,%a2
80001914:	1b 02 00 28 	addi %d2,%d2,-32768
80001918:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(2));
8000191a:	91 10 00 29 	movh.a %a2,36865
8000191e:	80 22       	mov.d %d2,%a2
80001920:	1b 02 00 28 	addi %d2,%d2,-32768
80001924:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80001926:	91 20 00 35 	movh.a %a3,20482
8000192a:	91 20 00 25 	movh.a %a2,20482
8000192e:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <5001bc00 <__CSA2>>
80001932:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <5001dc00 <__CSA2_END>>
80001936:	01 32 20 20 	sub.a %a2,%a2,%a3
8000193a:	80 22       	mov.d %d2,%a2
8000193c:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80001940:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80001942:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80001946:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80001948:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000194a:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8000194e:	df 06 27 00 	jeq %d6,0,8000199c <_Core2_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80001952:	37 02 70 43 	extr.u %d4,%d2,6,16
80001956:	8f 42 1f 50 	sh %d5,%d2,-12
8000195a:	26 75       	and %d5,%d7
8000195c:	a6 54       	or %d4,%d5
        if (k == 0U)
8000195e:	df 03 16 00 	jeq %d3,0,8000198a <_Core2_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80001962:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80001964:	5f 03 04 80 	jne %d3,%d0,8000196c <_Core2_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80001968:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8000196c:	c2 13       	add %d3,1
8000196e:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80001970:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80001974:	5f 36 0f 00 	jeq %d6,%d3,80001992 <_Core2_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80001978:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
8000197a:	37 02 70 43 	extr.u %d4,%d2,6,16
8000197e:	8f 42 1f 50 	sh %d5,%d2,-12
80001982:	26 75       	and %d5,%d7
80001984:	a6 54       	or %d4,%d5
        if (k == 0U)
80001986:	df 03 ee ff 	jne %d3,0,80001962 <_Core2_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
8000198a:	cd 84 e3 0f 	mtcr $fcx,%d4
8000198e:	1d ff eb ff 	j 80001964 <_Core2_start+0x226>
80001992:	1b f6 ff 2f 	addi %d2,%d6,-1
80001996:	06 62       	sh %d2,6
80001998:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
8000199c:	82 02       	mov %d2,0
8000199e:	74 22       	st.w [%a2],%d2
    /* Setup the context save area linked list. */

    IfxCpu_initCSA((uint32 *)__CSA(2), (uint32 *)__CSA_END(2));

    /*Call main function of Cpu0 */
    __non_return_call(core2_main);
800019a0:	91 00 00 28 	movh.a %a2,32768
800019a4:	d9 22 a8 e1 	lea %a2,[%a2]7080 <80001ba8 <core2_main>>
800019a8:	dc 02       	ji %a2
}
800019aa:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800019ac:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800019ae:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800019b2:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800019b6:	0f 35 a0 20 	or %d2,%d5,%d3
800019ba:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800019be:	74 22       	st.w [%a2],%d2
800019c0:	1d ff 2b ff 	j 80001816 <_Core2_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800019c4:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800019c6:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800019ca:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800019ce:	0f 35 a0 20 	or %d2,%d5,%d3
800019d2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800019d6:	74 22       	st.w [%a2],%d2
800019d8:	1d ff e7 fe 	j 800017a6 <_Core2_start+0x68>

800019dc <Ifx_C_Init>:
 *
 * Parameters: Nil
 * Return: Nil
 */
void Ifx_C_Init(void)
{
800019dc:	40 ae       	mov.aa %a14,%sp
800019de:	20 08       	sub.a %sp,8
    IfxStart_CTablePtr pBlockDest, pBlockSrc;
    uint32             uiLength, uiCnt;
    uint32            *pTable;
    /* clear table */
    pTable = (uint32 *)&__clear_table;
800019e0:	91 00 00 28 	movh.a %a2,32768
800019e4:	d9 22 24 a0 	lea %a2,[%a2]676 <800002a4 <__clear_table>>

    while (pTable)
800019e8:	1d 00 32 00 	j 80001a4c <Ifx_C_Init+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
800019ec:	91 00 00 28 	movh.a %a2,32768
800019f0:	d9 22 0c c0 	lea %a2,[%a2]780 <8000030c <__copy_table>>
800019f4:	1d 00 7c 00 	j 80001aec <Ifx_C_Init+0x110>
            *pBlockDest.ullPtr++ = 0;
800019f8:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800019fc:	80 22       	mov.d %d2,%a2
800019fe:	1b 82 00 20 	addi %d2,%d2,8
80001a02:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001a06:	d2 02       	mov %e2,0
80001a08:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80001a0c:	02 52       	mov %d2,%d5
80001a0e:	1b f2 ff 5f 	addi %d5,%d2,-1
80001a12:	df 02 f3 ff 	jne %d2,0,800019f8 <Ifx_C_Init+0x1c>
        if (uiLength & 0x4)
80001a16:	6f 24 0a 00 	jz.t %d4,2,80001a2a <Ifx_C_Init+0x4e>
            *pBlockDest.uiPtr++ = 0;
80001a1a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001a1e:	80 22       	mov.d %d2,%a2
80001a20:	c2 42       	add %d2,4
80001a22:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001a26:	82 02       	mov %d2,0
80001a28:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
80001a2a:	6f 14 0a 00 	jz.t %d4,1,80001a3e <Ifx_C_Init+0x62>
            *pBlockDest.usPtr++ = 0;
80001a2e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001a32:	80 22       	mov.d %d2,%a2
80001a34:	c2 22       	add %d2,2
80001a36:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001a3a:	82 02       	mov %d2,0
80001a3c:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
80001a3e:	6f 04 06 00 	jz.t %d4,0,80001a4a <Ifx_C_Init+0x6e>
            *pBlockDest.ucPtr = 0;
80001a42:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001a46:	82 02       	mov %d2,0
80001a48:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80001a4a:	40 32       	mov.aa %a2,%a3
    while (pTable)
80001a4c:	bd 02 d0 7f 	jz.a %a2,800019ec <Ifx_C_Init+0x10>
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80001a50:	d9 23 08 00 	lea %a3,[%a2]8
80001a54:	54 22       	ld.w %d2,[%a2]
80001a56:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80001a5a:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
80001a5e:	df f4 c7 7f 	jeq %d4,-1,800019ec <Ifx_C_Init+0x10>
        uiCnt = uiLength / 8;
80001a62:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
80001a66:	1d ff d4 ff 	j 80001a0e <Ifx_C_Init+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
80001a6a:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001a6e:	80 22       	mov.d %d2,%a2
80001a70:	1b 82 00 20 	addi %d2,%d2,8
80001a74:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001a78:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80001a7c:	80 32       	mov.d %d2,%a3
80001a7e:	1b 82 00 20 	addi %d2,%d2,8
80001a82:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001a86:	09 26 40 09 	ld.d %e6,[%a2]
80001a8a:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80001a8e:	02 42       	mov %d2,%d4
80001a90:	1b f2 ff 4f 	addi %d4,%d2,-1
80001a94:	df 02 eb ff 	jne %d2,0,80001a6a <Ifx_C_Init+0x8e>
        }

        if (uiLength & 0x4)
80001a98:	6f 23 10 00 	jz.t %d3,2,80001ab8 <Ifx_C_Init+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80001a9c:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001aa0:	80 22       	mov.d %d2,%a2
80001aa2:	c2 42       	add %d2,4
80001aa4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001aa8:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80001aac:	80 32       	mov.d %d2,%a3
80001aae:	c2 42       	add %d2,4
80001ab0:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001ab4:	54 22       	ld.w %d2,[%a2]
80001ab6:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
80001ab8:	6f 13 11 00 	jz.t %d3,1,80001ada <Ifx_C_Init+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80001abc:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80001ac0:	80 32       	mov.d %d2,%a3
80001ac2:	c2 22       	add %d2,2
80001ac4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001ac8:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001acc:	80 22       	mov.d %d2,%a2
80001ace:	c2 22       	add %d2,2
80001ad0:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001ad4:	b9 32 00 00 	ld.hu %d2,[%a3]0
80001ad8:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80001ada:	6f 03 08 00 	jz.t %d3,0,80001aea <Ifx_C_Init+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80001ade:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80001ae2:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001ae6:	14 32       	ld.bu %d2,[%a3]
80001ae8:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80001aea:	60 52       	mov.a %a2,%d5
    while (pTable)
80001aec:	bd 02 14 00 	jz.a %a2,80001b14 <Ifx_C_Init+0x138>
        pBlockSrc.uiPtr  = (uint32 *)*pTable++;
80001af0:	54 22       	ld.w %d2,[%a2]
80001af2:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80001af6:	19 22 04 00 	ld.w %d2,[%a2]4
80001afa:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80001afe:	80 22       	mov.d %d2,%a2
80001b00:	1b c2 00 50 	addi %d5,%d2,12
80001b04:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
80001b08:	df f3 06 00 	jeq %d3,-1,80001b14 <Ifx_C_Init+0x138>
        uiCnt = uiLength / 8;
80001b0c:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80001b10:	1d ff c0 ff 	j 80001a90 <Ifx_C_Init+0xb4>
        }
    }
}
80001b14:	00 90       	ret 

80001b16 <core0_main>:
#include "Header_USER.h"

IfxCpu_syncEvent g_cpuSyncEvent = 0;

void core0_main(void)
{
80001b16:	40 ae       	mov.aa %a14,%sp
    __enable();
80001b18:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80001b1c:	6d ff bf f8 	call 80000c9a <IfxScuWdt_getCpuWatchdogPassword>
80001b20:	02 24       	mov %d4,%d2
80001b22:	6d ff a0 f7 	call 80000a62 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80001b26:	6d ff cc f8 	call 80000cbe <IfxScuWdt_getSafetyWatchdogPassword>
80001b2a:	02 24       	mov %d4,%d2
80001b2c:	6d ff da f7 	call 80000ae0 <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80001b30:	91 00 00 c6 	movh.a %a12,24576
80001b34:	d9 cc 10 00 	lea %a12,[%a12]16 <60000010 <g_cpuSyncEvent>>
80001b38:	40 c4       	mov.aa %a4,%a12
80001b3a:	6d ff 28 fb 	call 8000118a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80001b3e:	82 14       	mov %d4,1
80001b40:	40 c4       	mov.aa %a4,%a12
80001b42:	6d ff e4 fa 	call 8000110a <IfxCpu_waitEvent>
        
    while(1)
    {
        a += 0.00001;
80001b46:	91 00 00 c6 	movh.a %a12,24576
80001b4a:	d9 c2 14 00 	lea %a2,[%a12]20 <60000014 <a>>
80001b4e:	54 24       	ld.w %d4,[%a2]
80001b50:	6d 00 41 00 	call 80001bd2 <__extendsfdf2>
80001b54:	7b 30 8e 68 	movh %d6,35043
80001b58:	1b 16 8f 66 	addi %d6,%d6,26865
80001b5c:	7b 50 ee 73 	movh %d7,16101
80001b60:	1b 57 8b 7f 	addi %d7,%d7,-1867
80001b64:	0b 23 10 48 	mov %e4,%d3,%d2
80001b68:	6d 00 7a 01 	call 80001e5c <__adddf3>
80001b6c:	0b 23 10 48 	mov %e4,%d3,%d2
80001b70:	6d 00 86 02 	call 8000207c <__truncdfsf2>
80001b74:	d9 c2 14 00 	lea %a2,[%a12]20 <60000014 <a>>
80001b78:	74 22       	st.w [%a2],%d2
    while(1)
80001b7a:	1d ff e6 ff 	j 80001b46 <core0_main+0x30>

80001b7e <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
80001b7e:	40 ae       	mov.aa %a14,%sp
80001b80:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80001b84:	6d ff 8b f8 	call 80000c9a <IfxScuWdt_getCpuWatchdogPassword>
80001b88:	02 24       	mov %d4,%d2
80001b8a:	6d ff 6c f7 	call 80000a62 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80001b8e:	91 00 00 c6 	movh.a %a12,24576
80001b92:	d9 cc 10 00 	lea %a12,[%a12]16 <60000010 <g_cpuSyncEvent>>
80001b96:	40 c4       	mov.aa %a4,%a12
80001b98:	6d ff f9 fa 	call 8000118a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80001b9c:	82 14       	mov %d4,1
80001b9e:	40 c4       	mov.aa %a4,%a12
80001ba0:	6d ff b5 fa 	call 8000110a <IfxCpu_waitEvent>
    
    while(1)
80001ba4:	1d 00 00 00 	j 80001ba4 <core1_main+0x26>

80001ba8 <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
80001ba8:	40 ae       	mov.aa %a14,%sp
80001baa:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80001bae:	6d ff 76 f8 	call 80000c9a <IfxScuWdt_getCpuWatchdogPassword>
80001bb2:	02 24       	mov %d4,%d2
80001bb4:	6d ff 57 f7 	call 80000a62 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80001bb8:	91 00 00 c6 	movh.a %a12,24576
80001bbc:	d9 cc 10 00 	lea %a12,[%a12]16 <60000010 <g_cpuSyncEvent>>
80001bc0:	40 c4       	mov.aa %a4,%a12
80001bc2:	6d ff e4 fa 	call 8000118a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80001bc6:	82 14       	mov %d4,1
80001bc8:	40 c4       	mov.aa %a4,%a12
80001bca:	6d ff a0 fa 	call 8000110a <IfxCpu_waitEvent>
    
    while(1)
80001bce:	1d 00 00 00 	j 80001bce <core2_main+0x26>

80001bd2 <__extendsfdf2>:
80001bd2:	20 20       	sub.a %sp,32
80001bd4:	d9 a5 10 00 	lea %a5,[%sp]16
80001bd8:	d9 a4 0c 00 	lea %a4,[%sp]12
80001bdc:	59 a4 0c 00 	st.w [%sp]12,%d4
80001be0:	6d 00 6d 02 	call 800020ba <__unpack_f>
80001be4:	19 a2 1c 00 	ld.w %d2,[%sp]28
80001be8:	19 a6 18 00 	ld.w %d6,[%sp]24
80001bec:	53 12 40 40 	mul.u %e4,%d2,1
80001bf0:	77 45 00 3f 	dextr %d3,%d5,%d4,30
80001bf4:	8f e4 01 20 	sh %d2,%d4,30
80001bf8:	19 a5 14 00 	ld.w %d5,[%sp]20
80001bfc:	19 a4 10 00 	ld.w %d4,[%sp]16
80001c00:	74 a2       	st.w [%sp],%d2
80001c02:	59 a3 04 00 	st.w [%sp]4,%d3
80001c06:	6d 00 2b 02 	call 8000205c <__make_dp>
80001c0a:	00 90       	ret 

80001c0c <_fpadd_parts>:
80001c0c:	54 42       	ld.w %d2,[%a4]
80001c0e:	40 42       	mov.aa %a2,%a4
80001c10:	bf 22 c2 80 	jlt.u %d2,2,80001d94 <_fpadd_parts+0x188>
80001c14:	54 53       	ld.w %d3,[%a5]
80001c16:	40 52       	mov.aa %a2,%a5
80001c18:	bf 23 be 80 	jlt.u %d3,2,80001d94 <_fpadd_parts+0x188>
80001c1c:	df 42 e3 00 	jeq %d2,4,80001de2 <_fpadd_parts+0x1d6>
80001c20:	df 43 ba 00 	jeq %d3,4,80001d94 <_fpadd_parts+0x188>
80001c24:	df 23 b9 00 	jeq %d3,2,80001d96 <_fpadd_parts+0x18a>
80001c28:	df 22 b6 00 	jeq %d2,2,80001d94 <_fpadd_parts+0x188>
80001c2c:	19 40 08 00 	ld.w %d0,[%a4]8
80001c30:	19 57 08 00 	ld.w %d7,[%a5]8
80001c34:	09 44 4c 09 	ld.d %e4,[%a4]12
80001c38:	0b 70 80 60 	sub %d6,%d0,%d7
80001c3c:	09 52 4c 09 	ld.d %e2,[%a5]12
80001c40:	bf 06 c2 00 	jlt %d6,0,80001dc4 <_fpadd_parts+0x1b8>
80001c44:	8b 06 84 12 	ge %d1,%d6,64
80001c48:	df 01 c4 80 	jne %d1,0,80001dd0 <_fpadd_parts+0x1c4>
80001c4c:	df 06 2a 00 	jeq %d6,0,80001ca0 <_fpadd_parts+0x94>
80001c50:	8b 06 82 72 	ge %d7,%d6,32
80001c54:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
80001c58:	ab 03 a0 87 	seln %d8,%d7,%d3,0
80001c5c:	8f f6 01 71 	and %d7,%d6,31
80001c60:	8b 07 02 11 	rsub %d1,%d7,32
80001c64:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80001c68:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
80001c6c:	8b 06 82 a2 	ge %d10,%d6,32
80001c70:	32 57       	rsub %d7
80001c72:	02 19       	mov %d9,%d1
80001c74:	8f f6 01 61 	and %d6,%d6,31
80001c78:	82 f1       	mov %d1,-1
80001c7a:	0f 78 00 80 	sh %d8,%d8,%d7
80001c7e:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
80001c82:	0f 61 00 60 	sh %d6,%d1,%d6
80001c86:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
80001c8a:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80001c8e:	0f 62 e0 10 	andn %d1,%d2,%d6
80001c92:	0f 73 e0 60 	andn %d6,%d3,%d7
80001c96:	a6 16       	or %d6,%d1
80001c98:	8b 06 00 95 	or.ne %d9,%d6,0
80001c9c:	0b 98 10 28 	mov %e2,%d8,%d9
80001ca0:	19 41 04 00 	ld.w %d1,[%a4]4
80001ca4:	19 56 04 00 	ld.w %d6,[%a5]4
80001ca8:	5f 61 4c 00 	jeq %d1,%d6,80001d40 <_fpadd_parts+0x134>
80001cac:	0b 24 c0 60 	subx %d6,%d4,%d2
80001cb0:	0b 35 d0 70 	subc %d7,%d5,%d3
80001cb4:	df 01 06 00 	jeq %d1,0,80001cc0 <_fpadd_parts+0xb4>
80001cb8:	0b 42 c0 60 	subx %d6,%d2,%d4
80001cbc:	0b 53 d0 70 	subc %d7,%d3,%d5
80001cc0:	8b 07 00 31 	rsub %d3,%d7,0
80001cc4:	8b 06 00 91 	rsub %d9,%d6,0
80001cc8:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
80001ccc:	82 12       	mov %d2,1
80001cce:	bf 07 05 00 	jlt %d7,0,80001cd8 <_fpadd_parts+0xcc>
80001cd2:	02 69       	mov %d9,%d6
80001cd4:	02 73       	mov %d3,%d7
80001cd6:	82 02       	mov %d2,0
80001cd8:	8b f9 9f 70 	addx %d7,%d9,-1
80001cdc:	82 f5       	mov %d5,-1
80001cde:	8b f3 bf 60 	addc %d6,%d3,-1
80001ce2:	06 c5       	sh %d5,-4
80001ce4:	59 62 04 00 	st.w [%a6]4,%d2
80001ce8:	82 e1       	mov %d1,-2
80001cea:	0b 56 00 21 	eq %d2,%d6,%d5
80001cee:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
80001cf2:	59 60 08 00 	st.w [%a6]8,%d0
80001cf6:	59 69 0c 00 	st.w [%a6]12,%d9
80001cfa:	59 63 10 00 	st.w [%a6]16,%d3
80001cfe:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
80001d02:	df 02 2b 80 	jne %d2,0,80001d58 <_fpadd_parts+0x14c>
80001d06:	1b f0 ff 7f 	addi %d7,%d0,-1
80001d0a:	77 93 80 30 	dextr %d3,%d3,%d9,1
80001d0e:	06 19       	sh %d9,1
80001d10:	8b f9 9f 00 	addx %d0,%d9,-1
80001d14:	8b f3 bf 60 	addc %d6,%d3,-1
80001d18:	0b 56 00 21 	eq %d2,%d6,%d5
80001d1c:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
80001d20:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
80001d24:	02 78       	mov %d8,%d7
80001d26:	c2 f7       	add %d7,-1
80001d28:	df 02 f1 ff 	jne %d2,0,80001d0a <_fpadd_parts+0xfe>
80001d2c:	82 32       	mov %d2,3
80001d2e:	59 69 0c 00 	st.w [%a6]12,%d9
80001d32:	59 63 10 00 	st.w [%a6]16,%d3
80001d36:	59 68 08 00 	st.w [%a6]8,%d8
80001d3a:	74 62       	st.w [%a6],%d2
80001d3c:	40 62       	mov.aa %a2,%a6
80001d3e:	00 90       	ret 
80001d40:	0b 24 40 90 	addx %d9,%d4,%d2
80001d44:	0b 35 50 30 	addc %d3,%d5,%d3
80001d48:	59 61 04 00 	st.w [%a6]4,%d1
80001d4c:	59 60 08 00 	st.w [%a6]8,%d0
80001d50:	59 69 0c 00 	st.w [%a6]12,%d9
80001d54:	59 63 10 00 	st.w [%a6]16,%d3
80001d58:	82 32       	mov %d2,3
80001d5a:	7b 00 00 52 	movh %d5,8192
80001d5e:	40 62       	mov.aa %a2,%a6
80001d60:	74 62       	st.w [%a6],%d2
80001d62:	0b 53 00 21 	eq %d2,%d3,%d5
80001d66:	b7 02 01 20 	insert %d2,%d2,0,0,1
80001d6a:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
80001d6e:	df 02 13 80 	jne %d2,0,80001d94 <_fpadd_parts+0x188>
80001d72:	8f f3 1f 20 	sh %d2,%d3,-1
80001d76:	77 93 80 5f 	dextr %d5,%d3,%d9,31
80001d7a:	8f 19 00 31 	and %d3,%d9,1
80001d7e:	59 62 10 00 	st.w [%a6]16,%d2
80001d82:	19 62 08 00 	ld.w %d2,[%a6]8
80001d86:	a6 53       	or %d3,%d5
80001d88:	c2 12       	add %d2,1
80001d8a:	d9 63 08 00 	lea %a3,[%a6]8
80001d8e:	59 63 0c 00 	st.w [%a6]12,%d3
80001d92:	74 32       	st.w [%a3],%d2
80001d94:	00 90       	ret 
80001d96:	40 42       	mov.aa %a2,%a4
80001d98:	df 22 fe ff 	jne %d2,2,80001d94 <_fpadd_parts+0x188>
80001d9c:	40 63       	mov.aa %a3,%a6
80001d9e:	09 44 48 01 	ld.d %e4,[%a4+]8
80001da2:	89 34 48 01 	st.d [%a3+]8,%e4
80001da6:	09 44 48 01 	ld.d %e4,[%a4+]8
80001daa:	89 34 48 01 	st.d [%a3+]8,%e4
80001dae:	44 44       	ld.w %d4,[%a4+]
80001db0:	64 34       	st.w [%a3+],%d4
80001db2:	19 23 04 00 	ld.w %d3,[%a2]4
80001db6:	19 52 04 00 	ld.w %d2,[%a5]4
80001dba:	40 62       	mov.aa %a2,%a6
80001dbc:	26 32       	and %d2,%d3
80001dbe:	59 62 04 00 	st.w [%a6]4,%d2
80001dc2:	00 90       	ret 
80001dc4:	0b 07 80 60 	sub %d6,%d7,%d0
80001dc8:	8b 06 44 12 	lt %d1,%d6,64
80001dcc:	df 01 1d 80 	jne %d1,0,80001e06 <_fpadd_parts+0x1fa>
80001dd0:	3f 07 06 00 	jlt %d7,%d0,80001ddc <_fpadd_parts+0x1d0>
80001dd4:	d2 04       	mov %e4,0
80001dd6:	02 70       	mov %d0,%d7
80001dd8:	1d ff 64 ff 	j 80001ca0 <_fpadd_parts+0x94>
80001ddc:	d2 02       	mov %e2,0
80001dde:	1d ff 61 ff 	j 80001ca0 <_fpadd_parts+0x94>
80001de2:	40 42       	mov.aa %a2,%a4
80001de4:	df 43 d8 ff 	jne %d3,4,80001d94 <_fpadd_parts+0x188>
80001de8:	19 43 04 00 	ld.w %d3,[%a4]4
80001dec:	19 52 04 00 	ld.w %d2,[%a5]4
80001df0:	7b 00 00 48 	movh %d4,32768
80001df4:	0b 23 10 21 	ne %d2,%d3,%d2
80001df8:	1b 04 20 40 	addi %d4,%d4,512
80001dfc:	80 43       	mov.d %d3,%a4
80001dfe:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
80001e02:	60 22       	mov.a %a2,%d2
80001e04:	00 90       	ret 
80001e06:	8b 06 82 02 	ge %d0,%d6,32
80001e0a:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
80001e0e:	ab 05 a0 80 	seln %d8,%d0,%d5,0
80001e12:	8f f6 01 01 	and %d0,%d6,31
80001e16:	8b 00 02 11 	rsub %d1,%d0,32
80001e1a:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80001e1e:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
80001e22:	8b 06 82 a2 	ge %d10,%d6,32
80001e26:	32 50       	rsub %d0
80001e28:	02 19       	mov %d9,%d1
80001e2a:	8f f6 01 61 	and %d6,%d6,31
80001e2e:	82 f1       	mov %d1,-1
80001e30:	0f 08 00 80 	sh %d8,%d8,%d0
80001e34:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
80001e38:	0f 61 00 60 	sh %d6,%d1,%d6
80001e3c:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
80001e40:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80001e44:	0f 64 e0 10 	andn %d1,%d4,%d6
80001e48:	0f 05 e0 60 	andn %d6,%d5,%d0
80001e4c:	a6 16       	or %d6,%d1
80001e4e:	8b 06 00 95 	or.ne %d9,%d6,0
80001e52:	0b 98 10 48 	mov %e4,%d8,%d9
80001e56:	02 70       	mov %d0,%d7
80001e58:	1d ff 24 ff 	j 80001ca0 <_fpadd_parts+0x94>

80001e5c <__adddf3>:
80001e5c:	20 50       	sub.a %sp,80
80001e5e:	d9 a5 14 00 	lea %a5,[%sp]20
80001e62:	d9 a4 04 00 	lea %a4,[%sp]4
80001e66:	89 a4 44 09 	st.d [%sp]4,%e4
80001e6a:	89 a6 4c 09 	st.d [%sp]12,%e6
80001e6e:	6d 00 45 02 	call 800022f8 <__unpack_d>
80001e72:	d9 a5 28 00 	lea %a5,[%sp]40
80001e76:	d9 a4 0c 00 	lea %a4,[%sp]12
80001e7a:	6d 00 3f 02 	call 800022f8 <__unpack_d>
80001e7e:	d9 a4 14 00 	lea %a4,[%sp]20
80001e82:	d9 a6 3c 00 	lea %a6,[%sp]60
80001e86:	d9 a5 28 00 	lea %a5,[%sp]40
80001e8a:	6d ff c1 fe 	call 80001c0c <_fpadd_parts>
80001e8e:	40 24       	mov.aa %a4,%a2
80001e90:	6d 00 65 01 	call 8000215a <__pack_d>
80001e94:	00 90       	ret 

80001e96 <__divdf3>:
80001e96:	20 38       	sub.a %sp,56
80001e98:	d9 a5 10 00 	lea %a5,[%sp]16
80001e9c:	40 a4       	mov.aa %a4,%sp
80001e9e:	89 a4 40 09 	st.d [%sp],%e4
80001ea2:	89 a6 48 09 	st.d [%sp]8,%e6
80001ea6:	6d 00 29 02 	call 800022f8 <__unpack_d>
80001eaa:	d9 a5 24 00 	lea %a5,[%sp]36
80001eae:	d9 a4 08 00 	lea %a4,[%sp]8
80001eb2:	6d 00 23 02 	call 800022f8 <__unpack_d>
80001eb6:	19 a2 10 00 	ld.w %d2,[%sp]16
80001eba:	ff 22 07 80 	jge.u %d2,2,80001ec8 <__divdf3+0x32>
80001ebe:	d9 a4 10 00 	lea %a4,[%sp]16
80001ec2:	6d 00 4c 01 	call 8000215a <__pack_d>
80001ec6:	00 90       	ret 
80001ec8:	19 a3 24 00 	ld.w %d3,[%sp]36
80001ecc:	d9 a4 24 00 	lea %a4,[%sp]36
80001ed0:	bf 23 f9 ff 	jlt.u %d3,2,80001ec2 <__divdf3+0x2c>
80001ed4:	19 a5 14 00 	ld.w %d5,[%sp]20
80001ed8:	19 a4 28 00 	ld.w %d4,[%sp]40
80001edc:	c6 54       	xor %d4,%d5
80001ede:	59 a4 14 00 	st.w [%sp]20,%d4
80001ee2:	1b e2 ff 4f 	addi %d4,%d2,-2
80001ee6:	8f 24 c0 41 	andn %d4,%d4,2
80001eea:	df 04 0a 80 	jne %d4,0,80001efe <__divdf3+0x68>
80001eee:	91 00 00 48 	movh.a %a4,32768
80001ef2:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80001ef6:	5f 32 e4 ff 	jne %d2,%d3,80001ebe <__divdf3+0x28>
80001efa:	1d ff e4 ff 	j 80001ec2 <__divdf3+0x2c>
80001efe:	df 43 51 00 	jeq %d3,4,80001fa0 <__divdf3+0x10a>
80001f02:	df 23 5a 00 	jeq %d3,2,80001fb6 <__divdf3+0x120>
80001f06:	19 a3 18 00 	ld.w %d3,[%sp]24
80001f0a:	19 a2 2c 00 	ld.w %d2,[%sp]44
80001f0e:	09 a4 70 09 	ld.d %e4,[%sp]48
80001f12:	0b 23 80 00 	sub %d0,%d3,%d2
80001f16:	09 a2 5c 09 	ld.d %e2,[%sp]28
80001f1a:	0b 53 00 61 	eq %d6,%d3,%d5
80001f1e:	02 67       	mov %d7,%d6
80001f20:	0b 42 50 72 	and.ge.u %d7,%d2,%d4
80001f24:	59 a0 18 00 	st.w [%sp]24,%d0
80001f28:	0b 35 a0 72 	or.lt.u %d7,%d5,%d3
80001f2c:	df 07 0b 80 	jne %d7,0,80001f42 <__divdf3+0xac>
80001f30:	1b f0 ff 6f 	addi %d6,%d0,-1
80001f34:	77 23 80 30 	dextr %d3,%d3,%d2,1
80001f38:	06 12       	sh %d2,1
80001f3a:	59 a6 18 00 	st.w [%sp]24,%d6
80001f3e:	0b 53 00 61 	eq %d6,%d3,%d5
80001f42:	3b d0 03 10 	mov %d1,61
80001f46:	d2 08       	mov %e8,0
80001f48:	82 00       	mov %d0,0
80001f4a:	7b 00 00 71 	movh %d7,4096
80001f4e:	1d 00 04 00 	j 80001f56 <__divdf3+0xc0>
80001f52:	0b 53 00 61 	eq %d6,%d3,%d5
80001f56:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80001f5a:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80001f5e:	df 06 0c 80 	jne %d6,0,80001f76 <__divdf3+0xe0>
80001f62:	0f 08 a0 a0 	or %d10,%d8,%d0
80001f66:	0f 79 a0 60 	or %d6,%d9,%d7
80001f6a:	0b 42 c0 20 	subx %d2,%d2,%d4
80001f6e:	0b a6 10 88 	mov %e8,%d6,%d10
80001f72:	0b 53 d0 30 	subc %d3,%d3,%d5
80001f76:	c2 f1       	add %d1,-1
80001f78:	77 07 80 0f 	dextr %d0,%d7,%d0,31
80001f7c:	77 23 80 30 	dextr %d3,%d3,%d2,1
80001f80:	06 f7       	sh %d7,-1
80001f82:	06 12       	sh %d2,1
80001f84:	df 01 e7 ff 	jne %d1,0,80001f52 <__divdf3+0xbc>
80001f88:	8f f8 0f 41 	and %d4,%d8,255
80001f8c:	8b 04 28 42 	ne %d4,%d4,128
80001f90:	df 04 1a 00 	jeq %d4,0,80001fc4 <__divdf3+0x12e>
80001f94:	59 a8 1c 00 	st.w [%sp]28,%d8
80001f98:	59 a9 20 00 	st.w [%sp]32,%d9
80001f9c:	1d ff 91 ff 	j 80001ebe <__divdf3+0x28>
80001fa0:	82 02       	mov %d2,0
80001fa2:	a0 02       	mov.a %a2,0
80001fa4:	a0 03       	mov.a %a3,0
80001fa6:	89 a2 dc 09 	st.da [%sp]28,%a2
80001faa:	59 a2 18 00 	st.w [%sp]24,%d2
80001fae:	d9 a4 10 00 	lea %a4,[%sp]16
80001fb2:	1d ff 88 ff 	j 80001ec2 <__divdf3+0x2c>
80001fb6:	82 42       	mov %d2,4
80001fb8:	d9 a4 10 00 	lea %a4,[%sp]16
80001fbc:	59 a2 10 00 	st.w [%sp]16,%d2
80001fc0:	1d ff 81 ff 	j 80001ec2 <__divdf3+0x2c>
80001fc4:	a6 32       	or %d2,%d3
80001fc6:	77 89 00 4c 	dextr %d4,%d9,%d8,24
80001fca:	8b 02 20 32 	ne %d3,%d2,0
80001fce:	0f 43 e0 20 	andn %d2,%d3,%d4
80001fd2:	df 02 e1 7f 	jeq %d2,0,80001f94 <__divdf3+0xfe>
80001fd6:	8b 08 88 80 	addx %d8,%d8,128
80001fda:	8b 09 a0 90 	addc %d9,%d9,0
80001fde:	8f f8 cf 81 	andn %d8,%d8,255
80001fe2:	1d ff d9 ff 	j 80001f94 <__divdf3+0xfe>

80001fe6 <__floatsidf>:
80001fe6:	82 32       	mov %d2,3
80001fe8:	20 18       	sub.a %sp,24
80001fea:	59 a2 04 00 	st.w [%sp]4,%d2
80001fee:	8f 14 1e 20 	sh %d2,%d4,-31
80001ff2:	59 a2 08 00 	st.w [%sp]8,%d2
80001ff6:	df 04 0e 80 	jne %d4,0,80002012 <__floatsidf+0x2c>
80001ffa:	82 22       	mov %d2,2
80001ffc:	59 a2 04 00 	st.w [%sp]4,%d2
80002000:	d9 a4 04 00 	lea %a4,[%sp]4
80002004:	6d 00 ab 00 	call 8000215a <__pack_d>
80002008:	60 25       	mov.a %a5,%d2
8000200a:	60 34       	mov.a %a4,%d3
8000200c:	80 52       	mov.d %d2,%a5
8000200e:	80 43       	mov.d %d3,%a4
80002010:	00 90       	ret 
80002012:	ff 04 0a 00 	jge %d4,0,80002026 <__floatsidf+0x40>
80002016:	7b 00 00 28 	movh %d2,32768
8000201a:	a0 05       	mov.a %a5,0
8000201c:	91 00 1e 4c 	movh.a %a4,49632
80002020:	5f 24 f6 7f 	jeq %d4,%d2,8000200c <__floatsidf+0x26>
80002024:	32 54       	rsub %d4
80002026:	0f 04 b0 61 	clz %d6,%d4
8000202a:	1b d6 01 60 	addi %d6,%d6,29
8000202e:	8f f6 01 21 	and %d2,%d6,31
80002032:	82 05       	mov %d5,0
80002034:	8b 06 82 72 	ge %d7,%d6,32
80002038:	17 45 80 32 	dextr %d3,%d5,%d4,%d2
8000203c:	0f 24 00 20 	sh %d2,%d4,%d2
80002040:	2b 23 50 37 	seln %d3,%d7,%d3,%d2
80002044:	8b c6 03 61 	rsub %d6,%d6,60
80002048:	ab 02 a0 27 	seln %d2,%d7,%d2,0
8000204c:	59 a3 14 00 	st.w [%sp]20,%d3
80002050:	59 a6 0c 00 	st.w [%sp]12,%d6
80002054:	59 a2 10 00 	st.w [%sp]16,%d2
80002058:	1d ff d4 ff 	j 80002000 <__floatsidf+0x1a>

8000205c <__make_dp>:
8000205c:	20 18       	sub.a %sp,24
8000205e:	09 a2 d8 09 	ld.da %a2,[%sp]24
80002062:	d9 a4 04 00 	lea %a4,[%sp]4
80002066:	59 a4 04 00 	st.w [%sp]4,%d4
8000206a:	59 a5 08 00 	st.w [%sp]8,%d5
8000206e:	59 a6 0c 00 	st.w [%sp]12,%d6
80002072:	89 a2 d0 09 	st.da [%sp]16,%a2
80002076:	6d 00 72 00 	call 8000215a <__pack_d>
8000207a:	00 90       	ret 

8000207c <__truncdfsf2>:
8000207c:	20 20       	sub.a %sp,32
8000207e:	d9 a5 0c 00 	lea %a5,[%sp]12
80002082:	d9 a4 04 00 	lea %a4,[%sp]4
80002086:	89 a4 44 09 	st.d [%sp]4,%e4
8000208a:	6d 00 37 01 	call 800022f8 <__unpack_d>
8000208e:	19 a3 18 00 	ld.w %d3,[%sp]24
80002092:	19 a2 1c 00 	ld.w %d2,[%sp]28
80002096:	77 32 00 21 	dextr %d2,%d2,%d3,2
8000209a:	b7 03 02 3f 	insert %d3,%d3,0,30,2
8000209e:	02 27       	mov %d7,%d2
800020a0:	df 03 04 00 	jeq %d3,0,800020a8 <__truncdfsf2+0x2c>
800020a4:	8f 12 40 71 	or %d7,%d2,1
800020a8:	19 a6 14 00 	ld.w %d6,[%sp]20
800020ac:	19 a5 10 00 	ld.w %d5,[%sp]16
800020b0:	19 a4 0c 00 	ld.w %d4,[%sp]12
800020b4:	6d 00 47 00 	call 80002142 <__make_fp>
800020b8:	00 90       	ret 

800020ba <__unpack_f>:
800020ba:	54 42       	ld.w %d2,[%a4]
800020bc:	8f 12 1e 50 	sh %d5,%d2,-31
800020c0:	37 02 e8 3b 	extr.u %d3,%d2,23,8
800020c4:	b7 02 89 4b 	insert %d4,%d2,0,23,9
800020c8:	59 55 04 00 	st.w [%a5]4,%d5
800020cc:	df 03 16 80 	jne %d3,0,800020f8 <__unpack_f+0x3e>
800020d0:	df 04 25 00 	jeq %d4,0,8000211a <__unpack_f+0x60>
800020d4:	82 33       	mov %d3,3
800020d6:	8f 74 00 20 	sh %d2,%d4,7
800020da:	7b 00 00 54 	movh %d5,16384
800020de:	74 53       	st.w [%a5],%d3
800020e0:	3b 10 f8 3f 	mov %d3,-127
800020e4:	06 12       	sh %d2,1
800020e6:	02 34       	mov %d4,%d3
800020e8:	c2 f3       	add %d3,-1
800020ea:	3f 52 fd ff 	jlt.u %d2,%d5,800020e4 <__unpack_f+0x2a>
800020ee:	59 54 08 00 	st.w [%a5]8,%d4
800020f2:	59 52 0c 00 	st.w [%a5]12,%d2
800020f6:	00 90       	ret 
800020f8:	8b f3 2f 52 	ne %d5,%d3,255
800020fc:	df 05 12 00 	jeq %d5,0,80002120 <__unpack_f+0x66>
80002100:	82 32       	mov %d2,3
80002102:	1b 13 f8 3f 	addi %d3,%d3,-127
80002106:	74 52       	st.w [%a5],%d2
80002108:	8f 74 00 20 	sh %d2,%d4,7
8000210c:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
80002110:	59 53 08 00 	st.w [%a5]8,%d3
80002114:	59 52 0c 00 	st.w [%a5]12,%d2
80002118:	00 90       	ret 
8000211a:	82 22       	mov %d2,2
8000211c:	74 52       	st.w [%a5],%d2
8000211e:	00 90       	ret 
80002120:	df 04 05 80 	jne %d4,0,8000212a <__unpack_f+0x70>
80002124:	82 42       	mov %d2,4
80002126:	74 52       	st.w [%a5],%d2
80002128:	00 90       	ret 
8000212a:	37 02 61 3b 	extr.u %d3,%d2,22,1
8000212e:	06 72       	sh %d2,7
80002130:	74 53       	st.w [%a5],%d3
80002132:	7b 00 00 32 	movh %d3,8192
80002136:	1b 03 f8 3f 	addi %d3,%d3,-128
8000213a:	26 32       	and %d2,%d3
8000213c:	59 52 0c 00 	st.w [%a5]12,%d2
80002140:	00 90       	ret 

80002142 <__make_fp>:
80002142:	20 10       	sub.a %sp,16
80002144:	40 a4       	mov.aa %a4,%sp
80002146:	74 a4       	st.w [%sp],%d4
80002148:	59 a5 04 00 	st.w [%sp]4,%d5
8000214c:	59 a6 08 00 	st.w [%sp]8,%d6
80002150:	59 a7 0c 00 	st.w [%sp]12,%d7
80002154:	6d 00 31 01 	call 800023b6 <__pack_f>
80002158:	00 90       	ret 

8000215a <__pack_d>:
8000215a:	54 44       	ld.w %d4,[%a4]
8000215c:	19 43 0c 00 	ld.w %d3,[%a4]12
80002160:	19 42 10 00 	ld.w %d2,[%a4]16
80002164:	19 41 04 00 	ld.w %d1,[%a4]4
80002168:	bf 24 56 80 	jlt.u %d4,2,80002214 <__pack_d+0xba>
8000216c:	7b 00 ff 57 	movh %d5,32752
80002170:	d2 06       	mov %e6,0
80002172:	df 44 0b 00 	jeq %d4,4,80002188 <__pack_d+0x2e>
80002176:	0f 23 a0 50 	or %d5,%d3,%d2
8000217a:	8b 05 00 02 	eq %d0,%d5,0
8000217e:	8b 24 e0 04 	or.eq %d0,%d4,2
80002182:	82 05       	mov %d5,0
80002184:	df 00 0c 00 	jeq %d0,0,8000219c <__pack_d+0x42>
80002188:	0b 10 00 28 	mov %e2,%d1
8000218c:	a6 75       	or %d5,%d7
8000218e:	8f f2 01 20 	sh %d2,%d2,31
80002192:	0f 25 a0 40 	or %d4,%d5,%d2
80002196:	02 43       	mov %d3,%d4
80002198:	02 62       	mov %d2,%d6
8000219a:	00 90       	ret 
8000219c:	19 44 08 00 	ld.w %d4,[%a4]8
800021a0:	3b 20 c0 0f 	mov %d0,-1022
800021a4:	3f 04 41 00 	jlt %d4,%d0,80002226 <__pack_d+0xcc>
800021a8:	3b 00 40 00 	mov %d0,1024
800021ac:	7b 00 ff 57 	movh %d5,32752
800021b0:	7f 04 ec 7f 	jge %d4,%d0,80002188 <__pack_d+0x2e>
800021b4:	8f f3 0f 51 	and %d5,%d3,255
800021b8:	8b 05 28 52 	ne %d5,%d5,128
800021bc:	df 05 1b 00 	jeq %d5,0,800021f2 <__pack_d+0x98>
800021c0:	8b f3 87 30 	addx %d3,%d3,127
800021c4:	8b 02 a0 20 	addc %d2,%d2,0
800021c8:	7b 00 00 52 	movh %d5,8192
800021cc:	0b 25 30 61 	lt.u %d6,%d5,%d2
800021d0:	0b 25 70 62 	or.eq %d6,%d5,%d2
800021d4:	df 06 19 80 	jne %d6,0,80002206 <__pack_d+0xac>
800021d8:	1b f4 3f 40 	addi %d4,%d4,1023
800021dc:	0b 40 00 48 	mov %e4,%d4
800021e0:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800021e4:	06 82       	sh %d2,-8
800021e6:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
800021ea:	8f 44 01 50 	sh %d5,%d4,20
800021ee:	1d ff cd ff 	j 80002188 <__pack_d+0x2e>
800021f2:	8f 03 10 51 	and %d5,%d3,256
800021f6:	df 05 e9 7f 	jeq %d5,0,800021c8 <__pack_d+0x6e>
800021fa:	8b 03 88 30 	addx %d3,%d3,128
800021fe:	8b 02 a0 20 	addc %d2,%d2,0
80002202:	1d ff e3 ff 	j 800021c8 <__pack_d+0x6e>
80002206:	77 32 80 3f 	dextr %d3,%d2,%d3,31
8000220a:	1b 04 40 40 	addi %d4,%d4,1024
8000220e:	06 f2       	sh %d2,-1
80002210:	1d ff e6 ff 	j 800021dc <__pack_d+0x82>
80002214:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80002218:	06 82       	sh %d2,-8
8000221a:	b7 12 8d 79 	insert %d7,%d2,1,19,13
8000221e:	7b 00 ff 57 	movh %d5,32752
80002222:	1d ff b3 ff 	j 80002188 <__pack_d+0x2e>
80002226:	0b 40 80 40 	sub %d4,%d0,%d4
8000222a:	8b 94 83 02 	ge %d0,%d4,57
8000222e:	df 00 ad ff 	jne %d0,0,80002188 <__pack_d+0x2e>
80002232:	8b 04 82 52 	ge %d5,%d4,32
80002236:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
8000223a:	ab 02 a0 75 	seln %d7,%d5,%d2,0
8000223e:	8f f4 01 51 	and %d5,%d4,31
80002242:	8b 05 02 61 	rsub %d6,%d5,32
80002246:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
8000224a:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
8000224e:	8b 04 82 82 	ge %d8,%d4,32
80002252:	32 55       	rsub %d5
80002254:	02 60       	mov %d0,%d6
80002256:	8f f4 01 41 	and %d4,%d4,31
8000225a:	82 f6       	mov %d6,-1
8000225c:	0f 57 00 70 	sh %d7,%d7,%d5
80002260:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
80002264:	0f 46 00 40 	sh %d4,%d6,%d4
80002268:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
8000226c:	ab 04 a0 48 	seln %d4,%d8,%d4,0
80002270:	0f 43 e0 30 	andn %d3,%d3,%d4
80002274:	0f 52 e0 20 	andn %d2,%d2,%d5
80002278:	a6 32       	or %d2,%d3
8000227a:	02 03       	mov %d3,%d0
8000227c:	8b 02 00 35 	or.ne %d3,%d2,0
80002280:	8f f3 0f 51 	and %d5,%d3,255
80002284:	82 12       	mov %d2,1
80002286:	8b 05 08 24 	and.eq %d2,%d5,128
8000228a:	02 74       	mov %d4,%d7
8000228c:	df 02 14 80 	jne %d2,0,800022b4 <__pack_d+0x15a>
80002290:	8b f3 87 30 	addx %d3,%d3,127
80002294:	8b 07 a0 20 	addc %d2,%d7,0
80002298:	77 32 00 6c 	dextr %d6,%d2,%d3,24
8000229c:	7b 00 00 31 	movh %d3,4096
800022a0:	8f 82 1f 70 	sh %d7,%d2,-8
800022a4:	0b 32 50 21 	ge.u %d2,%d2,%d3
800022a8:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800022ac:	8f 42 01 50 	sh %d5,%d2,20
800022b0:	1d ff 6c ff 	j 80002188 <__pack_d+0x2e>
800022b4:	8b 03 88 60 	addx %d6,%d3,128
800022b8:	8b 07 a0 20 	addc %d2,%d7,0
800022bc:	7b 00 00 a1 	movh %d10,4096
800022c0:	8f 82 1f 70 	sh %d7,%d2,-8
800022c4:	77 62 00 6c 	dextr %d6,%d2,%d6,24
800022c8:	0b a2 50 21 	ge.u %d2,%d2,%d10
800022cc:	53 12 40 80 	mul.u %e8,%d2,1
800022d0:	8f 03 10 01 	and %d0,%d3,256
800022d4:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800022d8:	8f 48 01 50 	sh %d5,%d8,20
800022dc:	df 00 56 ff 	jne %d0,0,80002188 <__pack_d+0x2e>
800022e0:	8f 84 1f 70 	sh %d7,%d4,-8
800022e4:	0b a4 50 21 	ge.u %d2,%d4,%d10
800022e8:	77 34 00 6c 	dextr %d6,%d4,%d3,24
800022ec:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800022f0:	8f 42 01 50 	sh %d5,%d2,20
800022f4:	1d ff 4a ff 	j 80002188 <__pack_d+0x2e>

800022f8 <__unpack_d>:
800022f8:	09 48 40 09 	ld.d %e8,[%a4]
800022fc:	3b f0 7f 00 	mov %d0,2047
80002300:	8f 19 1e 70 	sh %d7,%d9,-31
80002304:	37 09 6b 5a 	extr.u %d5,%d9,20,11
80002308:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
8000230c:	59 57 04 00 	st.w [%a5]4,%d7
80002310:	df 05 26 80 	jne %d5,0,8000235c <__unpack_d+0x64>
80002314:	8b 08 20 22 	ne %d2,%d8,0
80002318:	8b 06 00 25 	or.ne %d2,%d6,0
8000231c:	df 02 33 00 	jeq %d2,0,80002382 <__unpack_d+0x8a>
80002320:	82 32       	mov %d2,3
80002322:	77 86 00 34 	dextr %d3,%d6,%d8,8
80002326:	8f 88 00 40 	sh %d4,%d8,8
8000232a:	74 52       	st.w [%a5],%d2
8000232c:	3b 10 c0 5f 	mov %d5,-1023
80002330:	7b 00 00 61 	movh %d6,4096
80002334:	77 43 80 30 	dextr %d3,%d3,%d4,1
80002338:	02 57       	mov %d7,%d5
8000233a:	0b 63 00 21 	eq %d2,%d3,%d6
8000233e:	b7 02 01 20 	insert %d2,%d2,0,0,1
80002342:	06 14       	sh %d4,1
80002344:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
80002348:	c2 f5       	add %d5,-1
8000234a:	df 02 f5 ff 	jne %d2,0,80002334 <__unpack_d+0x3c>
8000234e:	59 57 08 00 	st.w [%a5]8,%d7
80002352:	59 54 0c 00 	st.w [%a5]12,%d4
80002356:	59 53 10 00 	st.w [%a5]16,%d3
8000235a:	00 90       	ret 
8000235c:	5f 05 16 00 	jeq %d5,%d0,80002388 <__unpack_d+0x90>
80002360:	82 32       	mov %d2,3
80002362:	1b 15 c0 5f 	addi %d5,%d5,-1023
80002366:	8f 88 00 40 	sh %d4,%d8,8
8000236a:	74 52       	st.w [%a5],%d2
8000236c:	77 86 00 24 	dextr %d2,%d6,%d8,8
80002370:	59 55 08 00 	st.w [%a5]8,%d5
80002374:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80002378:	59 54 0c 00 	st.w [%a5]12,%d4
8000237c:	59 52 10 00 	st.w [%a5]16,%d2
80002380:	00 90       	ret 
80002382:	82 22       	mov %d2,2
80002384:	74 52       	st.w [%a5],%d2
80002386:	00 90       	ret 
80002388:	8b 08 20 52 	ne %d5,%d8,0
8000238c:	8b 06 00 55 	or.ne %d5,%d6,0
80002390:	df 05 05 80 	jne %d5,0,8000239a <__unpack_d+0xa2>
80002394:	82 42       	mov %d2,4
80002396:	74 52       	st.w [%a5],%d2
80002398:	00 90       	ret 
8000239a:	77 89 00 34 	dextr %d3,%d9,%d8,8
8000239e:	37 09 e1 49 	extr.u %d4,%d9,19,1
800023a2:	b7 03 85 3d 	insert %d3,%d3,0,27,5
800023a6:	8f 88 00 20 	sh %d2,%d8,8
800023aa:	74 54       	st.w [%a5],%d4
800023ac:	59 52 0c 00 	st.w [%a5]12,%d2
800023b0:	59 53 10 00 	st.w [%a5]16,%d3
800023b4:	00 90       	ret 

800023b6 <__pack_f>:
800023b6:	54 44       	ld.w %d4,[%a4]
800023b8:	19 43 0c 00 	ld.w %d3,[%a4]12
800023bc:	19 47 04 00 	ld.w %d7,[%a4]4
800023c0:	bf 24 3f 80 	jlt.u %d4,2,8000243e <__pack_f+0x88>
800023c4:	7b 00 f8 57 	movh %d5,32640
800023c8:	82 06       	mov %d6,0
800023ca:	df 44 09 00 	jeq %d4,4,800023dc <__pack_f+0x26>
800023ce:	8b 03 00 22 	eq %d2,%d3,0
800023d2:	8b 24 e0 24 	or.eq %d2,%d4,2
800023d6:	82 05       	mov %d5,0
800023d8:	df 02 08 00 	jeq %d2,0,800023e8 <__pack_f+0x32>
800023dc:	8f f7 01 70 	sh %d7,%d7,31
800023e0:	0f 56 a0 20 	or %d2,%d6,%d5
800023e4:	a6 72       	or %d2,%d7
800023e6:	00 90       	ret 
800023e8:	19 42 08 00 	ld.w %d2,[%a4]8
800023ec:	8b 22 98 42 	ge %d4,%d2,-126
800023f0:	df 04 33 00 	jeq %d4,0,80002456 <__pack_f+0xa0>
800023f4:	8b 02 88 42 	ge %d4,%d2,128
800023f8:	7b 00 f8 57 	movh %d5,32640
800023fc:	df 04 f0 ff 	jne %d4,0,800023dc <__pack_f+0x26>
80002400:	8f f3 07 51 	and %d5,%d3,127
80002404:	8f 03 08 41 	and %d4,%d3,128
80002408:	8b 05 24 52 	ne %d5,%d5,64
8000240c:	ab 03 04 44 	cadd %d4,%d4,%d3,64
80002410:	1b f3 03 30 	addi %d3,%d3,63
80002414:	2b 43 40 35 	sel %d3,%d5,%d3,%d4
80002418:	1b f2 07 50 	addi %d5,%d2,127
8000241c:	bf 03 0c 00 	jlt %d3,0,80002434 <__pack_f+0x7e>
80002420:	37 03 f7 63 	extr.u %d6,%d3,7,23
80002424:	8f 75 01 50 	sh %d5,%d5,23
80002428:	8f f7 01 70 	sh %d7,%d7,31
8000242c:	0f 56 a0 20 	or %d2,%d6,%d5
80002430:	a6 72       	or %d2,%d7
80002432:	00 90       	ret 
80002434:	06 f3       	sh %d3,-1
80002436:	1b 02 08 50 	addi %d5,%d2,128
8000243a:	1d ff f3 ff 	j 80002420 <__pack_f+0x6a>
8000243e:	37 03 f6 33 	extr.u %d3,%d3,7,22
80002442:	7b 00 f8 57 	movh %d5,32640
80002446:	b7 f3 01 6b 	insert %d6,%d3,15,22,1
8000244a:	8f f7 01 70 	sh %d7,%d7,31
8000244e:	0f 56 a0 20 	or %d2,%d6,%d5
80002452:	a6 72       	or %d2,%d7
80002454:	00 90       	ret 
80002456:	8b 22 18 21 	rsub %d2,%d2,-126
8000245a:	8b a2 81 42 	ge %d4,%d2,26
8000245e:	df 04 bf ff 	jne %d4,0,800023dc <__pack_f+0x26>
80002462:	82 f5       	mov %d5,-1
80002464:	8b 02 00 41 	rsub %d4,%d2,0
80002468:	0f 25 00 20 	sh %d2,%d5,%d2
8000246c:	0f 43 00 40 	sh %d4,%d3,%d4
80002470:	0f 23 e0 30 	andn %d3,%d3,%d2
80002474:	8b 03 00 45 	or.ne %d4,%d3,0
80002478:	8f f4 07 31 	and %d3,%d4,127
8000247c:	8b 03 04 32 	eq %d3,%d3,64
80002480:	df 03 0e 80 	jne %d3,0,8000249c <__pack_f+0xe6>
80002484:	1b f4 03 20 	addi %d2,%d4,63
80002488:	7b 00 00 34 	movh %d3,16384
8000248c:	37 02 f7 63 	extr.u %d6,%d2,7,23
80002490:	0b 32 50 21 	ge.u %d2,%d2,%d3
80002494:	8f 72 01 50 	sh %d5,%d2,23
80002498:	1d ff a2 ff 	j 800023dc <__pack_f+0x26>
8000249c:	1b 04 04 30 	addi %d3,%d4,64
800024a0:	7b 00 00 24 	movh %d2,16384
800024a4:	37 03 f7 63 	extr.u %d6,%d3,7,23
800024a8:	0b 23 50 31 	ge.u %d3,%d3,%d2
800024ac:	8f 73 01 50 	sh %d5,%d3,23
800024b0:	6f 74 96 ff 	jnz.t %d4,7,800023dc <__pack_f+0x26>
800024b4:	0b 24 50 21 	ge.u %d2,%d4,%d2
800024b8:	37 04 f7 63 	extr.u %d6,%d4,7,23
800024bc:	8f 72 01 50 	sh %d5,%d2,23
800024c0:	1d ff 8e ff 	j 800023dc <__pack_f+0x26>

800024c4 <__do_global_ctors_aux>:
800024c4:	91 00 00 28 	movh.a %a2,32768
800024c8:	d9 22 48 42 	lea %a2,[%a2]9480 <80002508 <__CTOR_END__>>
800024cc:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
800024d0:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
800024d4:	df f2 0a 00 	jeq %d2,-1,800024e8 <__do_global_ctors_aux+0x24>
800024d8:	40 3c       	mov.aa %a12,%a3
800024da:	60 22       	mov.a %a2,%d2
800024dc:	b0 cc       	add.a %a12,-4
800024de:	2d 02 00 00 	calli %a2
800024e2:	54 c2       	ld.w %d2,[%a12]
800024e4:	df f2 fb ff 	jne %d2,-1,800024da <__do_global_ctors_aux+0x16>
800024e8:	00 90       	ret 
	...

Disassembly of section .init:

800024ec <_init>:
800024ec:	6d ff d6 ef 	call 80000498 <frame_dummy>
800024f0:	6d ff ea ff 	call 800024c4 <__do_global_ctors_aux>
800024f4:	00 90       	ret 
	...

Disassembly of section .fini:

800024f8 <_fini>:
800024f8:	6d ff 9e ef 	call 80000434 <__do_global_dtors_aux>
800024fc:	00 90       	ret 
	...

Disassembly of section .traptab_tc2:

801f6100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6100:	0d 00 00 02 	svlcx 
801f6104:	02 f4       	mov %d4,%d15
801f6106:	91 00 00 28 	movh.a %a2,32768
801f610a:	d9 22 ee 50 	lea %a2,[%a2]3438 <80000d6e <IfxCpu_Trap_memoryManagementError>>
801f610e:	dc 02       	ji %a2
801f6110:	00 80       	rfe 
	...
801f611e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6120:	0d 00 00 02 	svlcx 
801f6124:	02 f4       	mov %d4,%d15
801f6126:	91 00 00 28 	movh.a %a2,32768
801f612a:	d9 22 dc 60 	lea %a2,[%a2]3484 <80000d9c <IfxCpu_Trap_internalProtectionError>>
801f612e:	dc 02       	ji %a2
801f6130:	00 80       	rfe 
	...
801f613e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6140:	0d 00 00 02 	svlcx 
801f6144:	02 f4       	mov %d4,%d15
801f6146:	91 00 00 28 	movh.a %a2,32768
801f614a:	d9 22 ca 70 	lea %a2,[%a2]3530 <80000dca <IfxCpu_Trap_instructionError>>
801f614e:	dc 02       	ji %a2
801f6150:	00 80       	rfe 
	...
801f615e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6160:	02 f4       	mov %d4,%d15
801f6162:	91 00 00 28 	movh.a %a2,32768
801f6166:	d9 22 f8 70 	lea %a2,[%a2]3576 <80000df8 <IfxCpu_Trap_contextManagementError>>
801f616a:	dc 02       	ji %a2
801f616c:	00 80       	rfe 
	...
801f617e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6180:	0d 00 00 02 	svlcx 
801f6184:	02 f4       	mov %d4,%d15
801f6186:	91 00 00 28 	movh.a %a2,32768
801f618a:	d9 22 e6 80 	lea %a2,[%a2]3622 <80000e26 <IfxCpu_Trap_busError>>
801f618e:	dc 02       	ji %a2
801f6190:	00 80       	rfe 
	...
801f619e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f61a0:	0d 00 00 02 	svlcx 
801f61a4:	02 f4       	mov %d4,%d15
801f61a6:	91 00 00 28 	movh.a %a2,32768
801f61aa:	d9 22 d4 90 	lea %a2,[%a2]3668 <80000e54 <IfxCpu_Trap_assertion>>
801f61ae:	dc 02       	ji %a2
801f61b0:	00 80       	rfe 
	...
801f61be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
801f61c0:	0d 00 00 02 	svlcx 
801f61c4:	02 f4       	mov %d4,%d15
801f61c6:	91 00 00 28 	movh.a %a2,32768
801f61ca:	d9 22 e0 b0 	lea %a2,[%a2]3808 <80000ee0 <IfxCpu_Trap_systemCall_Cpu2>>
801f61ce:	dc 02       	ji %a2
801f61d0:	00 80       	rfe 
	...
801f61de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f61e0:	0d 00 00 02 	svlcx 
801f61e4:	02 f4       	mov %d4,%d15
801f61e6:	91 00 00 28 	movh.a %a2,32768
801f61ea:	d9 22 cc c0 	lea %a2,[%a2]3852 <80000f0c <IfxCpu_Trap_nonMaskableInterrupt>>
801f61ee:	dc 02       	ji %a2
801f61f0:	00 80       	rfe 
}
801f61f2:	00 90       	ret 

801f61f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc1:

801f6200 <IfxCpu_Trap_vectorTable1>:
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6200:	0d 00 00 02 	svlcx 
801f6204:	02 f4       	mov %d4,%d15
801f6206:	91 00 00 28 	movh.a %a2,32768
801f620a:	d9 22 ee 50 	lea %a2,[%a2]3438 <80000d6e <IfxCpu_Trap_memoryManagementError>>
801f620e:	dc 02       	ji %a2
801f6210:	00 80       	rfe 
	...
801f621e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6220:	0d 00 00 02 	svlcx 
801f6224:	02 f4       	mov %d4,%d15
801f6226:	91 00 00 28 	movh.a %a2,32768
801f622a:	d9 22 dc 60 	lea %a2,[%a2]3484 <80000d9c <IfxCpu_Trap_internalProtectionError>>
801f622e:	dc 02       	ji %a2
801f6230:	00 80       	rfe 
	...
801f623e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6240:	0d 00 00 02 	svlcx 
801f6244:	02 f4       	mov %d4,%d15
801f6246:	91 00 00 28 	movh.a %a2,32768
801f624a:	d9 22 ca 70 	lea %a2,[%a2]3530 <80000dca <IfxCpu_Trap_instructionError>>
801f624e:	dc 02       	ji %a2
801f6250:	00 80       	rfe 
	...
801f625e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6260:	02 f4       	mov %d4,%d15
801f6262:	91 00 00 28 	movh.a %a2,32768
801f6266:	d9 22 f8 70 	lea %a2,[%a2]3576 <80000df8 <IfxCpu_Trap_contextManagementError>>
801f626a:	dc 02       	ji %a2
801f626c:	00 80       	rfe 
	...
801f627e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6280:	0d 00 00 02 	svlcx 
801f6284:	02 f4       	mov %d4,%d15
801f6286:	91 00 00 28 	movh.a %a2,32768
801f628a:	d9 22 e6 80 	lea %a2,[%a2]3622 <80000e26 <IfxCpu_Trap_busError>>
801f628e:	dc 02       	ji %a2
801f6290:	00 80       	rfe 
	...
801f629e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f62a0:	0d 00 00 02 	svlcx 
801f62a4:	02 f4       	mov %d4,%d15
801f62a6:	91 00 00 28 	movh.a %a2,32768
801f62aa:	d9 22 d4 90 	lea %a2,[%a2]3668 <80000e54 <IfxCpu_Trap_assertion>>
801f62ae:	dc 02       	ji %a2
801f62b0:	00 80       	rfe 
	...
801f62be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
801f62c0:	0d 00 00 02 	svlcx 
801f62c4:	02 f4       	mov %d4,%d15
801f62c6:	91 00 00 28 	movh.a %a2,32768
801f62ca:	d9 22 f4 a0 	lea %a2,[%a2]3764 <80000eb4 <IfxCpu_Trap_systemCall_Cpu1>>
801f62ce:	dc 02       	ji %a2
801f62d0:	00 80       	rfe 
	...
801f62de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f62e0:	0d 00 00 02 	svlcx 
801f62e4:	02 f4       	mov %d4,%d15
801f62e6:	91 00 00 28 	movh.a %a2,32768
801f62ea:	d9 22 cc c0 	lea %a2,[%a2]3852 <80000f0c <IfxCpu_Trap_nonMaskableInterrupt>>
801f62ee:	dc 02       	ji %a2
801f62f0:	00 80       	rfe 
}
801f62f2:	00 90       	ret 

801f62f4 <IfxCpu_Trap_vectorTable1_end>:
	...
