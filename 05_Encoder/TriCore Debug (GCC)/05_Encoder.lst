
05_Encoder.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bmhd_0       00000020  80000000  80000000  00000254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .bmhd_1       00000020  80020000  80020000  00003990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .startup      00000010  80000020  80000020  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .interface_const 00000000  80000040  80000040  00003bc4  2**0
                  CONTENTS
  4 .traptab_tc0  00000100  80000100  80000100  000002a0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .rodata       000002c8  80000200  80000200  000003a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .CPU2.zbss    00000000  50000000  50000000  00003bc4  2**0
                  CONTENTS
  7 .CPU2.bss     00000000  50000000  50000000  00003bc4  2**0
                  CONTENTS
  8 .CPU1.zbss    00000000  60000000  60000000  00003bc4  2**0
                  CONTENTS
  9 .CPU1.bss     00000000  600010e0  600010e0  00003bc4  2**0
                  CONTENTS
 10 .CPU0.zbss    00000000  70000000  70000000  00003bc4  2**0
                  CONTENTS
 11 .CPU0.bss     00000000  70000000  70000000  00003bc4  2**0
                  CONTENTS
 12 .zbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC
 13 .sbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC, SMALL_DATA
 14 .bss          000000d8  60000008  801f6304  00003bc8  2**3
                  ALLOC
 15 .CPU2.zdata   00000000  50000000  50000000  00003bc4  2**0
                  CONTENTS
 16 .CPU2.data    00000000  50000000  50000000  00003bc4  2**0
                  CONTENTS
 17 .CPU1.zdata   00000000  60000000  60000000  00003bc4  2**0
                  CONTENTS
 18 .CPU1.data    00000000  600010e0  600010e0  00003bc4  2**0
                  CONTENTS
 19 .CPU0.zdata   00000000  70000000  70000000  00003bc4  2**0
                  CONTENTS
 20 .CPU0.data    00000000  70000000  70000000  00003bc4  2**0
                  CONTENTS
 21 .zdata        00000000  60000000  801f6304  00003bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .sdata        00000000  60000000  801f6304  00003bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
 23 .data         00000004  60000000  801f6300  00003bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 24 .lmu_zdata    00000000  90000000  90000000  00003bc4  2**0
                  CONTENTS
 25 .lmu_sdata    00000000  90000000  90000000  00003bc4  2**0
                  CONTENTS
 26 .lmu_data     00000000  90000000  90000000  00003bc4  2**0
                  CONTENTS
 27 .CPU0.psram_text 00000000  70100000  70100000  00003bc4  2**0
                  CONTENTS
 28 .CPU1.psram_text 00000000  60100000  60100000  00003bc4  2**0
                  CONTENTS
 29 .CPU2.psram_text 00000000  50100000  50100000  00003bc4  2**0
                  CONTENTS
 30 .text         000032f4  800004c8  800004c8  00000668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .init         0000000c  800037bc  800037bc  0000395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .fini         00000008  800037c8  800037c8  00003968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .eh_frame     00000000  800037d0  800037d0  00003bc4  2**0
                  CONTENTS
 34 .gcc_except_table 00000000  800037d0  800037d0  00003bc4  2**0
                  CONTENTS
 35 .ctors        00000010  800037d0  800037d0  00003970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 36 .dtors        00000010  800037e0  800037e0  00003980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 37 .traptab_tc2  00000100  801f6100  801f6100  000039c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 38 .traptab_tc1  00000100  801f6200  801f6200  00003ac0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 39 .heap         00001000  600000e0  801f6304  00003bc4  2**0
                  ALLOC
 40 .CPU2.ustack  00000800  5001ae00  5001ae00  00000254  2**0
                  ALLOC
 41 .CPU2.istack  00000400  5001b700  5001b700  00000254  2**0
                  ALLOC
 42 .CPU2.csa     00002000  5001bc00  5001bc00  00000254  2**0
                  ALLOC
 43 .CPU1.ustack  00000800  6001ae00  6001ae00  00000254  2**0
                  ALLOC
 44 .CPU1.istack  00000400  6001b700  6001b700  00000254  2**0
                  ALLOC
 45 .CPU1.csa     00002000  6001bc00  6001bc00  00000254  2**0
                  ALLOC
 46 .CPU0.ustack  00000800  70018e00  70018e00  00000254  2**0
                  ALLOC
 47 .CPU0.istack  00000400  70019700  70019700  00000254  2**0
                  ALLOC
 48 .CPU0.csa     00002000  70019c00  70019c00  00000254  2**0
                  ALLOC
 49 .inttab_tc0_000 00000000  801f4000  801f4000  00003bc4  2**0
                  CONTENTS
 50 .inttab_tc0_001 00000000  801f4020  801f4020  00003bc4  2**0
                  CONTENTS
 51 .inttab_tc0_002 00000000  801f4040  801f4040  00003bc4  2**0
                  CONTENTS
 52 .inttab_tc0_003 00000000  801f4060  801f4060  00003bc4  2**0
                  CONTENTS
 53 .inttab_tc0_004 00000000  801f4080  801f4080  00003bc4  2**0
                  CONTENTS
 54 .inttab_tc0_005 00000000  801f40a0  801f40a0  00003bc4  2**0
                  CONTENTS
 55 .inttab_tc0_006 00000000  801f40c0  801f40c0  00003bc4  2**0
                  CONTENTS
 56 .inttab_tc0_007 00000000  801f40e0  801f40e0  00003bc4  2**0
                  CONTENTS
 57 .inttab_tc0_008 00000000  801f4100  801f4100  00003bc4  2**0
                  CONTENTS
 58 .inttab_tc0_009 00000000  801f4120  801f4120  00003bc4  2**0
                  CONTENTS
 59 .inttab_tc0_00A 00000000  801f4140  801f4140  00003bc4  2**0
                  CONTENTS
 60 .inttab_tc0_00B 00000000  801f4160  801f4160  00003bc4  2**0
                  CONTENTS
 61 .inttab_tc0_00C 00000000  801f4180  801f4180  00003bc4  2**0
                  CONTENTS
 62 .inttab_tc0_00D 00000000  801f41a0  801f41a0  00003bc4  2**0
                  CONTENTS
 63 .inttab_tc0_00E 00000000  801f41c0  801f41c0  00003bc4  2**0
                  CONTENTS
 64 .inttab_tc0_00F 00000000  801f41e0  801f41e0  00003bc4  2**0
                  CONTENTS
 65 .inttab_tc0_010 00000000  801f4200  801f4200  00003bc4  2**0
                  CONTENTS
 66 .inttab_tc0_011 00000000  801f4220  801f4220  00003bc4  2**0
                  CONTENTS
 67 .inttab_tc0_012 00000000  801f4240  801f4240  00003bc4  2**0
                  CONTENTS
 68 .inttab_tc0_013 00000000  801f4260  801f4260  00003bc4  2**0
                  CONTENTS
 69 .inttab_tc0_014 00000000  801f4280  801f4280  00003bc4  2**0
                  CONTENTS
 70 .inttab_tc0_015 00000000  801f42a0  801f42a0  00003bc4  2**0
                  CONTENTS
 71 .inttab_tc0_016 00000000  801f42c0  801f42c0  00003bc4  2**0
                  CONTENTS
 72 .inttab_tc0_017 00000000  801f42e0  801f42e0  00003bc4  2**0
                  CONTENTS
 73 .inttab_tc0_018 00000000  801f4300  801f4300  00003bc4  2**0
                  CONTENTS
 74 .inttab_tc0_019 00000000  801f4320  801f4320  00003bc4  2**0
                  CONTENTS
 75 .inttab_tc0_01A 00000000  801f4340  801f4340  00003bc4  2**0
                  CONTENTS
 76 .inttab_tc0_01B 00000000  801f4360  801f4360  00003bc4  2**0
                  CONTENTS
 77 .inttab_tc0_01C 00000000  801f4380  801f4380  00003bc4  2**0
                  CONTENTS
 78 .inttab_tc0_01D 00000000  801f43a0  801f43a0  00003bc4  2**0
                  CONTENTS
 79 .inttab_tc0_01E 00000000  801f43c0  801f43c0  00003bc4  2**0
                  CONTENTS
 80 .inttab_tc0_01F 00000000  801f43e0  801f43e0  00003bc4  2**0
                  CONTENTS
 81 .inttab_tc0_020 00000000  801f4400  801f4400  00003bc4  2**0
                  CONTENTS
 82 .inttab_tc0_021 00000000  801f4420  801f4420  00003bc4  2**0
                  CONTENTS
 83 .inttab_tc0_022 00000000  801f4440  801f4440  00003bc4  2**0
                  CONTENTS
 84 .inttab_tc0_023 00000000  801f4460  801f4460  00003bc4  2**0
                  CONTENTS
 85 .inttab_tc0_024 00000000  801f4480  801f4480  00003bc4  2**0
                  CONTENTS
 86 .inttab_tc0_025 00000000  801f44a0  801f44a0  00003bc4  2**0
                  CONTENTS
 87 .inttab_tc0_026 00000000  801f44c0  801f44c0  00003bc4  2**0
                  CONTENTS
 88 .inttab_tc0_027 00000000  801f44e0  801f44e0  00003bc4  2**0
                  CONTENTS
 89 .inttab_tc0_028 00000000  801f4500  801f4500  00003bc4  2**0
                  CONTENTS
 90 .inttab_tc0_029 00000000  801f4520  801f4520  00003bc4  2**0
                  CONTENTS
 91 .inttab_tc0_02A 00000000  801f4540  801f4540  00003bc4  2**0
                  CONTENTS
 92 .inttab_tc0_02B 00000000  801f4560  801f4560  00003bc4  2**0
                  CONTENTS
 93 .inttab_tc0_02C 00000000  801f4580  801f4580  00003bc4  2**0
                  CONTENTS
 94 .inttab_tc0_02D 00000000  801f45a0  801f45a0  00003bc4  2**0
                  CONTENTS
 95 .inttab_tc0_02E 00000000  801f45c0  801f45c0  00003bc4  2**0
                  CONTENTS
 96 .inttab_tc0_02F 00000000  801f45e0  801f45e0  00003bc4  2**0
                  CONTENTS
 97 .inttab_tc0_030 00000000  801f4600  801f4600  00003bc4  2**0
                  CONTENTS
 98 .inttab_tc0_031 00000000  801f4620  801f4620  00003bc4  2**0
                  CONTENTS
 99 .inttab_tc0_032 00000000  801f4640  801f4640  00003bc4  2**0
                  CONTENTS
100 .inttab_tc0_033 00000000  801f4660  801f4660  00003bc4  2**0
                  CONTENTS
101 .inttab_tc0_034 00000000  801f4680  801f4680  00003bc4  2**0
                  CONTENTS
102 .inttab_tc0_035 00000000  801f46a0  801f46a0  00003bc4  2**0
                  CONTENTS
103 .inttab_tc0_036 00000000  801f46c0  801f46c0  00003bc4  2**0
                  CONTENTS
104 .inttab_tc0_037 00000000  801f46e0  801f46e0  00003bc4  2**0
                  CONTENTS
105 .inttab_tc0_038 00000000  801f4700  801f4700  00003bc4  2**0
                  CONTENTS
106 .inttab_tc0_039 00000000  801f4720  801f4720  00003bc4  2**0
                  CONTENTS
107 .inttab_tc0_03A 00000000  801f4740  801f4740  00003bc4  2**0
                  CONTENTS
108 .inttab_tc0_03B 00000000  801f4760  801f4760  00003bc4  2**0
                  CONTENTS
109 .inttab_tc0_03C 00000000  801f4780  801f4780  00003bc4  2**0
                  CONTENTS
110 .inttab_tc0_03D 00000000  801f47a0  801f47a0  00003bc4  2**0
                  CONTENTS
111 .inttab_tc0_03E 00000000  801f47c0  801f47c0  00003bc4  2**0
                  CONTENTS
112 .inttab_tc0_03F 00000000  801f47e0  801f47e0  00003bc4  2**0
                  CONTENTS
113 .inttab_tc0_040 00000000  801f4800  801f4800  00003bc4  2**0
                  CONTENTS
114 .inttab_tc0_041 00000000  801f4820  801f4820  00003bc4  2**0
                  CONTENTS
115 .inttab_tc0_042 00000000  801f4840  801f4840  00003bc4  2**0
                  CONTENTS
116 .inttab_tc0_043 00000000  801f4860  801f4860  00003bc4  2**0
                  CONTENTS
117 .inttab_tc0_044 00000000  801f4880  801f4880  00003bc4  2**0
                  CONTENTS
118 .inttab_tc0_045 00000000  801f48a0  801f48a0  00003bc4  2**0
                  CONTENTS
119 .inttab_tc0_046 00000000  801f48c0  801f48c0  00003bc4  2**0
                  CONTENTS
120 .inttab_tc0_047 00000000  801f48e0  801f48e0  00003bc4  2**0
                  CONTENTS
121 .inttab_tc0_048 00000000  801f4900  801f4900  00003bc4  2**0
                  CONTENTS
122 .inttab_tc0_049 00000000  801f4920  801f4920  00003bc4  2**0
                  CONTENTS
123 .inttab_tc0_04A 00000000  801f4940  801f4940  00003bc4  2**0
                  CONTENTS
124 .inttab_tc0_04B 00000000  801f4960  801f4960  00003bc4  2**0
                  CONTENTS
125 .inttab_tc0_04C 00000000  801f4980  801f4980  00003bc4  2**0
                  CONTENTS
126 .inttab_tc0_04D 00000000  801f49a0  801f49a0  00003bc4  2**0
                  CONTENTS
127 .inttab_tc0_04E 00000000  801f49c0  801f49c0  00003bc4  2**0
                  CONTENTS
128 .inttab_tc0_04F 00000000  801f49e0  801f49e0  00003bc4  2**0
                  CONTENTS
129 .inttab_tc0_050 00000000  801f4a00  801f4a00  00003bc4  2**0
                  CONTENTS
130 .inttab_tc0_051 00000000  801f4a20  801f4a20  00003bc4  2**0
                  CONTENTS
131 .inttab_tc0_052 00000000  801f4a40  801f4a40  00003bc4  2**0
                  CONTENTS
132 .inttab_tc0_053 00000000  801f4a60  801f4a60  00003bc4  2**0
                  CONTENTS
133 .inttab_tc0_054 00000000  801f4a80  801f4a80  00003bc4  2**0
                  CONTENTS
134 .inttab_tc0_055 00000000  801f4aa0  801f4aa0  00003bc4  2**0
                  CONTENTS
135 .inttab_tc0_056 00000000  801f4ac0  801f4ac0  00003bc4  2**0
                  CONTENTS
136 .inttab_tc0_057 00000000  801f4ae0  801f4ae0  00003bc4  2**0
                  CONTENTS
137 .inttab_tc0_058 00000000  801f4b00  801f4b00  00003bc4  2**0
                  CONTENTS
138 .inttab_tc0_059 00000000  801f4b20  801f4b20  00003bc4  2**0
                  CONTENTS
139 .inttab_tc0_05A 00000000  801f4b40  801f4b40  00003bc4  2**0
                  CONTENTS
140 .inttab_tc0_05B 00000000  801f4b60  801f4b60  00003bc4  2**0
                  CONTENTS
141 .inttab_tc0_05C 00000000  801f4b80  801f4b80  00003bc4  2**0
                  CONTENTS
142 .inttab_tc0_05D 00000000  801f4ba0  801f4ba0  00003bc4  2**0
                  CONTENTS
143 .inttab_tc0_05E 00000000  801f4bc0  801f4bc0  00003bc4  2**0
                  CONTENTS
144 .inttab_tc0_05F 00000000  801f4be0  801f4be0  00003bc4  2**0
                  CONTENTS
145 .inttab_tc0_060 00000000  801f4c00  801f4c00  00003bc4  2**0
                  CONTENTS
146 .inttab_tc0_061 00000000  801f4c20  801f4c20  00003bc4  2**0
                  CONTENTS
147 .inttab_tc0_062 00000000  801f4c40  801f4c40  00003bc4  2**0
                  CONTENTS
148 .inttab_tc0_063 00000000  801f4c60  801f4c60  00003bc4  2**0
                  CONTENTS
149 .inttab_tc0_064 0000000e  801f4c80  801f4c80  000039b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .inttab_tc0_065 00000000  801f4ca0  801f4ca0  00003bc4  2**0
                  CONTENTS
151 .inttab_tc0_066 00000000  801f4cc0  801f4cc0  00003bc4  2**0
                  CONTENTS
152 .inttab_tc0_067 00000000  801f4ce0  801f4ce0  00003bc4  2**0
                  CONTENTS
153 .inttab_tc0_068 00000000  801f4d00  801f4d00  00003bc4  2**0
                  CONTENTS
154 .inttab_tc0_069 00000000  801f4d20  801f4d20  00003bc4  2**0
                  CONTENTS
155 .inttab_tc0_06A 00000000  801f4d40  801f4d40  00003bc4  2**0
                  CONTENTS
156 .inttab_tc0_06B 00000000  801f4d60  801f4d60  00003bc4  2**0
                  CONTENTS
157 .inttab_tc0_06C 00000000  801f4d80  801f4d80  00003bc4  2**0
                  CONTENTS
158 .inttab_tc0_06D 00000000  801f4da0  801f4da0  00003bc4  2**0
                  CONTENTS
159 .inttab_tc0_06E 00000000  801f4dc0  801f4dc0  00003bc4  2**0
                  CONTENTS
160 .inttab_tc0_06F 00000000  801f4de0  801f4de0  00003bc4  2**0
                  CONTENTS
161 .inttab_tc0_070 00000000  801f4e00  801f4e00  00003bc4  2**0
                  CONTENTS
162 .inttab_tc0_071 00000000  801f4e20  801f4e20  00003bc4  2**0
                  CONTENTS
163 .inttab_tc0_072 00000000  801f4e40  801f4e40  00003bc4  2**0
                  CONTENTS
164 .inttab_tc0_073 00000000  801f4e60  801f4e60  00003bc4  2**0
                  CONTENTS
165 .inttab_tc0_074 00000000  801f4e80  801f4e80  00003bc4  2**0
                  CONTENTS
166 .inttab_tc0_075 00000000  801f4ea0  801f4ea0  00003bc4  2**0
                  CONTENTS
167 .inttab_tc0_076 00000000  801f4ec0  801f4ec0  00003bc4  2**0
                  CONTENTS
168 .inttab_tc0_077 00000000  801f4ee0  801f4ee0  00003bc4  2**0
                  CONTENTS
169 .inttab_tc0_078 00000000  801f4f00  801f4f00  00003bc4  2**0
                  CONTENTS
170 .inttab_tc0_079 00000000  801f4f20  801f4f20  00003bc4  2**0
                  CONTENTS
171 .inttab_tc0_07A 00000000  801f4f40  801f4f40  00003bc4  2**0
                  CONTENTS
172 .inttab_tc0_07B 00000000  801f4f60  801f4f60  00003bc4  2**0
                  CONTENTS
173 .inttab_tc0_07C 00000000  801f4f80  801f4f80  00003bc4  2**0
                  CONTENTS
174 .inttab_tc0_07D 00000000  801f4fa0  801f4fa0  00003bc4  2**0
                  CONTENTS
175 .inttab_tc0_07E 00000000  801f4fc0  801f4fc0  00003bc4  2**0
                  CONTENTS
176 .inttab_tc0_07F 00000000  801f4fe0  801f4fe0  00003bc4  2**0
                  CONTENTS
177 .inttab_tc0_080 00000000  801f5000  801f5000  00003bc4  2**0
                  CONTENTS
178 .inttab_tc0_081 00000000  801f5020  801f5020  00003bc4  2**0
                  CONTENTS
179 .inttab_tc0_082 00000000  801f5040  801f5040  00003bc4  2**0
                  CONTENTS
180 .inttab_tc0_083 00000000  801f5060  801f5060  00003bc4  2**0
                  CONTENTS
181 .inttab_tc0_084 00000000  801f5080  801f5080  00003bc4  2**0
                  CONTENTS
182 .inttab_tc0_085 00000000  801f50a0  801f50a0  00003bc4  2**0
                  CONTENTS
183 .inttab_tc0_086 00000000  801f50c0  801f50c0  00003bc4  2**0
                  CONTENTS
184 .inttab_tc0_087 00000000  801f50e0  801f50e0  00003bc4  2**0
                  CONTENTS
185 .inttab_tc0_088 00000000  801f5100  801f5100  00003bc4  2**0
                  CONTENTS
186 .inttab_tc0_089 00000000  801f5120  801f5120  00003bc4  2**0
                  CONTENTS
187 .inttab_tc0_08A 00000000  801f5140  801f5140  00003bc4  2**0
                  CONTENTS
188 .inttab_tc0_08B 00000000  801f5160  801f5160  00003bc4  2**0
                  CONTENTS
189 .inttab_tc0_08C 00000000  801f5180  801f5180  00003bc4  2**0
                  CONTENTS
190 .inttab_tc0_08D 00000000  801f51a0  801f51a0  00003bc4  2**0
                  CONTENTS
191 .inttab_tc0_08E 00000000  801f51c0  801f51c0  00003bc4  2**0
                  CONTENTS
192 .inttab_tc0_08F 00000000  801f51e0  801f51e0  00003bc4  2**0
                  CONTENTS
193 .inttab_tc0_090 00000000  801f5200  801f5200  00003bc4  2**0
                  CONTENTS
194 .inttab_tc0_091 00000000  801f5220  801f5220  00003bc4  2**0
                  CONTENTS
195 .inttab_tc0_092 00000000  801f5240  801f5240  00003bc4  2**0
                  CONTENTS
196 .inttab_tc0_093 00000000  801f5260  801f5260  00003bc4  2**0
                  CONTENTS
197 .inttab_tc0_094 00000000  801f5280  801f5280  00003bc4  2**0
                  CONTENTS
198 .inttab_tc0_095 00000000  801f52a0  801f52a0  00003bc4  2**0
                  CONTENTS
199 .inttab_tc0_096 00000000  801f52c0  801f52c0  00003bc4  2**0
                  CONTENTS
200 .inttab_tc0_097 00000000  801f52e0  801f52e0  00003bc4  2**0
                  CONTENTS
201 .inttab_tc0_098 00000000  801f5300  801f5300  00003bc4  2**0
                  CONTENTS
202 .inttab_tc0_099 00000000  801f5320  801f5320  00003bc4  2**0
                  CONTENTS
203 .inttab_tc0_09A 00000000  801f5340  801f5340  00003bc4  2**0
                  CONTENTS
204 .inttab_tc0_09B 00000000  801f5360  801f5360  00003bc4  2**0
                  CONTENTS
205 .inttab_tc0_09C 00000000  801f5380  801f5380  00003bc4  2**0
                  CONTENTS
206 .inttab_tc0_09D 00000000  801f53a0  801f53a0  00003bc4  2**0
                  CONTENTS
207 .inttab_tc0_09E 00000000  801f53c0  801f53c0  00003bc4  2**0
                  CONTENTS
208 .inttab_tc0_09F 00000000  801f53e0  801f53e0  00003bc4  2**0
                  CONTENTS
209 .inttab_tc0_0A0 00000000  801f5400  801f5400  00003bc4  2**0
                  CONTENTS
210 .inttab_tc0_0A1 00000000  801f5420  801f5420  00003bc4  2**0
                  CONTENTS
211 .inttab_tc0_0A2 00000000  801f5440  801f5440  00003bc4  2**0
                  CONTENTS
212 .inttab_tc0_0A3 00000000  801f5460  801f5460  00003bc4  2**0
                  CONTENTS
213 .inttab_tc0_0A4 00000000  801f5480  801f5480  00003bc4  2**0
                  CONTENTS
214 .inttab_tc0_0A5 00000000  801f54a0  801f54a0  00003bc4  2**0
                  CONTENTS
215 .inttab_tc0_0A6 00000000  801f54c0  801f54c0  00003bc4  2**0
                  CONTENTS
216 .inttab_tc0_0A7 00000000  801f54e0  801f54e0  00003bc4  2**0
                  CONTENTS
217 .inttab_tc0_0A8 00000000  801f5500  801f5500  00003bc4  2**0
                  CONTENTS
218 .inttab_tc0_0A9 00000000  801f5520  801f5520  00003bc4  2**0
                  CONTENTS
219 .inttab_tc0_0AA 00000000  801f5540  801f5540  00003bc4  2**0
                  CONTENTS
220 .inttab_tc0_0AB 00000000  801f5560  801f5560  00003bc4  2**0
                  CONTENTS
221 .inttab_tc0_0AC 00000000  801f5580  801f5580  00003bc4  2**0
                  CONTENTS
222 .inttab_tc0_0AD 00000000  801f55a0  801f55a0  00003bc4  2**0
                  CONTENTS
223 .inttab_tc0_0AE 00000000  801f55c0  801f55c0  00003bc4  2**0
                  CONTENTS
224 .inttab_tc0_0AF 00000000  801f55e0  801f55e0  00003bc4  2**0
                  CONTENTS
225 .inttab_tc0_0B0 00000000  801f5600  801f5600  00003bc4  2**0
                  CONTENTS
226 .inttab_tc0_0B1 00000000  801f5620  801f5620  00003bc4  2**0
                  CONTENTS
227 .inttab_tc0_0B2 00000000  801f5640  801f5640  00003bc4  2**0
                  CONTENTS
228 .inttab_tc0_0B3 00000000  801f5660  801f5660  00003bc4  2**0
                  CONTENTS
229 .inttab_tc0_0B4 00000000  801f5680  801f5680  00003bc4  2**0
                  CONTENTS
230 .inttab_tc0_0B5 00000000  801f56a0  801f56a0  00003bc4  2**0
                  CONTENTS
231 .inttab_tc0_0B6 00000000  801f56c0  801f56c0  00003bc4  2**0
                  CONTENTS
232 .inttab_tc0_0B7 00000000  801f56e0  801f56e0  00003bc4  2**0
                  CONTENTS
233 .inttab_tc0_0B8 00000000  801f5700  801f5700  00003bc4  2**0
                  CONTENTS
234 .inttab_tc0_0B9 00000000  801f5720  801f5720  00003bc4  2**0
                  CONTENTS
235 .inttab_tc0_0BA 00000000  801f5740  801f5740  00003bc4  2**0
                  CONTENTS
236 .inttab_tc0_0BB 00000000  801f5760  801f5760  00003bc4  2**0
                  CONTENTS
237 .inttab_tc0_0BC 00000000  801f5780  801f5780  00003bc4  2**0
                  CONTENTS
238 .inttab_tc0_0BD 00000000  801f57a0  801f57a0  00003bc4  2**0
                  CONTENTS
239 .inttab_tc0_0BE 00000000  801f57c0  801f57c0  00003bc4  2**0
                  CONTENTS
240 .inttab_tc0_0BF 00000000  801f57e0  801f57e0  00003bc4  2**0
                  CONTENTS
241 .inttab_tc0_0C0 00000000  801f5800  801f5800  00003bc4  2**0
                  CONTENTS
242 .inttab_tc0_0C1 00000000  801f5820  801f5820  00003bc4  2**0
                  CONTENTS
243 .inttab_tc0_0C2 00000000  801f5840  801f5840  00003bc4  2**0
                  CONTENTS
244 .inttab_tc0_0C3 00000000  801f5860  801f5860  00003bc4  2**0
                  CONTENTS
245 .inttab_tc0_0C4 00000000  801f5880  801f5880  00003bc4  2**0
                  CONTENTS
246 .inttab_tc0_0C5 00000000  801f58a0  801f58a0  00003bc4  2**0
                  CONTENTS
247 .inttab_tc0_0C6 00000000  801f58c0  801f58c0  00003bc4  2**0
                  CONTENTS
248 .inttab_tc0_0C7 00000000  801f58e0  801f58e0  00003bc4  2**0
                  CONTENTS
249 .inttab_tc0_0C8 00000000  801f5900  801f5900  00003bc4  2**0
                  CONTENTS
250 .inttab_tc0_0C9 00000000  801f5920  801f5920  00003bc4  2**0
                  CONTENTS
251 .inttab_tc0_0CA 00000000  801f5940  801f5940  00003bc4  2**0
                  CONTENTS
252 .inttab_tc0_0CB 00000000  801f5960  801f5960  00003bc4  2**0
                  CONTENTS
253 .inttab_tc0_0CC 00000000  801f5980  801f5980  00003bc4  2**0
                  CONTENTS
254 .inttab_tc0_0CD 00000000  801f59a0  801f59a0  00003bc4  2**0
                  CONTENTS
255 .inttab_tc0_0CE 00000000  801f59c0  801f59c0  00003bc4  2**0
                  CONTENTS
256 .inttab_tc0_0CF 00000000  801f59e0  801f59e0  00003bc4  2**0
                  CONTENTS
257 .inttab_tc0_0D0 00000000  801f5a00  801f5a00  00003bc4  2**0
                  CONTENTS
258 .inttab_tc0_0D1 00000000  801f5a20  801f5a20  00003bc4  2**0
                  CONTENTS
259 .inttab_tc0_0D2 00000000  801f5a40  801f5a40  00003bc4  2**0
                  CONTENTS
260 .inttab_tc0_0D3 00000000  801f5a60  801f5a60  00003bc4  2**0
                  CONTENTS
261 .inttab_tc0_0D4 00000000  801f5a80  801f5a80  00003bc4  2**0
                  CONTENTS
262 .inttab_tc0_0D5 00000000  801f5aa0  801f5aa0  00003bc4  2**0
                  CONTENTS
263 .inttab_tc0_0D6 00000000  801f5ac0  801f5ac0  00003bc4  2**0
                  CONTENTS
264 .inttab_tc0_0D7 00000000  801f5ae0  801f5ae0  00003bc4  2**0
                  CONTENTS
265 .inttab_tc0_0D8 00000000  801f5b00  801f5b00  00003bc4  2**0
                  CONTENTS
266 .inttab_tc0_0D9 00000000  801f5b20  801f5b20  00003bc4  2**0
                  CONTENTS
267 .inttab_tc0_0DA 00000000  801f5b40  801f5b40  00003bc4  2**0
                  CONTENTS
268 .inttab_tc0_0DB 00000000  801f5b60  801f5b60  00003bc4  2**0
                  CONTENTS
269 .inttab_tc0_0DC 00000000  801f5b80  801f5b80  00003bc4  2**0
                  CONTENTS
270 .inttab_tc0_0DD 00000000  801f5ba0  801f5ba0  00003bc4  2**0
                  CONTENTS
271 .inttab_tc0_0DE 00000000  801f5bc0  801f5bc0  00003bc4  2**0
                  CONTENTS
272 .inttab_tc0_0DF 00000000  801f5be0  801f5be0  00003bc4  2**0
                  CONTENTS
273 .inttab_tc0_0E0 00000000  801f5c00  801f5c00  00003bc4  2**0
                  CONTENTS
274 .inttab_tc0_0E1 00000000  801f5c20  801f5c20  00003bc4  2**0
                  CONTENTS
275 .inttab_tc0_0E2 00000000  801f5c40  801f5c40  00003bc4  2**0
                  CONTENTS
276 .inttab_tc0_0E3 00000000  801f5c60  801f5c60  00003bc4  2**0
                  CONTENTS
277 .inttab_tc0_0E4 00000000  801f5c80  801f5c80  00003bc4  2**0
                  CONTENTS
278 .inttab_tc0_0E5 00000000  801f5ca0  801f5ca0  00003bc4  2**0
                  CONTENTS
279 .inttab_tc0_0E6 00000000  801f5cc0  801f5cc0  00003bc4  2**0
                  CONTENTS
280 .inttab_tc0_0E7 00000000  801f5ce0  801f5ce0  00003bc4  2**0
                  CONTENTS
281 .inttab_tc0_0E8 00000000  801f5d00  801f5d00  00003bc4  2**0
                  CONTENTS
282 .inttab_tc0_0E9 00000000  801f5d20  801f5d20  00003bc4  2**0
                  CONTENTS
283 .inttab_tc0_0EA 00000000  801f5d40  801f5d40  00003bc4  2**0
                  CONTENTS
284 .inttab_tc0_0EB 00000000  801f5d60  801f5d60  00003bc4  2**0
                  CONTENTS
285 .inttab_tc0_0EC 00000000  801f5d80  801f5d80  00003bc4  2**0
                  CONTENTS
286 .inttab_tc0_0ED 00000000  801f5da0  801f5da0  00003bc4  2**0
                  CONTENTS
287 .inttab_tc0_0EE 00000000  801f5dc0  801f5dc0  00003bc4  2**0
                  CONTENTS
288 .inttab_tc0_0EF 00000000  801f5de0  801f5de0  00003bc4  2**0
                  CONTENTS
289 .inttab_tc0_0F0 00000000  801f5e00  801f5e00  00003bc4  2**0
                  CONTENTS
290 .inttab_tc0_0F1 00000000  801f5e20  801f5e20  00003bc4  2**0
                  CONTENTS
291 .inttab_tc0_0F2 00000000  801f5e40  801f5e40  00003bc4  2**0
                  CONTENTS
292 .inttab_tc0_0F3 00000000  801f5e60  801f5e60  00003bc4  2**0
                  CONTENTS
293 .inttab_tc0_0F4 00000000  801f5e80  801f5e80  00003bc4  2**0
                  CONTENTS
294 .inttab_tc0_0F5 00000000  801f5ea0  801f5ea0  00003bc4  2**0
                  CONTENTS
295 .inttab_tc0_0F6 00000000  801f5ec0  801f5ec0  00003bc4  2**0
                  CONTENTS
296 .inttab_tc0_0F7 00000000  801f5ee0  801f5ee0  00003bc4  2**0
                  CONTENTS
297 .inttab_tc0_0F8 00000000  801f5f00  801f5f00  00003bc4  2**0
                  CONTENTS
298 .inttab_tc0_0F9 00000000  801f5f20  801f5f20  00003bc4  2**0
                  CONTENTS
299 .inttab_tc0_0FA 00000000  801f5f40  801f5f40  00003bc4  2**0
                  CONTENTS
300 .inttab_tc0_0FB 00000000  801f5f60  801f5f60  00003bc4  2**0
                  CONTENTS
301 .inttab_tc0_0FC 00000000  801f5f80  801f5f80  00003bc4  2**0
                  CONTENTS
302 .inttab_tc0_0FD 00000000  801f5fa0  801f5fa0  00003bc4  2**0
                  CONTENTS
303 .inttab_tc0_0FE 00000000  801f5fc0  801f5fc0  00003bc4  2**0
                  CONTENTS
304 .inttab_tc0_0FF 00000000  801f5fe0  801f5fe0  00003bc4  2**0
                  CONTENTS
305 .comment      0000001b  00000000  00000000  00003bc4  2**0
                  CONTENTS, READONLY
306 .debug_aranges 000008b8  00000000  00000000  00003be0  2**3
                  CONTENTS, READONLY, DEBUGGING
307 .debug_info   0007b360  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING
308 .debug_abbrev 00005003  00000000  00000000  0007f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
309 .debug_line   0001248c  00000000  00000000  000847fb  2**0
                  CONTENTS, READONLY, DEBUGGING
310 .debug_frame  000011b8  00000000  00000000  00096c88  2**2
                  CONTENTS, READONLY, DEBUGGING
311 .debug_str    0000194d  00000000  00000000  00097e40  2**0
                  CONTENTS, READONLY, DEBUGGING
312 .debug_loc    00006895  00000000  00000000  0009978d  2**0
                  CONTENTS, READONLY, DEBUGGING
313 .debug_ranges 00000c58  00000000  00000000  000a0028  2**3
                  CONTENTS, READONLY, DEBUGGING
314 .debug_macro  0006b03d  00000000  00000000  000a0c80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startup:

80000020 <_START>:
#elif defined(__DCC__)
#pragma section CODE ".start" X
#endif

void _START(void)
{
80000020:	40 ae       	mov.aa %a14,%sp
    __non_return_call(_Core0_start);
80000022:	91 00 00 28 	movh.a %a2,32768
80000026:	d9 22 10 c2 	lea %a2,[%a2]8976 <80002310 <_Core0_start>>
8000002a:	dc 02       	ji %a2
}
8000002c:	00 90       	ret 

8000002e <_START_end>:
8000002e:	08 00       	ld.bu %d0,[%a15]0

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 d2 b1 	lea %a2,[%a2]7890 <80001ed2 <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 c0 c1 	lea %a2,[%a2]7936 <80001f00 <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 ee c1 	lea %a2,[%a2]7982 <80001f2e <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 dc d1 	lea %a2,[%a2]8028 <80001f5c <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 ca e1 	lea %a2,[%a2]8074 <80001f8a <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 f8 e1 	lea %a2,[%a2]8120 <80001fb8 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 ec f1 	lea %a2,[%a2]8172 <80001fec <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 30 12 	lea %a2,[%a2]8304 <80002070 <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .text:

800004c8 <deregister_tm_clones>:
800004c8:	7b 00 00 26 	movh %d2,24576
800004cc:	1b 42 00 20 	addi %d2,%d2,4
800004d0:	91 00 00 46 	movh.a %a4,24576
800004d4:	60 22       	mov.a %a2,%d2
800004d6:	d9 44 04 00 	lea %a4,[%a4]4 <60000004 <__TMC_END__>>
800004da:	7d 42 0a 00 	jeq.a %a2,%a4,800004ee <deregister_tm_clones+0x26>
800004de:	91 00 00 20 	movh.a %a2,0
800004e2:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
800004e6:	bd 02 04 00 	jz.a %a2,800004ee <deregister_tm_clones+0x26>
800004ea:	2d 02 00 00 	calli %a2
800004ee:	00 90       	ret 

800004f0 <register_tm_clones>:
800004f0:	7b 00 00 26 	movh %d2,24576
800004f4:	1b 42 00 20 	addi %d2,%d2,4
800004f8:	91 00 00 46 	movh.a %a4,24576
800004fc:	60 22       	mov.a %a2,%d2
800004fe:	d9 44 04 00 	lea %a4,[%a4]4 <60000004 <__TMC_END__>>
80000502:	01 42 20 20 	sub.a %a2,%a2,%a4
80000506:	80 22       	mov.d %d2,%a2
80000508:	8f e2 3f 30 	sha %d3,%d2,-2
8000050c:	8f 12 1e 20 	sh %d2,%d2,-31
80000510:	42 32       	add %d2,%d3
80000512:	8f f2 3f 40 	sha %d4,%d2,-1
80000516:	df 04 0a 00 	jeq %d4,0,8000052a <register_tm_clones+0x3a>
8000051a:	91 00 00 20 	movh.a %a2,0
8000051e:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
80000522:	bd 02 04 00 	jz.a %a2,8000052a <register_tm_clones+0x3a>
80000526:	2d 02 00 00 	calli %a2
8000052a:	00 90       	ret 

8000052c <__do_global_dtors_aux>:
8000052c:	91 00 00 e6 	movh.a %a14,24576
80000530:	39 e2 08 00 	ld.bu %d2,[%a14]8 <60000008 <completed.1>>
80000534:	df 02 2d 80 	jne %d2,0,8000058e <__do_global_dtors_aux+0x62>
80000538:	91 00 00 38 	movh.a %a3,32768
8000053c:	91 00 00 28 	movh.a %a2,32768
80000540:	d9 33 70 f3 	lea %a3,[%a3]14320 <800037f0 <__DTOR_END__>>
80000544:	d9 22 64 f3 	lea %a2,[%a2]14308 <800037e4 <__DTOR_LIST__>>
80000548:	01 23 20 20 	sub.a %a2,%a3,%a2
8000054c:	80 22       	mov.d %d2,%a2
8000054e:	86 e2       	sha %d2,-2
80000550:	1b f2 ff 8f 	addi %d8,%d2,-1
80000554:	91 00 00 c6 	movh.a %a12,24576
80000558:	7b 00 00 28 	movh %d2,32768
8000055c:	1b 42 7e 23 	addi %d2,%d2,14308
80000560:	60 2d       	mov.a %a13,%d2
80000562:	19 c2 0c 00 	ld.w %d2,[%a12]12 <6000000c <dtor_idx.0>>
80000566:	7f 82 0f 80 	jge.u %d2,%d8,80000584 <__do_global_dtors_aux+0x58>
8000056a:	d9 cc 0c 00 	lea %a12,[%a12]12 <6000000c <dtor_idx.0>>
8000056e:	c2 12       	add %d2,1
80000570:	74 c2       	st.w [%a12],%d2
80000572:	06 22       	sh %d2,2
80000574:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000578:	d4 22       	ld.a %a2,[%a2]
8000057a:	2d 02 00 00 	calli %a2
8000057e:	54 c2       	ld.w %d2,[%a12]
80000580:	3f 82 f7 ff 	jlt.u %d2,%d8,8000056e <__do_global_dtors_aux+0x42>
80000584:	6d ff a2 ff 	call 800004c8 <deregister_tm_clones>
80000588:	82 12       	mov %d2,1
8000058a:	e9 e2 08 00 	st.b [%a14]8 <60000008 <completed.1>>,%d2
8000058e:	00 90       	ret 

80000590 <frame_dummy>:
80000590:	6d ff b0 ff 	call 800004f0 <register_tm_clones>
80000594:	00 90       	ret 

80000596 <Task1ms>:
         }
    }
}

void Task1ms(void)
{
80000596:	40 ae       	mov.aa %a14,%sp
    cnt1ms++;
80000598:	91 00 00 26 	movh.a %a2,24576
8000059c:	d9 23 00 30 	lea %a3,[%a2]192 <600000c0 <cnt1ms>>
800005a0:	54 32       	ld.w %d2,[%a3]
800005a2:	c2 12       	add %d2,1
800005a4:	59 22 00 30 	st.w [%a2]192 <600000c0 <cnt1ms>>,%d2
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
800005a8:	91 40 00 2f 	movh.a %a2,61444
800005ac:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
800005b0:	7b 20 00 20 	movh %d2,2
800005b4:	c2 22       	add %d2,2
800005b6:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    IfxPort_togglePin(&MODULE_P10,1);// Red LED
}
800005ba:	00 90       	ret 

800005bc <Task10ms>:

void Task10ms(void)
{
800005bc:	40 ae       	mov.aa %a14,%sp
    cnt10ms++;
800005be:	91 00 00 26 	movh.a %a2,24576
800005c2:	d9 23 3c 20 	lea %a3,[%a2]188 <600000bc <cnt10ms>>
800005c6:	54 32       	ld.w %d2,[%a3]
800005c8:	c2 12       	add %d2,1
800005ca:	59 22 3c 20 	st.w [%a2]188 <600000bc <cnt10ms>>,%d2
800005ce:	91 40 00 2f 	movh.a %a2,61444
800005d2:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
800005d6:	7b 00 02 20 	movh %d2,32
800005da:	1b 02 02 20 	addi %d2,%d2,32
800005de:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    IfxPort_togglePin(&MODULE_P10,5);// Green LED
}
800005e2:	00 90       	ret 

800005e4 <Task100ms>:

void Task100ms(void)
{
800005e4:	40 ae       	mov.aa %a14,%sp
    cnt100ms++;
800005e6:	91 00 00 26 	movh.a %a2,24576
800005ea:	d9 23 38 20 	lea %a3,[%a2]184 <600000b8 <cnt100ms>>
800005ee:	54 32       	ld.w %d2,[%a3]
800005f0:	c2 12       	add %d2,1
800005f2:	59 22 38 20 	st.w [%a2]184 <600000b8 <cnt100ms>>,%d2
800005f6:	91 40 00 2f 	movh.a %a2,61444
800005fa:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
800005fe:	7b 40 00 20 	movh %d2,4
80000602:	c2 42       	add %d2,4
80000604:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    IfxPort_togglePin(&MODULE_P10,2);// Blue LED
}
80000608:	00 90       	ret 

8000060a <AppScheduling>:
{
8000060a:	40 ae       	mov.aa %a14,%sp
    if(Scheduler1msFlag == 1)
8000060c:	91 00 00 26 	movh.a %a2,24576
80000610:	19 22 18 00 	ld.w %d2,[%a2]24 <60000018 <Scheduler1msFlag>>
80000614:	df 12 03 00 	jeq %d2,1,8000061a <AppScheduling+0x10>
}
80000618:	00 90       	ret 
        Scheduler1msFlag = 0;
8000061a:	82 02       	mov %d2,0
8000061c:	59 22 18 00 	st.w [%a2]24,%d2
        Task1ms();
80000620:	6d ff bb ff 	call 80000596 <Task1ms>
        if(Scheduler10msFlag == 1)
80000624:	91 00 00 26 	movh.a %a2,24576
80000628:	19 22 14 00 	ld.w %d2,[%a2]20 <60000014 <Scheduler10msFlag>>
8000062c:	df 12 0f 00 	jeq %d2,1,8000064a <AppScheduling+0x40>
        if(Scheduler100msFlag == 1)
80000630:	91 00 00 26 	movh.a %a2,24576
80000634:	19 22 10 00 	ld.w %d2,[%a2]16 <60000010 <Scheduler100msFlag>>
80000638:	df 12 f0 ff 	jne %d2,1,80000618 <AppScheduling+0xe>
             Scheduler100msFlag = 0;
8000063c:	82 02       	mov %d2,0
8000063e:	59 22 10 00 	st.w [%a2]16 <60000010 <Scheduler100msFlag>>,%d2
             Task100ms();
80000642:	6d ff d1 ff 	call 800005e4 <Task100ms>
}
80000646:	1d ff e9 ff 	j 80000618 <AppScheduling+0xe>
            Scheduler10msFlag = 0;
8000064a:	82 02       	mov %d2,0
8000064c:	59 22 14 00 	st.w [%a2]20,%d2
            Task10ms();
80000650:	6d ff b6 ff 	call 800005bc <Task10ms>
80000654:	1d ff ee ff 	j 80000630 <AppScheduling+0x26>

80000658 <init_STM>:
uint32 Scheduler100msFlag = 0;


//IfxStm_CompareConfig     stmConfig;
void init_STM(void)
{
80000658:	40 ae       	mov.aa %a14,%sp
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000065a:	4d c0 e2 8f 	mfcr %d8,$icr
    return reg.B.IE != 0;
8000065e:	37 08 e1 87 	extr.u %d8,%d8,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80000662:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80000666:	00 00       	nop 
    boolean ISR_State = IfxCpu_disableInterrupts();     // 진행 중인 인터럽트를 반환 및 인터럽트 중지

    IfxStm_enableOcdsSuspend(STM0);                     //OCDS: on chip debugging system [디버깅 시,cpu 중단하면 타이머도 같이 중단되도록 설정(시스템 상태분석 용이)]
80000668:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000066c:	6d 00 5b 06 	call 80001322 <IfxStm_enableOcdsSuspend>
    IfxStm_initCompareConfig(&stmConfig);                // 비교기능 구조체 초기화 (초기값 정의)
80000670:	91 00 00 c6 	movh.a %a12,24576
80000674:	d9 cc 04 30 	lea %a12,[%a12]196 <600000c4 <stmConfig>>
80000678:	40 c4       	mov.aa %a4,%a12
8000067a:	6d 00 31 07 	call 800014dc <IfxStm_initCompareConfig>

    stmConfig.ticks           = 100000000u;             // 주기 (비교 값) 설정 1초 뒤 시작
8000067e:	7b 60 5f 20 	movh %d2,1526
80000682:	1b 02 10 2e 	addi %d2,%d2,-7936
80000686:	59 c2 10 00 	st.w [%a12]16 <60000010 <Scheduler100msFlag>>,%d2
    stmConfig.triggerPriority = 100u;                   // STM 모듈에서 발생한 인터럽트 우선순위 설정 100번째 함수
8000068a:	3b 40 06 20 	mov %d2,100
8000068e:	f9 c2 14 00 	st.h [%a12]20 <60000014 <Scheduler10msFlag>>,%d2
    stmConfig.typeOfService   = IfxSrc_Tos_cpu0;        // STM에서 발생한 인터럽트를 cpu0에서 처리하도록 설정
80000692:	82 02       	mov %d2,0
80000694:	59 c2 18 00 	st.w [%a12]24 <60000018 <Scheduler1msFlag>>,%d2

    IfxStm_initCompare(STM0, &stmConfig);               // STM0의 비교기 초기화 및 설정 값 적용 (stmConfig로 바꿈)
80000698:	40 c5       	mov.aa %a5,%a12
8000069a:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000069e:	6d 00 76 06 	call 8000138a <IfxStm_initCompare>
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800006a2:	df 08 04 00 	jeq %d8,0,800006aa <init_STM+0x52>
    {
        __enable();
800006a6:	0d 00 00 03 	enable 

    IfxCpu_restoreInterrupts(ISR_State);                // 진행 중이던 인터럽트 상태 복원
}
800006aa:	00 90       	ret 

800006ac <ISR_STM>:


IFX_INTERRUPT(ISR_STM,0,100);

void ISR_STM(void)
{
800006ac:	40 ae       	mov.aa %a14,%sp
    __enable();
800006ae:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxStm_clearCompareFlag(STM0, stmConfig.comparator);
800006b2:	91 00 00 c6 	movh.a %a12,24576
800006b6:	19 c4 04 30 	ld.w %d4,[%a12]196 <600000c4 <stmConfig>>
800006ba:	c5 f4 00 00 	lea %a4,f0000000 <_SMALL_DATA4_+0x5fff8000>
800006be:	6d 00 04 06 	call 800012c6 <IfxStm_clearCompareFlag>
    //1. 주기 1ms 설정 (1000000/100ㅡ = 0.001)
    IfxStm_increaseCompare(STM0, stmConfig.comparator, 100000000u*ADC_G4_RAWDATA[7]);     // 비교 값 업데이트 (10000000u를 바꾸면 주기가 바뀜)
800006c2:	19 c3 04 30 	ld.w %d3,[%a12]196 <600000c4 <stmConfig>>
800006c6:	91 00 00 26 	movh.a %a2,24576
800006ca:	d9 22 38 00 	lea %a2,[%a2]56 <60000038 <ADC_G4_RAWDATA>>
800006ce:	b9 22 0e 00 	ld.hu %d2,[%a2]14 <6000000e <dtor_idx.0+0x2>>
}


IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
{
    stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
800006d2:	1b c3 00 30 	addi %d3,%d3,12
800006d6:	06 23       	sh %d3,2
800006d8:	60 32       	mov.a %a2,%d3
800006da:	11 02 00 2f 	addih.a %a2,%a2,61440
800006de:	54 23       	ld.w %d3,[%a2]
800006e0:	7b 60 5f 40 	movh %d4,1526
800006e4:	1b 04 10 4e 	addi %d4,%d4,-7936
800006e8:	03 42 0a 23 	madd %d2,%d3,%d2,%d4
800006ec:	74 22       	st.w [%a2],%d2

    counter1ms++;
800006ee:	91 00 00 26 	movh.a %a2,24576
800006f2:	d9 23 1c 00 	lea %a3,[%a2]28 <6000001c <counter1ms>>
800006f6:	54 32       	ld.w %d2,[%a3]
800006f8:	c2 12       	add %d2,1
800006fa:	59 22 1c 00 	st.w [%a2]28 <6000001c <counter1ms>>,%d2

    if((counter1ms%1)==0){Scheduler1msFlag = 1;}
800006fe:	91 00 00 26 	movh.a %a2,24576
80000702:	82 13       	mov %d3,1
80000704:	59 23 18 00 	st.w [%a2]24 <60000018 <Scheduler1msFlag>>,%d3
    if((counter1ms%2) == 0){Scheduler10msFlag =1;}
80000708:	6f 02 06 80 	jnz.t %d2,0,80000714 <ISR_STM+0x68>
8000070c:	91 00 00 26 	movh.a %a2,24576
80000710:	59 23 14 00 	st.w [%a2]20 <60000014 <Scheduler10msFlag>>,%d3
    if((counter1ms % 3) == 0){Scheduler100msFlag = 1;}
80000714:	7b b0 aa 4a 	movh %d4,43691
80000718:	1b b4 aa 4a 	addi %d4,%d4,-21845
8000071c:	73 42 68 40 	mul.u %e4,%d2,%d4
80000720:	8f f5 1f 30 	sh %d3,%d5,-1
80000724:	53 33 20 30 	mul %d3,%d3,3
80000728:	5f 32 07 80 	jne %d2,%d3,80000736 <ISR_STM+0x8a>
8000072c:	91 00 00 26 	movh.a %a2,24576
80000730:	82 12       	mov %d2,1
80000732:	59 22 10 00 	st.w [%a2]16 <60000010 <Scheduler100msFlag>>,%d2


    //IfxPort_togglePin(PORT_005);
}
80000736:	0d 00 40 02 	rslcx 
8000073a:	00 80       	rfe 

8000073c <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
8000073c:	40 ae       	mov.aa %a14,%sp
8000073e:	40 4c       	mov.aa %a12,%a4
80000740:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80000742:	6d 00 39 0b 	call 80001db4 <IfxScuWdt_getSafetyWatchdogPassword>
80000746:	02 29       	mov %d9,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80000748:	02 24       	mov %d4,%d2
8000074a:	6d 00 df 09 	call 80001b08 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
8000074e:	8b 08 a2 32 	ge.u %d3,%d8,32
80000752:	df 03 0d 80 	jne %d3,0,8000076c <IfxVadc_disableAccess+0x30>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
80000756:	d9 c2 08 20 	lea %a2,[%a12]136
8000075a:	19 c2 08 20 	ld.w %d2,[%a12]136
8000075e:	d7 12 01 28 	insert %d2,%d2,1,%d8,1
80000762:	74 22       	st.w [%a2],%d2
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80000764:	02 94       	mov %d4,%d9
80000766:	6d 00 57 0b 	call 80001e14 <IfxScuWdt_setSafetyEndinit>
}
8000076a:	00 90       	ret 
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
8000076c:	d9 c2 0c 20 	lea %a2,[%a12]140
80000770:	19 c3 0c 20 	ld.w %d3,[%a12]140
80000774:	8f f8 01 21 	and %d2,%d8,31
80000778:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000077c:	74 22       	st.w [%a2],%d2
8000077e:	1d ff f3 ff 	j 80000764 <IfxVadc_disableAccess+0x28>

80000782 <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80000782:	40 ae       	mov.aa %a14,%sp
80000784:	40 4c       	mov.aa %a12,%a4
80000786:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80000788:	6d 00 16 0b 	call 80001db4 <IfxScuWdt_getSafetyWatchdogPassword>
8000078c:	02 29       	mov %d9,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
8000078e:	02 24       	mov %d4,%d2
80000790:	6d 00 bc 09 	call 80001b08 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80000794:	8b 08 a2 32 	ge.u %d3,%d8,32
80000798:	df 03 0d 80 	jne %d3,0,800007b2 <IfxVadc_enableAccess+0x30>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
8000079c:	d9 c2 08 20 	lea %a2,[%a12]136
800007a0:	19 c2 08 20 	ld.w %d2,[%a12]136
800007a4:	d7 02 01 28 	insert %d2,%d2,0,%d8,1
800007a8:	74 22       	st.w [%a2],%d2
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800007aa:	02 94       	mov %d4,%d9
800007ac:	6d 00 34 0b 	call 80001e14 <IfxScuWdt_setSafetyEndinit>
}
800007b0:	00 90       	ret 
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
800007b2:	d9 c2 0c 20 	lea %a2,[%a12]140
800007b6:	19 c3 0c 20 	ld.w %d3,[%a12]140
800007ba:	8f f8 01 21 	and %d2,%d8,31
800007be:	d7 03 01 22 	insert %d2,%d3,0,%d2,1
800007c2:	74 22       	st.w [%a2],%d2
800007c4:	1d ff f3 ff 	j 800007aa <IfxVadc_enableAccess+0x28>

800007c8 <IfxVadc_disablePostCalibration>:
{
800007c8:	40 ae       	mov.aa %a14,%sp
800007ca:	40 4c       	mov.aa %a12,%a4
800007cc:	02 48       	mov %d8,%d4
800007ce:	8f f5 0f 91 	and %d9,%d5,255
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
800007d2:	bf 84 03 80 	jlt.u %d4,8,800007d8 <IfxVadc_disablePostCalibration+0x10>
}
800007d6:	00 90       	ret 
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800007d8:	3b f0 01 40 	mov %d4,31
800007dc:	6d ff d3 ff 	call 80000782 <IfxVadc_enableAccess>
        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
800007e0:	1b 08 01 80 	addi %d8,%d8,16
800007e4:	82 12       	mov %d2,1
800007e6:	0f 82 00 20 	sh %d2,%d2,%d8
        if (disable == TRUE)
800007ea:	df 19 10 00 	jeq %d9,1,8000080a <IfxVadc_disablePostCalibration+0x42>
            vadc->GLOBCFG.U &= ~mask;
800007ee:	d9 c2 00 20 	lea %a2,[%a12]128
800007f2:	19 c3 00 20 	ld.w %d3,[%a12]128
800007f6:	0f 23 e0 20 	andn %d2,%d3,%d2
800007fa:	74 22       	st.w [%a2],%d2
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800007fc:	3b f0 01 40 	mov %d4,31
80000800:	40 c4       	mov.aa %a4,%a12
80000802:	6d ff 9d ff 	call 8000073c <IfxVadc_disableAccess>
}
80000806:	1d ff e8 ff 	j 800007d6 <IfxVadc_disablePostCalibration+0xe>
            vadc->GLOBCFG.U |= mask;
8000080a:	d9 c2 00 20 	lea %a2,[%a12]128
8000080e:	19 c3 00 20 	ld.w %d3,[%a12]128
80000812:	a6 32       	or %d2,%d3
80000814:	74 22       	st.w [%a2],%d2
80000816:	1d ff f3 ff 	j 800007fc <IfxVadc_disablePostCalibration+0x34>

8000081a <IfxVadc_getAdcAnalogFrequency>:
    IfxScuWdt_setCpuEndinit(passwd);
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
8000081a:	40 ae       	mov.aa %a14,%sp
8000081c:	40 4c       	mov.aa %a12,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
8000081e:	6d 00 67 07 	call 800016ec <IfxScuCcu_getSpbFrequency>
80000822:	19 c3 00 20 	ld.w %d3,[%a12]128
80000826:	8f f3 01 31 	and %d3,%d3,31
8000082a:	c2 13       	add %d3,1
8000082c:	4b 03 61 31 	utof %d3,%d3
}
80000830:	4b 32 51 20 	div.f %d2,%d2,%d3
80000834:	00 90       	ret 

80000836 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80000836:	40 ae       	mov.aa %a14,%sp
80000838:	40 4c       	mov.aa %a12,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
8000083a:	6d 00 59 07 	call 800016ec <IfxScuCcu_getSpbFrequency>
8000083e:	19 c3 00 20 	ld.w %d3,[%a12]128
80000842:	37 03 62 34 	extr.u %d3,%d3,8,2
80000846:	c2 13       	add %d3,1
80000848:	4b 03 61 31 	utof %d3,%d3
}
8000084c:	4b 32 51 20 	div.f %d2,%d2,%d3
80000850:	00 90       	ret 

80000852 <IfxVadc_getSrcAddress>:
    }
}


volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
80000852:	40 ae       	mov.aa %a14,%sp
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
80000854:	bf 45 07 80 	jlt.u %d5,4,80000862 <IfxVadc_getSrcAddress+0x10>
    {
        index -= 4;
80000858:	c2 c5       	add %d5,-4

        if ((group & 0x1) != 0)
8000085a:	6f 04 10 00 	jz.t %d4,0,8000087a <IfxVadc_getSrcAddress+0x28>
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
8000085e:	3b 90 00 40 	mov %d4,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
80000862:	8f 24 00 20 	sh %d2,%d4,2
80000866:	42 52       	add %d2,%d5
80000868:	06 22       	sh %d2,2
8000086a:	91 00 00 28 	movh.a %a2,32768
8000086e:	d9 22 04 90 	lea %a2,[%a2]580 <80000244 <IfxVadc_cfg_srcAddresses>>
80000872:	01 22 00 26 	addsc.a %a2,%a2,%d2,0

    return &(base[0]);
}
80000876:	d4 22       	ld.a %a2,[%a2]
80000878:	00 90       	ret 
            group = IfxVadc_GroupId_global0;    /* Shared interrupt common 0 is used */
8000087a:	3b 80 00 40 	mov %d4,8
8000087e:	1d ff f2 ff 	j 80000862 <IfxVadc_getSrcAddress+0x10>

80000882 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
80000882:	40 ae       	mov.aa %a14,%sp
80000884:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80000886:	19 42 00 20 	ld.w %d2,[%a4]128
8000088a:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
8000088c:	37 48 02 84 	insert %d8,%d8,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
80000890:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000894:	3b f0 01 40 	mov %d4,31
80000898:	6d ff 75 ff 	call 80000782 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
8000089c:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800008a0:	3b f0 01 40 	mov %d4,31
800008a4:	40 c4       	mov.aa %a4,%a12
800008a6:	6d ff 4b ff 	call 8000073c <IfxVadc_disableAccess>
}
800008aa:	00 90       	ret 

800008ac <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
800008ac:	40 ae       	mov.aa %a14,%sp
800008ae:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800008b0:	19 42 00 20 	ld.w %d2,[%a4]128
800008b4:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.DIVA  = converterClockDivider;
800008b6:	37 48 05 80 	insert %d8,%d8,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
800008ba:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800008be:	3b f0 01 40 	mov %d4,31
800008c2:	6d ff 60 ff 	call 80000782 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800008c6:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800008ca:	3b f0 01 40 	mov %d4,31
800008ce:	40 c4       	mov.aa %a4,%a12
800008d0:	6d ff 36 ff 	call 8000073c <IfxVadc_disableAccess>
}
800008d4:	00 90       	ret 

800008d6 <IfxVadc_initializeFAdcD>:


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
800008d6:	40 ae       	mov.aa %a14,%sp
800008d8:	80 4a       	mov.d %d10,%a4
800008da:	02 48       	mov %d8,%d4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800008dc:	6d 00 08 07 	call 800016ec <IfxScuCcu_getSpbFrequency>
800008e0:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
800008e4:	4b 82 11 82 	div.u %e8,%d2,%d8
800008e8:	1b f8 ff 3f 	addi %d3,%d8,-1
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800008ec:	82 34       	mov %d4,3
800008ee:	0b 43 90 41 	min.u %d4,%d3,%d4

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800008f2:	1b 14 00 80 	addi %d8,%d4,1
800008f6:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800008fa:	60 a4       	mov.a %a4,%d10
800008fc:	6d ff c3 ff 	call 80000882 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
80000900:	02 82       	mov %d2,%d8
80000902:	00 90       	ret 

80000904 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
80000904:	40 ae       	mov.aa %a14,%sp
80000906:	80 49       	mov.d %d9,%a4
80000908:	02 48       	mov %d8,%d4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
8000090a:	6d 00 f1 06 	call 800016ec <IfxScuCcu_getSpbFrequency>
8000090e:	4b 02 71 31 	ftouz %d3,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
80000912:	8f 23 00 40 	sh %d4,%d3,2
80000916:	4b 84 11 42 	div.u %e4,%d4,%d8

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
8000091a:	1b 24 00 20 	addi %d2,%d4,2
8000091e:	06 e2       	sh %d2,-2
    divA   = __minu(divA - 1, 0x1Fu);
80000920:	c2 f2       	add %d2,-1
80000922:	3b f0 01 40 	mov %d4,31
80000926:	0b 42 90 41 	min.u %d4,%d2,%d4
    result = fadc / (divA + 1);
8000092a:	1b 14 00 20 	addi %d2,%d4,1
8000092e:	4b 23 11 62 	div.u %e6,%d3,%d2
80000932:	02 68       	mov %d8,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
80000934:	7b 10 13 50 	movh %d5,305
80000938:	1b 05 d0 52 	addi %d5,%d5,11520
8000093c:	7f 65 0b 80 	jge.u %d5,%d6,80000952 <IfxVadc_initializeFAdcI+0x4e>
80000940:	3b f0 01 40 	mov %d4,31
80000944:	0b 42 90 41 	min.u %d4,%d2,%d4
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80000948:	1b 14 00 20 	addi %d2,%d4,1
8000094c:	4b 23 11 22 	div.u %e2,%d3,%d2
80000950:	02 28       	mov %d8,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80000952:	7b 80 ff 2f 	movh %d2,65528
80000956:	1b 02 ee 25 	addi %d2,%d2,24288
8000095a:	42 82       	add %d2,%d8
8000095c:	7b a0 12 30 	movh %d3,298
80000960:	1b 03 be 38 	addi %d3,%d3,-29728
80000964:	7f 23 05 80 	jge.u %d3,%d2,8000096e <IfxVadc_initializeFAdcI+0x6a>
    {
        result = 0;             /* Min / Max FAdcI frequency */
80000968:	82 08       	mov %d8,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
8000096a:	02 82       	mov %d2,%d8
8000096c:	00 90       	ret 
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
8000096e:	60 94       	mov.a %a4,%d9
80000970:	6d ff 9e ff 	call 800008ac <IfxVadc_initialiseAdcConverterClock>
80000974:	1d ff fb ff 	j 8000096a <IfxVadc_initializeFAdcI+0x66>

80000978 <IfxVadc_selectPowerSupplyVoltage>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80000978:	40 ae       	mov.aa %a14,%sp
8000097a:	40 4c       	mov.aa %a12,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
8000097c:	19 42 00 20 	ld.w %d2,[%a4]128
80000980:	02 28       	mov %d8,%d2
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80000982:	67 48 0e 80 	ins.t %d8,%d8,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
80000986:	b7 18 81 87 	insert %d8,%d8,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000098a:	3b f0 01 40 	mov %d4,31
8000098e:	6d ff fa fe 	call 80000782 <IfxVadc_enableAccess>
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80000992:	59 c8 00 20 	st.w [%a12]128,%d8
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000996:	3b f0 01 40 	mov %d4,31
8000099a:	40 c4       	mov.aa %a4,%a12
8000099c:	6d ff d0 fe 	call 8000073c <IfxVadc_disableAccess>
}
800009a0:	00 90       	ret 

800009a2 <IfxVadc_setArbiterPriority>:


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
800009a2:	40 ae       	mov.aa %a14,%sp
800009a4:	02 50       	mov %d0,%d5
    if (slotEnable != FALSE)
800009a6:	df 04 2a 00 	jeq %d4,0,800009fa <IfxVadc_setArbiterPriority+0x58>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
800009aa:	d9 42 04 00 	lea %a2,[%a4]4
800009ae:	19 43 04 00 	ld.w %d3,[%a4]4
800009b2:	1b 87 01 20 	addi %d2,%d7,24
800009b6:	0f 24 00 20 	sh %d2,%d4,%d2
800009ba:	a6 32       	or %d2,%d3
800009bc:	74 22       	st.w [%a2],%d2
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
800009be:	54 23       	ld.w %d3,[%a2]
800009c0:	06 27       	sh %d7,2
800009c2:	82 32       	mov %d2,3
800009c4:	0f 72 00 20 	sh %d2,%d2,%d7
800009c8:	0f 23 e0 20 	andn %d2,%d3,%d2
800009cc:	74 22       	st.w [%a2],%d2
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
800009ce:	54 23       	ld.w %d3,[%a2]
800009d0:	0f 70 00 20 	sh %d2,%d0,%d7
800009d4:	a6 32       	or %d2,%d3
800009d6:	74 22       	st.w [%a2],%d2

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
800009d8:	df 06 08 00 	jeq %d6,0,800009e8 <IfxVadc_setArbiterPriority+0x46>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
800009dc:	54 22       	ld.w %d2,[%a2]
800009de:	c2 37       	add %d7,3
800009e0:	d7 12 01 27 	insert %d2,%d2,1,%d7,1
800009e4:	74 22       	st.w [%a2],%d2
800009e6:	00 90       	ret 
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
800009e8:	d9 42 04 00 	lea %a2,[%a4]4
800009ec:	19 42 04 00 	ld.w %d2,[%a4]4
800009f0:	c2 37       	add %d7,3
800009f2:	d7 02 01 27 	insert %d2,%d2,0,%d7,1
800009f6:	74 22       	st.w [%a2],%d2
800009f8:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
800009fa:	d9 42 04 00 	lea %a2,[%a4]4
800009fe:	19 43 04 00 	ld.w %d3,[%a4]4
80000a02:	1b 87 01 20 	addi %d2,%d7,24
80000a06:	d7 03 01 22 	insert %d2,%d3,0,%d2,1
80000a0a:	74 22       	st.w [%a2],%d2
    }
}
80000a0c:	00 90       	ret 

80000a0e <IfxVadc_setScan>:


void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
80000a0e:	40 ae       	mov.aa %a14,%sp
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80000a10:	d9 42 28 20 	lea %a2,[%a4]168
80000a14:	19 42 28 20 	ld.w %d2,[%a4]168
80000a18:	0f 42 c0 30 	xor %d3,%d2,%d4
80000a1c:	26 53       	and %d3,%d5
80000a1e:	c6 32       	xor %d2,%d3
80000a20:	74 22       	st.w [%a2],%d2
}
80000a22:	00 90       	ret 

80000a24 <IfxVadc_startupCalibration>:


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80000a24:	40 ae       	mov.aa %a14,%sp
80000a26:	40 4c       	mov.aa %a12,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80000a28:	3b f0 01 40 	mov %d4,31
80000a2c:	6d ff ab fe 	call 80000782 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80000a30:	d9 c2 00 20 	lea %a2,[%a12]128
80000a34:	19 c2 00 20 	ld.w %d2,[%a12]128
80000a38:	b7 12 81 2f 	insert %d2,%d2,1,31,1
80000a3c:	74 22       	st.w [%a2],%d2
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80000a3e:	3b f0 01 40 	mov %d4,31
80000a42:	40 c4       	mov.aa %a4,%a12
80000a44:	6d ff 7c fe 	call 8000073c <IfxVadc_disableAccess>
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80000a48:	82 02       	mov %d2,0
        calibrationRunning = FALSE;
80000a4a:	82 04       	mov %d4,0
        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80000a4c:	1d 00 05 00 	j 80000a56 <IfxVadc_startupCalibration+0x32>
80000a50:	c2 12       	add %d2,1
80000a52:	8f f2 0f 21 	and %d2,%d2,255
80000a56:	ff 82 0d 80 	jge.u %d2,8,80000a70 <IfxVadc_startupCalibration+0x4c>
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80000a5a:	8f a2 00 30 	sh %d3,%d2,10
80000a5e:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80000a62:	19 23 40 20 	ld.w %d3,[%a2]1152
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
80000a66:	ef c3 f5 7f 	jz.t %d3,28,80000a50 <IfxVadc_startupCalibration+0x2c>
            {
                calibrationRunning = TRUE;
80000a6a:	82 14       	mov %d4,1
80000a6c:	1d ff f2 ff 	j 80000a50 <IfxVadc_startupCalibration+0x2c>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80000a70:	df 04 ec ff 	jne %d4,0,80000a48 <IfxVadc_startupCalibration+0x24>
}
80000a74:	00 90       	ret 

80000a76 <IfxVadc_Adc_initChannel>:
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80000a76:	40 ae       	mov.aa %a14,%sp
80000a78:	40 4f       	mov.aa %a15,%a4
80000a7a:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80000a7c:	99 52 38 00 	ld.a %a2,[%a5]56
}


IFX_INLINE Ifx_VADC *IfxVadc_Adc_getVadcFromGroup(const IfxVadc_Adc_Group *group)
{
    return group->module.vadc;
80000a80:	54 28       	ld.w %d8,[%a2]
    return group->group;
80000a82:	99 2d 04 00 	ld.a %a13,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80000a86:	b5 42 08 00 	st.a [%a4]8,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
80000a8a:	19 29 08 00 	ld.w %d9,[%a2]8
    IfxVadc_ChannelId channelIndex = config->channelId;
80000a8e:	19 5a 18 00 	ld.w %d10,[%a5]24

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80000a92:	02 94       	mov %d4,%d9
80000a94:	60 84       	mov.a %a4,%d8
80000a96:	6d ff 76 fe 	call 80000782 <IfxVadc_enableAccess>

    /* Configure Channel */
    {
        IfxVadc_setReferenceInput(vadcG, channelIndex, config->reference);
80000a9a:	19 c3 20 00 	ld.w %d3,[%a12]32
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
80000a9e:	1b 0a 06 20 	addi %d2,%d10,96
80000aa2:	06 22       	sh %d2,2
80000aa4:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000aa8:	54 22       	ld.w %d2,[%a2]
80000aaa:	67 32 0b 20 	ins.t %d2,%d2,11,%d3,0
80000aae:	74 22       	st.w [%a2],%d2
        IfxVadc_storeGroupResult(vadcG, channelIndex, config->resultRegister);
80000ab0:	19 c3 24 00 	ld.w %d3,[%a12]36
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
80000ab4:	54 22       	ld.w %d2,[%a2]
80000ab6:	37 32 04 28 	insert %d2,%d2,%d3,16,4
80000aba:	74 22       	st.w [%a2],%d2
        IfxVadc_setLowerBoundary(vadcG, channelIndex, config->lowerBoundary);
80000abc:	19 c3 28 00 	ld.w %d3,[%a12]40
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80000ac0:	54 22       	ld.w %d2,[%a2]
80000ac2:	37 32 02 22 	insert %d2,%d2,%d3,4,2
80000ac6:	74 22       	st.w [%a2],%d2
        IfxVadc_setUpperBoundary(vadcG, channelIndex, config->upperBoundary);
80000ac8:	19 c3 2c 00 	ld.w %d3,[%a12]44
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
80000acc:	54 22       	ld.w %d2,[%a2]
80000ace:	37 32 02 23 	insert %d2,%d2,%d3,6,2
80000ad2:	74 22       	st.w [%a2],%d2
        IfxVadc_setSyncRequest(vadcG, channelIndex, config->synchonize);
80000ad4:	39 c3 01 00 	ld.bu %d3,[%a12]1
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
80000ad8:	54 22       	ld.w %d2,[%a2]
80000ada:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80000ade:	74 22       	st.w [%a2],%d2
        IfxVadc_setChannelInputClass(vadcG, channelIndex, config->inputClass);
80000ae0:	19 c3 1c 00 	ld.w %d3,[%a12]28
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
80000ae4:	54 22       	ld.w %d2,[%a2]
80000ae6:	37 32 02 20 	insert %d2,%d2,%d3,0,2
80000aea:	74 22       	st.w [%a2],%d2
        IfxVadc_setChannelLimitCheckMode(vadcG, channelIndex, config->limitCheck);
80000aec:	19 c3 34 00 	ld.w %d3,[%a12]52
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
80000af0:	54 22       	ld.w %d2,[%a2]
80000af2:	37 32 02 24 	insert %d2,%d2,%d3,8,2
80000af6:	74 22       	st.w [%a2],%d2
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
80000af8:	39 c3 03 00 	ld.bu %d3,[%a12]3
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
80000afc:	54 22       	ld.w %d2,[%a2]
80000afe:	67 32 15 20 	ins.t %d2,%d2,21,%d3,0
80000b02:	74 22       	st.w [%a2],%d2
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
80000b04:	14 c3       	ld.bu %d3,[%a12]
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
80000b06:	54 22       	ld.w %d2,[%a2]
80000b08:	67 32 14 20 	ins.t %d2,%d2,20,%d3,0
80000b0c:	74 22       	st.w [%a2],%d2
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
80000b0e:	19 c3 30 00 	ld.w %d3,[%a12]48
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
80000b12:	54 22       	ld.w %d2,[%a2]
80000b14:	37 32 04 26 	insert %d2,%d2,%d3,12,4
80000b18:	74 22       	st.w [%a2],%d2
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80000b1a:	1b 09 01 b0 	addi %d11,%d9,16
80000b1e:	02 b4       	mov %d4,%d11
80000b20:	60 84       	mov.a %a4,%d8
80000b22:	6d ff 30 fe 	call 80000782 <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80000b26:	39 c2 02 00 	ld.bu %d2,[%a12]2
80000b2a:	df 02 4c 80 	jne %d2,0,80000bc2 <IfxVadc_Adc_initChannel+0x14c>
    vadcG->CHASS.U |= (1 << channelIndex);
80000b2e:	d9 d2 08 00 	lea %a2,[%a13]8
80000b32:	19 d2 08 00 	ld.w %d2,[%a13]8
80000b36:	d7 12 01 2a 	insert %d2,%d2,1,%d10,1
80000b3a:	74 22       	st.w [%a2],%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80000b3c:	02 b4       	mov %d4,%d11
80000b3e:	60 84       	mov.a %a4,%d8
80000b40:	6d ff fe fd 	call 8000073c <IfxVadc_disableAccess>

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80000b44:	19 c4 14 00 	ld.w %d4,[%a12]20
80000b48:	48 02       	ld.w %d2,[%a15]0
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80000b4a:	d9 d2 20 40 	lea %a2,[%a13]288
80000b4e:	19 d5 20 40 	ld.w %d5,[%a13]288
80000b52:	06 22       	sh %d2,2
80000b54:	3b f0 00 30 	mov %d3,15
80000b58:	0f 23 00 30 	sh %d3,%d3,%d2
80000b5c:	0f 35 e0 30 	andn %d3,%d5,%d3
80000b60:	74 23       	st.w [%a2],%d3
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80000b62:	54 23       	ld.w %d3,[%a2]
80000b64:	0f 24 00 20 	sh %d2,%d4,%d2
80000b68:	a6 32       	or %d2,%d3
80000b6a:	74 22       	st.w [%a2],%d2

    if (config->channelPriority > 0)
80000b6c:	b9 c2 06 00 	ld.hu %d2,[%a12]6
80000b70:	df 02 32 80 	jne %d2,0,80000bd4 <IfxVadc_Adc_initChannel+0x15e>
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80000b74:	19 c2 24 00 	ld.w %d2,[%a12]36
80000b78:	ff 82 51 80 	jge.u %d2,8,80000c1a <IfxVadc_Adc_initChannel+0x1a4>
    {
        IfxVadc_setResultNodeEventPointer0(vadcG, config->resultSrcNr, config->resultRegister);
80000b7c:	19 c4 10 00 	ld.w %d4,[%a12]16
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80000b80:	d9 d2 30 40 	lea %a2,[%a13]304
80000b84:	19 d5 30 40 	ld.w %d5,[%a13]304
80000b88:	06 22       	sh %d2,2
80000b8a:	3b f0 00 30 	mov %d3,15
80000b8e:	0f 23 00 30 	sh %d3,%d3,%d2
80000b92:	0f 35 e0 30 	andn %d3,%d5,%d3
80000b96:	74 23       	st.w [%a2],%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80000b98:	54 23       	ld.w %d3,[%a2]
80000b9a:	0f 24 00 20 	sh %d2,%d4,%d2
80000b9e:	a6 32       	or %d2,%d3
80000ba0:	74 22       	st.w [%a2],%d2
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80000ba2:	b9 c2 04 00 	ld.hu %d2,[%a12]4
80000ba6:	df 02 50 80 	jne %d2,0,80000c46 <IfxVadc_Adc_initChannel+0x1d0>
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80000baa:	02 94       	mov %d4,%d9
80000bac:	60 84       	mov.a %a4,%d8
80000bae:	6d ff c7 fd 	call 8000073c <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80000bb2:	19 c2 24 00 	ld.w %d2,[%a12]36
80000bb6:	68 12       	st.w [%a15]4,%d2
    channel->channel   = config->channelId;
80000bb8:	19 c2 18 00 	ld.w %d2,[%a12]24
80000bbc:	68 02       	st.w [%a15]0,%d2

    return Status;
}
80000bbe:	82 02       	mov %d2,0
80000bc0:	00 90       	ret 
    vadcG->CHASS.U &= ~(1 << channelIndex);
80000bc2:	d9 d2 08 00 	lea %a2,[%a13]8
80000bc6:	19 d2 08 00 	ld.w %d2,[%a13]8
80000bca:	d7 02 01 2a 	insert %d2,%d2,0,%d10,1
80000bce:	74 22       	st.w [%a2],%d2
}
80000bd0:	1d ff b6 ff 	j 80000b3c <IfxVadc_Adc_initChannel+0xc6>
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80000bd4:	19 c5 14 00 	ld.w %d5,[%a12]20
80000bd8:	02 94       	mov %d4,%d9
80000bda:	6d ff 3c fe 	call 80000852 <IfxVadc_getSrcAddress>
        IfxVadc_clearChannelRequest(vadcG, config->channelId);
80000bde:	19 c4 18 00 	ld.w %d4,[%a12]24
    vadcG->CEFCLR.U = 1 << channelId;
80000be2:	82 13       	mov %d3,1
80000be4:	82 12       	mov %d2,1
80000be6:	0f 42 00 20 	sh %d2,%d2,%d4
80000bea:	59 d2 10 40 	st.w [%a13]272,%d2
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80000bee:	19 c5 0c 00 	ld.w %d5,[%a12]12
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80000bf2:	39 c4 06 00 	ld.bu %d4,[%a12]6
80000bf6:	54 22       	ld.w %d2,[%a2]
80000bf8:	37 42 08 20 	insert %d2,%d2,%d4,0,8
80000bfc:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80000bfe:	54 22       	ld.w %d2,[%a2]
80000c00:	37 52 82 25 	insert %d2,%d2,%d5,11,2
80000c04:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80000c06:	54 22       	ld.w %d2,[%a2]
80000c08:	67 32 19 20 	ins.t %d2,%d2,25,%d3,0
80000c0c:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80000c0e:	54 22       	ld.w %d2,[%a2]
80000c10:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80000c14:	74 22       	st.w [%a2],%d2
}
80000c16:	1d ff af ff 	j 80000b74 <IfxVadc_Adc_initChannel+0xfe>
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
80000c1a:	19 c4 10 00 	ld.w %d4,[%a12]16
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80000c1e:	d9 d2 34 40 	lea %a2,[%a13]308
80000c22:	19 d5 34 40 	ld.w %d5,[%a13]308
80000c26:	c2 82       	add %d2,-8
80000c28:	06 22       	sh %d2,2
80000c2a:	3b f0 00 30 	mov %d3,15
80000c2e:	0f 23 00 30 	sh %d3,%d3,%d2
80000c32:	0f 35 e0 30 	andn %d3,%d5,%d3
80000c36:	74 23       	st.w [%a2],%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80000c38:	54 23       	ld.w %d3,[%a2]
80000c3a:	0f 24 00 20 	sh %d2,%d4,%d2
80000c3e:	a6 32       	or %d2,%d3
80000c40:	74 22       	st.w [%a2],%d2
}
80000c42:	1d ff b0 ff 	j 80000ba2 <IfxVadc_Adc_initChannel+0x12c>
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80000c46:	19 c5 10 00 	ld.w %d5,[%a12]16
80000c4a:	02 94       	mov %d4,%d9
80000c4c:	6d ff 03 fe 	call 80000852 <IfxVadc_getSrcAddress>
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80000c50:	19 c2 24 00 	ld.w %d2,[%a12]36
80000c54:	1b 02 08 20 	addi %d2,%d2,128
80000c58:	06 22       	sh %d2,2
80000c5a:	01 d2 00 36 	addsc.a %a3,%a13,%d2,0
80000c5e:	54 32       	ld.w %d2,[%a3]
80000c60:	b7 12 81 2f 	insert %d2,%d2,1,31,1
80000c64:	74 32       	st.w [%a3],%d2
    vadcG->REFCLR.U = 0x0000FFFFu;
80000c66:	bb f0 ff 2f 	mov.u %d2,65535
80000c6a:	59 d2 14 40 	st.w [%a13]276,%d2
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80000c6e:	19 c4 08 00 	ld.w %d4,[%a12]8
    src->B.SRPN = priority;
80000c72:	39 c3 04 00 	ld.bu %d3,[%a12]4
80000c76:	54 22       	ld.w %d2,[%a2]
80000c78:	37 32 08 20 	insert %d2,%d2,%d3,0,8
80000c7c:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80000c7e:	54 22       	ld.w %d2,[%a2]
80000c80:	37 42 82 25 	insert %d2,%d2,%d4,11,2
80000c84:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
80000c86:	54 22       	ld.w %d2,[%a2]
80000c88:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80000c8c:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80000c8e:	54 22       	ld.w %d2,[%a2]
80000c90:	b7 12 01 25 	insert %d2,%d2,1,10,1
80000c94:	74 22       	st.w [%a2],%d2
}
80000c96:	1d ff 8a ff 	j 80000baa <IfxVadc_Adc_initChannel+0x134>

80000c9a <IfxVadc_Adc_initChannelConfig>:


void IfxVadc_Adc_initChannelConfig(IfxVadc_Adc_ChannelConfig *config, const IfxVadc_Adc_Group *group)
{
80000c9a:	40 ae       	mov.aa %a14,%sp
80000c9c:	40 4c       	mov.aa %a12,%a4
80000c9e:	80 58       	mov.d %d8,%a5
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80000ca0:	3b c0 03 50 	mov %d5,60
80000ca4:	82 04       	mov %d4,0
80000ca6:	6d 00 99 11 	call 80002fd8 <memset>
    config->group = group;
80000caa:	59 c8 38 00 	st.w [%a12]56,%d8
}
80000cae:	00 90       	ret 

80000cb0 <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80000cb0:	40 ae       	mov.aa %a14,%sp
80000cb2:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80000cb4:	d4 52       	ld.a %a2,[%a5]
80000cb6:	d4 2d       	ld.a %a13,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80000cb8:	19 58 04 00 	ld.w %d8,[%a5]4
80000cbc:	8f a8 00 20 	sh %d2,%d8,10
80000cc0:	1b 02 48 20 	addi %d2,%d2,1152
80000cc4:	80 d3       	mov.d %d3,%a13
80000cc6:	0b 23 00 90 	add %d9,%d3,%d2

    /* check for write access */
    group->group   = vadcG;
80000cca:	59 49 04 00 	st.w [%a4]4,%d9
    group->module  = *config->module;
80000cce:	d4 52       	ld.a %a2,[%a5]
80000cd0:	54 22       	ld.w %d2,[%a2]
80000cd2:	74 42       	st.w [%a4],%d2
    IfxVadc_GroupId groupIndex      = config->groupId;
80000cd4:	19 5a 04 00 	ld.w %d10,[%a5]4
    group->groupId = groupIndex;
80000cd8:	59 4a 08 00 	st.w [%a4]8,%d10
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80000cdc:	40 d4       	mov.aa %a4,%a13
80000cde:	6d ff 9e fd 	call 8000081a <IfxVadc_getAdcAnalogFrequency>
80000ce2:	02 2c       	mov %d12,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80000ce4:	1b 0a 01 b0 	addi %d11,%d10,16
80000ce8:	02 b4       	mov %d4,%d11
80000cea:	40 d4       	mov.aa %a4,%a13
80000cec:	6d ff 4b fd 	call 80000782 <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80000cf0:	39 c4 38 10 	ld.bu %d4,[%a12]120
80000cf4:	df 14 7c 00 	jeq %d4,1,80000dec <IfxVadc_Adc_initGroup+0x13c>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80000cf8:	82 07       	mov %d7,0
80000cfa:	82 06       	mov %d6,0
80000cfc:	82 05       	mov %d5,0
80000cfe:	82 04       	mov %d4,0
80000d00:	60 94       	mov.a %a4,%d9
80000d02:	6d ff 50 fe 	call 800009a2 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80000d06:	39 c4 39 10 	ld.bu %d4,[%a12]121
80000d0a:	df 14 7b 00 	jeq %d4,1,80000e00 <IfxVadc_Adc_initGroup+0x150>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80000d0e:	82 17       	mov %d7,1
80000d10:	82 06       	mov %d6,0
80000d12:	82 05       	mov %d5,0
80000d14:	82 04       	mov %d4,0
80000d16:	60 94       	mov.a %a4,%d9
80000d18:	6d ff 45 fe 	call 800009a2 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80000d1c:	39 c4 3a 10 	ld.bu %d4,[%a12]122
80000d20:	df 14 7a 00 	jeq %d4,1,80000e14 <IfxVadc_Adc_initGroup+0x164>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80000d24:	82 27       	mov %d7,2
80000d26:	82 06       	mov %d6,0
80000d28:	82 05       	mov %d5,0
80000d2a:	82 04       	mov %d4,0
80000d2c:	60 94       	mov.a %a4,%d9
80000d2e:	6d ff 3a fe 	call 800009a2 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80000d32:	19 c2 08 00 	ld.w %d2,[%a12]8
80000d36:	5f a2 22 00 	jeq %d2,%d10,80000d7a <IfxVadc_Adc_initGroup+0xca>
    return IfxVadc_Adc_masterIndex[slave][master];
80000d3a:	8f 3a 00 30 	sh %d3,%d10,3
80000d3e:	91 00 00 28 	movh.a %a2,32768
80000d42:	d9 22 24 b0 	lea %a2,[%a2]740 <800002e4 <IfxVadc_Adc_masterIndex>>
80000d46:	80 24       	mov.d %d4,%a2
80000d48:	42 34       	add %d4,%d3
80000d4a:	60 42       	mov.a %a2,%d4
80000d4c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80000d50:	14 22       	ld.bu %d2,[%a2]
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80000d52:	8f a8 00 30 	sh %d3,%d8,10
80000d56:	01 d3 00 26 	addsc.a %a2,%a13,%d3,0
80000d5a:	d9 23 40 30 	lea %a3,[%a2]1216
80000d5e:	19 23 40 30 	ld.w %d3,[%a2]1216
80000d62:	37 23 02 30 	insert %d3,%d3,%d2,0,2
80000d66:	74 33       	st.w [%a3],%d3
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80000d68:	54 33       	ld.w %d3,[%a3]
80000d6a:	8f 32 00 21 	and %d2,%d2,3
80000d6e:	3b 80 00 40 	mov %d4,8
80000d72:	0f 24 00 20 	sh %d2,%d4,%d2
80000d76:	a6 32       	or %d2,%d3
80000d78:	74 32       	st.w [%a3],%d2
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80000d7a:	8f a8 00 20 	sh %d2,%d8,10
80000d7e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000d82:	d9 23 40 20 	lea %a3,[%a2]1152
80000d86:	19 23 40 20 	ld.w %d3,[%a2]1152
80000d8a:	8f 33 c0 31 	andn %d3,%d3,3
80000d8e:	74 33       	st.w [%a3],%d3

    /* Setup arbiter */
    /* turn off the group during initialization, see UM for sync mode */
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);
80000d90:	19 c2 34 10 	ld.w %d2,[%a12]116
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80000d94:	d9 23 40 20 	lea %a3,[%a2]1152
80000d98:	19 23 40 20 	ld.w %d3,[%a2]1152
80000d9c:	37 23 02 32 	insert %d3,%d3,%d2,4,2
80000da0:	74 33       	st.w [%a3],%d3

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80000da2:	39 c2 38 10 	ld.bu %d2,[%a12]120
80000da6:	df 12 41 00 	jeq %d2,1,80000e28 <IfxVadc_Adc_initGroup+0x178>
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80000daa:	39 c2 39 10 	ld.bu %d2,[%a12]121
80000dae:	df 12 b0 00 	jeq %d2,1,80000f0e <IfxVadc_Adc_initGroup+0x25e>
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80000db2:	39 c2 3a 10 	ld.bu %d2,[%a12]122
80000db6:	df 12 1f 01 	jeq %d2,1,80000ff4 <IfxVadc_Adc_initGroup+0x344>
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80000dba:	19 c2 08 00 	ld.w %d2,[%a12]8
80000dbe:	5f a2 76 01 	jeq %d2,%d10,800010aa <IfxVadc_Adc_initGroup+0x3fa>
80000dc2:	82 04       	mov %d4,0
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80000dc4:	8f a8 00 20 	sh %d2,%d8,10
80000dc8:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000dcc:	d9 23 40 20 	lea %a3,[%a2]1152
80000dd0:	19 23 40 20 	ld.w %d3,[%a2]1152
80000dd4:	37 43 02 30 	insert %d3,%d3,%d4,0,2
80000dd8:	74 33       	st.w [%a3],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80000dda:	39 c5 30 10 	ld.bu %d5,[%a12]112
80000dde:	02 a4       	mov %d4,%d10
80000de0:	40 d4       	mov.aa %a4,%a13
80000de2:	6d ff f3 fc 	call 800007c8 <IfxVadc_disablePostCalibration>

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80000de6:	82 03       	mov %d3,0
80000de8:	1d 00 77 01 	j 800010d6 <IfxVadc_Adc_initGroup+0x426>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80000dec:	82 07       	mov %d7,0
80000dee:	19 c6 10 10 	ld.w %d6,[%a12]80
80000df2:	19 c5 0c 10 	ld.w %d5,[%a12]76
80000df6:	60 94       	mov.a %a4,%d9
80000df8:	6d ff d5 fd 	call 800009a2 <IfxVadc_setArbiterPriority>
80000dfc:	1d ff 85 ff 	j 80000d06 <IfxVadc_Adc_initGroup+0x56>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80000e00:	82 17       	mov %d7,1
80000e02:	19 c6 34 00 	ld.w %d6,[%a12]52
80000e06:	19 c5 30 00 	ld.w %d5,[%a12]48
80000e0a:	60 94       	mov.a %a4,%d9
80000e0c:	6d ff cb fd 	call 800009a2 <IfxVadc_setArbiterPriority>
80000e10:	1d ff 86 ff 	j 80000d1c <IfxVadc_Adc_initGroup+0x6c>
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80000e14:	82 27       	mov %d7,2
80000e16:	19 c6 2c 10 	ld.w %d6,[%a12]108
80000e1a:	19 c5 28 10 	ld.w %d5,[%a12]104
80000e1e:	60 94       	mov.a %a4,%d9
80000e20:	6d ff c1 fd 	call 800009a2 <IfxVadc_setArbiterPriority>
80000e24:	1d ff 87 ff 	j 80000d32 <IfxVadc_Adc_initGroup+0x82>
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80000e28:	19 c2 08 10 	ld.w %d2,[%a12]72
80000e2c:	df 02 37 00 	jeq %d2,0,80000e9a <IfxVadc_Adc_initGroup+0x1ea>
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80000e30:	8f a8 00 20 	sh %d2,%d8,10
80000e34:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000e38:	d9 23 44 40 	lea %a3,[%a2]1284
80000e3c:	19 22 44 40 	ld.w %d2,[%a2]1284
80000e40:	b7 12 01 21 	insert %d2,%d2,1,2,1
80000e44:	74 32       	st.w [%a3],%d2
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80000e46:	19 c5 08 10 	ld.w %d5,[%a12]72
80000e4a:	19 c4 00 10 	ld.w %d4,[%a12]64
    qctrl0.U        = vadcG->QCTRL0.U;
80000e4e:	d9 23 40 40 	lea %a3,[%a2]1280
80000e52:	19 22 40 40 	ld.w %d2,[%a2]1280
    qctrl0.B.XTWC   = 1;
80000e56:	b7 12 81 27 	insert %d2,%d2,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80000e5a:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    qctrl0.B.XTSEL  = triggerSource;
80000e5e:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80000e62:	74 32       	st.w [%a3],%d2
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80000e64:	19 c2 00 10 	ld.w %d2,[%a12]64
80000e68:	8b f2 20 22 	ne %d2,%d2,15
80000e6c:	df 02 22 80 	jne %d2,0,80000eb0 <IfxVadc_Adc_initGroup+0x200>
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80000e70:	19 c3 3c 00 	ld.w %d3,[%a12]60
    qctrl0.U           = vadcG->QCTRL0.U;
80000e74:	8f a8 00 20 	sh %d2,%d8,10
80000e78:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000e7c:	54 32       	ld.w %d2,[%a3]
    qctrl0.B.GTWC      = 1;
80000e7e:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80000e82:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80000e86:	74 32       	st.w [%a3],%d2
    vadcG->QMR0.B.ENGT = gatingMode;
80000e88:	d9 23 44 40 	lea %a3,[%a2]1284
80000e8c:	19 22 44 40 	ld.w %d2,[%a2]1284
80000e90:	b7 12 02 20 	insert %d2,%d2,1,0,2
80000e94:	74 32       	st.w [%a3],%d2
}
80000e96:	1d 00 0d 00 	j 80000eb0 <IfxVadc_Adc_initGroup+0x200>
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80000e9a:	8f a8 00 20 	sh %d2,%d8,10
80000e9e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000ea2:	d9 23 44 40 	lea %a3,[%a2]1284
80000ea6:	19 22 44 40 	ld.w %d2,[%a2]1284
80000eaa:	8f 42 c0 21 	andn %d2,%d2,4
80000eae:	74 32       	st.w [%a3],%d2
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80000eb0:	19 c2 00 10 	ld.w %d2,[%a12]64
80000eb4:	8b f2 00 22 	eq %d2,%d2,15
80000eb8:	df 02 1a 80 	jne %d2,0,80000eec <IfxVadc_Adc_initGroup+0x23c>
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80000ebc:	19 c5 3c 00 	ld.w %d5,[%a12]60
80000ec0:	19 c4 04 10 	ld.w %d4,[%a12]68
    qctrl0.U           = vadcG->QCTRL0.U;
80000ec4:	8f a8 00 20 	sh %d2,%d8,10
80000ec8:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000ecc:	d9 23 40 40 	lea %a3,[%a2]1280
80000ed0:	19 22 40 40 	ld.w %d2,[%a2]1280
    qctrl0.B.GTWC      = 1;
80000ed4:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80000ed8:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80000edc:	74 32       	st.w [%a3],%d2
    vadcG->QMR0.B.ENGT = gatingMode;
80000ede:	d9 23 44 40 	lea %a3,[%a2]1284
80000ee2:	19 22 44 40 	ld.w %d2,[%a2]1284
80000ee6:	37 42 02 20 	insert %d2,%d2,%d4,0,2
80000eea:	74 32       	st.w [%a3],%d2
        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80000eec:	39 c3 38 00 	ld.bu %d3,[%a12]56
80000ef0:	8b 03 20 32 	ne %d3,%d3,0
    vadcG->QMR0.B.FLUSH = flushQueue;
80000ef4:	8f a8 00 20 	sh %d2,%d8,10
80000ef8:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000efc:	d9 23 44 40 	lea %a3,[%a2]1284
80000f00:	19 22 44 40 	ld.w %d2,[%a2]1284
80000f04:	67 32 0a 20 	ins.t %d2,%d2,10,%d3,0
80000f08:	74 32       	st.w [%a3],%d2
}
80000f0a:	1d ff 50 ff 	j 80000daa <IfxVadc_Adc_initGroup+0xfa>
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80000f0e:	19 c2 2c 00 	ld.w %d2,[%a12]44
80000f12:	df 02 37 00 	jeq %d2,0,80000f80 <IfxVadc_Adc_initGroup+0x2d0>
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80000f16:	8f a8 00 20 	sh %d2,%d8,10
80000f1a:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000f1e:	d9 23 64 40 	lea %a3,[%a2]1316
80000f22:	19 22 64 40 	ld.w %d2,[%a2]1316
80000f26:	b7 12 01 21 	insert %d2,%d2,1,2,1
80000f2a:	74 32       	st.w [%a3],%d2
            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80000f2c:	19 c5 2c 00 	ld.w %d5,[%a12]44
80000f30:	19 c4 24 00 	ld.w %d4,[%a12]36
    asctrl.U        = vadcG->ASCTRL.U;
80000f34:	d9 23 60 40 	lea %a3,[%a2]1312
80000f38:	19 22 60 40 	ld.w %d2,[%a2]1312
    asctrl.B.XTWC   = 1;
80000f3c:	b7 12 81 27 	insert %d2,%d2,1,15,1
    asctrl.B.XTMODE = triggerMode;
80000f40:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    asctrl.B.XTSEL  = triggerSource;
80000f44:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadcG->ASCTRL.U = asctrl.U;
80000f48:	74 32       	st.w [%a3],%d2
            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80000f4a:	19 c2 24 00 	ld.w %d2,[%a12]36
80000f4e:	8b f2 20 22 	ne %d2,%d2,15
80000f52:	df 02 22 80 	jne %d2,0,80000f96 <IfxVadc_Adc_initGroup+0x2e6>
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80000f56:	19 c3 20 00 	ld.w %d3,[%a12]32
    asctrl.U           = vadcG->ASCTRL.U;
80000f5a:	8f a8 00 20 	sh %d2,%d8,10
80000f5e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000f62:	54 32       	ld.w %d2,[%a3]
    asctrl.B.GTWC      = 1;
80000f64:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80000f68:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80000f6c:	74 32       	st.w [%a3],%d2
    vadcG->ASMR.B.ENGT = gatingMode;
80000f6e:	d9 23 64 40 	lea %a3,[%a2]1316
80000f72:	19 22 64 40 	ld.w %d2,[%a2]1316
80000f76:	b7 12 02 20 	insert %d2,%d2,1,0,2
80000f7a:	74 32       	st.w [%a3],%d2
}
80000f7c:	1d 00 0d 00 	j 80000f96 <IfxVadc_Adc_initGroup+0x2e6>
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80000f80:	8f a8 00 20 	sh %d2,%d8,10
80000f84:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000f88:	d9 23 64 40 	lea %a3,[%a2]1316
80000f8c:	19 22 64 40 	ld.w %d2,[%a2]1316
80000f90:	8f 42 c0 21 	andn %d2,%d2,4
80000f94:	74 32       	st.w [%a3],%d2
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80000f96:	19 c2 24 00 	ld.w %d2,[%a12]36
80000f9a:	8b f2 00 22 	eq %d2,%d2,15
80000f9e:	df 02 1a 80 	jne %d2,0,80000fd2 <IfxVadc_Adc_initGroup+0x322>
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80000fa2:	19 c5 20 00 	ld.w %d5,[%a12]32
80000fa6:	19 c4 28 00 	ld.w %d4,[%a12]40
    asctrl.U           = vadcG->ASCTRL.U;
80000faa:	8f a8 00 20 	sh %d2,%d8,10
80000fae:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000fb2:	d9 23 60 40 	lea %a3,[%a2]1312
80000fb6:	19 22 60 40 	ld.w %d2,[%a2]1312
    asctrl.B.GTWC      = 1;
80000fba:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80000fbe:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80000fc2:	74 32       	st.w [%a3],%d2
    vadcG->ASMR.B.ENGT = gatingMode;
80000fc4:	d9 23 64 40 	lea %a3,[%a2]1316
80000fc8:	19 22 64 40 	ld.w %d2,[%a2]1316
80000fcc:	37 42 02 20 	insert %d2,%d2,%d4,0,2
80000fd0:	74 32       	st.w [%a3],%d2
        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80000fd2:	39 c3 1c 00 	ld.bu %d3,[%a12]28
80000fd6:	8b 03 20 32 	ne %d3,%d3,0
    vadcG->ASMR.B.SCAN = autoscanEnable;
80000fda:	8f a8 00 20 	sh %d2,%d8,10
80000fde:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000fe2:	d9 23 64 40 	lea %a3,[%a2]1316
80000fe6:	19 22 64 40 	ld.w %d2,[%a2]1316
80000fea:	67 32 04 20 	ins.t %d2,%d2,4,%d3,0
80000fee:	74 32       	st.w [%a3],%d2
}
80000ff0:	1d ff e1 fe 	j 80000db2 <IfxVadc_Adc_initGroup+0x102>
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80000ff4:	19 c2 24 10 	ld.w %d2,[%a12]100
80000ff8:	df 02 1e 00 	jeq %d2,0,80001034 <IfxVadc_Adc_initGroup+0x384>
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80000ffc:	d9 d2 04 80 	lea %a2,[%a13]516
80001000:	19 d2 04 80 	ld.w %d2,[%a13]516
80001004:	b7 12 01 21 	insert %d2,%d2,1,2,1
80001008:	74 22       	st.w [%a2],%d2
            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
8000100a:	19 c5 24 10 	ld.w %d5,[%a12]100
8000100e:	19 c4 1c 10 	ld.w %d4,[%a12]92
    brsctrl.U        = vadc->BRSCTRL.U;
80001012:	d9 d2 00 80 	lea %a2,[%a13]512
80001016:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.XTWC   = 1;
8000101a:	b7 12 81 27 	insert %d2,%d2,1,15,1
    brsctrl.B.XTMODE = triggerMode;
8000101e:	37 52 82 26 	insert %d2,%d2,%d5,13,2
    brsctrl.B.XTSEL  = triggerSource;
80001022:	37 42 04 24 	insert %d2,%d2,%d4,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80001026:	74 22       	st.w [%a2],%d2
            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80001028:	19 c2 1c 10 	ld.w %d2,[%a12]92
8000102c:	8b f2 20 22 	ne %d2,%d2,15
80001030:	df 02 29 00 	jeq %d2,0,80001082 <IfxVadc_Adc_initGroup+0x3d2>
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80001034:	19 c2 1c 10 	ld.w %d2,[%a12]92
80001038:	8b f2 00 22 	eq %d2,%d2,15
8000103c:	df 02 16 80 	jne %d2,0,80001068 <IfxVadc_Adc_initGroup+0x3b8>
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80001040:	19 c5 18 10 	ld.w %d5,[%a12]88
80001044:	19 c4 20 10 	ld.w %d4,[%a12]96
    brsctrl.U          = vadc->BRSCTRL.U;
80001048:	d9 d2 00 80 	lea %a2,[%a13]512
8000104c:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.GTWC     = 1;
80001050:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80001054:	37 52 04 28 	insert %d2,%d2,%d5,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80001058:	74 22       	st.w [%a2],%d2
    vadc->BRSMR.B.ENGT = gatingMode;
8000105a:	d9 d2 04 80 	lea %a2,[%a13]516
8000105e:	19 d2 04 80 	ld.w %d2,[%a13]516
80001062:	37 42 02 20 	insert %d2,%d2,%d4,0,2
80001066:	74 22       	st.w [%a2],%d2
        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80001068:	39 c3 14 10 	ld.bu %d3,[%a12]84
8000106c:	8b 03 20 32 	ne %d3,%d3,0
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80001070:	d9 d2 04 80 	lea %a2,[%a13]516
80001074:	19 d2 04 80 	ld.w %d2,[%a13]516
80001078:	67 32 04 20 	ins.t %d2,%d2,4,%d3,0
8000107c:	74 22       	st.w [%a2],%d2
}
8000107e:	1d ff 9e fe 	j 80000dba <IfxVadc_Adc_initGroup+0x10a>
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80001082:	19 c3 18 10 	ld.w %d3,[%a12]88
    brsctrl.U          = vadc->BRSCTRL.U;
80001086:	d9 d2 00 80 	lea %a2,[%a13]512
8000108a:	19 d2 00 80 	ld.w %d2,[%a13]512
    brsctrl.B.GTWC     = 1;
8000108e:	b7 12 81 2b 	insert %d2,%d2,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80001092:	37 32 04 28 	insert %d2,%d2,%d3,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80001096:	74 22       	st.w [%a2],%d2
    vadc->BRSMR.B.ENGT = gatingMode;
80001098:	d9 d2 04 80 	lea %a2,[%a13]516
8000109c:	19 d2 04 80 	ld.w %d2,[%a13]516
800010a0:	b7 12 02 20 	insert %d2,%d2,1,0,2
800010a4:	74 22       	st.w [%a2],%d2
}
800010a6:	1d ff c7 ff 	j 80001034 <IfxVadc_Adc_initGroup+0x384>
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
800010aa:	82 34       	mov %d4,3
800010ac:	1d ff 8c fe 	j 80000dc4 <IfxVadc_Adc_initGroup+0x114>
800010b0:	3b f0 0f 50 	mov %d5,255
800010b4:	0b 54 90 51 	min.u %d5,%d4,%d5
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
800010b8:	8f 88 00 20 	sh %d2,%d8,8
800010bc:	42 62       	add %d2,%d6
800010be:	1b 82 12 40 	addi %d4,%d2,296
800010c2:	06 24       	sh %d4,2
800010c4:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
800010c8:	54 24       	ld.w %d4,[%a2]
800010ca:	37 54 05 40 	insert %d4,%d4,%d5,0,5
800010ce:	74 24       	st.w [%a2],%d4
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
800010d0:	c2 13       	add %d3,1
800010d2:	8f f3 0f 31 	and %d3,%d3,255
800010d6:	ff 23 29 80 	jge.u %d3,2,80001128 <IfxVadc_Adc_initGroup+0x478>
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
800010da:	02 36       	mov %d6,%d3
800010dc:	1b 23 00 40 	addi %d4,%d3,2
800010e0:	06 34       	sh %d4,3
800010e2:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
800010e6:	54 25       	ld.w %d5,[%a2]
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
800010e8:	8f 88 00 20 	sh %d2,%d8,8
800010ec:	42 32       	add %d2,%d3
800010ee:	1b 82 12 40 	addi %d4,%d2,296
800010f2:	06 24       	sh %d4,2
800010f4:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
800010f8:	54 24       	ld.w %d4,[%a2]
800010fa:	37 54 03 44 	insert %d4,%d4,%d5,8,3
800010fe:	74 24       	st.w [%a2],%d4
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80001100:	8f 33 00 40 	sh %d4,%d3,3
80001104:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
80001108:	19 24 0c 00 	ld.w %d4,[%a2]12
    ticks = (uint32)(sampleTime * analogFrequency) - 2;
8000110c:	4b c4 41 40 	mul.f %d4,%d4,%d12
80001110:	4b 04 71 41 	ftouz %d4,%d4
80001114:	c2 e4       	add %d4,-2
    if (ticks > 31)
80001116:	8b 04 62 52 	lt.u %d5,%d4,32
8000111a:	df 05 cb ff 	jne %d5,0,800010b0 <IfxVadc_Adc_initGroup+0x400>
        ticks = (ticks / 16) + 15;
8000111e:	06 c4       	sh %d4,-4
80001120:	1b f4 00 40 	addi %d4,%d4,15
80001124:	1d ff c6 ff 	j 800010b0 <IfxVadc_Adc_initGroup+0x400>
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80001128:	02 b4       	mov %d4,%d11
8000112a:	40 d4       	mov.aa %a4,%a13
8000112c:	6d ff 08 fb 	call 8000073c <IfxVadc_disableAccess>

    return status;
}
80001130:	82 02       	mov %d2,0
80001132:	00 90       	ret 

80001134 <IfxVadc_Adc_initGroupConfig>:


void IfxVadc_Adc_initGroupConfig(IfxVadc_Adc_GroupConfig *config, IfxVadc_Adc *vadc)
{
80001134:	40 ae       	mov.aa %a14,%sp
80001136:	40 4c       	mov.aa %a12,%a4
80001138:	80 58       	mov.d %d8,%a5
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
8000113a:	3b c0 07 50 	mov %d5,124
8000113e:	82 04       	mov %d4,0
80001140:	6d 00 4c 0f 	call 80002fd8 <memset>
80001144:	7b 60 58 23 	movh %d2,13702
80001148:	1b d2 7b 23 	addi %d2,%d2,14269
8000114c:	59 c2 0c 00 	st.w [%a12]12,%d2
80001150:	59 c2 14 00 	st.w [%a12]20,%d2
80001154:	82 12       	mov %d2,1
80001156:	59 c2 30 00 	st.w [%a12]48,%d2
8000115a:	e9 c2 38 00 	st.b [%a12]56,%d2
8000115e:	59 c2 0c 10 	st.w [%a12]76,%d2
80001162:	59 c2 28 10 	st.w [%a12]104,%d2
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80001166:	74 c8       	st.w [%a12],%d8
    config->master                 = config->groupId;
    config->disablePostCalibration = FALSE;
}
80001168:	00 90       	ret 

8000116a <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
8000116a:	40 ae       	mov.aa %a14,%sp
8000116c:	40 5d       	mov.aa %a13,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
8000116e:	d4 5c       	ld.a %a12,[%a5]
    vadc->vadc = vadcSFR;
80001170:	f4 4c       	st.a [%a4],%a12
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001172:	6d 00 0f 06 	call 80001d90 <IfxScuWdt_getCpuWatchdogPassword>
80001176:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80001178:	02 24       	mov %d4,%d2
8000117a:	6d 00 a2 04 	call 80001abe <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
8000117e:	82 02       	mov %d2,0
80001180:	74 c2       	st.w [%a12],%d2
    IfxScuWdt_setCpuEndinit(passwd);
80001182:	02 84       	mov %d4,%d8
80001184:	6d 00 23 06 	call 80001dca <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80001188:	19 d4 24 00 	ld.w %d4,[%a13]36
8000118c:	40 c4       	mov.aa %a4,%a12
8000118e:	6d ff f5 fb 	call 80000978 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80001192:	19 d4 18 00 	ld.w %d4,[%a13]24
80001196:	4b 04 71 41 	ftouz %d4,%d4
8000119a:	40 c4       	mov.aa %a4,%a12
8000119c:	6d ff b4 fb 	call 80000904 <IfxVadc_initializeFAdcI>
800011a0:	df 02 04 80 	jne %d2,0,800011a8 <IfxVadc_Adc_initModule+0x3e>
    {
        return IfxVadc_Status_notInitialised;
800011a4:	82 12       	mov %d2,1
        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
}
800011a6:	00 90       	ret 
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
800011a8:	19 d4 14 00 	ld.w %d4,[%a13]20
800011ac:	4b 04 71 41 	ftouz %d4,%d4
800011b0:	40 c4       	mov.aa %a4,%a12
800011b2:	6d ff 92 fb 	call 800008d6 <IfxVadc_initializeFAdcD>
    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
800011b6:	40 c4       	mov.aa %a4,%a12
800011b8:	6d ff 31 fb 	call 8000081a <IfxVadc_getAdcAnalogFrequency>
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
800011bc:	82 03       	mov %d3,0
800011be:	1d 00 12 00 	j 800011e2 <IfxVadc_Adc_initModule+0x78>
800011c2:	3b f0 0f 50 	mov %d5,255
800011c6:	0b 54 90 51 	min.u %d5,%d4,%d5
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
800011ca:	1b 86 02 40 	addi %d4,%d6,40
800011ce:	06 24       	sh %d4,2
800011d0:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
800011d4:	54 24       	ld.w %d4,[%a2]
800011d6:	37 54 05 40 	insert %d4,%d4,%d5,0,5
800011da:	74 24       	st.w [%a2],%d4
800011dc:	c2 13       	add %d3,1
800011de:	8f f3 0f 31 	and %d3,%d3,255
800011e2:	ff 23 26 80 	jge.u %d3,2,8000122e <IfxVadc_Adc_initModule+0xc4>
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
800011e6:	02 36       	mov %d6,%d3
800011e8:	1b 13 00 40 	addi %d4,%d3,1
800011ec:	06 34       	sh %d4,3
800011ee:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
800011f2:	54 25       	ld.w %d5,[%a2]
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
800011f4:	1b 83 02 40 	addi %d4,%d3,40
800011f8:	06 24       	sh %d4,2
800011fa:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
800011fe:	54 24       	ld.w %d4,[%a2]
80001200:	37 54 03 44 	insert %d4,%d4,%d5,8,3
80001204:	74 24       	st.w [%a2],%d4
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80001206:	8f 33 00 40 	sh %d4,%d3,3
8000120a:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
8000120e:	19 24 04 00 	ld.w %d4,[%a2]4
    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80001212:	4b 24 41 40 	mul.f %d4,%d4,%d2
80001216:	4b 04 71 41 	ftouz %d4,%d4
8000121a:	c2 e4       	add %d4,-2
    if (ticks > 31)
8000121c:	8b 04 62 52 	lt.u %d5,%d4,32
80001220:	df 05 d1 ff 	jne %d5,0,800011c2 <IfxVadc_Adc_initModule+0x58>
        ticks = (ticks / 16) + 15;
80001224:	06 c4       	sh %d4,-4
80001226:	1b f4 00 40 	addi %d4,%d4,15
8000122a:	1d ff cc ff 	j 800011c2 <IfxVadc_Adc_initModule+0x58>
    if (config->startupCalibration == TRUE)
8000122e:	39 d2 20 00 	ld.bu %d2,[%a13]32
80001232:	df 12 23 00 	jeq %d2,1,80001278 <IfxVadc_Adc_initModule+0x10e>
    return status;
80001236:	82 02       	mov %d2,0
80001238:	00 90       	ret 
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
8000123a:	1b 08 01 90 	addi %d9,%d8,16
8000123e:	02 94       	mov %d4,%d9
80001240:	40 c4       	mov.aa %a4,%a12
80001242:	6d ff a0 fa 	call 80000782 <IfxVadc_enableAccess>
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80001246:	8f a8 00 20 	sh %d2,%d8,10
8000124a:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
8000124e:	d9 23 40 20 	lea %a3,[%a2]1152
80001252:	19 22 40 20 	ld.w %d2,[%a2]1152
80001256:	b7 32 02 20 	insert %d2,%d2,3,0,2
8000125a:	74 32       	st.w [%a3],%d2
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
8000125c:	02 94       	mov %d4,%d9
8000125e:	40 c4       	mov.aa %a4,%a12
80001260:	6d ff 6e fa 	call 8000073c <IfxVadc_disableAccess>
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80001264:	c2 18       	add %d8,1
80001266:	8f f8 0f 81 	and %d8,%d8,255
8000126a:	bf 88 e8 ff 	jlt.u %d8,8,8000123a <IfxVadc_Adc_initModule+0xd0>
        IfxVadc_startupCalibration(vadcSFR);
8000126e:	40 c4       	mov.aa %a4,%a12
80001270:	6d ff da fb 	call 80000a24 <IfxVadc_startupCalibration>
    return status;
80001274:	82 02       	mov %d2,0
80001276:	00 90       	ret 
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80001278:	82 08       	mov %d8,0
8000127a:	1d ff f8 ff 	j 8000126a <IfxVadc_Adc_initModule+0x100>

8000127e <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
8000127e:	40 ae       	mov.aa %a14,%sp
80001280:	40 4c       	mov.aa %a12,%a4
80001282:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80001284:	f4 c5       	st.a [%a12],%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80001286:	7b 90 b9 24 	movh %d2,19353
8000128a:	1b 02 68 29 	addi %d2,%d2,-27008
8000128e:	59 c2 18 00 	st.w [%a12]24,%d2

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80001292:	6d ff d2 fa 	call 80000836 <IfxVadc_getAdcDigitalFrequency>
80001296:	59 c2 14 00 	st.w [%a12]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
8000129a:	6d 00 29 02 	call 800016ec <IfxScuCcu_getSpbFrequency>
8000129e:	59 c2 1c 00 	st.w [%a12]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
800012a2:	82 02       	mov %d2,0
800012a4:	59 c2 08 00 	st.w [%a12]8,%d2
    config->globalInputClass[0].sampleTime = 1.0e-6;
800012a8:	7b 60 58 33 	movh %d3,13702
800012ac:	1b d3 7b 33 	addi %d3,%d3,14269
800012b0:	59 c3 04 00 	st.w [%a12]4,%d3
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
800012b4:	59 c2 10 00 	st.w [%a12]16,%d2
    config->globalInputClass[1].sampleTime = 1.0e-6;
800012b8:	59 c3 0c 00 	st.w [%a12]12,%d3
    config->startupCalibration             = FALSE;
800012bc:	e9 c2 20 00 	st.b [%a12]32,%d2
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
800012c0:	59 c2 24 00 	st.w [%a12]36,%d2
}
800012c4:	00 90       	ret 

800012c6 <IfxStm_clearCompareFlag>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator)
{
800012c6:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
800012c8:	df 04 0a 80 	jne %d4,0,800012dc <IfxStm_clearCompareFlag+0x16>
    {
        stm->ISCR.B.CMP0IRR = 1U;
800012cc:	d9 42 00 10 	lea %a2,[%a4]64
800012d0:	19 42 00 10 	ld.w %d2,[%a4]64
800012d4:	b7 12 01 20 	insert %d2,%d2,1,0,1
800012d8:	74 22       	st.w [%a2],%d2
800012da:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
800012dc:	df 14 03 00 	jeq %d4,1,800012e2 <IfxStm_clearCompareFlag+0x1c>
    {
        stm->ISCR.B.CMP1IRR = 1U;
    }
}
800012e0:	00 90       	ret 
        stm->ISCR.B.CMP1IRR = 1U;
800012e2:	d9 42 00 10 	lea %a2,[%a4]64
800012e6:	19 42 00 10 	ld.w %d2,[%a4]64
800012ea:	b7 12 01 21 	insert %d2,%d2,1,2,1
800012ee:	74 22       	st.w [%a2],%d2
}
800012f0:	1d ff f8 ff 	j 800012e0 <IfxStm_clearCompareFlag+0x1a>

800012f4 <IfxStm_enableComparatorInterrupt>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator)
{
800012f4:	40 ae       	mov.aa %a14,%sp
    if (comparator == IfxStm_Comparator_0)
800012f6:	df 04 0a 80 	jne %d4,0,8000130a <IfxStm_enableComparatorInterrupt+0x16>
    {
        stm->ICR.B.CMP0EN = 1U;
800012fa:	d9 42 3c 00 	lea %a2,[%a4]60
800012fe:	19 42 3c 00 	ld.w %d2,[%a4]60
80001302:	b7 12 01 20 	insert %d2,%d2,1,0,1
80001306:	74 22       	st.w [%a2],%d2
80001308:	00 90       	ret 
    }
    else if (comparator == IfxStm_Comparator_1)
8000130a:	df 14 03 00 	jeq %d4,1,80001310 <IfxStm_enableComparatorInterrupt+0x1c>
    {
        stm->ICR.B.CMP1EN = 1U;
    }
}
8000130e:	00 90       	ret 
        stm->ICR.B.CMP1EN = 1U;
80001310:	d9 42 3c 00 	lea %a2,[%a4]60
80001314:	19 42 3c 00 	ld.w %d2,[%a4]60
80001318:	b7 12 01 22 	insert %d2,%d2,1,4,1
8000131c:	74 22       	st.w [%a2],%d2
}
8000131e:	1d ff f8 ff 	j 8000130e <IfxStm_enableComparatorInterrupt+0x1a>

80001322 <IfxStm_enableOcdsSuspend>:


void IfxStm_enableOcdsSuspend(Ifx_STM *stm)
{
80001322:	40 ae       	mov.aa %a14,%sp
    Ifx_STM_OCS ocs = stm->OCS;
80001324:	d9 42 28 30 	lea %a2,[%a4]232
80001328:	19 42 28 30 	ld.w %d2,[%a4]232

    /* Only if OCDS is enabled write into the OCS register */
    if (MODULE_CBS.OSTATE.B.OEN == 1U)
8000132c:	85 f3 40 20 	ld.w %d3,f0000480 <_SMALL_DATA4_+0x5fff8480>
80001330:	6f 03 03 80 	jnz.t %d3,0,80001336 <IfxStm_enableOcdsSuspend+0x14>
        ocs.B.SUS_P      = 1;
        ocs.B.SUS        = 2;
        stm->OCS         = ocs;
        stm->OCS.B.SUS_P = 0;
    }
}
80001334:	00 90       	ret 
        ocs.B.SUS_P      = 1;
80001336:	b7 12 01 2e 	insert %d2,%d2,1,28,1
        ocs.B.SUS        = 2;
8000133a:	b7 22 04 2c 	insert %d2,%d2,2,24,4
        stm->OCS         = ocs;
8000133e:	74 22       	st.w [%a2],%d2
        stm->OCS.B.SUS_P = 0;
80001340:	54 22       	ld.w %d2,[%a2]
80001342:	b7 02 01 2e 	insert %d2,%d2,0,28,1
80001346:	74 22       	st.w [%a2],%d2
}
80001348:	1d ff f6 ff 	j 80001334 <IfxStm_enableOcdsSuspend+0x12>

8000134c <IfxStm_getIndex>:
    return module;
}


IfxStm_Index IfxStm_getIndex(Ifx_STM *stm)
{
8000134c:	40 ae       	mov.aa %a14,%sp
    uint32       index;
    IfxStm_Index result;

    result = IfxStm_Index_none;

    for (index = 0; index < IFXSTM_NUM_MODULES; index++)
8000134e:	82 02       	mov %d2,0
80001350:	1d 00 03 00 	j 80001356 <IfxStm_getIndex+0xa>
80001354:	c2 12       	add %d2,1
80001356:	ff 32 18 80 	jge.u %d2,3,80001386 <IfxStm_getIndex+0x3a>
    {
        if (IfxStm_cfg_indexMap[index].module == stm)
8000135a:	8f 32 00 30 	sh %d3,%d2,3
8000135e:	91 00 00 28 	movh.a %a2,32768
80001362:	d9 22 2c 80 	lea %a2,[%a2]556 <8000022c <IfxStm_cfg_indexMap>>
80001366:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000136a:	54 23       	ld.w %d3,[%a2]
8000136c:	80 44       	mov.d %d4,%a4
8000136e:	5f 43 f3 ff 	jne %d3,%d4,80001354 <IfxStm_getIndex+0x8>
        {
            result = (IfxStm_Index)IfxStm_cfg_indexMap[index].index;
80001372:	06 32       	sh %d2,3
80001374:	91 00 00 28 	movh.a %a2,32768
80001378:	d9 22 2c 80 	lea %a2,[%a2]556 <8000022c <IfxStm_cfg_indexMap>>
8000137c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001380:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80001384:	00 90       	ret 
    result = IfxStm_Index_none;
80001386:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
80001388:	00 90       	ret 

8000138a <IfxStm_initCompare>:
    return comparator == IfxStm_Comparator_0 ? &MODULE_SRC.STM.STM[index].SR0 : &MODULE_SRC.STM.STM[index].SR1;
}


boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config)
{
8000138a:	40 ae       	mov.aa %a14,%sp
8000138c:	40 4d       	mov.aa %a13,%a4
8000138e:	40 5c       	mov.aa %a12,%a5
    sint32        index;
    boolean       result;
    Ifx_STM_CMCON comcon = stm->CMCON;
80001390:	19 42 38 00 	ld.w %d2,[%a4]56
    Ifx_STM_ICR   icr    = stm->ICR;
80001394:	19 43 3c 00 	ld.w %d3,[%a4]60

    if (config->comparator == 0)
80001398:	54 54       	ld.w %d4,[%a5]
8000139a:	df 04 82 80 	jne %d4,0,8000149e <IfxStm_initCompare+0x114>
    {
        comcon.B.MSIZE0  = config->compareSize;
8000139e:	19 54 0c 00 	ld.w %d4,[%a5]12
800013a2:	37 42 05 20 	insert %d2,%d2,%d4,0,5
        comcon.B.MSTART0 = config->compareOffset;
800013a6:	19 54 08 00 	ld.w %d4,[%a5]8
800013aa:	37 42 05 24 	insert %d2,%d2,%d4,8,5
        icr.B.CMP0OS     = config->comparatorInterrupt;
800013ae:	19 54 04 00 	ld.w %d4,[%a5]4
800013b2:	67 43 02 30 	ins.t %d3,%d3,2,%d4,0
        result           = TRUE;
800013b6:	82 18       	mov %d8,1
    {
        /*Invalid value */
        result = FALSE;
    }

    stm->ICR.U   = icr.U;
800013b8:	59 d3 3c 00 	st.w [%a13]60,%d3
    stm->CMCON.U = comcon.U;
800013bc:	59 d2 38 00 	st.w [%a13]56,%d2

    /* configure interrupt */
    index = IfxStm_getIndex(stm);
800013c0:	40 d4       	mov.aa %a4,%a13
800013c2:	6d ff c5 ff 	call 8000134c <IfxStm_getIndex>

    if (config->triggerPriority > 0)
800013c6:	b9 c3 14 00 	ld.hu %d3,[%a12]20
800013ca:	df 03 20 00 	jeq %d3,0,8000140a <IfxStm_initCompare+0x80>
    {
        volatile Ifx_SRC_SRCR *srcr;

        if (config->comparatorInterrupt == IfxStm_ComparatorInterrupt_ir0)
800013ce:	19 c4 04 00 	ld.w %d4,[%a12]4
800013d2:	df 04 7a 80 	jne %d4,0,800014c6 <IfxStm_initCompare+0x13c>
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR0);
800013d6:	06 32       	sh %d2,3
800013d8:	7b 40 00 4f 	movh %d4,61444
800013dc:	1b 04 49 48 	addi %d4,%d4,-31600
800013e0:	60 42       	mov.a %a2,%d4
800013e2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
        else
        {
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
        }

        IfxSrc_init(srcr, config->typeOfService, config->triggerPriority);
800013e6:	19 c4 18 00 	ld.w %d4,[%a12]24
    src->B.SRPN = priority;
800013ea:	54 22       	ld.w %d2,[%a2]
800013ec:	37 32 08 20 	insert %d2,%d2,%d3,0,8
800013f0:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800013f2:	54 22       	ld.w %d2,[%a2]
800013f4:	37 42 82 25 	insert %d2,%d2,%d4,11,2
800013f8:	74 22       	st.w [%a2],%d2
    src->B.CLRR = 1;
800013fa:	54 22       	ld.w %d2,[%a2]
800013fc:	b7 12 81 2c 	insert %d2,%d2,1,25,1
80001400:	74 22       	st.w [%a2],%d2
    src->B.SRE = 1;
80001402:	54 22       	ld.w %d2,[%a2]
80001404:	b7 12 01 25 	insert %d2,%d2,1,10,1
80001408:	74 22       	st.w [%a2],%d2
        IfxSrc_enable(srcr);
    }

    /*Configure the comparator ticks to current value to avoid any wrong triggering*/
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset);
8000140a:	39 c5 08 00 	ld.bu %d5,[%a12]8

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000140e:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
80001412:	19 d2 2c 00 	ld.w %d2,[%a13]44
80001416:	8f 06 40 41 	or %d4,%d6,0
8000141a:	02 23       	mov %d3,%d2
{
    uint64 now;

    now = IfxStm_get(stm);

    return (uint32)(now >> offset);
8000141c:	8b 05 82 22 	ge %d2,%d5,32
80001420:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
80001424:	ab 03 a0 32 	seln %d3,%d2,%d3,0
80001428:	8f f5 01 21 	and %d2,%d5,31
8000142c:	8b 02 02 51 	rsub %d5,%d2,32
80001430:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
80001434:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
80001438:	54 c2       	ld.w %d2,[%a12]
8000143a:	1b c2 00 20 	addi %d2,%d2,12
8000143e:	06 22       	sh %d2,2
80001440:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80001444:	74 23       	st.w [%a2],%d3

    /* clear the interrupt flag of the selected comparator before enabling the interrupt */
    /* this is to avaoid the unneccesary interrupt for the compare match of reset values of the registers */
    IfxStm_clearCompareFlag(stm, config->comparator);
80001446:	54 c4       	ld.w %d4,[%a12]
80001448:	40 d4       	mov.aa %a4,%a13
8000144a:	6d ff 3e ff 	call 800012c6 <IfxStm_clearCompareFlag>
    /* enable the interrupt for the selected comparator */
    IfxStm_enableComparatorInterrupt(stm, config->comparator);
8000144e:	54 c4       	ld.w %d4,[%a12]
80001450:	40 d4       	mov.aa %a4,%a13
80001452:	6d ff 51 ff 	call 800012f4 <IfxStm_enableComparatorInterrupt>

    /*Configure the comparator ticks */
    stm->CMP[config->comparator].U = IfxStm_getOffsetTimer(stm, (uint8)config->compareOffset) + config->ticks;
80001456:	39 c5 08 00 	ld.bu %d5,[%a12]8
    result  = stm->TIM0.U;
8000145a:	19 d6 10 00 	ld.w %d6,[%a13]16
    result |= ((uint64)stm->CAP.U) << 32;
8000145e:	19 d2 2c 00 	ld.w %d2,[%a13]44
80001462:	8f 06 40 41 	or %d4,%d6,0
80001466:	02 23       	mov %d3,%d2
    return (uint32)(now >> offset);
80001468:	8b 05 82 22 	ge %d2,%d5,32
8000146c:	2b 34 50 42 	seln %d4,%d2,%d4,%d3
80001470:	ab 03 a0 32 	seln %d3,%d2,%d3,0
80001474:	8f f5 01 21 	and %d2,%d5,31
80001478:	8b 02 02 51 	rsub %d5,%d2,32
8000147c:	17 43 80 35 	dextr %d3,%d3,%d4,%d5
80001480:	2b 43 40 32 	sel %d3,%d2,%d3,%d4
80001484:	02 34       	mov %d4,%d3
80001486:	19 c3 10 00 	ld.w %d3,[%a12]16
8000148a:	54 c2       	ld.w %d2,[%a12]
8000148c:	42 43       	add %d3,%d4
8000148e:	1b c2 00 20 	addi %d2,%d2,12
80001492:	06 22       	sh %d2,2
80001494:	01 d2 00 d6 	addsc.a %a13,%a13,%d2,0
80001498:	74 d3       	st.w [%a13],%d3

    return result;
}
8000149a:	02 82       	mov %d2,%d8
8000149c:	00 90       	ret 
    else if (config->comparator == 1)
8000149e:	df 14 05 00 	jeq %d4,1,800014a8 <IfxStm_initCompare+0x11e>
        result = FALSE;
800014a2:	82 08       	mov %d8,0
800014a4:	1d ff 8a ff 	j 800013b8 <IfxStm_initCompare+0x2e>
        comcon.B.MSIZE1  = config->compareSize;
800014a8:	19 54 0c 00 	ld.w %d4,[%a5]12
800014ac:	37 42 05 28 	insert %d2,%d2,%d4,16,5
        comcon.B.MSTART1 = config->compareOffset;
800014b0:	19 54 08 00 	ld.w %d4,[%a5]8
800014b4:	37 42 05 2c 	insert %d2,%d2,%d4,24,5
        icr.B.CMP1OS     = config->comparatorInterrupt;
800014b8:	19 54 04 00 	ld.w %d4,[%a5]4
800014bc:	67 43 06 30 	ins.t %d3,%d3,6,%d4,0
        result           = TRUE;
800014c0:	82 18       	mov %d8,1
800014c2:	1d ff 7b ff 	j 800013b8 <IfxStm_initCompare+0x2e>
            srcr = &(MODULE_SRC.STM.STM[index].SR1);
800014c6:	06 32       	sh %d2,3
800014c8:	c2 42       	add %d2,4
800014ca:	7b 40 00 4f 	movh %d4,61444
800014ce:	1b 04 49 48 	addi %d4,%d4,-31600
800014d2:	60 42       	mov.a %a2,%d4
800014d4:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800014d8:	1d ff 87 ff 	j 800013e6 <IfxStm_initCompare+0x5c>

800014dc <IfxStm_initCompareConfig>:


void IfxStm_initCompareConfig(IfxStm_CompareConfig *config)
{
800014dc:	40 ae       	mov.aa %a14,%sp
    config->comparator          = IfxStm_Comparator_0;
800014de:	82 02       	mov %d2,0
800014e0:	74 42       	st.w [%a4],%d2
    config->compareOffset       = IfxStm_ComparatorOffset_0;
800014e2:	59 42 08 00 	st.w [%a4]8,%d2
    config->compareSize         = IfxStm_ComparatorSize_32Bits;
800014e6:	3b f0 01 30 	mov %d3,31
800014ea:	59 43 0c 00 	st.w [%a4]12,%d3
    config->comparatorInterrupt = IfxStm_ComparatorInterrupt_ir0;     /*User must select the interrupt output */
800014ee:	59 42 04 00 	st.w [%a4]4,%d2
    config->ticks               = 0xFFFFFFFF;
800014f2:	82 f3       	mov %d3,-1
800014f4:	59 43 10 00 	st.w [%a4]16,%d3
    config->triggerPriority     = 0;
800014f8:	f9 42 14 00 	st.h [%a4]20,%d2
    config->typeOfService       = IfxSrc_Tos_cpu0;
800014fc:	59 42 18 00 	st.w [%a4]24,%d2
}
80001500:	00 90       	ret 

80001502 <IfxScuCcu_isOscillatorStable>:
    *cfg = IfxScuCcu_defaultErayPllConfig;
}


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
80001502:	40 ae       	mov.aa %a14,%sp
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
80001504:	6d 00 46 04 	call 80001d90 <IfxScuWdt_getCpuWatchdogPassword>
80001508:	02 28       	mov %d8,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
8000150a:	91 30 00 2f 	movh.a %a2,61443
8000150e:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
80001512:	54 23       	ld.w %d3,[%a2]
80001514:	8f 03 c6 31 	andn %d3,%d3,96
80001518:	74 23       	st.w [%a2],%d3

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
8000151a:	91 00 00 36 	movh.a %a3,24576
8000151e:	19 33 00 00 	ld.w %d3,[%a3]0 <60000000 <IfxScuCcu_xtalFrequency>>
80001522:	7b 00 b6 26 	movh %d2,27488
80001526:	1b b2 a6 2c 	addi %d2,%d2,-13717
8000152a:	73 23 68 20 	mul.u %e2,%d3,%d2
8000152e:	8f c3 1e 20 	sh %d2,%d3,-20
80001532:	c2 f2       	add %d2,-1
80001534:	54 23       	ld.w %d3,[%a2]
80001536:	37 23 05 38 	insert %d3,%d3,%d2,16,5
8000153a:	74 23       	st.w [%a2],%d3

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
8000153c:	54 23       	ld.w %d3,[%a2]
8000153e:	b7 13 01 31 	insert %d3,%d3,1,2,1
80001542:	74 23       	st.w [%a2],%d3
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
80001544:	3b 00 28 30 	mov %d3,640

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80001548:	1d 00 05 00 	j 80001552 <IfxScuCcu_isOscillatorStable+0x50>
    {
        TimeoutCtr--;
8000154c:	c2 f3       	add %d3,-1

        if (TimeoutCtr == 0)
8000154e:	df 03 25 00 	jeq %d3,0,80001598 <IfxScuCcu_isOscillatorStable+0x96>
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80001552:	91 30 00 2f 	movh.a %a2,61443
80001556:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
8000155a:	54 25       	ld.w %d5,[%a2]
8000155c:	6f 15 f8 7f 	jz.t %d5,1,8000154c <IfxScuCcu_isOscillatorStable+0x4a>
80001560:	54 25       	ld.w %d5,[%a2]
80001562:	6f 85 f5 7f 	jz.t %d5,8,8000154c <IfxScuCcu_isOscillatorStable+0x4a>
    boolean status     = 0;
80001566:	82 09       	mov %d9,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80001568:	02 84       	mov %d4,%d8
8000156a:	6d 00 aa 02 	call 80001abe <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000156e:	91 30 00 2f 	movh.a %a2,61443
80001572:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80001576:	54 23       	ld.w %d3,[%a2]
80001578:	b7 13 81 31 	insert %d3,%d3,1,3,1
8000157c:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000157e:	91 30 00 2f 	movh.a %a2,61443
80001582:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001586:	54 23       	ld.w %d3,[%a2]
80001588:	b7 13 81 31 	insert %d3,%d3,1,3,1
8000158c:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinitPw);
8000158e:	02 84       	mov %d4,%d8
80001590:	6d 00 1d 04 	call 80001dca <IfxScuWdt_setCpuEndinit>
    }

    return status;
}
80001594:	02 92       	mov %d2,%d9
80001596:	00 90       	ret 
            status = 1;
80001598:	82 19       	mov %d9,1
8000159a:	1d ff e7 ff 	j 80001568 <IfxScuCcu_isOscillatorStable+0x66>

8000159e <IfxScuCcu_getOscFrequency>:
{
8000159e:	40 ae       	mov.aa %a14,%sp
    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
800015a0:	91 30 00 2f 	movh.a %a2,61443
800015a4:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800015a8:	54 22       	ld.w %d2,[%a2]
800015aa:	37 02 62 2e 	extr.u %d2,%d2,28,2
800015ae:	df 02 10 00 	jeq %d2,0,800015ce <IfxScuCcu_getOscFrequency+0x30>
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
800015b2:	54 22       	ld.w %d2,[%a2]
800015b4:	37 02 62 2e 	extr.u %d2,%d2,28,2
800015b8:	df 12 04 00 	jeq %d2,1,800015c0 <IfxScuCcu_getOscFrequency+0x22>
        freq = 0.0f;
800015bc:	82 02       	mov %d2,0
}
800015be:	00 90       	ret 
        freq = (float32)IfxScuCcu_xtalFrequency;
800015c0:	91 00 00 26 	movh.a %a2,24576
800015c4:	19 22 00 00 	ld.w %d2,[%a2]0 <60000000 <IfxScuCcu_xtalFrequency>>
800015c8:	4b 02 61 21 	utof %d2,%d2
800015cc:	00 90       	ret 
        freq = IFXSCU_EVR_OSC_FREQUENCY;
800015ce:	7b f0 cb 24 	movh %d2,19647
800015d2:	1b 02 c2 2b 	addi %d2,%d2,-17376
800015d6:	00 90       	ret 

800015d8 <IfxScuCcu_getPllFrequency>:
{
800015d8:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
800015da:	6d ff e2 ff 	call 8000159e <IfxScuCcu_getOscFrequency>
800015de:	02 24       	mov %d4,%d2
    if (scu->PLLSTAT.B.VCOBYST == 1)
800015e0:	91 30 00 2f 	movh.a %a2,61443
800015e4:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800015e8:	19 23 14 00 	ld.w %d3,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
800015ec:	6f 03 27 80 	jnz.t %d3,0,8000163a <IfxScuCcu_getPllFrequency+0x62>
    else if (scu->PLLSTAT.B.FINDIS == 1)
800015f0:	91 30 00 2f 	movh.a %a2,61443
800015f4:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
800015f8:	19 22 14 00 	ld.w %d2,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
800015fc:	6f 32 2d 80 	jnz.t %d2,3,80001656 <IfxScuCcu_getPllFrequency+0x7e>
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80001600:	91 30 00 2f 	movh.a %a2,61443
80001604:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001608:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
8000160c:	37 02 e7 24 	extr.u %d2,%d2,9,7
80001610:	c2 12       	add %d2,1
80001612:	4b 02 41 21 	itof %d2,%d2
80001616:	4b 42 41 30 	mul.f %d3,%d2,%d4
8000161a:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
8000161e:	8f f4 07 41 	and %d4,%d4,127
80001622:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
80001626:	37 02 64 2c 	extr.u %d2,%d2,24,4
8000162a:	c2 12       	add %d2,1
8000162c:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80001630:	4b 02 41 21 	itof %d2,%d2
80001634:	4b 23 51 20 	div.f %d2,%d3,%d2
}
80001638:	00 90       	ret 
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
8000163a:	91 30 00 2f 	movh.a %a2,61443
8000163e:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001642:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001646:	37 02 67 28 	extr.u %d2,%d2,16,7
8000164a:	c2 12       	add %d2,1
8000164c:	4b 02 41 21 	itof %d2,%d2
80001650:	4b 24 51 20 	div.f %d2,%d4,%d2
80001654:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80001656:	91 30 00 2f 	movh.a %a2,61443
8000165a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
8000165e:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001662:	8f f4 07 41 	and %d4,%d4,127
80001666:	c2 14       	add %d4,1
80001668:	6d 00 7b 0e 	call 8000335e <__floatsidf>
8000166c:	0b 23 10 68 	mov %e6,%d3,%d2
80001670:	82 04       	mov %d4,0
80001672:	7b 80 19 54 	movh %d5,16792
80001676:	1b 45 78 5d 	addi %d5,%d5,-10364
8000167a:	6d 00 ca 0d 	call 8000320e <__divdf3>
8000167e:	0b 23 10 48 	mov %e4,%d3,%d2
80001682:	6d 00 a9 0e 	call 800033d4 <__truncdfsf2>
80001686:	00 90       	ret 

80001688 <IfxScuCcu_getSourceFrequency>:
{
80001688:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON0.B.CLKSEL)
8000168a:	91 30 00 2f 	movh.a %a2,61443
8000168e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001692:	54 22       	ld.w %d2,[%a2]
80001694:	37 02 62 2e 	extr.u %d2,%d2,28,2
80001698:	df 02 07 00 	jeq %d2,0,800016a6 <IfxScuCcu_getSourceFrequency+0x1e>
8000169c:	df 12 0a 80 	jne %d2,1,800016b0 <IfxScuCcu_getSourceFrequency+0x28>
        sourcefreq = IfxScuCcu_getPllFrequency();
800016a0:	6d ff 9c ff 	call 800015d8 <IfxScuCcu_getPllFrequency>
        break;
800016a4:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
800016a6:	7b f0 cb 24 	movh %d2,19647
800016aa:	1b 02 c2 2b 	addi %d2,%d2,-17376
800016ae:	00 90       	ret 
        sourcefreq = 0;
800016b0:	82 02       	mov %d2,0
}
800016b2:	00 90       	ret 

800016b4 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
800016b4:	40 ae       	mov.aa %a14,%sp
800016b6:	02 48       	mov %d8,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
800016b8:	6d ff e8 ff 	call 80001688 <IfxScuCcu_getSourceFrequency>
800016bc:	91 30 00 2f 	movh.a %a2,61443
800016c0:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800016c4:	54 23       	ld.w %d3,[%a2]
800016c6:	37 03 64 34 	extr.u %d3,%d3,8,4
800016ca:	4b 03 41 31 	itof %d3,%d3
800016ce:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
800016d2:	4b 28 41 40 	mul.f %d4,%d8,%d2
800016d6:	4b 04 71 41 	ftouz %d4,%d4
    uint32 stmCountBegin = STM0_TIM0.U;
800016da:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
800016de:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
800016e2:	a2 32       	sub %d2,%d3
800016e4:	3f 42 fd ff 	jlt.u %d2,%d4,800016de <IfxScuCcu_wait+0x2a>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
800016e8:	00 90       	ret 
	...

800016ec <IfxScuCcu_getSpbFrequency>:
{
800016ec:	40 ae       	mov.aa %a14,%sp
    sourceFrequency = IfxScuCcu_getSourceFrequency();
800016ee:	6d ff cd ff 	call 80001688 <IfxScuCcu_getSourceFrequency>
    switch (SCU_CCUCON0.B.LPDIV)
800016f2:	91 30 00 2f 	movh.a %a2,61443
800016f6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800016fa:	54 23       	ld.w %d3,[%a2]
800016fc:	37 03 64 36 	extr.u %d3,%d3,12,4
80001700:	ff 53 39 80 	jge.u %d3,5,80001772 <IfxScuCcu_getSpbFrequency+0x86>
80001704:	91 00 00 28 	movh.a %a2,32768
80001708:	d9 22 54 c1 	lea %a2,[%a2]5908 <80001714 <IfxScuCcu_getSpbFrequency+0x28>>
8000170c:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
80001710:	dc 02       	ji %a2
80001712:	00 00       	nop 
80001714:	1d 00 0a 00 	j 80001728 <IfxScuCcu_getSpbFrequency+0x3c>
80001718:	1d 00 19 00 	j 8000174a <IfxScuCcu_getSpbFrequency+0x5e>
8000171c:	1d 00 1c 00 	j 80001754 <IfxScuCcu_getSpbFrequency+0x68>
80001720:	1d 00 1f 00 	j 8000175e <IfxScuCcu_getSpbFrequency+0x72>
80001724:	1d 00 22 00 	j 80001768 <IfxScuCcu_getSpbFrequency+0x7c>
        if (SCU_CCUCON0.B.SPBDIV == 0)
80001728:	91 30 00 2f 	movh.a %a2,61443
8000172c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001730:	54 23       	ld.w %d3,[%a2]
80001732:	37 03 64 38 	extr.u %d3,%d3,16,4
80001736:	df 03 20 00 	jeq %d3,0,80001776 <IfxScuCcu_getSpbFrequency+0x8a>
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
8000173a:	54 23       	ld.w %d3,[%a2]
8000173c:	37 03 64 38 	extr.u %d3,%d3,16,4
80001740:	4b 03 41 31 	itof %d3,%d3
80001744:	4b 32 51 20 	div.f %d2,%d2,%d3
80001748:	00 90       	ret 
        spbFrequency = sourceFrequency / 30;
8000174a:	7b 00 1f 34 	movh %d3,16880
8000174e:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001752:	00 90       	ret 
        spbFrequency = sourceFrequency / 60;
80001754:	7b 00 27 34 	movh %d3,17008
80001758:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
8000175c:	00 90       	ret 
        spbFrequency = sourceFrequency / 120;
8000175e:	7b 00 2f 34 	movh %d3,17136
80001762:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001766:	00 90       	ret 
        spbFrequency = sourceFrequency / 240;
80001768:	7b 00 37 34 	movh %d3,17264
8000176c:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001770:	00 90       	ret 
    switch (SCU_CCUCON0.B.LPDIV)
80001772:	82 02       	mov %d2,0
80001774:	00 90       	ret 
            spbFrequency = 0.0f;
80001776:	82 02       	mov %d2,0
}
80001778:	00 90       	ret 

8000177a <IfxScuCcu_getSpbFrequency_end>:
	...

8000177c <IfxScuCcu_init>:
{
8000177c:	40 ae       	mov.aa %a14,%sp
8000177e:	40 4c       	mov.aa %a12,%a4
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80001780:	19 42 10 10 	ld.w %d2,[%a4]80
80001784:	91 00 00 26 	movh.a %a2,24576
80001788:	59 22 00 00 	st.w [%a2]0 <60000000 <IfxScuCcu_xtalFrequency>>,%d2
    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
8000178c:	6d 00 02 03 	call 80001d90 <IfxScuWdt_getCpuWatchdogPassword>
80001790:	02 2a       	mov %d10,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
80001792:	6d 00 11 03 	call 80001db4 <IfxScuWdt_getSafetyWatchdogPassword>
80001796:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80001798:	02 a4       	mov %d4,%d10
8000179a:	6d 00 92 01 	call 80001abe <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000179e:	91 30 00 2f 	movh.a %a2,61443
800017a2:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
800017a6:	54 2d       	ld.w %d13,[%a2]
800017a8:	37 0d e1 d1 	extr.u %d13,%d13,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
800017ac:	54 22       	ld.w %d2,[%a2]
800017ae:	b7 12 81 21 	insert %d2,%d2,1,3,1
800017b2:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
800017b4:	02 a4       	mov %d4,%d10
800017b6:	6d 00 0a 03 	call 80001dca <IfxScuWdt_setCpuEndinit>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800017ba:	02 84       	mov %d4,%d8
800017bc:	6d 00 a6 01 	call 80001b08 <IfxScuWdt_clearSafetyEndinit>
        while (SCU_CCUCON0.B.LCK != 0U)
800017c0:	91 30 00 2f 	movh.a %a2,61443
800017c4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
800017c8:	54 23       	ld.w %d3,[%a2]
800017ca:	bf 03 fb 7f 	jlt %d3,0,800017c0 <IfxScuCcu_init+0x44>
        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
800017ce:	54 22       	ld.w %d2,[%a2]
800017d0:	b7 02 02 2e 	insert %d2,%d2,0,28,2
800017d4:	74 22       	st.w [%a2],%d2
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
800017d6:	54 22       	ld.w %d2,[%a2]
800017d8:	b7 12 01 2f 	insert %d2,%d2,1,30,1
800017dc:	74 22       	st.w [%a2],%d2
        SCU_PLLCON0.B.SETFINDIS = 1;
800017de:	91 30 00 2f 	movh.a %a2,61443
800017e2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
800017e6:	54 22       	ld.w %d2,[%a2]
800017e8:	b7 12 01 22 	insert %d2,%d2,1,4,1
800017ec:	74 22       	st.w [%a2],%d2
        while (SCU_CCUCON1.B.LCK != 0U)
800017ee:	91 30 00 2f 	movh.a %a2,61443
800017f2:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800017f6:	54 23       	ld.w %d3,[%a2]
800017f8:	bf 03 fb 7f 	jlt %d3,0,800017ee <IfxScuCcu_init+0x72>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
800017fc:	54 22       	ld.w %d2,[%a2]
800017fe:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80001802:	74 22       	st.w [%a2],%d2
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80001804:	54 22       	ld.w %d2,[%a2]
80001806:	b7 12 01 2f 	insert %d2,%d2,1,30,1
8000180a:	74 22       	st.w [%a2],%d2
        status             |= IfxScuCcu_isOscillatorStable();
8000180c:	6d ff 7b fe 	call 80001502 <IfxScuCcu_isOscillatorStable>
80001810:	02 2c       	mov %d12,%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001812:	02 84       	mov %d4,%d8
80001814:	6d 00 00 03 	call 80001e14 <IfxScuWdt_setSafetyEndinit>
    if (status == 0)
80001818:	df 0c 28 00 	jeq %d12,0,80001868 <IfxScuCcu_init+0xec>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000181c:	02 84       	mov %d4,%d8
8000181e:	6d 00 75 01 	call 80001b08 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80001822:	91 30 00 2f 	movh.a %a2,61443
80001826:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
8000182a:	54 23       	ld.w %d3,[%a2]
8000182c:	8f 03 c4 31 	andn %d3,%d3,64
80001830:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001832:	02 84       	mov %d4,%d8
80001834:	6d 00 f0 02 	call 80001e14 <IfxScuWdt_setSafetyEndinit>
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80001838:	02 a4       	mov %d4,%d10
8000183a:	6d 00 42 01 	call 80001abe <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
8000183e:	91 30 00 2f 	movh.a %a2,61443
80001842:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80001846:	54 23       	ld.w %d3,[%a2]
80001848:	b7 13 81 31 	insert %d3,%d3,1,3,1
8000184c:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000184e:	91 30 00 2f 	movh.a %a2,61443
80001852:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001856:	54 23       	ld.w %d3,[%a2]
80001858:	67 d3 03 30 	ins.t %d3,%d3,3,%d13,0
8000185c:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000185e:	02 a4       	mov %d4,%d10
80001860:	6d 00 b5 02 	call 80001dca <IfxScuWdt_setCpuEndinit>
}
80001864:	02 c2       	mov %d2,%d12
80001866:	00 90       	ret 
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001868:	02 84       	mov %d4,%d8
8000186a:	6d 00 4f 01 	call 80001b08 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000186e:	91 30 00 2f 	movh.a %a2,61443
80001872:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001876:	54 23       	ld.w %d3,[%a2]
80001878:	6f 53 fb 7f 	jz.t %d3,5,8000186e <IfxScuCcu_init+0xf2>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
8000187c:	39 c3 0a 00 	ld.bu %d3,[%a12]10
80001880:	91 30 00 2f 	movh.a %a2,61443
80001884:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80001888:	54 22       	ld.w %d2,[%a2]
8000188a:	37 32 07 20 	insert %d2,%d2,%d3,0,7
8000188e:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80001890:	39 c3 08 00 	ld.bu %d3,[%a12]8
80001894:	91 30 00 2f 	movh.a %a2,61443
80001898:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
8000189c:	54 22       	ld.w %d2,[%a2]
8000189e:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
800018a2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
800018a4:	39 c3 09 00 	ld.bu %d3,[%a12]9
800018a8:	54 22       	ld.w %d2,[%a2]
800018aa:	37 32 87 24 	insert %d2,%d2,%d3,9,7
800018ae:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
800018b0:	54 22       	ld.w %d2,[%a2]
800018b2:	b7 12 01 23 	insert %d2,%d2,1,6,1
800018b6:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
800018b8:	54 22       	ld.w %d2,[%a2]
800018ba:	b7 02 01 28 	insert %d2,%d2,0,16,1
800018be:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
800018c0:	54 22       	ld.w %d2,[%a2]
800018c2:	b7 12 81 22 	insert %d2,%d2,1,5,1
800018c6:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
800018c8:	54 22       	ld.w %d2,[%a2]
800018ca:	b7 12 01 28 	insert %d2,%d2,1,16,1
800018ce:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.RESLD = 1;
800018d0:	54 22       	ld.w %d2,[%a2]
800018d2:	b7 12 01 29 	insert %d2,%d2,1,18,1
800018d6:	74 22       	st.w [%a2],%d2
                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800018d8:	7b 20 85 43 	movh %d4,14418
800018dc:	1b 74 71 4b 	addi %d4,%d4,-18665
800018e0:	6d ff ea fe 	call 800016b4 <IfxScuCcu_wait>
                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
800018e4:	91 30 00 2f 	movh.a %a2,61443
800018e8:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
800018ec:	54 23       	ld.w %d3,[%a2]
800018ee:	6f 23 fb 7f 	jz.t %d3,2,800018e4 <IfxScuCcu_init+0x168>
                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
800018f2:	91 30 00 2f 	movh.a %a2,61443
800018f6:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
800018fa:	54 22       	ld.w %d2,[%a2]
800018fc:	8f 12 c0 21 	andn %d2,%d2,1
80001900:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80001902:	91 30 00 2f 	movh.a %a2,61443
80001906:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
8000190a:	54 23       	ld.w %d3,[%a2]
8000190c:	bf 03 fb 7f 	jlt %d3,0,80001902 <IfxScuCcu_init+0x186>
                    SCU_CCUCON0.B.CLKSEL = 0x01;
80001910:	54 22       	ld.w %d2,[%a2]
80001912:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80001916:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80001918:	91 30 00 2f 	movh.a %a2,61443
8000191c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001920:	54 23       	ld.w %d3,[%a2]
80001922:	bf 03 fb 7f 	jlt %d3,0,80001918 <IfxScuCcu_init+0x19c>
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80001926:	19 c4 0c 00 	ld.w %d4,[%a12]12
8000192a:	6d ff c5 fe 	call 800016b4 <IfxScuCcu_wait>
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
8000192e:	91 30 00 2f 	movh.a %a2,61443
80001932:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001936:	54 23       	ld.w %d3,[%a2]
80001938:	19 c4 14 00 	ld.w %d4,[%a12]20 <f0036030 <_SMALL_DATA4_+0x6002e030>>
8000193c:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80001940:	19 c2 10 00 	ld.w %d2,[%a12]16
80001944:	26 42       	and %d2,%d4
80001946:	a6 23       	or %d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80001948:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon0.B.UP     = 1;
8000194c:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80001950:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON1.B.LCK != 0U)
80001952:	91 30 00 2f 	movh.a %a2,61443
80001956:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
8000195a:	54 23       	ld.w %d3,[%a2]
8000195c:	bf 03 fb 7f 	jlt %d3,0,80001952 <IfxScuCcu_init+0x1d6>
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80001960:	54 23       	ld.w %d3,[%a2]
80001962:	19 c4 1c 00 	ld.w %d4,[%a12]28
80001966:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
8000196a:	19 c2 18 00 	ld.w %d2,[%a12]24
8000196e:	26 42       	and %d2,%d4
80001970:	a6 23       	or %d3,%d2
                        ccucon1.B.INSEL = 1;
80001972:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon1.B.UP    = 1;
80001976:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON1     = ccucon1;
8000197a:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON2.B.LCK != 0U)
8000197c:	91 30 00 2f 	movh.a %a2,61443
80001980:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x6002e040>>
80001984:	54 23       	ld.w %d3,[%a2]
80001986:	bf 03 fb 7f 	jlt %d3,0,8000197c <IfxScuCcu_init+0x200>
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
8000198a:	54 23       	ld.w %d3,[%a2]
8000198c:	19 c4 24 00 	ld.w %d4,[%a12]36
80001990:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80001994:	19 c2 20 00 	ld.w %d2,[%a12]32
80001998:	26 42       	and %d2,%d4
8000199a:	a6 32       	or %d2,%d3
                        ccucon2.B.UP = 1;
8000199c:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON2  = ccucon2;
800019a0:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON5.B.LCK != 0U)
800019a2:	91 30 00 2f 	movh.a %a2,61443
800019a6:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
800019aa:	54 23       	ld.w %d3,[%a2]
800019ac:	bf 03 fb 7f 	jlt %d3,0,800019a2 <IfxScuCcu_init+0x226>
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800019b0:	54 23       	ld.w %d3,[%a2]
800019b2:	19 c4 2c 00 	ld.w %d4,[%a12]44
800019b6:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
800019ba:	19 c2 28 00 	ld.w %d2,[%a12]40
800019be:	26 42       	and %d2,%d4
800019c0:	a6 32       	or %d2,%d3
                        ccucon5.B.UP = 1;
800019c2:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON5  = ccucon5;
800019c6:	74 22       	st.w [%a2],%d2
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800019c8:	91 30 00 2f 	movh.a %a2,61443
800019cc:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x6002e080>>
800019d0:	54 23       	ld.w %d3,[%a2]
800019d2:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036080 <_SMALL_DATA4_+0x6002e080>>
800019d6:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
800019da:	19 c2 30 00 	ld.w %d2,[%a12]48
800019de:	26 42       	and %d2,%d4
800019e0:	a6 32       	or %d2,%d3
                        SCU_CCUCON6 = ccucon6;
800019e2:	74 22       	st.w [%a2],%d2
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800019e4:	91 30 00 2f 	movh.a %a2,61443
800019e8:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x6002e084>>
800019ec:	54 23       	ld.w %d3,[%a2]
800019ee:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f0036084 <_SMALL_DATA4_+0x6002e084>>
800019f2:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
800019f6:	19 c2 38 00 	ld.w %d2,[%a12]56
800019fa:	26 42       	and %d2,%d4
800019fc:	a6 32       	or %d2,%d3
                        SCU_CCUCON7 = ccucon7;
800019fe:	74 22       	st.w [%a2],%d2
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80001a00:	91 30 00 2f 	movh.a %a2,61443
80001a04:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80001a08:	54 23       	ld.w %d3,[%a2]
80001a0a:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80001a0e:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80001a12:	19 c2 00 10 	ld.w %d2,[%a12]64
80001a16:	26 42       	and %d2,%d4
80001a18:	a6 32       	or %d2,%d3
                        SCU_CCUCON8 = ccucon8;
80001a1a:	74 22       	st.w [%a2],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001a1c:	02 84       	mov %d4,%d8
80001a1e:	6d 00 fb 01 	call 80001e14 <IfxScuWdt_setSafetyEndinit>
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80001a22:	91 00 80 df 	movh.a %a13,63488
80001a26:	d9 dd 14 02 	lea %a13,[%a13]8212 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80001a2a:	54 d9       	ld.w %d9,[%a13]
80001a2c:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80001a30:	0f 49 e0 90 	andn %d9,%d9,%d4
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80001a34:	19 c2 08 10 	ld.w %d2,[%a12]72
80001a38:	26 42       	and %d2,%d4
80001a3a:	a6 29       	or %d9,%d2
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80001a3c:	02 a4       	mov %d4,%d10
80001a3e:	6d 00 40 00 	call 80001abe <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80001a42:	74 d9       	st.w [%a13],%d9
                IfxScuWdt_setCpuEndinit(endinit_pw);
80001a44:	02 a4       	mov %d4,%d10
80001a46:	6d 00 c2 01 	call 80001dca <IfxScuWdt_setCpuEndinit>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80001a4a:	02 c9       	mov %d9,%d12
80001a4c:	1d 00 0d 00 	j 80001a66 <IfxScuCcu_init+0x2ea>
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80001a50:	99 c2 04 00 	ld.a %a2,[%a12]4
80001a54:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001a58:	19 24 04 00 	ld.w %d4,[%a2]4
80001a5c:	6d ff 2c fe 	call 800016b4 <IfxScuCcu_wait>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80001a60:	c2 19       	add %d9,1
80001a62:	8f f9 0f 91 	and %d9,%d9,255
80001a66:	14 c3       	ld.bu %d3,[%a12]
80001a68:	7f 39 da fe 	jge.u %d9,%d3,8000181c <IfxScuCcu_init+0xa0>
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001a6c:	02 84       	mov %d4,%d8
80001a6e:	6d 00 4d 00 	call 80001b08 <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80001a72:	91 30 00 2f 	movh.a %a2,61443
80001a76:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001a7a:	54 23       	ld.w %d3,[%a2]
80001a7c:	6f 53 fb 7f 	jz.t %d3,5,80001a72 <IfxScuCcu_init+0x2f6>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80001a80:	53 c9 20 b0 	mul %d11,%d9,12
80001a84:	99 c2 04 00 	ld.a %a2,[%a12]4
80001a88:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001a8c:	14 24       	ld.bu %d4,[%a2]
80001a8e:	91 30 00 2f 	movh.a %a2,61443
80001a92:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80001a96:	54 23       	ld.w %d3,[%a2]
80001a98:	37 43 07 30 	insert %d3,%d3,%d4,0,7
80001a9c:	74 23       	st.w [%a2],%d3
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001a9e:	02 84       	mov %d4,%d8
80001aa0:	6d 00 ba 01 	call 80001e14 <IfxScuWdt_setSafetyEndinit>
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
80001aa4:	99 c2 04 00 	ld.a %a2,[%a12]4
80001aa8:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
80001aac:	d9 22 08 00 	lea %a2,[%a2]8
80001ab0:	d4 22       	ld.a %a2,[%a2]
80001ab2:	bd 02 cf 7f 	jz.a %a2,80001a50 <IfxScuCcu_init+0x2d4>
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
80001ab6:	2d 02 00 00 	calli %a2
80001aba:	1d ff cb ff 	j 80001a50 <IfxScuCcu_init+0x2d4>

80001abe <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
80001abe:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001ac0:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001ac4:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80001ac8:	7b 30 00 3f 	movh %d3,61443
80001acc:	1b 03 10 36 	addi %d3,%d3,24832
80001ad0:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001ad4:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001ad6:	54 22       	ld.w %d2,[%a2]
80001ad8:	6f 12 0b 00 	jz.t %d2,1,80001aee <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001adc:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001ae0:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001ae4:	54 22       	ld.w %d2,[%a2]
80001ae6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001aea:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001aec:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001aee:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001af2:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001af6:	54 22       	ld.w %d2,[%a2]
80001af8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001afc:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001afe:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80001b00:	54 22       	ld.w %d2,[%a2]
80001b02:	6f 02 ff ff 	jnz.t %d2,0,80001b00 <IfxScuWdt_clearCpuEndinit+0x42>
}
80001b06:	00 90       	ret 

80001b08 <IfxScuWdt_clearSafetyEndinit>:


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
80001b08:	40 ae       	mov.aa %a14,%sp
80001b0a:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001b0e:	91 30 00 2f 	movh.a %a2,61443
80001b12:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001b16:	54 22       	ld.w %d2,[%a2]
80001b18:	6f 12 0b 00 	jz.t %d2,1,80001b2e <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b1c:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001b20:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001b24:	54 22       	ld.w %d2,[%a2]
80001b26:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b2a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001b2c:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b2e:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001b32:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001b36:	91 30 00 2f 	movh.a %a2,61443
80001b3a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001b3e:	54 22       	ld.w %d2,[%a2]
80001b40:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b44:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001b46:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001b48:	91 30 00 2f 	movh.a %a2,61443
80001b4c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001b50:	54 22       	ld.w %d2,[%a2]
80001b52:	6f 02 fb ff 	jnz.t %d2,0,80001b48 <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80001b56:	00 90       	ret 

80001b58 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80001b58:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001b5a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001b5e:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80001b62:	7b 30 00 3f 	movh %d3,61443
80001b66:	1b 03 10 36 	addi %d3,%d3,24832
80001b6a:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001b6e:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001b70:	54 22       	ld.w %d2,[%a2]
80001b72:	6f 12 0b 00 	jz.t %d2,1,80001b88 <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b76:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001b7a:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b7e:	54 22       	ld.w %d2,[%a2]
80001b80:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b84:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001b86:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b88:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001b8a:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b8e:	54 22       	ld.w %d2,[%a2]
80001b90:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b94:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001b96:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001b98:	54 22       	ld.w %d2,[%a2]
80001b9a:	6f 02 ff ff 	jnz.t %d2,0,80001b98 <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80001b9e:	d9 23 04 00 	lea %a3,[%a2]4
80001ba2:	19 22 04 00 	ld.w %d2,[%a2]4
80001ba6:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001baa:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001bac:	54 22       	ld.w %d2,[%a2]
80001bae:	6f 12 09 00 	jz.t %d2,1,80001bc0 <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001bb2:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001bb6:	54 22       	ld.w %d2,[%a2]
80001bb8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001bbc:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001bbe:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001bc0:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001bc4:	54 22       	ld.w %d2,[%a2]
80001bc6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001bca:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001bcc:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80001bce:	54 22       	ld.w %d2,[%a2]
80001bd0:	6f 02 ff 7f 	jz.t %d2,0,80001bce <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80001bd4:	00 90       	ret 

80001bd6 <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
80001bd6:	40 ae       	mov.aa %a14,%sp
80001bd8:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001bdc:	91 30 00 2f 	movh.a %a2,61443
80001be0:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001be4:	54 22       	ld.w %d2,[%a2]
80001be6:	6f 12 0b 00 	jz.t %d2,1,80001bfc <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001bea:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001bee:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001bf2:	54 22       	ld.w %d2,[%a2]
80001bf4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001bf8:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001bfa:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001bfc:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001bfe:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001c02:	91 30 00 2f 	movh.a %a2,61443
80001c06:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001c0a:	54 22       	ld.w %d2,[%a2]
80001c0c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001c10:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001c12:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001c14:	91 30 00 2f 	movh.a %a2,61443
80001c18:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001c1c:	54 22       	ld.w %d2,[%a2]
80001c1e:	6f 02 fb ff 	jnz.t %d2,0,80001c14 <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80001c22:	91 30 00 2f 	movh.a %a2,61443
80001c26:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80001c2a:	54 22       	ld.w %d2,[%a2]
80001c2c:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001c30:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001c32:	91 30 00 2f 	movh.a %a2,61443
80001c36:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001c3a:	54 22       	ld.w %d2,[%a2]
80001c3c:	6f 12 09 00 	jz.t %d2,1,80001c4e <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001c40:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001c44:	54 22       	ld.w %d2,[%a2]
80001c46:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001c4a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001c4c:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001c4e:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001c52:	91 30 00 2f 	movh.a %a2,61443
80001c56:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001c5a:	54 22       	ld.w %d2,[%a2]
80001c5c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001c60:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001c62:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001c64:	91 30 00 2f 	movh.a %a2,61443
80001c68:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001c6c:	54 22       	ld.w %d2,[%a2]
80001c6e:	6f 02 fb 7f 	jz.t %d2,0,80001c64 <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80001c72:	00 90       	ret 

80001c74 <IfxScuWdt_enableCpuWatchdog>:


void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
80001c74:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001c76:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001c7a:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80001c7e:	7b 30 00 3f 	movh %d3,61443
80001c82:	1b 03 10 36 	addi %d3,%d3,24832
80001c86:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001c8a:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001c8c:	54 22       	ld.w %d2,[%a2]
80001c8e:	6f 12 0b 00 	jz.t %d2,1,80001ca4 <IfxScuWdt_enableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c92:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001c96:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001c9a:	54 22       	ld.w %d2,[%a2]
80001c9c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ca0:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ca2:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ca4:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001ca6:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001caa:	54 22       	ld.w %d2,[%a2]
80001cac:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001cb0:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001cb2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001cb4:	54 22       	ld.w %d2,[%a2]
80001cb6:	6f 02 ff ff 	jnz.t %d2,0,80001cb4 <IfxScuWdt_enableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
80001cba:	d9 23 04 00 	lea %a3,[%a2]4
80001cbe:	19 22 04 00 	ld.w %d2,[%a2]4
80001cc2:	8f 82 c0 21 	andn %d2,%d2,8
80001cc6:	74 32       	st.w [%a3],%d2
    if (watchdog->CON0.B.LCK)
80001cc8:	54 22       	ld.w %d2,[%a2]
80001cca:	6f 12 09 00 	jz.t %d2,1,80001cdc <IfxScuWdt_enableCpuWatchdog+0x68>
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001cce:	8f 14 40 31 	or %d3,%d4,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001cd2:	54 22       	ld.w %d2,[%a2]
80001cd4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001cd8:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001cda:	74 22       	st.w [%a2],%d2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001cdc:	8f 34 40 41 	or %d4,%d4,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001ce0:	54 22       	ld.w %d2,[%a2]
80001ce2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ce6:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ce8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001cea:	54 22       	ld.w %d2,[%a2]
80001cec:	6f 02 ff 7f 	jz.t %d2,0,80001cea <IfxScuWdt_enableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80001cf0:	00 90       	ret 

80001cf2 <IfxScuWdt_enableSafetyWatchdog>:


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
80001cf2:	40 ae       	mov.aa %a14,%sp
80001cf4:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001cf8:	91 30 00 2f 	movh.a %a2,61443
80001cfc:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001d00:	54 22       	ld.w %d2,[%a2]
80001d02:	6f 12 0b 00 	jz.t %d2,1,80001d18 <IfxScuWdt_enableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001d06:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001d0a:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001d0e:	54 22       	ld.w %d2,[%a2]
80001d10:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001d14:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001d16:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001d18:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001d1a:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001d1e:	91 30 00 2f 	movh.a %a2,61443
80001d22:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001d26:	54 22       	ld.w %d2,[%a2]
80001d28:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001d2c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001d2e:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001d30:	91 30 00 2f 	movh.a %a2,61443
80001d34:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001d38:	54 22       	ld.w %d2,[%a2]
80001d3a:	6f 02 fb ff 	jnz.t %d2,0,80001d30 <IfxScuWdt_enableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
80001d3e:	91 30 00 2f 	movh.a %a2,61443
80001d42:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
80001d46:	54 22       	ld.w %d2,[%a2]
80001d48:	8f 82 c0 21 	andn %d2,%d2,8
80001d4c:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
80001d4e:	91 30 00 2f 	movh.a %a2,61443
80001d52:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001d56:	54 22       	ld.w %d2,[%a2]
80001d58:	6f 12 09 00 	jz.t %d2,1,80001d6a <IfxScuWdt_enableSafetyWatchdog+0x78>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001d5c:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001d60:	54 22       	ld.w %d2,[%a2]
80001d62:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001d66:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001d68:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001d6a:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001d6e:	91 30 00 2f 	movh.a %a2,61443
80001d72:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001d76:	54 22       	ld.w %d2,[%a2]
80001d78:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001d7c:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001d7e:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001d80:	91 30 00 2f 	movh.a %a2,61443
80001d84:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001d88:	54 22       	ld.w %d2,[%a2]
80001d8a:	6f 02 fb 7f 	jz.t %d2,0,80001d80 <IfxScuWdt_enableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80001d8e:	00 90       	ret 

80001d90 <IfxScuWdt_getCpuWatchdogPassword>:


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
80001d90:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001d92:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001d96:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80001d9a:	7b 30 00 3f 	movh %d3,61443
80001d9e:	1b 03 10 36 	addi %d3,%d3,24832
80001da2:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
80001da6:	60 22       	mov.a %a2,%d2
80001da8:	54 22       	ld.w %d2,[%a2]
80001daa:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80001dae:	8f f2 83 21 	xor %d2,%d2,63
80001db2:	00 90       	ret 

80001db4 <IfxScuWdt_getSafetyWatchdogPassword>:
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
80001db4:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
80001db6:	91 30 00 2f 	movh.a %a2,61443
80001dba:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001dbe:	54 22       	ld.w %d2,[%a2]
80001dc0:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80001dc4:	8f f2 83 21 	xor %d2,%d2,63
80001dc8:	00 90       	ret 

80001dca <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
80001dca:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001dcc:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001dd0:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80001dd4:	7b 30 00 3f 	movh %d3,61443
80001dd8:	1b 03 10 36 	addi %d3,%d3,24832
80001ddc:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001de0:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001de2:	54 22       	ld.w %d2,[%a2]
80001de4:	6f 12 0b 00 	jz.t %d2,1,80001dfa <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001de8:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001dec:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001df0:	54 22       	ld.w %d2,[%a2]
80001df2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001df6:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001df8:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001dfa:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001dfe:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001e02:	54 22       	ld.w %d2,[%a2]
80001e04:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001e08:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001e0a:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001e0c:	54 22       	ld.w %d2,[%a2]
80001e0e:	6f 02 ff 7f 	jz.t %d2,0,80001e0c <IfxScuWdt_setCpuEndinit+0x42>
}
80001e12:	00 90       	ret 

80001e14 <IfxScuWdt_setSafetyEndinit>:


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
80001e14:	40 ae       	mov.aa %a14,%sp
80001e16:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001e1a:	91 30 00 2f 	movh.a %a2,61443
80001e1e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001e22:	54 22       	ld.w %d2,[%a2]
80001e24:	6f 12 0b 00 	jz.t %d2,1,80001e3a <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001e28:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001e2c:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001e30:	54 22       	ld.w %d2,[%a2]
80001e32:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001e36:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001e38:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001e3a:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001e3e:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001e42:	91 30 00 2f 	movh.a %a2,61443
80001e46:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001e4a:	54 22       	ld.w %d2,[%a2]
80001e4c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001e50:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001e52:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001e54:	91 30 00 2f 	movh.a %a2,61443
80001e58:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80001e5c:	54 22       	ld.w %d2,[%a2]
80001e5e:	6f 02 fb 7f 	jz.t %d2,0,80001e54 <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80001e62:	00 90       	ret 

80001e64 <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80001e64:	40 ae       	mov.aa %a14,%sp
80001e66:	40 4c       	mov.aa %a12,%a4
80001e68:	02 5a       	mov %d10,%d5
80001e6a:	8f f4 0f c1 	and %d12,%d4,255
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80001e6e:	80 42       	mov.d %d2,%a4
80001e70:	1b 02 01 b0 	addi %d11,%d2,16
    uint8                 iocrIndex = (pinIndex / 4);
80001e74:	37 04 66 91 	extr.u %d9,%d4,2,6
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80001e78:	8f 34 00 41 	and %d4,%d4,3
80001e7c:	8f 34 00 80 	sh %d8,%d4,3

    if (port == &MODULE_P40)
80001e80:	7b 40 00 2f 	movh %d2,61444
80001e84:	1b 02 00 2e 	addi %d2,%d2,-8192
80001e88:	80 43       	mov.d %d3,%a4
80001e8a:	5f 23 12 00 	jeq %d3,%d2,80001eae <IfxPort_setPinMode+0x4a>
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
        IfxScuWdt_setCpuEndinit(passwd);
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80001e8e:	8f 29 00 20 	sh %d2,%d9,2
80001e92:	60 b2       	mov.a %a2,%d11
80001e94:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001e98:	3b f0 0f 40 	mov %d4,255
80001e9c:	0f 84 00 40 	sh %d4,%d4,%d8
80001ea0:	0f 8a 00 20 	sh %d2,%d10,%d8
                     ::"a"(address), "d"(mask), "d"((long long)value));
80001ea4:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
80001ea6:	02 43       	mov %d3,%d4
80001ea8:	49 22 40 08 	ldmst [%a2]0,%e2
}
80001eac:	00 90       	ret 
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001eae:	6d ff 71 ff 	call 80001d90 <IfxScuWdt_getCpuWatchdogPassword>
80001eb2:	02 2d       	mov %d13,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80001eb4:	02 24       	mov %d4,%d2
80001eb6:	6d ff 04 fe 	call 80001abe <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80001eba:	d9 c2 20 10 	lea %a2,[%a12]96
80001ebe:	19 c2 20 10 	ld.w %d2,[%a12]96
80001ec2:	d7 02 01 2c 	insert %d2,%d2,0,%d12,1
80001ec6:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(passwd);
80001ec8:	02 d4       	mov %d4,%d13
80001eca:	6d ff 80 ff 	call 80001dca <IfxScuWdt_setCpuEndinit>
80001ece:	1d ff e0 ff 	j 80001e8e <IfxPort_setPinMode+0x2a>

80001ed2 <IfxCpu_Trap_memoryManagementError>:
{
80001ed2:	40 ae       	mov.aa %a14,%sp
80001ed4:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001ed6:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001ed8:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
80001edc:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001ee0:	8f 72 00 21 	and %d2,%d2,7
80001ee4:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001ee8:	80 22       	mov.d %d2,%a2
80001eea:	0f 54 a0 30 	or %d3,%d4,%d5
80001eee:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80001ef2:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001ef6:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001ef8:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001efc:	00 80       	rfe 
}
80001efe:	00 90       	ret 

80001f00 <IfxCpu_Trap_internalProtectionError>:
{
80001f00:	40 ae       	mov.aa %a14,%sp
80001f02:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001f04:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001f06:	b7 14 18 44 	insert %d4,%d4,1,8,24
80001f0a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001f0e:	8f 72 00 21 	and %d2,%d2,7
80001f12:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001f16:	80 22       	mov.d %d2,%a2
80001f18:	0f 54 a0 30 	or %d3,%d4,%d5
80001f1c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
80001f20:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001f24:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001f26:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001f2a:	00 80       	rfe 
}
80001f2c:	00 90       	ret 

80001f2e <IfxCpu_Trap_instructionError>:
{
80001f2e:	40 ae       	mov.aa %a14,%sp
80001f30:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001f32:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001f34:	b7 24 18 44 	insert %d4,%d4,2,8,24
80001f38:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001f3c:	8f 72 00 21 	and %d2,%d2,7
80001f40:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001f44:	80 22       	mov.d %d2,%a2
80001f46:	0f 54 a0 30 	or %d3,%d4,%d5
80001f4a:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
80001f4e:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001f52:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001f54:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001f58:	00 80       	rfe 
}
80001f5a:	00 90       	ret 

80001f5c <IfxCpu_Trap_contextManagementError>:
{
80001f5c:	40 ae       	mov.aa %a14,%sp
80001f5e:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001f60:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001f62:	b7 34 18 44 	insert %d4,%d4,3,8,24
80001f66:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001f6a:	8f 72 00 21 	and %d2,%d2,7
80001f6e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001f72:	80 22       	mov.d %d2,%a2
80001f74:	0f 54 a0 30 	or %d3,%d4,%d5
80001f78:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80001f7c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001f80:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001f82:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001f86:	00 80       	rfe 
}
80001f88:	00 90       	ret 

80001f8a <IfxCpu_Trap_busError>:
{
80001f8a:	40 ae       	mov.aa %a14,%sp
80001f8c:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001f8e:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001f90:	b7 44 18 44 	insert %d4,%d4,4,8,24
80001f94:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001f98:	8f 72 00 21 	and %d2,%d2,7
80001f9c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001fa0:	80 22       	mov.d %d2,%a2
80001fa2:	0f 54 a0 30 	or %d3,%d4,%d5
80001fa6:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
80001faa:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001fae:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001fb0:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001fb4:	00 80       	rfe 
}
80001fb6:	00 90       	ret 

80001fb8 <IfxCpu_Trap_assertion>:
{
80001fb8:	40 ae       	mov.aa %a14,%sp
80001fba:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001fbc:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001fbe:	8f f4 0f 41 	and %d4,%d4,255
80001fc2:	3b 00 50 20 	mov %d2,1280
80001fc6:	a6 24       	or %d4,%d2
80001fc8:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001fcc:	8f 72 00 21 	and %d2,%d2,7
80001fd0:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001fd4:	80 22       	mov.d %d2,%a2
80001fd6:	0f 54 a0 30 	or %d3,%d4,%d5
80001fda:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80001fde:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001fe2:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001fe4:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001fe8:	00 80       	rfe 
}
80001fea:	00 90       	ret 

80001fec <IfxCpu_Trap_systemCall_Cpu0>:
{
80001fec:	40 ae       	mov.aa %a14,%sp
80001fee:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001ff0:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001ff2:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001ff6:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001ffa:	8f 72 00 21 	and %d2,%d2,7
80001ffe:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80002002:	80 22       	mov.d %d2,%a2
80002004:	0f 54 a0 30 	or %d3,%d4,%d5
80002008:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
8000200c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80002010:	0d 00 40 02 	rslcx 
    __asm("rfe");
80002014:	00 80       	rfe 
}
80002016:	00 90       	ret 

80002018 <IfxCpu_Trap_systemCall_Cpu1>:
{
80002018:	40 ae       	mov.aa %a14,%sp
8000201a:	20 08       	sub.a %sp,8
8000201c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000201e:	b7 64 18 44 	insert %d4,%d4,6,8,24
80002022:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80002026:	8f 72 00 21 	and %d2,%d2,7
8000202a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000202e:	80 22       	mov.d %d2,%a2
80002030:	0f 54 a0 30 	or %d3,%d4,%d5
80002034:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80002038:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000203c:	0d 00 40 02 	rslcx 
    __asm("rfe");
80002040:	00 80       	rfe 
}
80002042:	00 90       	ret 

80002044 <IfxCpu_Trap_systemCall_Cpu2>:
{
80002044:	40 ae       	mov.aa %a14,%sp
80002046:	20 08       	sub.a %sp,8
80002048:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000204a:	b7 64 18 44 	insert %d4,%d4,6,8,24
8000204e:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80002052:	8f 72 00 21 	and %d2,%d2,7
80002056:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000205a:	80 22       	mov.d %d2,%a2
8000205c:	0f 54 a0 30 	or %d3,%d4,%d5
80002060:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80002064:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80002068:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000206c:	00 80       	rfe 
}
8000206e:	00 90       	ret 

80002070 <IfxCpu_Trap_nonMaskableInterrupt>:
{
80002070:	40 ae       	mov.aa %a14,%sp
80002072:	20 08       	sub.a %sp,8
80002074:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80002076:	b7 74 18 44 	insert %d4,%d4,7,8,24
8000207a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000207e:	8f 72 00 21 	and %d2,%d2,7
80002082:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80002086:	80 22       	mov.d %d2,%a2
80002088:	0f 54 a0 30 	or %d3,%d4,%d5
8000208c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
80002090:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80002094:	0d 00 40 02 	rslcx 
    __asm("rfe");
80002098:	00 80       	rfe 
}
8000209a:	00 90       	ret 

8000209c <IfxCpu_getIndex>:
    return cpuMode;
}


IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
{
8000209c:	40 ae       	mov.aa %a14,%sp
    IfxCpu_ResourceCpu result;
    uint32             index;
    result = IfxCpu_ResourceCpu_none;

    for (index = 0; index < IFXCPU_NUM_MODULES; index++)
8000209e:	82 02       	mov %d2,0
800020a0:	1d 00 03 00 	j 800020a6 <IfxCpu_getIndex+0xa>
800020a4:	c2 12       	add %d2,1
800020a6:	ff 32 18 80 	jge.u %d2,3,800020d6 <IfxCpu_getIndex+0x3a>
    {
        if (IfxCpu_cfg_indexMap[index].module == cpu)
800020aa:	8f 32 00 30 	sh %d3,%d2,3
800020ae:	91 00 00 28 	movh.a %a2,32768
800020b2:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
800020b6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800020ba:	54 23       	ld.w %d3,[%a2]
800020bc:	80 44       	mov.d %d4,%a4
800020be:	5f 43 f3 ff 	jne %d3,%d4,800020a4 <IfxCpu_getIndex+0x8>
        {
            result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
800020c2:	06 32       	sh %d2,3
800020c4:	91 00 00 28 	movh.a %a2,32768
800020c8:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
800020cc:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800020d0:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
800020d4:	00 90       	ret 
    result = IfxCpu_ResourceCpu_none;
800020d6:	82 32       	mov %d2,3
        }
    }

    return result;
}
800020d8:	00 90       	ret 

800020da <IfxCpu_getCoreMode>:
{
800020da:	40 ae       	mov.aa %a14,%sp
800020dc:	80 48       	mov.d %d8,%a4
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
800020de:	6d ff df ff 	call 8000209c <IfxCpu_getIndex>


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800020e2:	4d c0 e1 3f 	mfcr %d3,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800020e6:	8f 73 00 31 	and %d3,%d3,7
    if (IfxCpu_getCoreIndex() != index)
800020ea:	5f 32 22 00 	jeq %d2,%d3,8000212e <IfxCpu_getCoreMode+0x54>
        dbgsr = cpu->DBGSR;
800020ee:	bb 00 d0 3f 	mov.u %d3,64768
800020f2:	60 82       	mov.a %a2,%d8
800020f4:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800020f8:	54 23       	ld.w %d3,[%a2]
    if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
800020fa:	37 03 e2 40 	extr.u %d4,%d3,1,2
800020fe:	df 14 1c 00 	jeq %d4,1,80002136 <IfxCpu_getCoreMode+0x5c>
        if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
80002102:	df 04 1c 80 	jne %d4,0,8000213a <IfxCpu_getCoreMode+0x60>
            pmcsr_val = &MODULE_SCU.PMCSR[index];
80002106:	06 22       	sh %d2,2
80002108:	7b 30 00 3f 	movh %d3,61443
8000210c:	1b 43 0d 36 	addi %d3,%d3,24788
80002110:	60 32       	mov.a %a2,%d3
80002112:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
            if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
80002116:	54 22       	ld.w %d2,[%a2]
80002118:	37 02 63 24 	extr.u %d2,%d2,8,3
8000211c:	df 12 11 00 	jeq %d2,1,8000213e <IfxCpu_getCoreMode+0x64>
                if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
80002120:	54 22       	ld.w %d2,[%a2]
80002122:	37 02 63 24 	extr.u %d2,%d2,8,3
80002126:	df 32 0e 00 	jeq %d2,3,80002142 <IfxCpu_getCoreMode+0x68>
    cpuMode = IfxCpu_CoreMode_unknown;
8000212a:	82 52       	mov %d2,5
8000212c:	00 90       	ret 
        dbgsr.U = __mfcr(CPU_DBGSR);
8000212e:	4d 00 d0 3f 	mfcr %d3,$dbgsr
80002132:	1d ff e4 ff 	j 800020fa <IfxCpu_getCoreMode+0x20>
        cpuMode = IfxCpu_CoreMode_halt;
80002136:	82 02       	mov %d2,0
80002138:	00 90       	ret 
            cpuMode = IfxCpu_CoreMode_unknown;
8000213a:	82 52       	mov %d2,5
8000213c:	00 90       	ret 
                cpuMode = IfxCpu_CoreMode_run;
8000213e:	82 12       	mov %d2,1
80002140:	00 90       	ret 
                    cpuMode = IfxCpu_CoreMode_idle;
80002142:	82 22       	mov %d2,2
}
80002144:	00 90       	ret 

80002146 <IfxCpu_setCoreMode>:
    *lock = 0;
}


boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
{
80002146:	40 ae       	mov.aa %a14,%sp
80002148:	80 4c       	mov.d %d12,%a4
8000214a:	02 48       	mov %d8,%d4
    uint8              reqslp;
    boolean            retValue;
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
8000214c:	6d ff a8 ff 	call 8000209c <IfxCpu_getIndex>
80002150:	02 2a       	mov %d10,%d2

    /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
80002152:	8b 08 20 42 	ne %d4,%d8,0
80002156:	8b 38 20 32 	ne %d3,%d8,3
8000215a:	26 43       	and %d3,%d4
                || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
8000215c:	df 03 0a 00 	jeq %d3,0,80002170 <IfxCpu_setCoreMode+0x2a>
80002160:	df 48 05 00 	jeq %d8,4,8000216a <IfxCpu_setCoreMode+0x24>
80002164:	82 19       	mov %d9,1
80002166:	1d 00 06 00 	j 80002172 <IfxCpu_setCoreMode+0x2c>
8000216a:	82 09       	mov %d9,0
8000216c:	1d 00 03 00 	j 80002172 <IfxCpu_setCoreMode+0x2c>
80002170:	82 09       	mov %d9,0
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
80002172:	8f f9 0f 91 	and %d9,%d9,255

    reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
80002176:	8b 28 00 82 	eq %d8,%d8,2

    if (retValue == TRUE)
8000217a:	df 09 04 80 	jne %d9,0,80002182 <IfxCpu_setCoreMode+0x3c>
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
        }
    }

    return retValue;
}
8000217e:	02 92       	mov %d2,%d9
80002180:	00 90       	ret 
    reg.U = __mfcr(CPU_CORE_ID);
80002182:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80002186:	8f 72 00 21 	and %d2,%d2,7
        if (IfxCpu_getCoreIndex() != index)
8000218a:	5f 2a 24 00 	jeq %d10,%d2,800021d2 <IfxCpu_setCoreMode+0x8c>
            uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
8000218e:	6d ff 13 fe 	call 80001db4 <IfxScuWdt_getSafetyWatchdogPassword>
80002192:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
80002194:	02 24       	mov %d4,%d2
80002196:	6d ff b9 fc 	call 80001b08 <IfxScuWdt_clearSafetyEndinit>
            MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
8000219a:	1b 5a 03 20 	addi %d2,%d10,53
8000219e:	06 22       	sh %d2,2
800021a0:	7b 30 00 3f 	movh %d3,61443
800021a4:	1b 03 00 36 	addi %d3,%d3,24576
800021a8:	60 32       	mov.a %a2,%d3
800021aa:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800021ae:	54 23       	ld.w %d3,[%a2]
800021b0:	37 83 02 30 	insert %d3,%d3,%d8,0,2
800021b4:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setSafetyEndinit(safetyWdtPw);
800021b6:	02 b4       	mov %d4,%d11
800021b8:	6d ff 2e fe 	call 80001e14 <IfxScuWdt_setSafetyEndinit>
            cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
800021bc:	bb 00 d0 2f 	mov.u %d2,64768
800021c0:	60 c2       	mov.a %a2,%d12
800021c2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800021c6:	54 22       	ld.w %d2,[%a2]
800021c8:	b7 22 82 20 	insert %d2,%d2,2,1,2
800021cc:	74 22       	st.w [%a2],%d2
800021ce:	1d ff d8 ff 	j 8000217e <IfxCpu_setCoreMode+0x38>
            uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
800021d2:	6d ff df fd 	call 80001d90 <IfxScuWdt_getCpuWatchdogPassword>
800021d6:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearCpuEndinit(cpuWdtPw);
800021d8:	02 24       	mov %d4,%d2
800021da:	6d ff 72 fc 	call 80001abe <IfxScuWdt_clearCpuEndinit>
            MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
800021de:	1b 5a 03 20 	addi %d2,%d10,53
800021e2:	06 22       	sh %d2,2
800021e4:	7b 30 00 3f 	movh %d3,61443
800021e8:	1b 03 00 36 	addi %d3,%d3,24576
800021ec:	60 32       	mov.a %a2,%d3
800021ee:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800021f2:	54 23       	ld.w %d3,[%a2]
800021f4:	37 83 02 30 	insert %d3,%d3,%d8,0,2
800021f8:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
800021fa:	02 b4       	mov %d4,%d11
800021fc:	6d ff e7 fd 	call 80001dca <IfxScuWdt_setCpuEndinit>
80002200:	1d ff bf ff 	j 8000217e <IfxCpu_setCoreMode+0x38>

80002204 <IfxCpu_setProgramCounter>:


boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
{
80002204:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80002206:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000220a:	8f 72 00 21 	and %d2,%d2,7
    if (cpu < IfxCpu_ResourceCpu_none)
8000220e:	ff 32 17 80 	jge.u %d2,3,8000223c <IfxCpu_setProgramCounter+0x38>
        module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
80002212:	06 32       	sh %d2,3
80002214:	91 00 00 28 	movh.a %a2,32768
80002218:	d9 22 14 80 	lea %a2,[%a2]532 <80000214 <IfxCpu_cfg_indexMap>>
8000221c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002220:	54 22       	ld.w %d2,[%a2]
    boolean retVal = TRUE;

    if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
80002222:	80 43       	mov.d %d3,%a4
80002224:	5f 23 0f 00 	jeq %d3,%d2,80002242 <IfxCpu_setProgramCounter+0x3e>
    {
        retVal = FALSE;
    }
    else
    {
        cpu->PC.B.PC = programCounter >> 1;
80002228:	bb 80 e0 2f 	mov.u %d2,65032
8000222c:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
80002230:	54 42       	ld.w %d2,[%a4]
80002232:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80002236:	74 42       	st.w [%a4],%d2
    boolean retVal = TRUE;
80002238:	82 12       	mov %d2,1
8000223a:	00 90       	ret 
        module = NULL_PTR;
8000223c:	82 02       	mov %d2,0
8000223e:	1d ff f2 ff 	j 80002222 <IfxCpu_setProgramCounter+0x1e>
        retVal = FALSE;
80002242:	82 02       	mov %d2,0
    }

    return retVal;
}
80002244:	00 90       	ret 

80002246 <IfxCpu_startCore>:
    return retVal;
}


boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
{
80002246:	40 ae       	mov.aa %a14,%sp
80002248:	80 49       	mov.d %d9,%a4
    boolean retVal = TRUE;

    /* Set the PC for Core 1 */
    retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
8000224a:	6d ff dd ff 	call 80002204 <IfxCpu_setProgramCounter>
8000224e:	8f 12 00 81 	and %d8,%d2,1
    /* Get the mode for Core 1 and set it to RUNNING */

    /* Core not running already */
    if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
80002252:	60 94       	mov.a %a4,%d9
80002254:	6d ff 43 ff 	call 800020da <IfxCpu_getCoreMode>
80002258:	df 02 04 00 	jeq %d2,0,80002260 <IfxCpu_startCore+0x1a>
    {
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
    }

    return retVal;
}
8000225c:	02 82       	mov %d2,%d8
8000225e:	00 90       	ret 
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
80002260:	82 14       	mov %d4,1
80002262:	60 94       	mov.a %a4,%d9
80002264:	6d ff 71 ff 	call 80002146 <IfxCpu_setCoreMode>
80002268:	26 28       	and %d8,%d2
8000226a:	1d ff f9 ff 	j 8000225c <IfxCpu_startCore+0x16>

8000226e <IfxCpu_waitEvent>:


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
8000226e:	40 ae       	mov.aa %a14,%sp
80002270:	40 4c       	mov.aa %a12,%a4
80002272:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80002274:	80 42       	mov.d %d2,%a4
80002276:	b7 02 1c 20 	insert %d2,%d2,0,0,28
8000227a:	7b 00 00 3d 	movh %d3,53248
8000227e:	5f 32 28 00 	jeq %d2,%d3,800022ce <IfxCpu_waitEvent+0x60>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80002282:	6d ff 03 fa 	call 80001688 <IfxScuCcu_getSourceFrequency>
80002286:	91 30 00 2f 	movh.a %a2,61443
8000228a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
8000228e:	54 23       	ld.w %d3,[%a2]
80002290:	37 03 64 34 	extr.u %d3,%d3,8,4
80002294:	4b 03 41 31 	itof %d3,%d3
80002298:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
8000229c:	7b a0 47 34 	movh %d3,17530
800022a0:	4b 32 51 20 	div.f %d2,%d2,%d3
800022a4:	4b 08 61 41 	utof %d4,%d8
800022a8:	4b 24 41 40 	mul.f %d4,%d4,%d2
800022ac:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
800022b0:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
800022b4:	54 c2       	ld.w %d2,[%a12]
800022b6:	8f 72 00 21 	and %d2,%d2,7
800022ba:	df 72 18 00 	jeq %d2,7,800022ea <IfxCpu_waitEvent+0x7c>
    __asm__ volatile ("nop" : : : "memory");
800022be:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
800022c0:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
800022c4:	a2 42       	sub %d2,%d4
800022c6:	3f 32 f7 ff 	jlt.u %d2,%d3,800022b4 <IfxCpu_waitEvent+0x46>
        {
            errorcnt = 1;
800022ca:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
800022cc:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
800022ce:	80 42       	mov.d %d2,%a4
800022d0:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
800022d4:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
800022d8:	4d c0 e1 2f 	mfcr %d2,$core_id
800022dc:	8f c2 01 20 	sh %d2,%d2,28
800022e0:	0b 23 80 20 	sub %d2,%d3,%d2
800022e4:	60 2c       	mov.a %a12,%d2
800022e6:	1d ff ce ff 	j 80002282 <IfxCpu_waitEvent+0x14>
    boolean          errorcnt      = 0U;
800022ea:	82 02       	mov %d2,0
800022ec:	00 90       	ret 

800022ee <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
800022ee:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
800022f0:	4d c0 e1 2f 	mfcr %d2,$core_id
800022f4:	82 13       	mov %d3,1
800022f6:	57 30 21 22 	imask %e2,%d3,%d2,1
800022fa:	49 42 40 08 	ldmst [%a4]0,%e2
}
800022fe:	00 90       	ret 

80002300 <Ifx_Cpp_Init>:
#pragma section
#elif defined(__DCC__)
#pragma section CONST
#endif
static void Ifx_Cpp_Init(void)
{
80002300:	40 ae       	mov.aa %a14,%sp
    Ifx_C_Init();           /*Initialization of C runtime variables */
80002302:	6d 00 1f 04 	call 80002b40 <Ifx_C_Init>
#elif defined (__HIGHTEC__)
extern void _init(void); /* cpp initialization */
    _init();
#elif defined (__GNUC__) && !defined(__HIGHTEC__)
    extern void _init(void); /* cpp initialization */
    _init();
80002306:	6d 00 5b 0a 	call 800037bc <_init>
#endif
}
8000230a:	00 90       	ret 

8000230c <hardware_init_hook>:
{}
8000230c:	00 90       	ret 

8000230e <software_init_hook>:
{}
8000230e:	00 90       	ret 

80002310 <_Core0_start>:
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80002310:	91 30 00 2f 	movh.a %a2,61443
80002314:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
    __setareg(sp, __USTACK(0));
80002318:	91 20 00 37 	movh.a %a3,28674
8000231c:	37 02 6e 21 	extr.u %d2,%d2,2,14
80002320:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80002324:	8f f2 83 81 	xor %d8,%d2,63
80002328:	80 32       	mov.d %d2,%a3
8000232a:	1b 02 60 29 	addi %d2,%d2,-27136
8000232e:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80002330:	0d 00 80 04 	dsync 
    __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
80002334:	3b 00 98 20 	mov %d2,2432
80002338:	cd 42 e0 0f 	mtcr $psw,%d2
    pcxi  = __mfcr(CPU_PCXI);
8000233c:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
80002340:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80002344:	cd 02 e0 0f 	mtcr $pcxi,%d2
    if (enable)
    {                           /* Step 3: Initiate invalidation of current cache contents if any */
        Ifx_CPU_PCON1 pcon1;
        pcon1.U       = 0;
        pcon1.B.PCINV = 1;
        __mtcr(CPU_PCON1, pcon1.U);
80002348:	82 12       	mov %d2,1
8000234a:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000234e:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80002352:	8f 72 00 21 	and %d2,%d2,7
    }

    uint32 coreIndex   = IfxCpu_getCoreIndex();
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80002356:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
8000235a:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
8000235e:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80002360:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80002362:	37 02 6e 21 	extr.u %d2,%d2,2,14
    /*PCACHE enable steps */
    {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80002366:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
8000236a:	6f 13 41 81 	jnz.t %d3,1,800025ec <_Core0_start+0x2dc>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000236e:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002372:	54 22       	ld.w %d2,[%a2]
80002374:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002378:	a6 32       	or %d2,%d3
8000237a:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000237e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80002380:	54 22       	ld.w %d2,[%a2]
80002382:	6f 02 ff ff 	jnz.t %d2,0,80002380 <_Core0_start+0x70>
        Ifx_CPU_PCON0 pcon0;
        pcon0.U       = 0;
        pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
        __mtcr(CPU_PCON0, pcon0.U);
80002386:	82 02       	mov %d2,0
80002388:	cd c2 20 09 	mtcr $pcon0,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000238c:	54 22       	ld.w %d2,[%a2]
8000238e:	6f 12 09 00 	jz.t %d2,1,800023a0 <_Core0_start+0x90>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002392:	54 22       	ld.w %d2,[%a2]
80002394:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002398:	a6 32       	or %d2,%d3
8000239a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000239e:	74 22       	st.w [%a2],%d2

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800023a0:	54 22       	ld.w %d2,[%a2]
800023a2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800023a6:	a6 32       	or %d2,%d3
800023a8:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800023ac:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800023ae:	54 22       	ld.w %d2,[%a2]
800023b0:	6f 02 ff 7f 	jz.t %d2,0,800023ae <_Core0_start+0x9e>
    __asm__ volatile ("isync" : : : "memory");
800023b4:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
800023b8:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800023bc:	7b 30 00 3f 	movh %d3,61443
800023c0:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800023c4:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800023c8:	13 c2 20 23 	madd %d2,%d3,%d2,12
800023cc:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
800023ce:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800023d0:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800023d2:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800023d6:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800023da:	6f 13 fd 80 	jnz.t %d3,1,800025d4 <_Core0_start+0x2c4>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800023de:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800023e2:	54 22       	ld.w %d2,[%a2]
800023e4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800023e8:	a6 32       	or %d2,%d3
800023ea:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800023ee:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800023f0:	54 22       	ld.w %d2,[%a2]
800023f2:	6f 02 ff ff 	jnz.t %d2,0,800023f0 <_Core0_start+0xe0>
        __mtcr(CPU_DCON0, dcon0.U);
800023f6:	82 22       	mov %d2,2
800023f8:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
800023fc:	54 22       	ld.w %d2,[%a2]
800023fe:	6f 12 09 00 	jz.t %d2,1,80002410 <_Core0_start+0x100>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002402:	54 22       	ld.w %d2,[%a2]
80002404:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002408:	a6 32       	or %d2,%d3
8000240a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000240e:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002410:	54 22       	ld.w %d2,[%a2]
80002412:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002416:	a6 32       	or %d2,%d3
80002418:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000241c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8000241e:	54 22       	ld.w %d2,[%a2]
80002420:	6f 02 ff 7f 	jz.t %d2,0,8000241e <_Core0_start+0x10e>
80002424:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80002428:	91 30 00 2f 	movh.a %a2,61443
8000242c:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80002430:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002434:	8f 28 00 30 	sh %d3,%d8,2
    if (watchdog->CON0.B.LCK)
80002438:	6f 12 09 00 	jz.t %d2,1,8000244a <_Core0_start+0x13a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000243c:	54 22       	ld.w %d2,[%a2]
8000243e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002442:	a6 32       	or %d2,%d3
80002444:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002448:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000244a:	91 30 00 2f 	movh.a %a2,61443
8000244e:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80002452:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80002456:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000245a:	a6 32       	or %d2,%d3
8000245c:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002460:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80002462:	54 22       	ld.w %d2,[%a2]
80002464:	6f 02 ff ff 	jnz.t %d2,0,80002462 <_Core0_start+0x152>
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
80002468:	91 00 00 38 	movh.a %a3,32768
8000246c:	80 32       	mov.d %d2,%a3
8000246e:	1b 02 10 20 	addi %d2,%d2,256
80002472:	cd 42 e2 0f 	mtcr $btv,%d2
    __mtcr(CPU_BIV, (uint32)__INTTAB(0));
80002476:	91 f0 01 38 	movh.a %a3,32799
8000247a:	80 32       	mov.d %d2,%a3
8000247c:	1b 02 00 24 	addi %d2,%d2,16384
80002480:	cd 02 e2 0f 	mtcr $biv,%d2
    __mtcr(CPU_ISP, (uint32)__ISTACK(0));
80002484:	91 20 00 37 	movh.a %a3,28674
80002488:	80 32       	mov.d %d2,%a3
8000248a:	1b 02 b0 29 	addi %d2,%d2,-25856
8000248e:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80002492:	54 22       	ld.w %d2,[%a2]
80002494:	6f 12 09 00 	jz.t %d2,1,800024a6 <_Core0_start+0x196>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002498:	54 22       	ld.w %d2,[%a2]
8000249a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000249e:	a6 32       	or %d2,%d3
800024a0:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800024a4:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800024a6:	91 30 00 2f 	movh.a %a2,61443
800024aa:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800024ae:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800024b2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800024b6:	a6 32       	or %d2,%d3
800024b8:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800024bc:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800024be:	54 22       	ld.w %d2,[%a2]
800024c0:	6f 02 ff 7f 	jz.t %d2,0,800024be <_Core0_start+0x1ae>
    __setareg(a0, __SDATA1(0));
800024c4:	91 10 00 26 	movh.a %a2,24577
800024c8:	80 22       	mov.d %d2,%a2
800024ca:	1b 02 00 28 	addi %d2,%d2,-32768
800024ce:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(0));
800024d0:	91 10 00 28 	movh.a %a2,32769
800024d4:	80 22       	mov.d %d2,%a2
800024d6:	1b 02 00 28 	addi %d2,%d2,-32768
800024da:	60 21       	mov.a %a1,%d2
    __setareg(a8, __SDATA3(0));
800024dc:	91 10 00 28 	movh.a %a2,32769
800024e0:	80 22       	mov.d %d2,%a2
800024e2:	1b 02 00 28 	addi %d2,%d2,-32768
800024e6:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(0));
800024e8:	91 10 00 29 	movh.a %a2,36865
800024ec:	80 22       	mov.d %d2,%a2
800024ee:	1b 02 00 28 	addi %d2,%d2,-32768
800024f2:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
800024f4:	91 20 00 37 	movh.a %a3,28674
800024f8:	91 20 00 27 	movh.a %a2,28674
800024fc:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70019c00 <__CSA0>>
80002500:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7001bc00 <__CSA0_END>>
80002504:	01 32 20 20 	sub.a %a2,%a2,%a3
80002508:	80 22       	mov.d %d2,%a2
8000250a:	8f a2 1f 70 	sh %d7,%d2,-6
    uint32 *prvCsa      = csaBegin;
8000250e:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80002510:	1b d7 ff 0f 	addi %d0,%d7,-3
    for (k = 0U; k < numOfCsa; k++)
80002514:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80002516:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002518:	7b f0 00 40 	movh %d4,15
    for (k = 0U; k < numOfCsa; k++)
8000251c:	df 07 27 00 	jeq %d7,0,8000256a <_Core0_start+0x25a>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002520:	37 02 70 53 	extr.u %d5,%d2,6,16
80002524:	8f 42 1f 60 	sh %d6,%d2,-12
80002528:	26 46       	and %d6,%d4
8000252a:	a6 65       	or %d5,%d6
        if (k == 0U)
8000252c:	df 03 16 00 	jeq %d3,0,80002558 <_Core0_start+0x248>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80002530:	74 25       	st.w [%a2],%d5
        if (k == (numOfCsa - 3U))
80002532:	5f 03 04 80 	jne %d3,%d0,8000253a <_Core0_start+0x22a>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80002536:	cd c5 e3 0f 	mtcr $lcx,%d5
    for (k = 0U; k < numOfCsa; k++)
8000253a:	c2 13       	add %d3,1
8000253c:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
8000253e:	1b 02 04 50 	addi %d5,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80002542:	5f 37 0f 00 	jeq %d7,%d3,80002560 <_Core0_start+0x250>
        nxtCsa += 16U;           /* next CSA */
80002546:	02 52       	mov %d2,%d5
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002548:	37 02 70 53 	extr.u %d5,%d2,6,16
8000254c:	8f 42 1f 60 	sh %d6,%d2,-12
80002550:	26 46       	and %d6,%d4
80002552:	a6 65       	or %d5,%d6
        if (k == 0U)
80002554:	df 03 ee ff 	jne %d3,0,80002530 <_Core0_start+0x220>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80002558:	cd 85 e3 0f 	mtcr $fcx,%d5
8000255c:	1d ff eb ff 	j 80002532 <_Core0_start+0x222>
80002560:	1b f7 ff 2f 	addi %d2,%d7,-1
80002564:	06 62       	sh %d2,6
80002566:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
8000256a:	82 02       	mov %d2,0
8000256c:	74 22       	st.w [%a2],%d2
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
8000256e:	6d ff 23 fc 	call 80001db4 <IfxScuWdt_getSafetyWatchdogPassword>
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
80002572:	02 84       	mov %d4,%d8
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
80002574:	02 29       	mov %d9,%d2
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
80002576:	6d ff f1 fa 	call 80001b58 <IfxScuWdt_disableCpuWatchdog>
        IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
8000257a:	02 94       	mov %d4,%d9
8000257c:	6d ff 2d fb 	call 80001bd6 <IfxScuWdt_disableSafetyWatchdog>
       	hardware_init_hook();
80002580:	6d ff c6 fe 	call 8000230c <hardware_init_hook>
        Ifx_Cpp_Init();
80002584:	6d ff be fe 	call 80002300 <Ifx_Cpp_Init>
       	software_init_hook();
80002588:	6d ff c3 fe 	call 8000230e <software_init_hook>
        IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
8000258c:	02 84       	mov %d4,%d8
8000258e:	6d ff 73 fb 	call 80001c74 <IfxScuWdt_enableCpuWatchdog>
        IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
80002592:	02 94       	mov %d4,%d9
80002594:	6d ff af fb 	call 80001cf2 <IfxScuWdt_enableSafetyWatchdog>
    IFXCPU_CSTART_CCU_INIT_HOOK();
80002598:	91 00 00 48 	movh.a %a4,32768
8000259c:	d9 44 24 c0 	lea %a4,[%a4]804 <80000324 <IfxScuCcu_defaultClockConfig>>
800025a0:	6d ff ee f8 	call 8000177c <IfxScuCcu_init>
    (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
800025a4:	91 00 00 28 	movh.a %a2,32768
800025a8:	80 22       	mov.d %d2,%a2
800025aa:	1b 42 60 42 	addi %d4,%d2,9732
800025ae:	91 30 88 4f 	movh.a %a4,63619
800025b2:	6d ff 4a fe 	call 80002246 <IfxCpu_startCore>
    (void)IfxCpu_startCore(&MODULE_CPU2, (uint32)&_Core2_start);       /*The status returned by function call is ignored */
800025b6:	91 00 00 28 	movh.a %a2,32768
800025ba:	80 22       	mov.d %d2,%a2
800025bc:	1b 22 8a 42 	addi %d4,%d2,10402
800025c0:	91 50 88 4f 	movh.a %a4,63621
800025c4:	6d ff 41 fe 	call 80002246 <IfxCpu_startCore>
    __non_return_call(core0_main);
800025c8:	91 00 00 28 	movh.a %a2,32768
800025cc:	d9 22 e6 c2 	lea %a2,[%a2]12070 <80002f26 <core0_main>>
800025d0:	dc 02       	ji %a2
}
800025d2:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800025d4:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800025d6:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800025da:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800025de:	0f 34 a0 20 	or %d2,%d4,%d3
800025e2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800025e6:	74 22       	st.w [%a2],%d2
800025e8:	1d ff fd fe 	j 800023e2 <_Core0_start+0xd2>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800025ec:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800025ee:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800025f2:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800025f6:	0f 34 a0 20 	or %d2,%d4,%d3
800025fa:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800025fe:	74 22       	st.w [%a2],%d2
80002600:	1d ff b9 fe 	j 80002372 <_Core0_start+0x62>

80002604 <_Core1_start>:
    password  = watchdog->CON0.B.PW;
80002604:	91 30 00 2f 	movh.a %a2,61443
80002608:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
8000260c:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80002610:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[1]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(1);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(1));
80002614:	91 20 00 26 	movh.a %a2,24578
80002618:	8f f2 83 41 	xor %d4,%d2,63
8000261c:	80 22       	mov.d %d2,%a2
8000261e:	1b 02 60 2b 	addi %d2,%d2,-18944
80002622:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80002624:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART1_PSW_DEFAULT);    /* 0x00000980 */
80002628:	3b 00 98 20 	mov %d2,2432
8000262c:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
80002630:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART1_PCX_O_S_DEFAULT; /*0xfff00000; */
80002634:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80002638:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
8000263c:	82 12       	mov %d2,1
8000263e:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80002642:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80002646:	7b 30 00 3f 	movh %d3,61443
8000264a:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000264e:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80002652:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002656:	60 22       	mov.a %a2,%d2
80002658:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
8000265a:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
8000265c:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80002660:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80002664:	6f 13 13 81 	jnz.t %d3,1,8000288a <_Core1_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002668:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000266c:	54 22       	ld.w %d2,[%a2]
8000266e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002672:	a6 32       	or %d2,%d3
80002674:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002678:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
8000267a:	54 22       	ld.w %d2,[%a2]
8000267c:	6f 02 ff ff 	jnz.t %d2,0,8000267a <_Core1_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
80002680:	82 02       	mov %d2,0
80002682:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
80002686:	54 22       	ld.w %d2,[%a2]
80002688:	6f 12 09 00 	jz.t %d2,1,8000269a <_Core1_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000268c:	54 22       	ld.w %d2,[%a2]
8000268e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002692:	a6 32       	or %d2,%d3
80002694:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002698:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000269a:	54 22       	ld.w %d2,[%a2]
8000269c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800026a0:	a6 32       	or %d2,%d3
800026a2:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800026a6:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800026a8:	54 22       	ld.w %d2,[%a2]
800026aa:	6f 02 ff 7f 	jz.t %d2,0,800026a8 <_Core1_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
800026ae:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
800026b2:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800026b6:	7b 30 00 3f 	movh %d3,61443
800026ba:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800026be:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800026c2:	13 c2 20 23 	madd %d2,%d3,%d2,12
800026c6:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
800026c8:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800026ca:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800026cc:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800026d0:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800026d4:	6f 13 cf 80 	jnz.t %d3,1,80002872 <_Core1_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800026d8:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800026dc:	54 22       	ld.w %d2,[%a2]
800026de:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800026e2:	a6 32       	or %d2,%d3
800026e4:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800026e8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800026ea:	54 22       	ld.w %d2,[%a2]
800026ec:	6f 02 ff ff 	jnz.t %d2,0,800026ea <_Core1_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
800026f0:	82 02       	mov %d2,0
800026f2:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
800026f6:	54 22       	ld.w %d2,[%a2]
800026f8:	6f 12 09 00 	jz.t %d2,1,8000270a <_Core1_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800026fc:	54 22       	ld.w %d2,[%a2]
800026fe:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002702:	a6 32       	or %d2,%d3
80002704:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002708:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000270a:	54 22       	ld.w %d2,[%a2]
8000270c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002710:	a6 32       	or %d2,%d3
80002712:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002716:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80002718:	54 22       	ld.w %d2,[%a2]
8000271a:	6f 02 ff 7f 	jz.t %d2,0,80002718 <_Core1_start+0x114>
8000271e:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80002722:	91 30 00 2f 	movh.a %a2,61443
80002726:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
8000272a:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000272e:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
80002730:	6f 12 09 00 	jz.t %d2,1,80002742 <_Core1_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002734:	54 22       	ld.w %d2,[%a2]
80002736:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000273a:	a6 42       	or %d2,%d4
8000273c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002740:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002742:	91 30 00 2f 	movh.a %a2,61443
80002746:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
8000274a:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
8000274e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002752:	a6 42       	or %d2,%d4
80002754:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002758:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
8000275a:	54 22       	ld.w %d2,[%a2]
8000275c:	6f 02 ff ff 	jnz.t %d2,0,8000275a <_Core1_start+0x156>

    /* Clear the ENDINIT bit in the WDT_CON1 register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(1));
80002760:	91 f0 01 38 	movh.a %a3,32799
80002764:	80 32       	mov.d %d2,%a3
80002766:	1b 02 20 26 	addi %d2,%d2,25088
8000276a:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(1));
8000276e:	91 f0 01 38 	movh.a %a3,32799
80002772:	80 32       	mov.d %d2,%a3
80002774:	1b 02 00 24 	addi %d2,%d2,16384
80002778:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(1));
8000277c:	91 20 00 36 	movh.a %a3,24578
80002780:	80 32       	mov.d %d2,%a3
80002782:	1b 02 b0 2b 	addi %d2,%d2,-17664
80002786:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
8000278a:	54 22       	ld.w %d2,[%a2]
8000278c:	6f 12 09 00 	jz.t %d2,1,8000279e <_Core1_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002790:	54 22       	ld.w %d2,[%a2]
80002792:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002796:	a6 42       	or %d2,%d4
80002798:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000279c:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000279e:	91 30 00 2f 	movh.a %a2,61443
800027a2:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800027a6:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
800027aa:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800027ae:	a6 42       	or %d2,%d4
800027b0:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800027b4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800027b6:	54 22       	ld.w %d2,[%a2]
800027b8:	6f 02 ff 7f 	jz.t %d2,0,800027b6 <_Core1_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(1));
800027bc:	91 10 00 26 	movh.a %a2,24577
800027c0:	80 22       	mov.d %d2,%a2
800027c2:	1b 02 00 28 	addi %d2,%d2,-32768
800027c6:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(1));
800027c8:	91 10 00 28 	movh.a %a2,32769
800027cc:	80 22       	mov.d %d2,%a2
800027ce:	1b 02 00 28 	addi %d2,%d2,-32768
800027d2:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialised */
    __setareg(a8, __SDATA3(1));
800027d4:	91 10 00 28 	movh.a %a2,32769
800027d8:	80 22       	mov.d %d2,%a2
800027da:	1b 02 00 28 	addi %d2,%d2,-32768
800027de:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(1));
800027e0:	91 10 00 29 	movh.a %a2,36865
800027e4:	80 22       	mov.d %d2,%a2
800027e6:	1b 02 00 28 	addi %d2,%d2,-32768
800027ea:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
800027ec:	91 20 00 36 	movh.a %a3,24578
800027f0:	91 20 00 26 	movh.a %a2,24578
800027f4:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <6001bc00 <__CSA1>>
800027f8:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <6001dc00 <__CSA1_END>>
800027fc:	01 32 20 20 	sub.a %a2,%a2,%a3
80002800:	80 22       	mov.d %d2,%a2
80002802:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80002806:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80002808:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
8000280c:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
8000280e:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002810:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80002814:	df 06 27 00 	jeq %d6,0,80002862 <_Core1_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002818:	37 02 70 43 	extr.u %d4,%d2,6,16
8000281c:	8f 42 1f 50 	sh %d5,%d2,-12
80002820:	26 75       	and %d5,%d7
80002822:	a6 54       	or %d4,%d5
        if (k == 0U)
80002824:	df 03 16 00 	jeq %d3,0,80002850 <_Core1_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80002828:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
8000282a:	5f 03 04 80 	jne %d3,%d0,80002832 <_Core1_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8000282e:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80002832:	c2 13       	add %d3,1
80002834:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80002836:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8000283a:	5f 36 0f 00 	jeq %d6,%d3,80002858 <_Core1_start+0x254>
        nxtCsa += 16U;           /* next CSA */
8000283e:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002840:	37 02 70 43 	extr.u %d4,%d2,6,16
80002844:	8f 42 1f 50 	sh %d5,%d2,-12
80002848:	26 75       	and %d5,%d7
8000284a:	a6 54       	or %d4,%d5
        if (k == 0U)
8000284c:	df 03 ee ff 	jne %d3,0,80002828 <_Core1_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80002850:	cd 84 e3 0f 	mtcr $fcx,%d4
80002854:	1d ff eb ff 	j 8000282a <_Core1_start+0x226>
80002858:	1b f6 ff 2f 	addi %d2,%d6,-1
8000285c:	06 62       	sh %d2,6
8000285e:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80002862:	82 02       	mov %d2,0
80002864:	74 22       	st.w [%a2],%d2

    IfxCpu_initCSA((uint32 *)__CSA(1), (uint32 *)__CSA_END(1));

    /*Call main function of Cpu0 */
    __non_return_call(core1_main);
80002866:	91 00 00 28 	movh.a %a2,32768
8000286a:	d9 22 c0 e2 	lea %a2,[%a2]12160 <80002f80 <core1_main>>
8000286e:	dc 02       	ji %a2
}
80002870:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002872:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002874:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002878:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000287c:	0f 35 a0 20 	or %d2,%d5,%d3
80002880:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002884:	74 22       	st.w [%a2],%d2
80002886:	1d ff 2b ff 	j 800026dc <_Core1_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000288a:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000288c:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002890:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002894:	0f 35 a0 20 	or %d2,%d5,%d3
80002898:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000289c:	74 22       	st.w [%a2],%d2
8000289e:	1d ff e7 fe 	j 8000266c <_Core1_start+0x68>

800028a2 <_Core2_start>:
    password  = watchdog->CON0.B.PW;
800028a2:	91 30 00 2f 	movh.a %a2,61443
800028a6:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800028aa:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800028ae:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[2]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(2);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(2));
800028b2:	91 20 00 25 	movh.a %a2,20482
800028b6:	8f f2 83 41 	xor %d4,%d2,63
800028ba:	80 22       	mov.d %d2,%a2
800028bc:	1b 02 60 2b 	addi %d2,%d2,-18944
800028c0:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
800028c2:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART2_PSW_DEFAULT);    /* 0x00000980 */
800028c6:	3b 00 98 20 	mov %d2,2432
800028ca:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
800028ce:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART2_PCX_O_S_DEFAULT; /*0xfff00000; */
800028d2:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
800028d6:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
800028da:	82 12       	mov %d2,1
800028dc:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800028e0:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800028e4:	7b 30 00 3f 	movh %d3,61443
800028e8:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800028ec:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800028f0:	13 c2 20 23 	madd %d2,%d3,%d2,12
800028f4:	60 22       	mov.a %a2,%d2
800028f6:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800028f8:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800028fa:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800028fe:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80002902:	6f 13 13 81 	jnz.t %d3,1,80002b28 <_Core2_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002906:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000290a:	54 22       	ld.w %d2,[%a2]
8000290c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002910:	a6 32       	or %d2,%d3
80002912:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002916:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80002918:	54 22       	ld.w %d2,[%a2]
8000291a:	6f 02 ff ff 	jnz.t %d2,0,80002918 <_Core2_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
8000291e:	82 02       	mov %d2,0
80002920:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
80002924:	54 22       	ld.w %d2,[%a2]
80002926:	6f 12 09 00 	jz.t %d2,1,80002938 <_Core2_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000292a:	54 22       	ld.w %d2,[%a2]
8000292c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002930:	a6 32       	or %d2,%d3
80002932:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002936:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002938:	54 22       	ld.w %d2,[%a2]
8000293a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000293e:	a6 32       	or %d2,%d3
80002940:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002944:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80002946:	54 22       	ld.w %d2,[%a2]
80002948:	6f 02 ff 7f 	jz.t %d2,0,80002946 <_Core2_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
8000294c:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80002950:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80002954:	7b 30 00 3f 	movh %d3,61443
80002958:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000295c:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80002960:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002964:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80002966:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80002968:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
8000296a:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
8000296e:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80002972:	6f 13 cf 80 	jnz.t %d3,1,80002b10 <_Core2_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002976:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000297a:	54 22       	ld.w %d2,[%a2]
8000297c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002980:	a6 32       	or %d2,%d3
80002982:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002986:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80002988:	54 22       	ld.w %d2,[%a2]
8000298a:	6f 02 ff ff 	jnz.t %d2,0,80002988 <_Core2_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
8000298e:	82 02       	mov %d2,0
80002990:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80002994:	54 22       	ld.w %d2,[%a2]
80002996:	6f 12 09 00 	jz.t %d2,1,800029a8 <_Core2_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000299a:	54 22       	ld.w %d2,[%a2]
8000299c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029a0:	a6 32       	or %d2,%d3
800029a2:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800029a6:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800029a8:	54 22       	ld.w %d2,[%a2]
800029aa:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029ae:	a6 32       	or %d2,%d3
800029b0:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800029b4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
800029b6:	54 22       	ld.w %d2,[%a2]
800029b8:	6f 02 ff 7f 	jz.t %d2,0,800029b6 <_Core2_start+0x114>
800029bc:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
800029c0:	91 30 00 2f 	movh.a %a2,61443
800029c4:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800029c8:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029cc:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
800029ce:	6f 12 09 00 	jz.t %d2,1,800029e0 <_Core2_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800029d2:	54 22       	ld.w %d2,[%a2]
800029d4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029d8:	a6 42       	or %d2,%d4
800029da:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800029de:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800029e0:	91 30 00 2f 	movh.a %a2,61443
800029e4:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800029e8:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
800029ec:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800029f0:	a6 42       	or %d2,%d4
800029f2:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800029f6:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800029f8:	54 22       	ld.w %d2,[%a2]
800029fa:	6f 02 ff ff 	jnz.t %d2,0,800029f8 <_Core2_start+0x156>

    /* Clear the ENDINIT bit in the Password register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(2));
800029fe:	91 f0 01 38 	movh.a %a3,32799
80002a02:	80 32       	mov.d %d2,%a3
80002a04:	1b 02 10 26 	addi %d2,%d2,24832
80002a08:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(2));
80002a0c:	91 f0 01 38 	movh.a %a3,32799
80002a10:	80 32       	mov.d %d2,%a3
80002a12:	1b 02 00 24 	addi %d2,%d2,16384
80002a16:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(2));
80002a1a:	91 20 00 35 	movh.a %a3,20482
80002a1e:	80 32       	mov.d %d2,%a3
80002a20:	1b 02 b0 2b 	addi %d2,%d2,-17664
80002a24:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80002a28:	54 22       	ld.w %d2,[%a2]
80002a2a:	6f 12 09 00 	jz.t %d2,1,80002a3c <_Core2_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002a2e:	54 22       	ld.w %d2,[%a2]
80002a30:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002a34:	a6 42       	or %d2,%d4
80002a36:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002a3a:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002a3c:	91 30 00 2f 	movh.a %a2,61443
80002a40:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80002a44:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80002a48:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002a4c:	a6 42       	or %d2,%d4
80002a4e:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002a52:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80002a54:	54 22       	ld.w %d2,[%a2]
80002a56:	6f 02 ff 7f 	jz.t %d2,0,80002a54 <_Core2_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(2));
80002a5a:	91 10 00 26 	movh.a %a2,24577
80002a5e:	80 22       	mov.d %d2,%a2
80002a60:	1b 02 00 28 	addi %d2,%d2,-32768
80002a64:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(2));
80002a66:	91 10 00 28 	movh.a %a2,32769
80002a6a:	80 22       	mov.d %d2,%a2
80002a6c:	1b 02 00 28 	addi %d2,%d2,-32768
80002a70:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialized */
    __setareg(a8, __SDATA3(2));
80002a72:	91 10 00 28 	movh.a %a2,32769
80002a76:	80 22       	mov.d %d2,%a2
80002a78:	1b 02 00 28 	addi %d2,%d2,-32768
80002a7c:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(2));
80002a7e:	91 10 00 29 	movh.a %a2,36865
80002a82:	80 22       	mov.d %d2,%a2
80002a84:	1b 02 00 28 	addi %d2,%d2,-32768
80002a88:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80002a8a:	91 20 00 35 	movh.a %a3,20482
80002a8e:	91 20 00 25 	movh.a %a2,20482
80002a92:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <5001bc00 <__CSA2>>
80002a96:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <5001dc00 <__CSA2_END>>
80002a9a:	01 32 20 20 	sub.a %a2,%a2,%a3
80002a9e:	80 22       	mov.d %d2,%a2
80002aa0:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80002aa4:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80002aa6:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80002aaa:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80002aac:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002aae:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80002ab2:	df 06 27 00 	jeq %d6,0,80002b00 <_Core2_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002ab6:	37 02 70 43 	extr.u %d4,%d2,6,16
80002aba:	8f 42 1f 50 	sh %d5,%d2,-12
80002abe:	26 75       	and %d5,%d7
80002ac0:	a6 54       	or %d4,%d5
        if (k == 0U)
80002ac2:	df 03 16 00 	jeq %d3,0,80002aee <_Core2_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80002ac6:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80002ac8:	5f 03 04 80 	jne %d3,%d0,80002ad0 <_Core2_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80002acc:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80002ad0:	c2 13       	add %d3,1
80002ad2:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80002ad4:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80002ad8:	5f 36 0f 00 	jeq %d6,%d3,80002af6 <_Core2_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80002adc:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80002ade:	37 02 70 43 	extr.u %d4,%d2,6,16
80002ae2:	8f 42 1f 50 	sh %d5,%d2,-12
80002ae6:	26 75       	and %d5,%d7
80002ae8:	a6 54       	or %d4,%d5
        if (k == 0U)
80002aea:	df 03 ee ff 	jne %d3,0,80002ac6 <_Core2_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80002aee:	cd 84 e3 0f 	mtcr $fcx,%d4
80002af2:	1d ff eb ff 	j 80002ac8 <_Core2_start+0x226>
80002af6:	1b f6 ff 2f 	addi %d2,%d6,-1
80002afa:	06 62       	sh %d2,6
80002afc:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80002b00:	82 02       	mov %d2,0
80002b02:	74 22       	st.w [%a2],%d2
    /* Setup the context save area linked list. */

    IfxCpu_initCSA((uint32 *)__CSA(2), (uint32 *)__CSA_END(2));

    /*Call main function of Cpu0 */
    __non_return_call(core2_main);
80002b04:	91 00 00 28 	movh.a %a2,32768
80002b08:	d9 22 ee e2 	lea %a2,[%a2]12206 <80002fae <core2_main>>
80002b0c:	dc 02       	ji %a2
}
80002b0e:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002b10:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002b12:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002b16:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002b1a:	0f 35 a0 20 	or %d2,%d5,%d3
80002b1e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002b22:	74 22       	st.w [%a2],%d2
80002b24:	1d ff 2b ff 	j 8000297a <_Core2_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002b28:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002b2a:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002b2e:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002b32:	0f 35 a0 20 	or %d2,%d5,%d3
80002b36:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002b3a:	74 22       	st.w [%a2],%d2
80002b3c:	1d ff e7 fe 	j 8000290a <_Core2_start+0x68>

80002b40 <Ifx_C_Init>:
 *
 * Parameters: Nil
 * Return: Nil
 */
void Ifx_C_Init(void)
{
80002b40:	40 ae       	mov.aa %a14,%sp
80002b42:	20 08       	sub.a %sp,8
    IfxStart_CTablePtr pBlockDest, pBlockSrc;
    uint32             uiLength, uiCnt;
    uint32            *pTable;
    /* clear table */
    pTable = (uint32 *)&__clear_table;
80002b44:	91 00 00 28 	movh.a %a2,32768
80002b48:	d9 22 1c e0 	lea %a2,[%a2]924 <8000039c <__clear_table>>

    while (pTable)
80002b4c:	1d 00 32 00 	j 80002bb0 <Ifx_C_Init+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
80002b50:	91 00 00 28 	movh.a %a2,32768
80002b54:	d9 22 44 00 	lea %a2,[%a2]1028 <80000404 <__copy_table>>
80002b58:	1d 00 7c 00 	j 80002c50 <Ifx_C_Init+0x110>
            *pBlockDest.ullPtr++ = 0;
80002b5c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80002b60:	80 22       	mov.d %d2,%a2
80002b62:	1b 82 00 20 	addi %d2,%d2,8
80002b66:	59 e2 fc ff 	st.w [%a14]-4,%d2
80002b6a:	d2 02       	mov %e2,0
80002b6c:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80002b70:	02 52       	mov %d2,%d5
80002b72:	1b f2 ff 5f 	addi %d5,%d2,-1
80002b76:	df 02 f3 ff 	jne %d2,0,80002b5c <Ifx_C_Init+0x1c>
        if (uiLength & 0x4)
80002b7a:	6f 24 0a 00 	jz.t %d4,2,80002b8e <Ifx_C_Init+0x4e>
            *pBlockDest.uiPtr++ = 0;
80002b7e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80002b82:	80 22       	mov.d %d2,%a2
80002b84:	c2 42       	add %d2,4
80002b86:	59 e2 fc ff 	st.w [%a14]-4,%d2
80002b8a:	82 02       	mov %d2,0
80002b8c:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
80002b8e:	6f 14 0a 00 	jz.t %d4,1,80002ba2 <Ifx_C_Init+0x62>
            *pBlockDest.usPtr++ = 0;
80002b92:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80002b96:	80 22       	mov.d %d2,%a2
80002b98:	c2 22       	add %d2,2
80002b9a:	59 e2 fc ff 	st.w [%a14]-4,%d2
80002b9e:	82 02       	mov %d2,0
80002ba0:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
80002ba2:	6f 04 06 00 	jz.t %d4,0,80002bae <Ifx_C_Init+0x6e>
            *pBlockDest.ucPtr = 0;
80002ba6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80002baa:	82 02       	mov %d2,0
80002bac:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80002bae:	40 32       	mov.aa %a2,%a3
    while (pTable)
80002bb0:	bd 02 d0 7f 	jz.a %a2,80002b50 <Ifx_C_Init+0x10>
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80002bb4:	d9 23 08 00 	lea %a3,[%a2]8
80002bb8:	54 22       	ld.w %d2,[%a2]
80002bba:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80002bbe:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
80002bc2:	df f4 c7 7f 	jeq %d4,-1,80002b50 <Ifx_C_Init+0x10>
        uiCnt = uiLength / 8;
80002bc6:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
80002bca:	1d ff d4 ff 	j 80002b72 <Ifx_C_Init+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
80002bce:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80002bd2:	80 22       	mov.d %d2,%a2
80002bd4:	1b 82 00 20 	addi %d2,%d2,8
80002bd8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80002bdc:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80002be0:	80 32       	mov.d %d2,%a3
80002be2:	1b 82 00 20 	addi %d2,%d2,8
80002be6:	59 e2 fc ff 	st.w [%a14]-4,%d2
80002bea:	09 26 40 09 	ld.d %e6,[%a2]
80002bee:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80002bf2:	02 42       	mov %d2,%d4
80002bf4:	1b f2 ff 4f 	addi %d4,%d2,-1
80002bf8:	df 02 eb ff 	jne %d2,0,80002bce <Ifx_C_Init+0x8e>
        }

        if (uiLength & 0x4)
80002bfc:	6f 23 10 00 	jz.t %d3,2,80002c1c <Ifx_C_Init+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80002c00:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80002c04:	80 22       	mov.d %d2,%a2
80002c06:	c2 42       	add %d2,4
80002c08:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80002c0c:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80002c10:	80 32       	mov.d %d2,%a3
80002c12:	c2 42       	add %d2,4
80002c14:	59 e2 fc ff 	st.w [%a14]-4,%d2
80002c18:	54 22       	ld.w %d2,[%a2]
80002c1a:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
80002c1c:	6f 13 11 00 	jz.t %d3,1,80002c3e <Ifx_C_Init+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80002c20:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80002c24:	80 32       	mov.d %d2,%a3
80002c26:	c2 22       	add %d2,2
80002c28:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80002c2c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80002c30:	80 22       	mov.d %d2,%a2
80002c32:	c2 22       	add %d2,2
80002c34:	59 e2 fc ff 	st.w [%a14]-4,%d2
80002c38:	b9 32 00 00 	ld.hu %d2,[%a3]0
80002c3c:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80002c3e:	6f 03 08 00 	jz.t %d3,0,80002c4e <Ifx_C_Init+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80002c42:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80002c46:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80002c4a:	14 32       	ld.bu %d2,[%a3]
80002c4c:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80002c4e:	60 52       	mov.a %a2,%d5
    while (pTable)
80002c50:	bd 02 14 00 	jz.a %a2,80002c78 <Ifx_C_Init+0x138>
        pBlockSrc.uiPtr  = (uint32 *)*pTable++;
80002c54:	54 22       	ld.w %d2,[%a2]
80002c56:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80002c5a:	19 22 04 00 	ld.w %d2,[%a2]4
80002c5e:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80002c62:	80 22       	mov.d %d2,%a2
80002c64:	1b c2 00 50 	addi %d5,%d2,12
80002c68:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
80002c6c:	df f3 06 00 	jeq %d3,-1,80002c78 <Ifx_C_Init+0x138>
        uiCnt = uiLength / 8;
80002c70:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80002c74:	1d ff c0 ff 	j 80002bf4 <Ifx_C_Init+0xb4>
        }
    }
}
80002c78:	00 90       	ret 

80002c7a <init_GPIO>:


#include "GPIO.h"  //1. GPIO.h 추가

void init_GPIO(void)
{
80002c7a:	40 ae       	mov.aa %a14,%sp
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80002c7c:	3b 00 08 50 	mov %d5,128
80002c80:	82 24       	mov %d4,2
80002c82:	91 40 00 4f 	movh.a %a4,61444
80002c86:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
80002c8a:	6d ff ed f8 	call 80001e64 <IfxPort_setPinMode>
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80002c8e:	3b 80 00 50 	mov %d5,8
80002c92:	82 04       	mov %d4,0
80002c94:	91 40 00 4f 	movh.a %a4,61444
80002c98:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
80002c9c:	6d ff e4 f8 	call 80001e64 <IfxPort_setPinMode>
80002ca0:	3b 80 00 50 	mov %d5,8
80002ca4:	82 14       	mov %d4,1
80002ca6:	91 40 00 4f 	movh.a %a4,61444
80002caa:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
80002cae:	6d ff db f8 	call 80001e64 <IfxPort_setPinMode>

   /*---------in--------*/
   IfxPort_setPinModeInput(PORT_020,IfxPort_InputMode_pullDown); // Encoder A // @suppress("Symbol is not resolved")
   IfxPort_setPinModeInput(PORT_021,IfxPort_InputMode_pullDown); // Encoder B // @suppress("Symbol is not resolved")

}
80002cb2:	00 90       	ret 

80002cb4 <Encoder>:

#include "Encoder.h"
#include "GPIO.h"

void Encoder(void)
{
80002cb4:	40 ae       	mov.aa %a14,%sp
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
80002cb6:	91 40 00 2f 	movh.a %a2,61444
80002cba:	d9 22 00 8a 	lea %a2,[%a2]-24064 <f003a200 <_SMALL_DATA4_+0x60032200>>
80002cbe:	d9 23 24 00 	lea %a3,[%a2]36 <f0040024 <_SMALL_DATA4_+0x60038024>>
80002cc2:	19 28 24 00 	ld.w %d8,[%a2]36 <f0040024 <_SMALL_DATA4_+0x60038024>>
80002cc6:	8f 18 00 51 	and %d5,%d8,1
80002cca:	54 33       	ld.w %d3,[%a3]
80002ccc:	37 03 e1 40 	extr.u %d4,%d3,1,1

    uint8 state = 0;

    /* A,B 상을 통해 현재 상태 계산*/

    if (A==0 && B ==0){state=0;}
80002cd0:	87 83 21 80 	or.t %d8,%d3,1,%d8,0
80002cd4:	df 08 14 00 	jeq %d8,0,80002cfc <Encoder+0x48>
    else if(A==1 && B==0){state=1;}
80002cd8:	02 53       	mov %d3,%d5
80002cda:	8f 14 80 21 	xor %d2,%d4,1
80002cde:	26 52       	and %d2,%d5
80002ce0:	df 02 0d 80 	jne %d2,0,80002cfa <Encoder+0x46>
    else if(A==1 && B==1){state=2;}
80002ce4:	26 43       	and %d3,%d4
80002ce6:	df 03 54 80 	jne %d3,0,80002d8e <Encoder+0xda>
    else if(A==0&&B==1){state=3;}
80002cea:	8f 15 80 21 	xor %d2,%d5,1
80002cee:	26 42       	and %d2,%d4
80002cf0:	df 02 52 80 	jne %d2,0,80002d94 <Encoder+0xe0>
    uint8 state = 0;
80002cf4:	82 08       	mov %d8,0
80002cf6:	1d 00 03 00 	j 80002cfc <Encoder+0x48>
    else if(A==1 && B==0){state=1;}
80002cfa:	82 18       	mov %d8,1


    /*현재와 이전 상태 차이를 통해 ㅓㄹ스 카운트 및 방향 계산*/

    if(state-state_old==1 || state-state_old==-3){encoderCNT++; encoderDir = 1;}
80002cfc:	91 00 00 26 	movh.a %a2,24576
80002d00:	39 22 34 00 	ld.bu %d2,[%a2]52 <60000034 <state_old>>
80002d04:	0b 28 80 20 	sub %d2,%d8,%d2
80002d08:	8b 12 00 32 	eq %d3,%d2,1
80002d0c:	8b d2 ff 34 	or.eq %d3,%d2,-3
80002d10:	df 03 45 00 	jeq %d3,0,80002d9a <Encoder+0xe6>
80002d14:	91 00 00 26 	movh.a %a2,24576
80002d18:	d9 23 30 00 	lea %a3,[%a2]48 <60000030 <encoderCNT>>
80002d1c:	54 32       	ld.w %d2,[%a3]
80002d1e:	c2 12       	add %d2,1
80002d20:	59 22 30 00 	st.w [%a2]48 <60000030 <encoderCNT>>,%d2
80002d24:	91 00 00 26 	movh.a %a2,24576
80002d28:	82 12       	mov %d2,1
80002d2a:	59 22 2c 00 	st.w [%a2]44 <6000002c <encoderDir>>,%d2
    else if(state-state_old==-1 || state-state_old==3){encoderCNT--; encoderDir=-1;}

    theta = encoderCNT*0.01*0.25*360; /* 한바퀴 100펄스(0.01), 4채배(0.25)*/
80002d2e:	91 00 00 26 	movh.a %a2,24576
80002d32:	19 24 30 00 	ld.w %d4,[%a2]48 <60000030 <encoderCNT>>
80002d36:	6d 00 14 03 	call 8000335e <__floatsidf>
80002d3a:	7b e0 7a 64 	movh %d6,18350
80002d3e:	1b b6 47 61 	addi %d6,%d6,5243
80002d42:	7b 40 f8 73 	movh %d7,16260
80002d46:	1b 17 ae 77 	addi %d7,%d7,31457
80002d4a:	0b 23 10 48 	mov %e4,%d3,%d2
80002d4e:	6d 00 4e 01 	call 80002fea <__muldf3>
80002d52:	82 06       	mov %d6,0
80002d54:	7b 00 fd 73 	movh %d7,16336
80002d58:	0b 23 10 48 	mov %e4,%d3,%d2
80002d5c:	6d 00 47 01 	call 80002fea <__muldf3>
80002d60:	82 06       	mov %d6,0
80002d62:	7b 70 07 74 	movh %d7,16503
80002d66:	1b 07 00 78 	addi %d7,%d7,-32768
80002d6a:	0b 23 10 48 	mov %e4,%d3,%d2
80002d6e:	6d 00 3e 01 	call 80002fea <__muldf3>
80002d72:	0b 23 10 48 	mov %e4,%d3,%d2
80002d76:	6d 00 2f 03 	call 800033d4 <__truncdfsf2>
80002d7a:	91 00 00 26 	movh.a %a2,24576
80002d7e:	d9 22 28 00 	lea %a2,[%a2]40 <60000028 <theta>>
80002d82:	74 22       	st.w [%a2],%d2

    state_old = state; //펄스 카운트 -> 각도 변환 * 각 모터에 맞게 값 변경 필요
80002d84:	91 00 00 26 	movh.a %a2,24576
80002d88:	e9 28 34 00 	st.b [%a2]52 <60000034 <state_old>>,%d8

}
80002d8c:	00 90       	ret 
    else if(A==1 && B==1){state=2;}
80002d8e:	82 28       	mov %d8,2
80002d90:	1d ff b6 ff 	j 80002cfc <Encoder+0x48>
    else if(A==0&&B==1){state=3;}
80002d94:	82 38       	mov %d8,3
80002d96:	1d ff b3 ff 	j 80002cfc <Encoder+0x48>
    else if(state-state_old==-1 || state-state_old==3){encoderCNT--; encoderDir=-1;}
80002d9a:	8b f2 1f 32 	eq %d3,%d2,-1
80002d9e:	8b 32 e0 34 	or.eq %d3,%d2,3
80002da2:	df 03 c6 7f 	jeq %d3,0,80002d2e <Encoder+0x7a>
80002da6:	91 00 00 26 	movh.a %a2,24576
80002daa:	d9 23 30 00 	lea %a3,[%a2]48 <60000030 <encoderCNT>>
80002dae:	54 32       	ld.w %d2,[%a3]
80002db0:	c2 f2       	add %d2,-1
80002db2:	59 22 30 00 	st.w [%a2]48 <60000030 <encoderCNT>>,%d2
80002db6:	91 00 00 26 	movh.a %a2,24576
80002dba:	82 f2       	mov %d2,-1
80002dbc:	59 22 2c 00 	st.w [%a2]44 <6000002c <encoderDir>>,%d2
80002dc0:	1d ff b7 ff 	j 80002d2e <Encoder+0x7a>

80002dc4 <init_ADC_Group>:

/*****1. init_ADC_Group ****/


void init_ADC_Group(void)
{
80002dc4:	40 ae       	mov.aa %a14,%sp
80002dc6:	20 a8       	sub.a %sp,168
    IfxVadc_Adc_Config     adcConf; /* Define a configuration structure for the VADC module */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC); /* adcConf 값을 디폴트 값(MODULE_VADC)으로 초기화 */
80002dc8:	91 20 00 5f 	movh.a %a5,61442
80002dcc:	d9 e4 d8 ff 	lea %a4,[%a14]-40
80002dd0:	6d ff 57 f2 	call 8000127e <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&Vadc, &adcConf);    /* Vadc를 adcConf 값으로 초기화 */
80002dd4:	91 00 00 c6 	movh.a %a12,24576
80002dd8:	d9 cc 34 20 	lea %a12,[%a12]180 <600000b4 <Vadc>>
80002ddc:	d9 e5 d8 ff 	lea %a5,[%a14]-40 <600000b4 <Vadc>>
80002de0:	40 c4       	mov.aa %a4,%a12
80002de2:	6d ff c4 f1 	call 8000116a <IfxVadc_Adc_initModule>

    IfxVadc_Adc_GroupConfig  adcGroupConf;   /*Define a configuration structure for the VADC group */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &Vadc); /* adc 그룹 구조체 초기화 및 Vadc 값 반영 */
80002de6:	40 c5       	mov.aa %a5,%a12
80002de8:	d9 e4 dc df 	lea %a4,[%a14]-164
80002dec:	6d ff a4 f1 	call 80001134 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;     /* Select the group */
80002df0:	82 42       	mov %d2,4
80002df2:	59 e2 e0 df 	st.w [%a14]-160,%d2
    adcGroupConf.master = adcGroupConf.groupId;    /* Select the master group */
80002df6:	59 e2 e4 df 	st.w [%a14]-156,%d2

    adcGroupConf.arbiter.requestSlotScanEnabled = TRUE;   /* Enable scan source */
80002dfa:	82 12       	mov %d2,1
80002dfc:	e9 e2 d5 ff 	st.b [%a14]-43,%d2
    adcGroupConf.scanRequest.autoscanEnabled = TRUE; /*Enable auto scan mode */
80002e00:	e9 e2 f8 df 	st.b [%a14]-136,%d2

    adcGroupConf.scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always; /* 특정  트리거 조건 없이 항상 변환 수행 */
80002e04:	82 12       	mov %d2,1
80002e06:	59 e2 c4 ef 	st.w [%a14]-124,%d2

    IfxVadc_Adc_initGroup(&adcGroup4, &adcGroupConf); /* adc 그룹 설정 값 반영 */
80002e0a:	d9 e5 dc df 	lea %a5,[%a14]-164
80002e0e:	91 00 00 46 	movh.a %a4,24576
80002e12:	d9 44 28 20 	lea %a4,[%a4]168 <600000a8 <adcGroup4>>
80002e16:	6d ff 4d ef 	call 80000cb0 <IfxVadc_Adc_initGroup>
}
80002e1a:	00 90       	ret 

80002e1c <init_ADC_G4_SingleCh>:


/*****2. init_ADC_G4_SingleCh ****/
void init_ADC_G4_SingleCh(uint8 Channel)
{
80002e1c:	40 ae       	mov.aa %a14,%sp
80002e1e:	20 40       	sub.a %sp,64
80002e20:	8f f4 0f 81 	and %d8,%d4,255
    IfxVadc_Adc_ChannelConfig adcChannelConfigInfo;
    uint32 ulTemp = ((uint32)1u <<Channel);
80002e24:	82 19       	mov %d9,1
80002e26:	0f 89 00 90 	sh %d9,%d9,%d8

    IfxVadc_Adc_initChannelConfig(&adcChannelConfigInfo, &adcGroup4); /*Fill it with default values */
80002e2a:	91 00 00 c6 	movh.a %a12,24576
80002e2e:	d9 cc 28 20 	lea %a12,[%a12]168 <600000a8 <adcGroup4>>
80002e32:	40 c5       	mov.aa %a5,%a12
80002e34:	d9 e4 c4 ff 	lea %a4,[%a14]-60
80002e38:	6d ff 31 ef 	call 80000c9a <IfxVadc_Adc_initChannelConfig>

    adcChannelConfigInfo.channelId = (IfxVadc_ChannelId)Channel; /*Select the Channel ID */
80002e3c:	59 e8 dc ff 	st.w [%a14]-36,%d8
    adcChannelConfigInfo.resultRegister = (IfxVadc_ChannelResult)(Channel); /* Use dedicated result register */
80002e40:	59 e8 e8 ff 	st.w [%a14]-24,%d8

    /* Initialize the channel */
    IfxVadc_Adc_initChannel(&adcG4Channel[Channel], &adcChannelConfigInfo); /* 채널 초기화 */
80002e44:	d9 e5 c4 ff 	lea %a5,[%a14]-60
80002e48:	91 00 00 46 	movh.a %a4,24576
80002e4c:	d9 44 08 10 	lea %a4,[%a4]72 <60000048 <adcG4Channel>>
80002e50:	01 48 03 46 	addsc.a %a4,%a4,%d8,3
80002e54:	01 48 02 46 	addsc.a %a4,%a4,%d8,2
80002e58:	6d ff 0f ee 	call 80000a76 <IfxVadc_Adc_initChannel>
}


IFX_INLINE void IfxVadc_Adc_setScan(IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setScan(group->group, channels, mask);
80002e5c:	02 95       	mov %d5,%d9
80002e5e:	02 94       	mov %d4,%d9
80002e60:	99 c4 04 00 	ld.a %a4,[%a12]4 <60000004 <__TMC_END__>>
80002e64:	6d ff d5 ed 	call 80000a0e <IfxVadc_setScan>

    /*Add the channel to the scan sequence */
    IfxVadc_Adc_setScan(&adcGroup4, ulTemp, ulTemp);  /* the background scan sequence. */

}
80002e68:	00 90       	ret 

80002e6a <init_ADC_G4_Channel>:

/*****3. init_ADC_G4_Channel ****/
void init_ADC_G4_Channel(void)
{
80002e6a:	40 ae       	mov.aa %a14,%sp
    init_ADC_G4_SingleCh(ADC_G4_CH0); /* 각 채널 초기화 */
80002e6c:	82 04       	mov %d4,0
80002e6e:	6d ff d7 ff 	call 80002e1c <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH1);
80002e72:	82 14       	mov %d4,1
80002e74:	6d ff d4 ff 	call 80002e1c <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH2);
80002e78:	82 24       	mov %d4,2
80002e7a:	6d ff d1 ff 	call 80002e1c <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH3);
80002e7e:	82 34       	mov %d4,3
80002e80:	6d ff ce ff 	call 80002e1c <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH4);
80002e84:	82 44       	mov %d4,4
80002e86:	6d ff cb ff 	call 80002e1c <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH5);
80002e8a:	82 54       	mov %d4,5
80002e8c:	6d ff c8 ff 	call 80002e1c <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH6);
80002e90:	82 64       	mov %d4,6
80002e92:	6d ff c5 ff 	call 80002e1c <init_ADC_G4_SingleCh>
    init_ADC_G4_SingleCh(ADC_G4_CH7);
80002e96:	82 74       	mov %d4,7
80002e98:	6d ff c2 ff 	call 80002e1c <init_ADC_G4_SingleCh>
}


IFX_INLINE void IfxVadc_Adc_startScan(IfxVadc_Adc_Group *group)
{
    IfxVadc_startScan(group->group);
80002e9c:	91 00 00 26 	movh.a %a2,24576
80002ea0:	d9 22 28 20 	lea %a2,[%a2]168 <600000a8 <adcGroup4>>
80002ea4:	b0 42       	add.a %a2,4
80002ea6:	d4 22       	ld.a %a2,[%a2]
    group->ASMR.B.LDEV = 1;     /* set Load event. Channels stored in ASSEL will be copied into pending register and conversion will start */
80002ea8:	d9 23 24 20 	lea %a3,[%a2]164
80002eac:	19 22 24 20 	ld.w %d2,[%a2]164
80002eb0:	b7 12 81 24 	insert %d2,%d2,1,9,1
80002eb4:	74 32       	st.w [%a3],%d2

    IfxVadc_Adc_startScan(&adcGroup4);
}
80002eb6:	00 90       	ret 

80002eb8 <ADC_G4_GetData>:

/*****4. ADC_G4_GetData ****/
void ADC_G4_GetData(void)
{
80002eb8:	40 ae       	mov.aa %a14,%sp
    Ifx_VADC_RES ADC_result; /*변환 결과 값 구조체 선언*/

    uint8 ch;
    for(ch = ADC_G4_CH0; ch < ADC_G4_MAX; ch++)
80002eba:	82 03       	mov %d3,0
80002ebc:	1d 00 25 00 	j 80002f06 <ADC_G4_GetData+0x4e>
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
80002ec0:	91 00 00 26 	movh.a %a2,24576
80002ec4:	80 22       	mov.d %d2,%a2
80002ec6:	1b 82 04 20 	addi %d2,%d2,72
80002eca:	13 c3 20 22 	madd %d2,%d2,%d3,12
80002ece:	60 22       	mov.a %a2,%d2
80002ed0:	99 23 08 00 	ld.a %a3,[%a2]8
80002ed4:	19 34 04 00 	ld.w %d4,[%a3]4
80002ed8:	19 22 04 00 	ld.w %d2,[%a2]4
    tmpResult.U = group->RES[resultIdx].U;
80002edc:	1b 02 0a 20 	addi %d2,%d2,160
80002ee0:	06 22       	sh %d2,2
80002ee2:	60 42       	mov.a %a2,%d4
80002ee4:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002ee8:	54 22       	ld.w %d2,[%a2]
    {
        do{
            ADC_result = IfxVadc_Adc_getResult(&adcG4Channel[ch]); /*결과 값 가져오기*/
        }while(!ADC_result.B.VF);
80002eea:	ff 02 eb 7f 	jge %d2,0,80002ec0 <ADC_G4_GetData+0x8>

        ADC_G4_RAWDATA[ch]=ADC_result.B.RESULT;   /*결과 값 저장*/
80002eee:	8f 13 00 40 	sh %d4,%d3,1
80002ef2:	91 00 00 26 	movh.a %a2,24576
80002ef6:	d9 22 38 00 	lea %a2,[%a2]56 <60000038 <ADC_G4_RAWDATA>>
80002efa:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002efe:	b4 22       	st.h [%a2],%d2
    for(ch = ADC_G4_CH0; ch < ADC_G4_MAX; ch++)
80002f00:	c2 13       	add %d3,1
80002f02:	8f f3 0f 31 	and %d3,%d3,255
80002f06:	bf 83 dd ff 	jlt.u %d3,8,80002ec0 <ADC_G4_GetData+0x8>
    IfxVadc_startScan(group->group);
80002f0a:	91 00 00 26 	movh.a %a2,24576
80002f0e:	d9 22 28 20 	lea %a2,[%a2]168 <600000a8 <adcGroup4>>
80002f12:	b0 42       	add.a %a2,4
80002f14:	d4 22       	ld.a %a2,[%a2]
    group->ASMR.B.LDEV = 1;     /* set Load event. Channels stored in ASSEL will be copied into pending register and conversion will start */
80002f16:	d9 23 24 20 	lea %a3,[%a2]164
80002f1a:	19 22 24 20 	ld.w %d2,[%a2]164
80002f1e:	b7 12 81 24 	insert %d2,%d2,1,9,1
80002f22:	74 32       	st.w [%a3],%d2
        }
    IfxVadc_Adc_startScan(&adcGroup4);
 }
80002f24:	00 90       	ret 

80002f26 <core0_main>:

float a = 0;


void core0_main(void)
{
80002f26:	40 ae       	mov.aa %a14,%sp
    __enable();
80002f28:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80002f2c:	6d ff 32 f7 	call 80001d90 <IfxScuWdt_getCpuWatchdogPassword>
80002f30:	02 24       	mov %d4,%d2
80002f32:	6d ff 13 f6 	call 80001b58 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80002f36:	6d ff 3f f7 	call 80001db4 <IfxScuWdt_getSafetyWatchdogPassword>
80002f3a:	02 24       	mov %d4,%d2
80002f3c:	6d ff 4d f6 	call 80001bd6 <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80002f40:	91 00 00 c6 	movh.a %a12,24576
80002f44:	d9 cc 24 00 	lea %a12,[%a12]36 <60000024 <g_cpuSyncEvent>>
80002f48:	40 c4       	mov.aa %a4,%a12
80002f4a:	6d ff d2 f9 	call 800022ee <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80002f4e:	82 14       	mov %d4,1
80002f50:	40 c4       	mov.aa %a4,%a12
80002f52:	6d ff 8e f9 	call 8000226e <IfxCpu_waitEvent>

    init_GPIO();
80002f56:	6d ff 92 fe 	call 80002c7a <init_GPIO>
    init_STM();
80002f5a:	6d ff 7f eb 	call 80000658 <init_STM>
    init_ADC_Group();
80002f5e:	6d ff 33 ff 	call 80002dc4 <init_ADC_Group>
    init_ADC_G4_Channel();
80002f62:	6d ff 84 ff 	call 80002e6a <init_ADC_G4_Channel>

    a =1;
80002f66:	91 00 00 26 	movh.a %a2,24576
80002f6a:	7b 00 f8 23 	movh %d2,16256
80002f6e:	d9 22 20 00 	lea %a2,[%a2]32 <60000020 <a>>
80002f72:	74 22       	st.w [%a2],%d2

    while(1)
    {
        AppScheduling();
80002f74:	6d ff 4b eb 	call 8000060a <AppScheduling>
        ADC_G4_GetData();
80002f78:	6d ff a0 ff 	call 80002eb8 <ADC_G4_GetData>
    while(1)
80002f7c:	1d ff fc ff 	j 80002f74 <core0_main+0x4e>

80002f80 <core1_main>:
#include "Header_USER.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
80002f80:	40 ae       	mov.aa %a14,%sp
80002f82:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80002f86:	6d ff 05 f7 	call 80001d90 <IfxScuWdt_getCpuWatchdogPassword>
80002f8a:	02 24       	mov %d4,%d2
80002f8c:	6d ff e6 f5 	call 80001b58 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80002f90:	91 00 00 c6 	movh.a %a12,24576
80002f94:	d9 cc 24 00 	lea %a12,[%a12]36 <60000024 <g_cpuSyncEvent>>
80002f98:	40 c4       	mov.aa %a4,%a12
80002f9a:	6d ff aa f9 	call 800022ee <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80002f9e:	82 14       	mov %d4,1
80002fa0:	40 c4       	mov.aa %a4,%a12
80002fa2:	6d ff 66 f9 	call 8000226e <IfxCpu_waitEvent>
    
    while(1)
    {
        Encoder();
80002fa6:	6d ff 87 fe 	call 80002cb4 <Encoder>
    while(1)
80002faa:	1d ff fe ff 	j 80002fa6 <core1_main+0x26>

80002fae <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
80002fae:	40 ae       	mov.aa %a14,%sp
80002fb0:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80002fb4:	6d ff ee f6 	call 80001d90 <IfxScuWdt_getCpuWatchdogPassword>
80002fb8:	02 24       	mov %d4,%d2
80002fba:	6d ff cf f5 	call 80001b58 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80002fbe:	91 00 00 c6 	movh.a %a12,24576
80002fc2:	d9 cc 24 00 	lea %a12,[%a12]36 <60000024 <g_cpuSyncEvent>>
80002fc6:	40 c4       	mov.aa %a4,%a12
80002fc8:	6d ff 93 f9 	call 800022ee <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80002fcc:	82 14       	mov %d4,1
80002fce:	40 c4       	mov.aa %a4,%a12
80002fd0:	6d ff 4f f9 	call 8000226e <IfxCpu_waitEvent>
    
    while(1)
80002fd4:	1d 00 00 00 	j 80002fd4 <core2_main+0x26>

80002fd8 <memset>:
80002fd8:	40 42       	mov.aa %a2,%a4
80002fda:	df 05 07 00 	jeq %d5,0,80002fe8 <memset+0x10>
80002fde:	60 53       	mov.a %a3,%d5
80002fe0:	b0 f3       	add.a %a3,-1
80002fe2:	24 44       	st.b [%a4+],%d4
80002fe4:	fd 30 ff 7f 	loop %a3,80002fe2 <memset+0xa>
80002fe8:	00 90       	ret 

80002fea <__muldf3>:
80002fea:	20 50       	sub.a %sp,80
80002fec:	d9 a5 14 00 	lea %a5,[%sp]20
80002ff0:	d9 a4 04 00 	lea %a4,[%sp]4
80002ff4:	89 a4 44 09 	st.d [%sp]4,%e4
80002ff8:	89 a6 4c 09 	st.d [%sp]12,%e6
80002ffc:	6d 00 e6 02 	call 800035c8 <__unpack_d>
80003000:	d9 a5 28 00 	lea %a5,[%sp]40
80003004:	d9 a4 0c 00 	lea %a4,[%sp]12
80003008:	6d 00 e0 02 	call 800035c8 <__unpack_d>
8000300c:	19 a2 14 00 	ld.w %d2,[%sp]20
80003010:	ff 22 0f 80 	jge.u %d2,2,8000302e <__muldf3+0x44>
80003014:	19 a3 18 00 	ld.w %d3,[%sp]24
80003018:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000301c:	d9 a4 14 00 	lea %a4,[%sp]20
80003020:	0b 23 10 21 	ne %d2,%d3,%d2
80003024:	59 a2 18 00 	st.w [%sp]24,%d2
80003028:	6d 00 01 02 	call 8000342a <__pack_d>
8000302c:	00 90       	ret 
8000302e:	19 a3 28 00 	ld.w %d3,[%sp]40
80003032:	bf 23 14 80 	jlt.u %d3,2,8000305a <__muldf3+0x70>
80003036:	df 42 0a 80 	jne %d2,4,8000304a <__muldf3+0x60>
8000303a:	91 00 00 48 	movh.a %a4,32768
8000303e:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80003042:	df 23 f3 7f 	jeq %d3,2,80003028 <__muldf3+0x3e>
80003046:	1d ff e7 ff 	j 80003014 <__muldf3+0x2a>
8000304a:	df 43 15 80 	jne %d3,4,80003074 <__muldf3+0x8a>
8000304e:	91 00 00 48 	movh.a %a4,32768
80003052:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80003056:	df 22 e9 7f 	jeq %d2,2,80003028 <__muldf3+0x3e>
8000305a:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000305e:	19 a3 18 00 	ld.w %d3,[%sp]24
80003062:	d9 a4 28 00 	lea %a4,[%sp]40
80003066:	0b 23 10 21 	ne %d2,%d3,%d2
8000306a:	59 a2 2c 00 	st.w [%sp]44,%d2
8000306e:	6d 00 de 01 	call 8000342a <__pack_d>
80003072:	00 90       	ret 
80003074:	19 a5 2c 00 	ld.w %d5,[%sp]44
80003078:	19 a4 18 00 	ld.w %d4,[%sp]24
8000307c:	0b 45 10 a1 	ne %d10,%d5,%d4
80003080:	df 22 aa 00 	jeq %d2,2,800031d4 <__muldf3+0x1ea>
80003084:	df 23 ae 00 	jeq %d3,2,800031e0 <__muldf3+0x1f6>
80003088:	19 a6 34 00 	ld.w %d6,[%sp]52
8000308c:	19 a4 20 00 	ld.w %d4,[%sp]32
80003090:	82 03       	mov %d3,0
80003092:	73 46 68 00 	mul.u %e0,%d6,%d4
80003096:	19 a2 38 00 	ld.w %d2,[%sp]56
8000309a:	82 0b       	mov %d11,0
8000309c:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
800030a0:	02 48       	mov %d8,%d4
800030a2:	19 a7 24 00 	ld.w %d7,[%sp]36
800030a6:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
800030aa:	73 42 68 40 	mul.u %e4,%d2,%d4
800030ae:	82 0d       	mov %d13,0
800030b0:	82 0c       	mov %d12,0
800030b2:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
800030b6:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
800030ba:	73 27 68 80 	mul.u %e8,%d7,%d2
800030be:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
800030c2:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
800030c6:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
800030ca:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
800030ce:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
800030d2:	0b 35 00 61 	eq %d6,%d5,%d3
800030d6:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
800030da:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
800030de:	02 67       	mov %d7,%d6
800030e0:	82 06       	mov %d6,0
800030e2:	0b 06 40 60 	addx %d6,%d6,%d0
800030e6:	0b 12 50 50 	addc %d5,%d2,%d1
800030ea:	0b 51 00 41 	eq %d4,%d1,%d5
800030ee:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
800030f2:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
800030f6:	df 04 06 80 	jne %d4,0,80003102 <__muldf3+0x118>
800030fa:	8b 1b 80 b0 	addx %d11,%d11,1
800030fe:	8b 07 a0 70 	addc %d7,%d7,0
80003102:	82 04       	mov %d4,0
80003104:	0b 83 40 30 	addx %d3,%d3,%d8
80003108:	0b 94 50 20 	addc %d2,%d4,%d9
8000310c:	0b b3 40 30 	addx %d3,%d3,%d11
80003110:	0b 72 50 20 	addc %d2,%d2,%d7
80003114:	19 a4 1c 00 	ld.w %d4,[%sp]28
80003118:	19 a7 30 00 	ld.w %d7,[%sp]48
8000311c:	59 aa 00 10 	st.w [%sp]64,%d10
80003120:	0b 74 00 10 	add %d1,%d4,%d7
80003124:	7b 00 00 42 	movh %d4,8192
80003128:	1b 41 00 00 	addi %d0,%d1,4
8000312c:	0b 42 00 71 	eq %d7,%d2,%d4
80003130:	b7 07 01 70 	insert %d7,%d7,0,0,1
80003134:	59 a0 04 10 	st.w [%sp]68,%d0
80003138:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
8000313c:	df 07 2b 80 	jne %d7,0,80003192 <__muldf3+0x1a8>
80003140:	1b 51 00 70 	addi %d7,%d1,5
80003144:	8f 13 00 01 	and %d0,%d3,1
80003148:	02 71       	mov %d1,%d7
8000314a:	df 00 07 00 	jeq %d0,0,80003158 <__muldf3+0x16e>
8000314e:	77 65 80 6f 	dextr %d6,%d5,%d6,31
80003152:	06 f5       	sh %d5,-1
80003154:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
80003158:	77 32 80 3f 	dextr %d3,%d2,%d3,31
8000315c:	06 f2       	sh %d2,-1
8000315e:	0b 24 30 01 	lt.u %d0,%d4,%d2
80003162:	0b 24 70 02 	or.eq %d0,%d4,%d2
80003166:	c2 17       	add %d7,1
80003168:	df 00 ee ff 	jne %d0,0,80003144 <__muldf3+0x15a>
8000316c:	59 a1 04 10 	st.w [%sp]68,%d1
80003170:	8f f3 0f 41 	and %d4,%d3,255
80003174:	8b 04 28 42 	ne %d4,%d4,128
80003178:	df 04 3a 00 	jeq %d4,0,800031ec <__muldf3+0x202>
8000317c:	59 a2 0c 10 	st.w [%sp]76,%d2
80003180:	82 32       	mov %d2,3
80003182:	59 a3 08 10 	st.w [%sp]72,%d3
80003186:	d9 a4 3c 00 	lea %a4,[%sp]60
8000318a:	59 a2 3c 00 	st.w [%sp]60,%d2
8000318e:	1d ff 4d ff 	j 80003028 <__muldf3+0x3e>
80003192:	7b 00 00 71 	movh %d7,4096
80003196:	0b 27 30 41 	lt.u %d4,%d7,%d2
8000319a:	0b 27 70 42 	or.eq %d4,%d7,%d2
8000319e:	df 04 e9 ff 	jne %d4,0,80003170 <__muldf3+0x186>
800031a2:	77 32 80 20 	dextr %d2,%d2,%d3,1
800031a6:	c2 f0       	add %d0,-1
800031a8:	06 13       	sh %d3,1
800031aa:	ff 05 06 00 	jge %d5,0,800031b6 <__muldf3+0x1cc>
800031ae:	8f 13 40 11 	or %d1,%d3,1
800031b2:	0b 21 10 28 	mov %e2,%d1,%d2
800031b6:	0b 72 00 41 	eq %d4,%d2,%d7
800031ba:	b7 04 01 40 	insert %d4,%d4,0,0,1
800031be:	77 65 80 50 	dextr %d5,%d5,%d6,1
800031c2:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
800031c6:	06 16       	sh %d6,1
800031c8:	df 04 ed ff 	jne %d4,0,800031a2 <__muldf3+0x1b8>
800031cc:	59 a0 04 10 	st.w [%sp]68,%d0
800031d0:	1d ff d0 ff 	j 80003170 <__muldf3+0x186>
800031d4:	59 aa 18 00 	st.w [%sp]24,%d10
800031d8:	d9 a4 14 00 	lea %a4,[%sp]20
800031dc:	1d ff 26 ff 	j 80003028 <__muldf3+0x3e>
800031e0:	59 aa 2c 00 	st.w [%sp]44,%d10
800031e4:	d9 a4 28 00 	lea %a4,[%sp]40
800031e8:	1d ff 20 ff 	j 80003028 <__muldf3+0x3e>
800031ec:	77 32 00 4c 	dextr %d4,%d2,%d3,24
800031f0:	a6 65       	or %d5,%d6
800031f2:	8b 05 20 52 	ne %d5,%d5,0
800031f6:	0f 45 e0 40 	andn %d4,%d5,%d4
800031fa:	df 04 c1 7f 	jeq %d4,0,8000317c <__muldf3+0x192>
800031fe:	8b 03 88 30 	addx %d3,%d3,128
80003202:	8b 02 a0 20 	addc %d2,%d2,0
80003206:	8f f3 cf 31 	andn %d3,%d3,255
8000320a:	1d ff b9 ff 	j 8000317c <__muldf3+0x192>

8000320e <__divdf3>:
8000320e:	20 38       	sub.a %sp,56
80003210:	d9 a5 10 00 	lea %a5,[%sp]16
80003214:	40 a4       	mov.aa %a4,%sp
80003216:	89 a4 40 09 	st.d [%sp],%e4
8000321a:	89 a6 48 09 	st.d [%sp]8,%e6
8000321e:	6d 00 d5 01 	call 800035c8 <__unpack_d>
80003222:	d9 a5 24 00 	lea %a5,[%sp]36
80003226:	d9 a4 08 00 	lea %a4,[%sp]8
8000322a:	6d 00 cf 01 	call 800035c8 <__unpack_d>
8000322e:	19 a2 10 00 	ld.w %d2,[%sp]16
80003232:	ff 22 07 80 	jge.u %d2,2,80003240 <__divdf3+0x32>
80003236:	d9 a4 10 00 	lea %a4,[%sp]16
8000323a:	6d 00 f8 00 	call 8000342a <__pack_d>
8000323e:	00 90       	ret 
80003240:	19 a3 24 00 	ld.w %d3,[%sp]36
80003244:	d9 a4 24 00 	lea %a4,[%sp]36
80003248:	bf 23 f9 ff 	jlt.u %d3,2,8000323a <__divdf3+0x2c>
8000324c:	19 a5 14 00 	ld.w %d5,[%sp]20
80003250:	19 a4 28 00 	ld.w %d4,[%sp]40
80003254:	c6 54       	xor %d4,%d5
80003256:	59 a4 14 00 	st.w [%sp]20,%d4
8000325a:	1b e2 ff 4f 	addi %d4,%d2,-2
8000325e:	8f 24 c0 41 	andn %d4,%d4,2
80003262:	df 04 0a 80 	jne %d4,0,80003276 <__divdf3+0x68>
80003266:	91 00 00 48 	movh.a %a4,32768
8000326a:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
8000326e:	5f 32 e4 ff 	jne %d2,%d3,80003236 <__divdf3+0x28>
80003272:	1d ff e4 ff 	j 8000323a <__divdf3+0x2c>
80003276:	df 43 51 00 	jeq %d3,4,80003318 <__divdf3+0x10a>
8000327a:	df 23 5a 00 	jeq %d3,2,8000332e <__divdf3+0x120>
8000327e:	19 a3 18 00 	ld.w %d3,[%sp]24
80003282:	19 a2 2c 00 	ld.w %d2,[%sp]44
80003286:	09 a4 70 09 	ld.d %e4,[%sp]48
8000328a:	0b 23 80 00 	sub %d0,%d3,%d2
8000328e:	09 a2 5c 09 	ld.d %e2,[%sp]28
80003292:	0b 53 00 61 	eq %d6,%d3,%d5
80003296:	02 67       	mov %d7,%d6
80003298:	0b 42 50 72 	and.ge.u %d7,%d2,%d4
8000329c:	59 a0 18 00 	st.w [%sp]24,%d0
800032a0:	0b 35 a0 72 	or.lt.u %d7,%d5,%d3
800032a4:	df 07 0b 80 	jne %d7,0,800032ba <__divdf3+0xac>
800032a8:	1b f0 ff 6f 	addi %d6,%d0,-1
800032ac:	77 23 80 30 	dextr %d3,%d3,%d2,1
800032b0:	06 12       	sh %d2,1
800032b2:	59 a6 18 00 	st.w [%sp]24,%d6
800032b6:	0b 53 00 61 	eq %d6,%d3,%d5
800032ba:	3b d0 03 10 	mov %d1,61
800032be:	d2 08       	mov %e8,0
800032c0:	82 00       	mov %d0,0
800032c2:	7b 00 00 71 	movh %d7,4096
800032c6:	1d 00 04 00 	j 800032ce <__divdf3+0xc0>
800032ca:	0b 53 00 61 	eq %d6,%d3,%d5
800032ce:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
800032d2:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
800032d6:	df 06 0c 80 	jne %d6,0,800032ee <__divdf3+0xe0>
800032da:	0f 08 a0 a0 	or %d10,%d8,%d0
800032de:	0f 79 a0 60 	or %d6,%d9,%d7
800032e2:	0b 42 c0 20 	subx %d2,%d2,%d4
800032e6:	0b a6 10 88 	mov %e8,%d6,%d10
800032ea:	0b 53 d0 30 	subc %d3,%d3,%d5
800032ee:	c2 f1       	add %d1,-1
800032f0:	77 07 80 0f 	dextr %d0,%d7,%d0,31
800032f4:	77 23 80 30 	dextr %d3,%d3,%d2,1
800032f8:	06 f7       	sh %d7,-1
800032fa:	06 12       	sh %d2,1
800032fc:	df 01 e7 ff 	jne %d1,0,800032ca <__divdf3+0xbc>
80003300:	8f f8 0f 41 	and %d4,%d8,255
80003304:	8b 04 28 42 	ne %d4,%d4,128
80003308:	df 04 1a 00 	jeq %d4,0,8000333c <__divdf3+0x12e>
8000330c:	59 a8 1c 00 	st.w [%sp]28,%d8
80003310:	59 a9 20 00 	st.w [%sp]32,%d9
80003314:	1d ff 91 ff 	j 80003236 <__divdf3+0x28>
80003318:	82 02       	mov %d2,0
8000331a:	a0 02       	mov.a %a2,0
8000331c:	a0 03       	mov.a %a3,0
8000331e:	89 a2 dc 09 	st.da [%sp]28,%a2
80003322:	59 a2 18 00 	st.w [%sp]24,%d2
80003326:	d9 a4 10 00 	lea %a4,[%sp]16
8000332a:	1d ff 88 ff 	j 8000323a <__divdf3+0x2c>
8000332e:	82 42       	mov %d2,4
80003330:	d9 a4 10 00 	lea %a4,[%sp]16
80003334:	59 a2 10 00 	st.w [%sp]16,%d2
80003338:	1d ff 81 ff 	j 8000323a <__divdf3+0x2c>
8000333c:	a6 32       	or %d2,%d3
8000333e:	77 89 00 4c 	dextr %d4,%d9,%d8,24
80003342:	8b 02 20 32 	ne %d3,%d2,0
80003346:	0f 43 e0 20 	andn %d2,%d3,%d4
8000334a:	df 02 e1 7f 	jeq %d2,0,8000330c <__divdf3+0xfe>
8000334e:	8b 08 88 80 	addx %d8,%d8,128
80003352:	8b 09 a0 90 	addc %d9,%d9,0
80003356:	8f f8 cf 81 	andn %d8,%d8,255
8000335a:	1d ff d9 ff 	j 8000330c <__divdf3+0xfe>

8000335e <__floatsidf>:
8000335e:	82 32       	mov %d2,3
80003360:	20 18       	sub.a %sp,24
80003362:	59 a2 04 00 	st.w [%sp]4,%d2
80003366:	8f 14 1e 20 	sh %d2,%d4,-31
8000336a:	59 a2 08 00 	st.w [%sp]8,%d2
8000336e:	df 04 0e 80 	jne %d4,0,8000338a <__floatsidf+0x2c>
80003372:	82 22       	mov %d2,2
80003374:	59 a2 04 00 	st.w [%sp]4,%d2
80003378:	d9 a4 04 00 	lea %a4,[%sp]4
8000337c:	6d 00 57 00 	call 8000342a <__pack_d>
80003380:	60 25       	mov.a %a5,%d2
80003382:	60 34       	mov.a %a4,%d3
80003384:	80 52       	mov.d %d2,%a5
80003386:	80 43       	mov.d %d3,%a4
80003388:	00 90       	ret 
8000338a:	ff 04 0a 00 	jge %d4,0,8000339e <__floatsidf+0x40>
8000338e:	7b 00 00 28 	movh %d2,32768
80003392:	a0 05       	mov.a %a5,0
80003394:	91 00 1e 4c 	movh.a %a4,49632
80003398:	5f 24 f6 7f 	jeq %d4,%d2,80003384 <__floatsidf+0x26>
8000339c:	32 54       	rsub %d4
8000339e:	0f 04 b0 61 	clz %d6,%d4
800033a2:	1b d6 01 60 	addi %d6,%d6,29
800033a6:	8f f6 01 21 	and %d2,%d6,31
800033aa:	82 05       	mov %d5,0
800033ac:	8b 06 82 72 	ge %d7,%d6,32
800033b0:	17 45 80 32 	dextr %d3,%d5,%d4,%d2
800033b4:	0f 24 00 20 	sh %d2,%d4,%d2
800033b8:	2b 23 50 37 	seln %d3,%d7,%d3,%d2
800033bc:	8b c6 03 61 	rsub %d6,%d6,60
800033c0:	ab 02 a0 27 	seln %d2,%d7,%d2,0
800033c4:	59 a3 14 00 	st.w [%sp]20,%d3
800033c8:	59 a6 0c 00 	st.w [%sp]12,%d6
800033cc:	59 a2 10 00 	st.w [%sp]16,%d2
800033d0:	1d ff d4 ff 	j 80003378 <__floatsidf+0x1a>

800033d4 <__truncdfsf2>:
800033d4:	20 20       	sub.a %sp,32
800033d6:	d9 a5 0c 00 	lea %a5,[%sp]12
800033da:	d9 a4 04 00 	lea %a4,[%sp]4
800033de:	89 a4 44 09 	st.d [%sp]4,%e4
800033e2:	6d 00 f3 00 	call 800035c8 <__unpack_d>
800033e6:	19 a3 18 00 	ld.w %d3,[%sp]24
800033ea:	19 a2 1c 00 	ld.w %d2,[%sp]28
800033ee:	77 32 00 21 	dextr %d2,%d2,%d3,2
800033f2:	b7 03 02 3f 	insert %d3,%d3,0,30,2
800033f6:	02 27       	mov %d7,%d2
800033f8:	df 03 04 00 	jeq %d3,0,80003400 <__truncdfsf2+0x2c>
800033fc:	8f 12 40 71 	or %d7,%d2,1
80003400:	19 a6 14 00 	ld.w %d6,[%sp]20
80003404:	19 a5 10 00 	ld.w %d5,[%sp]16
80003408:	19 a4 0c 00 	ld.w %d4,[%sp]12
8000340c:	6d 00 03 00 	call 80003412 <__make_fp>
80003410:	00 90       	ret 

80003412 <__make_fp>:
80003412:	20 10       	sub.a %sp,16
80003414:	40 a4       	mov.aa %a4,%sp
80003416:	74 a4       	st.w [%sp],%d4
80003418:	59 a5 04 00 	st.w [%sp]4,%d5
8000341c:	59 a6 08 00 	st.w [%sp]8,%d6
80003420:	59 a7 0c 00 	st.w [%sp]12,%d7
80003424:	6d 00 31 01 	call 80003686 <__pack_f>
80003428:	00 90       	ret 

8000342a <__pack_d>:
8000342a:	54 44       	ld.w %d4,[%a4]
8000342c:	19 43 0c 00 	ld.w %d3,[%a4]12
80003430:	19 42 10 00 	ld.w %d2,[%a4]16
80003434:	19 41 04 00 	ld.w %d1,[%a4]4
80003438:	bf 24 56 80 	jlt.u %d4,2,800034e4 <__pack_d+0xba>
8000343c:	7b 00 ff 57 	movh %d5,32752
80003440:	d2 06       	mov %e6,0
80003442:	df 44 0b 00 	jeq %d4,4,80003458 <__pack_d+0x2e>
80003446:	0f 23 a0 50 	or %d5,%d3,%d2
8000344a:	8b 05 00 02 	eq %d0,%d5,0
8000344e:	8b 24 e0 04 	or.eq %d0,%d4,2
80003452:	82 05       	mov %d5,0
80003454:	df 00 0c 00 	jeq %d0,0,8000346c <__pack_d+0x42>
80003458:	0b 10 00 28 	mov %e2,%d1
8000345c:	a6 75       	or %d5,%d7
8000345e:	8f f2 01 20 	sh %d2,%d2,31
80003462:	0f 25 a0 40 	or %d4,%d5,%d2
80003466:	02 43       	mov %d3,%d4
80003468:	02 62       	mov %d2,%d6
8000346a:	00 90       	ret 
8000346c:	19 44 08 00 	ld.w %d4,[%a4]8
80003470:	3b 20 c0 0f 	mov %d0,-1022
80003474:	3f 04 41 00 	jlt %d4,%d0,800034f6 <__pack_d+0xcc>
80003478:	3b 00 40 00 	mov %d0,1024
8000347c:	7b 00 ff 57 	movh %d5,32752
80003480:	7f 04 ec 7f 	jge %d4,%d0,80003458 <__pack_d+0x2e>
80003484:	8f f3 0f 51 	and %d5,%d3,255
80003488:	8b 05 28 52 	ne %d5,%d5,128
8000348c:	df 05 1b 00 	jeq %d5,0,800034c2 <__pack_d+0x98>
80003490:	8b f3 87 30 	addx %d3,%d3,127
80003494:	8b 02 a0 20 	addc %d2,%d2,0
80003498:	7b 00 00 52 	movh %d5,8192
8000349c:	0b 25 30 61 	lt.u %d6,%d5,%d2
800034a0:	0b 25 70 62 	or.eq %d6,%d5,%d2
800034a4:	df 06 19 80 	jne %d6,0,800034d6 <__pack_d+0xac>
800034a8:	1b f4 3f 40 	addi %d4,%d4,1023
800034ac:	0b 40 00 48 	mov %e4,%d4
800034b0:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800034b4:	06 82       	sh %d2,-8
800034b6:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
800034ba:	8f 44 01 50 	sh %d5,%d4,20
800034be:	1d ff cd ff 	j 80003458 <__pack_d+0x2e>
800034c2:	8f 03 10 51 	and %d5,%d3,256
800034c6:	df 05 e9 7f 	jeq %d5,0,80003498 <__pack_d+0x6e>
800034ca:	8b 03 88 30 	addx %d3,%d3,128
800034ce:	8b 02 a0 20 	addc %d2,%d2,0
800034d2:	1d ff e3 ff 	j 80003498 <__pack_d+0x6e>
800034d6:	77 32 80 3f 	dextr %d3,%d2,%d3,31
800034da:	1b 04 40 40 	addi %d4,%d4,1024
800034de:	06 f2       	sh %d2,-1
800034e0:	1d ff e6 ff 	j 800034ac <__pack_d+0x82>
800034e4:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800034e8:	06 82       	sh %d2,-8
800034ea:	b7 12 8d 79 	insert %d7,%d2,1,19,13
800034ee:	7b 00 ff 57 	movh %d5,32752
800034f2:	1d ff b3 ff 	j 80003458 <__pack_d+0x2e>
800034f6:	0b 40 80 40 	sub %d4,%d0,%d4
800034fa:	8b 94 83 02 	ge %d0,%d4,57
800034fe:	df 00 ad ff 	jne %d0,0,80003458 <__pack_d+0x2e>
80003502:	8b 04 82 52 	ge %d5,%d4,32
80003506:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
8000350a:	ab 02 a0 75 	seln %d7,%d5,%d2,0
8000350e:	8f f4 01 51 	and %d5,%d4,31
80003512:	8b 05 02 61 	rsub %d6,%d5,32
80003516:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
8000351a:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
8000351e:	8b 04 82 82 	ge %d8,%d4,32
80003522:	32 55       	rsub %d5
80003524:	02 60       	mov %d0,%d6
80003526:	8f f4 01 41 	and %d4,%d4,31
8000352a:	82 f6       	mov %d6,-1
8000352c:	0f 57 00 70 	sh %d7,%d7,%d5
80003530:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
80003534:	0f 46 00 40 	sh %d4,%d6,%d4
80003538:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
8000353c:	ab 04 a0 48 	seln %d4,%d8,%d4,0
80003540:	0f 43 e0 30 	andn %d3,%d3,%d4
80003544:	0f 52 e0 20 	andn %d2,%d2,%d5
80003548:	a6 32       	or %d2,%d3
8000354a:	02 03       	mov %d3,%d0
8000354c:	8b 02 00 35 	or.ne %d3,%d2,0
80003550:	8f f3 0f 51 	and %d5,%d3,255
80003554:	82 12       	mov %d2,1
80003556:	8b 05 08 24 	and.eq %d2,%d5,128
8000355a:	02 74       	mov %d4,%d7
8000355c:	df 02 14 80 	jne %d2,0,80003584 <__pack_d+0x15a>
80003560:	8b f3 87 30 	addx %d3,%d3,127
80003564:	8b 07 a0 20 	addc %d2,%d7,0
80003568:	77 32 00 6c 	dextr %d6,%d2,%d3,24
8000356c:	7b 00 00 31 	movh %d3,4096
80003570:	8f 82 1f 70 	sh %d7,%d2,-8
80003574:	0b 32 50 21 	ge.u %d2,%d2,%d3
80003578:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
8000357c:	8f 42 01 50 	sh %d5,%d2,20
80003580:	1d ff 6c ff 	j 80003458 <__pack_d+0x2e>
80003584:	8b 03 88 60 	addx %d6,%d3,128
80003588:	8b 07 a0 20 	addc %d2,%d7,0
8000358c:	7b 00 00 a1 	movh %d10,4096
80003590:	8f 82 1f 70 	sh %d7,%d2,-8
80003594:	77 62 00 6c 	dextr %d6,%d2,%d6,24
80003598:	0b a2 50 21 	ge.u %d2,%d2,%d10
8000359c:	53 12 40 80 	mul.u %e8,%d2,1
800035a0:	8f 03 10 01 	and %d0,%d3,256
800035a4:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800035a8:	8f 48 01 50 	sh %d5,%d8,20
800035ac:	df 00 56 ff 	jne %d0,0,80003458 <__pack_d+0x2e>
800035b0:	8f 84 1f 70 	sh %d7,%d4,-8
800035b4:	0b a4 50 21 	ge.u %d2,%d4,%d10
800035b8:	77 34 00 6c 	dextr %d6,%d4,%d3,24
800035bc:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800035c0:	8f 42 01 50 	sh %d5,%d2,20
800035c4:	1d ff 4a ff 	j 80003458 <__pack_d+0x2e>

800035c8 <__unpack_d>:
800035c8:	09 48 40 09 	ld.d %e8,[%a4]
800035cc:	3b f0 7f 00 	mov %d0,2047
800035d0:	8f 19 1e 70 	sh %d7,%d9,-31
800035d4:	37 09 6b 5a 	extr.u %d5,%d9,20,11
800035d8:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
800035dc:	59 57 04 00 	st.w [%a5]4,%d7
800035e0:	df 05 26 80 	jne %d5,0,8000362c <__unpack_d+0x64>
800035e4:	8b 08 20 22 	ne %d2,%d8,0
800035e8:	8b 06 00 25 	or.ne %d2,%d6,0
800035ec:	df 02 33 00 	jeq %d2,0,80003652 <__unpack_d+0x8a>
800035f0:	82 32       	mov %d2,3
800035f2:	77 86 00 34 	dextr %d3,%d6,%d8,8
800035f6:	8f 88 00 40 	sh %d4,%d8,8
800035fa:	74 52       	st.w [%a5],%d2
800035fc:	3b 10 c0 5f 	mov %d5,-1023
80003600:	7b 00 00 61 	movh %d6,4096
80003604:	77 43 80 30 	dextr %d3,%d3,%d4,1
80003608:	02 57       	mov %d7,%d5
8000360a:	0b 63 00 21 	eq %d2,%d3,%d6
8000360e:	b7 02 01 20 	insert %d2,%d2,0,0,1
80003612:	06 14       	sh %d4,1
80003614:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
80003618:	c2 f5       	add %d5,-1
8000361a:	df 02 f5 ff 	jne %d2,0,80003604 <__unpack_d+0x3c>
8000361e:	59 57 08 00 	st.w [%a5]8,%d7
80003622:	59 54 0c 00 	st.w [%a5]12,%d4
80003626:	59 53 10 00 	st.w [%a5]16,%d3
8000362a:	00 90       	ret 
8000362c:	5f 05 16 00 	jeq %d5,%d0,80003658 <__unpack_d+0x90>
80003630:	82 32       	mov %d2,3
80003632:	1b 15 c0 5f 	addi %d5,%d5,-1023
80003636:	8f 88 00 40 	sh %d4,%d8,8
8000363a:	74 52       	st.w [%a5],%d2
8000363c:	77 86 00 24 	dextr %d2,%d6,%d8,8
80003640:	59 55 08 00 	st.w [%a5]8,%d5
80003644:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80003648:	59 54 0c 00 	st.w [%a5]12,%d4
8000364c:	59 52 10 00 	st.w [%a5]16,%d2
80003650:	00 90       	ret 
80003652:	82 22       	mov %d2,2
80003654:	74 52       	st.w [%a5],%d2
80003656:	00 90       	ret 
80003658:	8b 08 20 52 	ne %d5,%d8,0
8000365c:	8b 06 00 55 	or.ne %d5,%d6,0
80003660:	df 05 05 80 	jne %d5,0,8000366a <__unpack_d+0xa2>
80003664:	82 42       	mov %d2,4
80003666:	74 52       	st.w [%a5],%d2
80003668:	00 90       	ret 
8000366a:	77 89 00 34 	dextr %d3,%d9,%d8,8
8000366e:	37 09 e1 49 	extr.u %d4,%d9,19,1
80003672:	b7 03 85 3d 	insert %d3,%d3,0,27,5
80003676:	8f 88 00 20 	sh %d2,%d8,8
8000367a:	74 54       	st.w [%a5],%d4
8000367c:	59 52 0c 00 	st.w [%a5]12,%d2
80003680:	59 53 10 00 	st.w [%a5]16,%d3
80003684:	00 90       	ret 

80003686 <__pack_f>:
80003686:	54 44       	ld.w %d4,[%a4]
80003688:	19 43 0c 00 	ld.w %d3,[%a4]12
8000368c:	19 47 04 00 	ld.w %d7,[%a4]4
80003690:	bf 24 3f 80 	jlt.u %d4,2,8000370e <__pack_f+0x88>
80003694:	7b 00 f8 57 	movh %d5,32640
80003698:	82 06       	mov %d6,0
8000369a:	df 44 09 00 	jeq %d4,4,800036ac <__pack_f+0x26>
8000369e:	8b 03 00 22 	eq %d2,%d3,0
800036a2:	8b 24 e0 24 	or.eq %d2,%d4,2
800036a6:	82 05       	mov %d5,0
800036a8:	df 02 08 00 	jeq %d2,0,800036b8 <__pack_f+0x32>
800036ac:	8f f7 01 70 	sh %d7,%d7,31
800036b0:	0f 56 a0 20 	or %d2,%d6,%d5
800036b4:	a6 72       	or %d2,%d7
800036b6:	00 90       	ret 
800036b8:	19 42 08 00 	ld.w %d2,[%a4]8
800036bc:	8b 22 98 42 	ge %d4,%d2,-126
800036c0:	df 04 33 00 	jeq %d4,0,80003726 <__pack_f+0xa0>
800036c4:	8b 02 88 42 	ge %d4,%d2,128
800036c8:	7b 00 f8 57 	movh %d5,32640
800036cc:	df 04 f0 ff 	jne %d4,0,800036ac <__pack_f+0x26>
800036d0:	8f f3 07 51 	and %d5,%d3,127
800036d4:	8f 03 08 41 	and %d4,%d3,128
800036d8:	8b 05 24 52 	ne %d5,%d5,64
800036dc:	ab 03 04 44 	cadd %d4,%d4,%d3,64
800036e0:	1b f3 03 30 	addi %d3,%d3,63
800036e4:	2b 43 40 35 	sel %d3,%d5,%d3,%d4
800036e8:	1b f2 07 50 	addi %d5,%d2,127
800036ec:	bf 03 0c 00 	jlt %d3,0,80003704 <__pack_f+0x7e>
800036f0:	37 03 f7 63 	extr.u %d6,%d3,7,23
800036f4:	8f 75 01 50 	sh %d5,%d5,23
800036f8:	8f f7 01 70 	sh %d7,%d7,31
800036fc:	0f 56 a0 20 	or %d2,%d6,%d5
80003700:	a6 72       	or %d2,%d7
80003702:	00 90       	ret 
80003704:	06 f3       	sh %d3,-1
80003706:	1b 02 08 50 	addi %d5,%d2,128
8000370a:	1d ff f3 ff 	j 800036f0 <__pack_f+0x6a>
8000370e:	37 03 f6 33 	extr.u %d3,%d3,7,22
80003712:	7b 00 f8 57 	movh %d5,32640
80003716:	b7 f3 01 6b 	insert %d6,%d3,15,22,1
8000371a:	8f f7 01 70 	sh %d7,%d7,31
8000371e:	0f 56 a0 20 	or %d2,%d6,%d5
80003722:	a6 72       	or %d2,%d7
80003724:	00 90       	ret 
80003726:	8b 22 18 21 	rsub %d2,%d2,-126
8000372a:	8b a2 81 42 	ge %d4,%d2,26
8000372e:	df 04 bf ff 	jne %d4,0,800036ac <__pack_f+0x26>
80003732:	82 f5       	mov %d5,-1
80003734:	8b 02 00 41 	rsub %d4,%d2,0
80003738:	0f 25 00 20 	sh %d2,%d5,%d2
8000373c:	0f 43 00 40 	sh %d4,%d3,%d4
80003740:	0f 23 e0 30 	andn %d3,%d3,%d2
80003744:	8b 03 00 45 	or.ne %d4,%d3,0
80003748:	8f f4 07 31 	and %d3,%d4,127
8000374c:	8b 03 04 32 	eq %d3,%d3,64
80003750:	df 03 0e 80 	jne %d3,0,8000376c <__pack_f+0xe6>
80003754:	1b f4 03 20 	addi %d2,%d4,63
80003758:	7b 00 00 34 	movh %d3,16384
8000375c:	37 02 f7 63 	extr.u %d6,%d2,7,23
80003760:	0b 32 50 21 	ge.u %d2,%d2,%d3
80003764:	8f 72 01 50 	sh %d5,%d2,23
80003768:	1d ff a2 ff 	j 800036ac <__pack_f+0x26>
8000376c:	1b 04 04 30 	addi %d3,%d4,64
80003770:	7b 00 00 24 	movh %d2,16384
80003774:	37 03 f7 63 	extr.u %d6,%d3,7,23
80003778:	0b 23 50 31 	ge.u %d3,%d3,%d2
8000377c:	8f 73 01 50 	sh %d5,%d3,23
80003780:	6f 74 96 ff 	jnz.t %d4,7,800036ac <__pack_f+0x26>
80003784:	0b 24 50 21 	ge.u %d2,%d4,%d2
80003788:	37 04 f7 63 	extr.u %d6,%d4,7,23
8000378c:	8f 72 01 50 	sh %d5,%d2,23
80003790:	1d ff 8e ff 	j 800036ac <__pack_f+0x26>

80003794 <__do_global_ctors_aux>:
80003794:	91 00 00 28 	movh.a %a2,32768
80003798:	d9 22 58 f3 	lea %a2,[%a2]14296 <800037d8 <__CTOR_END__>>
8000379c:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
800037a0:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffe43fc>>
800037a4:	df f2 0a 00 	jeq %d2,-1,800037b8 <__do_global_ctors_aux+0x24>
800037a8:	40 3c       	mov.aa %a12,%a3
800037aa:	60 22       	mov.a %a2,%d2
800037ac:	b0 cc       	add.a %a12,-4
800037ae:	2d 02 00 00 	calli %a2
800037b2:	54 c2       	ld.w %d2,[%a12]
800037b4:	df f2 fb ff 	jne %d2,-1,800037aa <__do_global_ctors_aux+0x16>
800037b8:	00 90       	ret 
	...

Disassembly of section .init:

800037bc <_init>:
800037bc:	6d ff ea e6 	call 80000590 <frame_dummy>
800037c0:	6d ff ea ff 	call 80003794 <__do_global_ctors_aux>
800037c4:	00 90       	ret 
	...

Disassembly of section .fini:

800037c8 <_fini>:
800037c8:	6d ff b2 e6 	call 8000052c <__do_global_dtors_aux>
800037cc:	00 90       	ret 
	...

Disassembly of section .traptab_tc2:

801f6100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6100:	0d 00 00 02 	svlcx 
801f6104:	02 f4       	mov %d4,%d15
801f6106:	91 00 00 28 	movh.a %a2,32768
801f610a:	d9 22 d2 b1 	lea %a2,[%a2]7890 <80001ed2 <IfxCpu_Trap_memoryManagementError>>
801f610e:	dc 02       	ji %a2
801f6110:	00 80       	rfe 
	...
801f611e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6120:	0d 00 00 02 	svlcx 
801f6124:	02 f4       	mov %d4,%d15
801f6126:	91 00 00 28 	movh.a %a2,32768
801f612a:	d9 22 c0 c1 	lea %a2,[%a2]7936 <80001f00 <IfxCpu_Trap_internalProtectionError>>
801f612e:	dc 02       	ji %a2
801f6130:	00 80       	rfe 
	...
801f613e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6140:	0d 00 00 02 	svlcx 
801f6144:	02 f4       	mov %d4,%d15
801f6146:	91 00 00 28 	movh.a %a2,32768
801f614a:	d9 22 ee c1 	lea %a2,[%a2]7982 <80001f2e <IfxCpu_Trap_instructionError>>
801f614e:	dc 02       	ji %a2
801f6150:	00 80       	rfe 
	...
801f615e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6160:	02 f4       	mov %d4,%d15
801f6162:	91 00 00 28 	movh.a %a2,32768
801f6166:	d9 22 dc d1 	lea %a2,[%a2]8028 <80001f5c <IfxCpu_Trap_contextManagementError>>
801f616a:	dc 02       	ji %a2
801f616c:	00 80       	rfe 
	...
801f617e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6180:	0d 00 00 02 	svlcx 
801f6184:	02 f4       	mov %d4,%d15
801f6186:	91 00 00 28 	movh.a %a2,32768
801f618a:	d9 22 ca e1 	lea %a2,[%a2]8074 <80001f8a <IfxCpu_Trap_busError>>
801f618e:	dc 02       	ji %a2
801f6190:	00 80       	rfe 
	...
801f619e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f61a0:	0d 00 00 02 	svlcx 
801f61a4:	02 f4       	mov %d4,%d15
801f61a6:	91 00 00 28 	movh.a %a2,32768
801f61aa:	d9 22 f8 e1 	lea %a2,[%a2]8120 <80001fb8 <IfxCpu_Trap_assertion>>
801f61ae:	dc 02       	ji %a2
801f61b0:	00 80       	rfe 
	...
801f61be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
801f61c0:	0d 00 00 02 	svlcx 
801f61c4:	02 f4       	mov %d4,%d15
801f61c6:	91 00 00 28 	movh.a %a2,32768
801f61ca:	d9 22 04 12 	lea %a2,[%a2]8260 <80002044 <IfxCpu_Trap_systemCall_Cpu2>>
801f61ce:	dc 02       	ji %a2
801f61d0:	00 80       	rfe 
	...
801f61de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f61e0:	0d 00 00 02 	svlcx 
801f61e4:	02 f4       	mov %d4,%d15
801f61e6:	91 00 00 28 	movh.a %a2,32768
801f61ea:	d9 22 30 12 	lea %a2,[%a2]8304 <80002070 <IfxCpu_Trap_nonMaskableInterrupt>>
801f61ee:	dc 02       	ji %a2
801f61f0:	00 80       	rfe 
}
801f61f2:	00 90       	ret 

801f61f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc1:

801f6200 <IfxCpu_Trap_vectorTable1>:
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6200:	0d 00 00 02 	svlcx 
801f6204:	02 f4       	mov %d4,%d15
801f6206:	91 00 00 28 	movh.a %a2,32768
801f620a:	d9 22 d2 b1 	lea %a2,[%a2]7890 <80001ed2 <IfxCpu_Trap_memoryManagementError>>
801f620e:	dc 02       	ji %a2
801f6210:	00 80       	rfe 
	...
801f621e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6220:	0d 00 00 02 	svlcx 
801f6224:	02 f4       	mov %d4,%d15
801f6226:	91 00 00 28 	movh.a %a2,32768
801f622a:	d9 22 c0 c1 	lea %a2,[%a2]7936 <80001f00 <IfxCpu_Trap_internalProtectionError>>
801f622e:	dc 02       	ji %a2
801f6230:	00 80       	rfe 
	...
801f623e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6240:	0d 00 00 02 	svlcx 
801f6244:	02 f4       	mov %d4,%d15
801f6246:	91 00 00 28 	movh.a %a2,32768
801f624a:	d9 22 ee c1 	lea %a2,[%a2]7982 <80001f2e <IfxCpu_Trap_instructionError>>
801f624e:	dc 02       	ji %a2
801f6250:	00 80       	rfe 
	...
801f625e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6260:	02 f4       	mov %d4,%d15
801f6262:	91 00 00 28 	movh.a %a2,32768
801f6266:	d9 22 dc d1 	lea %a2,[%a2]8028 <80001f5c <IfxCpu_Trap_contextManagementError>>
801f626a:	dc 02       	ji %a2
801f626c:	00 80       	rfe 
	...
801f627e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6280:	0d 00 00 02 	svlcx 
801f6284:	02 f4       	mov %d4,%d15
801f6286:	91 00 00 28 	movh.a %a2,32768
801f628a:	d9 22 ca e1 	lea %a2,[%a2]8074 <80001f8a <IfxCpu_Trap_busError>>
801f628e:	dc 02       	ji %a2
801f6290:	00 80       	rfe 
	...
801f629e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f62a0:	0d 00 00 02 	svlcx 
801f62a4:	02 f4       	mov %d4,%d15
801f62a6:	91 00 00 28 	movh.a %a2,32768
801f62aa:	d9 22 f8 e1 	lea %a2,[%a2]8120 <80001fb8 <IfxCpu_Trap_assertion>>
801f62ae:	dc 02       	ji %a2
801f62b0:	00 80       	rfe 
	...
801f62be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
801f62c0:	0d 00 00 02 	svlcx 
801f62c4:	02 f4       	mov %d4,%d15
801f62c6:	91 00 00 28 	movh.a %a2,32768
801f62ca:	d9 22 18 02 	lea %a2,[%a2]8216 <80002018 <IfxCpu_Trap_systemCall_Cpu1>>
801f62ce:	dc 02       	ji %a2
801f62d0:	00 80       	rfe 
	...
801f62de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f62e0:	0d 00 00 02 	svlcx 
801f62e4:	02 f4       	mov %d4,%d15
801f62e6:	91 00 00 28 	movh.a %a2,32768
801f62ea:	d9 22 30 12 	lea %a2,[%a2]8304 <80002070 <IfxCpu_Trap_nonMaskableInterrupt>>
801f62ee:	dc 02       	ji %a2
801f62f0:	00 80       	rfe 
}
801f62f2:	00 90       	ret 

801f62f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .inttab_tc0_064:

801f4c80 <__intvec_tc0_100>:
801f4c80:	0d 00 00 02 	svlcx 
801f4c84:	91 00 00 e8 	movh.a %a14,32768
801f4c88:	d9 ee 6c a0 	lea %a14,[%a14]1708 <800006ac <ISR_STM>>
801f4c8c:	dc 0e       	ji %a14
